{
  "version": 3,
  "sources": ["browser-external:assert", "../../@babel/types/src/utils/shallowEqual.ts", "../../@babel/types/src/validators/generated/index.ts", "../../@babel/types/src/validators/matchesPattern.ts", "../../@babel/types/src/validators/buildMatchMemberExpression.ts", "../../@babel/types/src/validators/react/isReactComponent.ts", "../../@babel/types/src/validators/react/isCompatTag.ts", "../../to-fast-properties/index.js", "../../@babel/types/src/validators/isType.ts", "../../@babel/types/src/validators/isPlaceholderType.ts", "../../@babel/types/src/validators/is.ts", "../../@babel/helper-validator-identifier/src/identifier.ts", "../../@babel/helper-validator-identifier/src/keyword.ts", "../../@babel/helper-validator-identifier/src/index.ts", "../../@babel/types/src/validators/isValidIdentifier.ts", "../../@babel/helper-string-parser/src/index.ts", "../../@babel/types/src/constants/index.ts", "../../@babel/types/src/definitions/utils.ts", "../../@babel/types/src/definitions/core.ts", "../../@babel/types/src/definitions/flow.ts", "../../@babel/types/src/definitions/jsx.ts", "../../@babel/types/src/definitions/placeholders.ts", "../../@babel/types/src/definitions/misc.ts", "../../@babel/types/src/definitions/experimental.ts", "../../@babel/types/src/definitions/typescript.ts", "../../@babel/types/src/definitions/index.ts", "../../@babel/types/src/validators/validate.ts", "../../@babel/types/src/builders/validateNode.ts", "../../@babel/types/src/builders/generated/index.ts", "../../@babel/types/src/utils/react/cleanJSXElementLiteralChild.ts", "../../@babel/types/src/builders/react/buildChildren.ts", "../../@babel/types/src/validators/isNode.ts", "../../@babel/types/src/asserts/assertNode.ts", "../../@babel/types/src/asserts/generated/index.ts", "../../@babel/types/src/builders/flow/createTypeAnnotationBasedOnTypeof.ts", "../../@babel/types/src/modifications/flow/removeTypeDuplicates.ts", "../../@babel/types/src/builders/flow/createFlowUnionType.ts", "../../@babel/types/src/modifications/typescript/removeTypeDuplicates.ts", "../../@babel/types/src/builders/typescript/createTSUnionType.ts", "../../@babel/types/src/builders/generated/uppercase.js", "../../@babel/types/src/clone/cloneNode.ts", "../../@babel/types/src/clone/clone.ts", "../../@babel/types/src/clone/cloneDeep.ts", "../../@babel/types/src/clone/cloneDeepWithoutLoc.ts", "../../@babel/types/src/clone/cloneWithoutLoc.ts", "../../@babel/types/src/comments/addComments.ts", "../../@babel/types/src/comments/addComment.ts", "../../@babel/types/src/utils/inherit.ts", "../../@babel/types/src/comments/inheritInnerComments.ts", "../../@babel/types/src/comments/inheritLeadingComments.ts", "../../@babel/types/src/comments/inheritTrailingComments.ts", "../../@babel/types/src/comments/inheritsComments.ts", "../../@babel/types/src/comments/removeComments.ts", "../../@babel/types/src/constants/generated/index.ts", "../../@babel/types/src/converters/toBlock.ts", "../../@babel/types/src/converters/ensureBlock.ts", "../../@babel/types/src/converters/toIdentifier.ts", "../../@babel/types/src/converters/toBindingIdentifierName.ts", "../../@babel/types/src/converters/toComputedKey.ts", "../../@babel/types/src/converters/toExpression.ts", "../../@babel/types/src/traverse/traverseFast.ts", "../../@babel/types/src/modifications/removeProperties.ts", "../../@babel/types/src/modifications/removePropertiesDeep.ts", "../../@babel/types/src/converters/toKeyAlias.ts", "../../@babel/types/src/retrievers/getBindingIdentifiers.ts", "../../@babel/types/src/converters/gatherSequenceExpressions.ts", "../../@babel/types/src/converters/toSequenceExpression.ts", "../../@babel/types/src/converters/toStatement.ts", "../../@babel/types/src/converters/valueToNode.ts", "../../@babel/types/src/modifications/appendToMemberExpression.ts", "../../@babel/types/src/modifications/inherits.ts", "../../@babel/types/src/modifications/prependToMemberExpression.ts", "../../@babel/types/src/retrievers/getOuterBindingIdentifiers.ts", "../../@babel/types/src/traverse/traverse.ts", "../../@babel/types/src/validators/isBinding.ts", "../../@babel/types/src/validators/isLet.ts", "../../@babel/types/src/validators/isBlockScoped.ts", "../../@babel/types/src/validators/isImmutable.ts", "../../@babel/types/src/validators/isNodesEquivalent.ts", "../../@babel/types/src/validators/isReferenced.ts", "../../@babel/types/src/validators/isScope.ts", "../../@babel/types/src/validators/isSpecifierDefault.ts", "../../@babel/types/src/validators/isValidES3Identifier.ts", "../../@babel/types/src/validators/isVar.ts", "../../@babel/types/lib/ast-types/generated/index.js", "../../@babel/types/src/index.ts", "../../@babel/helper-module-imports/lib/import-builder.js", "../../@babel/helper-module-imports/lib/is-module.js", "../../@babel/helper-module-imports/lib/import-injector.js", "../../@babel/helper-module-imports/lib/index.js", "../../@babel/traverse/src/path/lib/virtual-types.ts", "../../@babel/traverse/src/visitors.ts", "../../@babel/traverse/src/cache.ts", "../../ms/index.js", "../../debug/src/common.js", "../../debug/src/browser.js", "../../@babel/helper-split-export-declaration/lib/index.js", "../../@babel/helper-environment-visitor/lib/index.js", "../../@babel/traverse/src/scope/lib/renamer.ts", "../../@babel/traverse/src/scope/binding.ts", "../../globals/globals.json", "../../globals/index.js", "../../@babel/traverse/src/scope/index.ts", "../../@jridgewell/set-array/src/set-array.ts", "../../@jridgewell/sourcemap-codec/src/sourcemap-codec.ts", "../../@jridgewell/resolve-uri/src/resolve-uri.ts", "../../@jridgewell/trace-mapping/src/resolve.ts", "../../@jridgewell/trace-mapping/src/strip-filename.ts", "../../@jridgewell/trace-mapping/src/sourcemap-segment.ts", "../../@jridgewell/trace-mapping/src/sort.ts", "../../@jridgewell/trace-mapping/src/binary-search.ts", "../../@jridgewell/trace-mapping/src/by-source.ts", "../../@jridgewell/trace-mapping/src/any-map.ts", "../../@jridgewell/trace-mapping/src/trace-mapping.ts", "../../@babel/generator/node_modules/@jridgewell/gen-mapping/src/sourcemap-segment.ts", "../../@babel/generator/node_modules/@jridgewell/gen-mapping/src/gen-mapping.ts", "../../@babel/generator/src/source-map.ts", "../../@babel/generator/src/buffer.ts", "../../@babel/generator/src/node/whitespace.ts", "../../@babel/generator/src/node/parentheses.ts", "../../@babel/generator/src/node/index.ts", "../../@babel/generator/src/generators/template-literals.ts", "../../@babel/generator/src/generators/expressions.ts", "../../@babel/generator/src/generators/statements.ts", "../../@babel/generator/src/generators/classes.ts", "../../@babel/generator/src/generators/methods.ts", "../../@babel/generator/src/generators/modules.ts", "../../jsesc/jsesc.js", "../../@babel/generator/src/generators/types.ts", "../../@babel/generator/src/generators/flow.ts", "../../@babel/generator/src/generators/base.ts", "../../@babel/generator/src/generators/jsx.ts", "../../@babel/generator/src/generators/typescript.ts", "../../@babel/generator/src/generators/index.ts", "../../@babel/generator/src/printer.ts", "../../@babel/generator/src/index.ts", "../../@babel/traverse/src/path/ancestry.ts", "../../@babel/traverse/src/path/inference/util.ts", "../../@babel/traverse/src/path/inference/inferer-reference.ts", "../../@babel/traverse/src/path/inference/inferers.ts", "../../@babel/traverse/src/path/inference/index.ts", "../../js-tokens/index.js", "../../escape-string-regexp/index.js", "../../color-name/index.js", "../../color-convert/conversions.js", "../../color-convert/route.js", "../../color-convert/index.js", "../../ansi-styles/index.js", "../../supports-color/browser.js", "../../chalk/templates.js", "../../chalk/index.js", "../../@babel/highlight/lib/index.js", "../../@babel/code-frame/lib/index.js", "../../@babel/parser/src/util/location.ts", "../../@babel/parser/src/parse-error/credentials.ts", "../../@babel/parser/src/parse-error/module-errors.ts", "../../@babel/parser/src/parse-error/to-node-description.ts", "../../@babel/parser/src/parse-error/standard-errors.ts", "../../@babel/parser/src/parse-error/strict-mode-errors.ts", "../../@babel/parser/src/parse-error/pipeline-operator-errors.ts", "../../@babel/parser/src/parse-error.ts", "../../@babel/parser/src/plugins/estree.ts", "../../@babel/parser/src/tokenizer/context.ts", "../../@babel/parser/src/tokenizer/types.ts", "../../@babel/babel-helper-validator-identifier/src/identifier.ts", "../../@babel/babel-helper-validator-identifier/src/keyword.ts", "../../@babel/parser/src/util/identifier.ts", "../../@babel/parser/src/util/scopeflags.ts", "../../@babel/parser/src/util/scope.ts", "../../@babel/parser/src/plugins/flow/scope.ts", "../../@babel/parser/src/parser/base.ts", "../../@babel/parser/src/parser/comments.ts", "../../@babel/parser/src/util/whitespace.ts", "../../@babel/parser/src/tokenizer/state.ts", "../../@babel/babel-helper-string-parser/src/index.ts", "../../@babel/parser/src/tokenizer/index.ts", "../../@babel/parser/src/util/class-scope.ts", "../../@babel/parser/src/util/expression-scope.ts", "../../@babel/parser/src/util/production-parameter.ts", "../../@babel/parser/src/parser/util.ts", "../../@babel/parser/src/parser/node.ts", "../../@babel/parser/src/plugins/flow/index.ts", "../../@babel/parser/src/plugins/jsx/xhtml.ts", "../../@babel/parser/src/plugins/jsx/index.ts", "../../@babel/parser/src/plugins/typescript/scope.ts", "../../@babel/parser/src/plugins/typescript/index.ts", "../../@babel/parser/src/plugins/placeholders.ts", "../../@babel/parser/src/plugins/v8intrinsic.ts", "../../@babel/parser/src/plugin-utils.ts", "../../@babel/parser/src/options.ts", "../../@babel/parser/src/parser/lval.ts", "../../@babel/parser/src/parser/expression.ts", "../../@babel/parser/src/parser/statement.ts", "../../@babel/parser/src/parser/index.ts", "../../@babel/parser/src/index.ts", "../../@babel/helper-hoist-variables/lib/index.js", "../../@babel/traverse/src/path/replacement.ts", "../../@babel/traverse/src/path/evaluation.ts", "../../@babel/template/src/formatters.ts", "../../@babel/template/src/options.ts", "../../@babel/template/src/parse.ts", "../../@babel/template/src/populate.ts", "../../@babel/template/src/string.ts", "../../@babel/template/src/literal.ts", "../../@babel/template/src/builder.ts", "../../@babel/template/src/index.ts", "../../@babel/helper-function-name/src/index.ts", "../../@babel/traverse/src/path/conversion.ts", "../../@babel/traverse/src/path/introspection.ts", "../../@babel/traverse/src/path/context.ts", "../../@babel/traverse/src/path/lib/removal-hooks.ts", "../../@babel/traverse/src/path/removal.ts", "../../@babel/traverse/src/path/lib/hoister.ts", "../../@babel/traverse/src/path/modification.ts", "../../@babel/traverse/src/path/family.ts", "../../@babel/traverse/src/path/comments.ts", "../../@babel/traverse/src/path/lib/virtual-types-validator.ts", "../../@babel/traverse/src/path/index.ts", "../../@babel/traverse/src/context.ts", "../../@babel/traverse/src/traverse-node.ts", "../../@babel/traverse/src/hub.ts", "../../@babel/traverse/src/index.ts", "browser-external:path", "browser-external:fs", "browser-external:os", "../../resolve/lib/homedir.js", "../../resolve/lib/caller.js", "../../path-parse/index.js", "../../resolve/lib/node-modules-paths.js", "../../resolve/lib/normalize-options.js", "../../function-bind/implementation.js", "../../function-bind/index.js", "../../has/src/index.js", "../../is-core-module/core.json", "../../is-core-module/index.js", "../../resolve/lib/async.js", "../../resolve/lib/core.json", "../../resolve/lib/core.js", "../../resolve/lib/is-core.js", "../../resolve/lib/sync.js", "../../resolve/index.js", "browser-external:module", "../../resolve-from/index.js", "../../callsites/index.js", "../../parent-module/index.js", "../../import-fresh/index.js", "browser-external:util", "../../is-arrayish/index.js", "../../error-ex/index.js", "../../json-parse-even-better-errors/index.js", "../../lines-and-columns/build/index.js", "../../parse-json/index.js", "../../yaml/browser/dist/PlainValue-b8036b75.js", "../../yaml/browser/dist/parse-cst.js", "../../yaml/browser/dist/resolveSeq-492ab440.js", "../../yaml/browser/dist/warnings-df54cb69.js", "../../yaml/browser/dist/Schema-e94716c8.js", "../../yaml/browser/dist/index.js", "../../yaml/browser/index.js", "../../cosmiconfig/src/loaders.ts", "../../cosmiconfig/src/getPropertyByPath.ts", "../../cosmiconfig/src/ExplorerBase.ts", "../../cosmiconfig/src/readFile.ts", "../../cosmiconfig/src/cacheWrapper.ts", "../../path-type/index.js", "../../cosmiconfig/src/getDirectory.ts", "../../cosmiconfig/src/Explorer.ts", "../../cosmiconfig/src/ExplorerSync.ts", "../../cosmiconfig/dist/types.js", "../../cosmiconfig/src/index.ts", "../../babel-plugin-macros/dist/index.js", "../../babel-plugin-syntax-jsx/lib/index.js", "../../@babel/helper-annotate-as-pure/lib/index.js", "../../picomatch/lib/constants.js", "../../picomatch/lib/utils.js", "../../picomatch/lib/scan.js", "../../picomatch/lib/parse.js", "../../picomatch/lib/picomatch.js", "../../picomatch/index.js", "../../babel-plugin-styled-components/lib/utils/options.js", "../../babel-plugin-styled-components/lib/utils/detectors.js", "../../babel-plugin-styled-components/lib/visitors/pure.js", "../../lodash/_freeGlobal.js", "../../lodash/_root.js", "../../lodash/_Symbol.js", "../../lodash/_getRawTag.js", "../../lodash/_objectToString.js", "../../lodash/_baseGetTag.js", "../../lodash/isObject.js", "../../lodash/isFunction.js", "../../lodash/_coreJsData.js", "../../lodash/_isMasked.js", "../../lodash/_toSource.js", "../../lodash/_baseIsNative.js", "../../lodash/_getValue.js", "../../lodash/_getNative.js", "../../lodash/_nativeCreate.js", "../../lodash/_hashClear.js", "../../lodash/_hashDelete.js", "../../lodash/_hashGet.js", "../../lodash/_hashHas.js", "../../lodash/_hashSet.js", "../../lodash/_Hash.js", "../../lodash/_listCacheClear.js", "../../lodash/eq.js", "../../lodash/_assocIndexOf.js", "../../lodash/_listCacheDelete.js", "../../lodash/_listCacheGet.js", "../../lodash/_listCacheHas.js", "../../lodash/_listCacheSet.js", "../../lodash/_ListCache.js", "../../lodash/_Map.js", "../../lodash/_mapCacheClear.js", "../../lodash/_isKeyable.js", "../../lodash/_getMapData.js", "../../lodash/_mapCacheDelete.js", "../../lodash/_mapCacheGet.js", "../../lodash/_mapCacheHas.js", "../../lodash/_mapCacheSet.js", "../../lodash/_MapCache.js", "../../lodash/_setCacheAdd.js", "../../lodash/_setCacheHas.js", "../../lodash/_SetCache.js", "../../lodash/_baseFindIndex.js", "../../lodash/_baseIsNaN.js", "../../lodash/_strictIndexOf.js", "../../lodash/_baseIndexOf.js", "../../lodash/_arrayIncludes.js", "../../lodash/_arrayIncludesWith.js", "../../lodash/_arrayMap.js", "../../lodash/_baseUnary.js", "../../lodash/_cacheHas.js", "../../lodash/_baseDifference.js", "../../lodash/_arrayPush.js", "../../lodash/isObjectLike.js", "../../lodash/_baseIsArguments.js", "../../lodash/isArguments.js", "../../lodash/isArray.js", "../../lodash/_isFlattenable.js", "../../lodash/_baseFlatten.js", "../../lodash/identity.js", "../../lodash/_apply.js", "../../lodash/_overRest.js", "../../lodash/constant.js", "../../lodash/_defineProperty.js", "../../lodash/_baseSetToString.js", "../../lodash/_shortOut.js", "../../lodash/_setToString.js", "../../lodash/_baseRest.js", "../../lodash/isLength.js", "../../lodash/isArrayLike.js", "../../lodash/isArrayLikeObject.js", "../../lodash/difference.js", "../../babel-plugin-styled-components/lib/css/placeholderUtils.js", "../../babel-plugin-styled-components/lib/minify/index.js", "../../babel-plugin-styled-components/lib/visitors/minify.js", "../../babel-plugin-styled-components/lib/utils/getName.js", "../../babel-plugin-styled-components/lib/utils/prefixDigit.js", "../../babel-plugin-styled-components/lib/utils/hash.js", "../../babel-plugin-styled-components/lib/visitors/displayNameAndId.js", "../../babel-plugin-styled-components/lib/visitors/templateLiterals/transpile.js", "../../babel-plugin-styled-components/lib/visitors/templateLiterals/index.js", "../../babel-plugin-styled-components/lib/visitors/assignStyledRequired.js", "../../babel-plugin-styled-components/lib/visitors/transpileCssProp.js", "../../babel-plugin-styled-components/lib/index.js", "../../styled-components/src/macro/index.js"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"assert\" has been externalized for browser compatibility. Cannot access \"assert.${key}\" in client code.`)\n    }\n  }\n}))", "export default function shallowEqual<T extends object>(\n  actual: object,\n  expected: T,\n): actual is T {\n  const keys = Object.keys(expected) as (keyof T)[];\n\n  for (const key of keys) {\n    if (\n      // @ts-expect-error maybe we should check whether key exists first\n      actual[key] !== expected[key]\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport shallowEqual from \"../../utils/shallowEqual\";\nimport type * as t from \"../..\";\n\nexport function isArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ArrayExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ArrayExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.AssignmentExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"AssignmentExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BinaryExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BinaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.InterpreterDirective {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"InterpreterDirective\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Directive {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Directive\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DirectiveLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DirectiveLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BlockStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BlockStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BreakStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BreakStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.CallExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"CallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.CatchClause {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"CatchClause\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ConditionalExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ConditionalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ContinueStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ContinueStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DebuggerStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DebuggerStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DoWhileStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DoWhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EmptyStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EmptyStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExpressionStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExpressionStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.File {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"File\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ForInStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ForInStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ForStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ForStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FunctionDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"FunctionDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FunctionExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"FunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Identifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Identifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.IfStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"IfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.LabeledStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"LabeledStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.StringLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"StringLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.NumericLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NumericLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.NullLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NullLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BooleanLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BooleanLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.RegExpLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"RegExpLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.LogicalExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"LogicalExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.MemberExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"MemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.NewExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NewExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Program {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Program\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectMethod {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.RestElement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"RestElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ReturnStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ReturnStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.SequenceExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"SequenceExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ParenthesizedExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ParenthesizedExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.SwitchCase {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"SwitchCase\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.SwitchStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"SwitchStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ThisExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ThisExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ThrowStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ThrowStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TryStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TryStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.UnaryExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"UnaryExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.UpdateExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"UpdateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.VariableDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"VariableDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.VariableDeclarator {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"VariableDeclarator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.WhileStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"WhileStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.WithStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"WithStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.AssignmentPattern {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"AssignmentPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ArrayPattern {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ArrayPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ArrowFunctionExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ArrowFunctionExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassBody {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExportAllDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExportDefaultDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExportDefaultDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExportNamedDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExportNamedDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExportSpecifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ForOfStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ForOfStatement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ImportDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ImportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ImportDefaultSpecifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ImportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ImportNamespaceSpecifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ImportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ImportSpecifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ImportSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.MetaProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"MetaProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassMethod {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectPattern {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectPattern\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.SpreadElement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"SpreadElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Super {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Super\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TaggedTemplateExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TaggedTemplateExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TemplateElement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TemplateElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TemplateLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TemplateLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.YieldExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"YieldExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.AwaitExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"AwaitExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Import {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Import\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BigIntLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BigIntLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExportNamespaceSpecifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExportNamespaceSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.OptionalMemberExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"OptionalMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.OptionalCallExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"OptionalCallExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassAccessorProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassAccessorProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassPrivateProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassPrivateProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassPrivateMethod {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassPrivateMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.PrivateName {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"PrivateName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.StaticBlock {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"StaticBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.AnyTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"AnyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ArrayTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ArrayTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BooleanTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BooleanTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BooleanLiteralTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BooleanLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.NullLiteralTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NullLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ClassImplements {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ClassImplements\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareClass {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareClass\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareFunction {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareInterface {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareInterface\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareModule {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareModule\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareModuleExports {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareModuleExports\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareTypeAlias {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareTypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareOpaqueType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareOpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareVariable {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareVariable\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareExportDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclareExportAllDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclareExportAllDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DeclaredPredicate {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DeclaredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExistsTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExistsTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FunctionTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"FunctionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FunctionTypeParam {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"FunctionTypeParam\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.GenericTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"GenericTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.InferredPredicate {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"InferredPredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.InterfaceExtends {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"InterfaceExtends\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.InterfaceDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"InterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.InterfaceTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"InterfaceTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.IntersectionTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"IntersectionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.MixedTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"MixedTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EmptyTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EmptyTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.NullableTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NullableTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.NumberLiteralTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NumberLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.NumberTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NumberTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectTypeInternalSlot {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectTypeInternalSlot\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectTypeCallProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectTypeCallProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectTypeIndexer {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectTypeIndexer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectTypeProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectTypeProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectTypeSpreadProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ObjectTypeSpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.OpaqueType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"OpaqueType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.QualifiedTypeIdentifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"QualifiedTypeIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.StringLiteralTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"StringLiteralTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.StringTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"StringTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.SymbolTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"SymbolTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ThisTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ThisTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TupleTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TupleTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeofTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TypeofTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeAlias {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TypeAlias\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeCastExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TypeCastExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeParameter {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeParameterDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeParameterInstantiation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.UnionTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"UnionTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Variance {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Variance\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.VoidTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"VoidTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumBooleanBody {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumBooleanBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumNumberBody {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumNumberBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumStringBody {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumStringBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumSymbolBody {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumSymbolBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumBooleanMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumBooleanMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumNumberMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumNumberMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumStringMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumStringMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumDefaultedMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"EnumDefaultedMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.IndexedAccessType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"IndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.OptionalIndexedAccessType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"OptionalIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXAttribute {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXClosingElement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXClosingElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXElement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXEmptyExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXEmptyExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXExpressionContainer {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXExpressionContainer\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXSpreadChild {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXSpreadChild\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXIdentifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXMemberExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXMemberExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXNamespacedName {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXNamespacedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXOpeningElement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXOpeningElement\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXSpreadAttribute {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXSpreadAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXText {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXText\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXFragment {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXOpeningFragment {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXOpeningFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSXClosingFragment {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"JSXClosingFragment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Noop {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Noop\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Placeholder {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Placeholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.V8IntrinsicIdentifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"V8IntrinsicIdentifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ArgumentPlaceholder {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ArgumentPlaceholder\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BindExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"BindExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ImportAttribute {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ImportAttribute\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Decorator {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"Decorator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DoExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DoExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExportDefaultSpecifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ExportDefaultSpecifier\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.RecordExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"RecordExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TupleExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TupleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.DecimalLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"DecimalLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ModuleExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"ModuleExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TopicReference {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.PipelineTopicExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"PipelineTopicExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.PipelineBareFunction {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"PipelineBareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.PipelinePrimaryTopicReference {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"PipelinePrimaryTopicReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSParameterProperty {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSParameterProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSDeclareFunction {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSDeclareFunction\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSDeclareMethod {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSDeclareMethod\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSQualifiedName {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSQualifiedName\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSCallSignatureDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSCallSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSConstructSignatureDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSConstructSignatureDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSPropertySignature {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSPropertySignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSMethodSignature {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSMethodSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSIndexSignature {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSIndexSignature\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSAnyKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSAnyKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSBooleanKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSBooleanKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSBigIntKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSBigIntKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSIntrinsicKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSIntrinsicKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSNeverKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSNeverKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSNullKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSNullKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSNumberKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSNumberKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSObjectKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSObjectKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSStringKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSStringKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSSymbolKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSSymbolKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSUndefinedKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSUndefinedKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSUnknownKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSUnknownKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSVoidKeyword {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSVoidKeyword\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSThisType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSThisType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSFunctionType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSFunctionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSConstructorType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSConstructorType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeReference {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypePredicate {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypePredicate\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeQuery {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeQuery\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeLiteral {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSArrayType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSArrayType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTupleType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTupleType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSOptionalType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSOptionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSRestType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSRestType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSNamedTupleMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSNamedTupleMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSUnionType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSUnionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSIntersectionType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSIntersectionType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSConditionalType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSConditionalType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSInferType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSInferType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSParenthesizedType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSParenthesizedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeOperator {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeOperator\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSIndexedAccessType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSIndexedAccessType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSMappedType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSMappedType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSLiteralType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSLiteralType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSExpressionWithTypeArguments {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSExpressionWithTypeArguments\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSInterfaceDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSInterfaceDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSInterfaceBody {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSInterfaceBody\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeAliasDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeAliasDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSInstantiationExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSInstantiationExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSAsExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSAsExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSSatisfiesExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSSatisfiesExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeAssertion {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeAssertion\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSEnumDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSEnumDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSEnumMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSEnumMember\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSModuleDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSModuleDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSModuleBlock {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSModuleBlock\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSImportType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSImportType\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSImportEqualsDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSImportEqualsDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSExternalModuleReference {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSExternalModuleReference\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSNonNullExpression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSNonNullExpression\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSExportAssignment {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSExportAssignment\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSNamespaceExportDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSNamespaceExportDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeAnnotation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeParameterInstantiation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeParameterInstantiation\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeParameterDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeParameterDeclaration\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeParameter {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"TSTypeParameter\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Standardized {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ArrayExpression\" === nodeType ||\n    \"AssignmentExpression\" === nodeType ||\n    \"BinaryExpression\" === nodeType ||\n    \"InterpreterDirective\" === nodeType ||\n    \"Directive\" === nodeType ||\n    \"DirectiveLiteral\" === nodeType ||\n    \"BlockStatement\" === nodeType ||\n    \"BreakStatement\" === nodeType ||\n    \"CallExpression\" === nodeType ||\n    \"CatchClause\" === nodeType ||\n    \"ConditionalExpression\" === nodeType ||\n    \"ContinueStatement\" === nodeType ||\n    \"DebuggerStatement\" === nodeType ||\n    \"DoWhileStatement\" === nodeType ||\n    \"EmptyStatement\" === nodeType ||\n    \"ExpressionStatement\" === nodeType ||\n    \"File\" === nodeType ||\n    \"ForInStatement\" === nodeType ||\n    \"ForStatement\" === nodeType ||\n    \"FunctionDeclaration\" === nodeType ||\n    \"FunctionExpression\" === nodeType ||\n    \"Identifier\" === nodeType ||\n    \"IfStatement\" === nodeType ||\n    \"LabeledStatement\" === nodeType ||\n    \"StringLiteral\" === nodeType ||\n    \"NumericLiteral\" === nodeType ||\n    \"NullLiteral\" === nodeType ||\n    \"BooleanLiteral\" === nodeType ||\n    \"RegExpLiteral\" === nodeType ||\n    \"LogicalExpression\" === nodeType ||\n    \"MemberExpression\" === nodeType ||\n    \"NewExpression\" === nodeType ||\n    \"Program\" === nodeType ||\n    \"ObjectExpression\" === nodeType ||\n    \"ObjectMethod\" === nodeType ||\n    \"ObjectProperty\" === nodeType ||\n    \"RestElement\" === nodeType ||\n    \"ReturnStatement\" === nodeType ||\n    \"SequenceExpression\" === nodeType ||\n    \"ParenthesizedExpression\" === nodeType ||\n    \"SwitchCase\" === nodeType ||\n    \"SwitchStatement\" === nodeType ||\n    \"ThisExpression\" === nodeType ||\n    \"ThrowStatement\" === nodeType ||\n    \"TryStatement\" === nodeType ||\n    \"UnaryExpression\" === nodeType ||\n    \"UpdateExpression\" === nodeType ||\n    \"VariableDeclaration\" === nodeType ||\n    \"VariableDeclarator\" === nodeType ||\n    \"WhileStatement\" === nodeType ||\n    \"WithStatement\" === nodeType ||\n    \"AssignmentPattern\" === nodeType ||\n    \"ArrayPattern\" === nodeType ||\n    \"ArrowFunctionExpression\" === nodeType ||\n    \"ClassBody\" === nodeType ||\n    \"ClassExpression\" === nodeType ||\n    \"ClassDeclaration\" === nodeType ||\n    \"ExportAllDeclaration\" === nodeType ||\n    \"ExportDefaultDeclaration\" === nodeType ||\n    \"ExportNamedDeclaration\" === nodeType ||\n    \"ExportSpecifier\" === nodeType ||\n    \"ForOfStatement\" === nodeType ||\n    \"ImportDeclaration\" === nodeType ||\n    \"ImportDefaultSpecifier\" === nodeType ||\n    \"ImportNamespaceSpecifier\" === nodeType ||\n    \"ImportSpecifier\" === nodeType ||\n    \"MetaProperty\" === nodeType ||\n    \"ClassMethod\" === nodeType ||\n    \"ObjectPattern\" === nodeType ||\n    \"SpreadElement\" === nodeType ||\n    \"Super\" === nodeType ||\n    \"TaggedTemplateExpression\" === nodeType ||\n    \"TemplateElement\" === nodeType ||\n    \"TemplateLiteral\" === nodeType ||\n    \"YieldExpression\" === nodeType ||\n    \"AwaitExpression\" === nodeType ||\n    \"Import\" === nodeType ||\n    \"BigIntLiteral\" === nodeType ||\n    \"ExportNamespaceSpecifier\" === nodeType ||\n    \"OptionalMemberExpression\" === nodeType ||\n    \"OptionalCallExpression\" === nodeType ||\n    \"ClassProperty\" === nodeType ||\n    \"ClassAccessorProperty\" === nodeType ||\n    \"ClassPrivateProperty\" === nodeType ||\n    \"ClassPrivateMethod\" === nodeType ||\n    \"PrivateName\" === nodeType ||\n    \"StaticBlock\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      (\"Identifier\" === (node as t.Placeholder).expectedNode ||\n        \"StringLiteral\" === (node as t.Placeholder).expectedNode ||\n        \"BlockStatement\" === (node as t.Placeholder).expectedNode ||\n        \"ClassBody\" === (node as t.Placeholder).expectedNode))\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Expression {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ArrayExpression\" === nodeType ||\n    \"AssignmentExpression\" === nodeType ||\n    \"BinaryExpression\" === nodeType ||\n    \"CallExpression\" === nodeType ||\n    \"ConditionalExpression\" === nodeType ||\n    \"FunctionExpression\" === nodeType ||\n    \"Identifier\" === nodeType ||\n    \"StringLiteral\" === nodeType ||\n    \"NumericLiteral\" === nodeType ||\n    \"NullLiteral\" === nodeType ||\n    \"BooleanLiteral\" === nodeType ||\n    \"RegExpLiteral\" === nodeType ||\n    \"LogicalExpression\" === nodeType ||\n    \"MemberExpression\" === nodeType ||\n    \"NewExpression\" === nodeType ||\n    \"ObjectExpression\" === nodeType ||\n    \"SequenceExpression\" === nodeType ||\n    \"ParenthesizedExpression\" === nodeType ||\n    \"ThisExpression\" === nodeType ||\n    \"UnaryExpression\" === nodeType ||\n    \"UpdateExpression\" === nodeType ||\n    \"ArrowFunctionExpression\" === nodeType ||\n    \"ClassExpression\" === nodeType ||\n    \"MetaProperty\" === nodeType ||\n    \"Super\" === nodeType ||\n    \"TaggedTemplateExpression\" === nodeType ||\n    \"TemplateLiteral\" === nodeType ||\n    \"YieldExpression\" === nodeType ||\n    \"AwaitExpression\" === nodeType ||\n    \"Import\" === nodeType ||\n    \"BigIntLiteral\" === nodeType ||\n    \"OptionalMemberExpression\" === nodeType ||\n    \"OptionalCallExpression\" === nodeType ||\n    \"TypeCastExpression\" === nodeType ||\n    \"JSXElement\" === nodeType ||\n    \"JSXFragment\" === nodeType ||\n    \"BindExpression\" === nodeType ||\n    \"DoExpression\" === nodeType ||\n    \"RecordExpression\" === nodeType ||\n    \"TupleExpression\" === nodeType ||\n    \"DecimalLiteral\" === nodeType ||\n    \"ModuleExpression\" === nodeType ||\n    \"TopicReference\" === nodeType ||\n    \"PipelineTopicExpression\" === nodeType ||\n    \"PipelineBareFunction\" === nodeType ||\n    \"PipelinePrimaryTopicReference\" === nodeType ||\n    \"TSInstantiationExpression\" === nodeType ||\n    \"TSAsExpression\" === nodeType ||\n    \"TSSatisfiesExpression\" === nodeType ||\n    \"TSTypeAssertion\" === nodeType ||\n    \"TSNonNullExpression\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      (\"Expression\" === (node as t.Placeholder).expectedNode ||\n        \"Identifier\" === (node as t.Placeholder).expectedNode ||\n        \"StringLiteral\" === (node as t.Placeholder).expectedNode))\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Binary {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"BinaryExpression\" === nodeType || \"LogicalExpression\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Scopable {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"BlockStatement\" === nodeType ||\n    \"CatchClause\" === nodeType ||\n    \"DoWhileStatement\" === nodeType ||\n    \"ForInStatement\" === nodeType ||\n    \"ForStatement\" === nodeType ||\n    \"FunctionDeclaration\" === nodeType ||\n    \"FunctionExpression\" === nodeType ||\n    \"Program\" === nodeType ||\n    \"ObjectMethod\" === nodeType ||\n    \"SwitchStatement\" === nodeType ||\n    \"WhileStatement\" === nodeType ||\n    \"ArrowFunctionExpression\" === nodeType ||\n    \"ClassExpression\" === nodeType ||\n    \"ClassDeclaration\" === nodeType ||\n    \"ForOfStatement\" === nodeType ||\n    \"ClassMethod\" === nodeType ||\n    \"ClassPrivateMethod\" === nodeType ||\n    \"StaticBlock\" === nodeType ||\n    \"TSModuleBlock\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"BlockStatement\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.BlockParent {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"BlockStatement\" === nodeType ||\n    \"CatchClause\" === nodeType ||\n    \"DoWhileStatement\" === nodeType ||\n    \"ForInStatement\" === nodeType ||\n    \"ForStatement\" === nodeType ||\n    \"FunctionDeclaration\" === nodeType ||\n    \"FunctionExpression\" === nodeType ||\n    \"Program\" === nodeType ||\n    \"ObjectMethod\" === nodeType ||\n    \"SwitchStatement\" === nodeType ||\n    \"WhileStatement\" === nodeType ||\n    \"ArrowFunctionExpression\" === nodeType ||\n    \"ForOfStatement\" === nodeType ||\n    \"ClassMethod\" === nodeType ||\n    \"ClassPrivateMethod\" === nodeType ||\n    \"StaticBlock\" === nodeType ||\n    \"TSModuleBlock\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"BlockStatement\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Block {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"BlockStatement\" === nodeType ||\n    \"Program\" === nodeType ||\n    \"TSModuleBlock\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"BlockStatement\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Statement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"BlockStatement\" === nodeType ||\n    \"BreakStatement\" === nodeType ||\n    \"ContinueStatement\" === nodeType ||\n    \"DebuggerStatement\" === nodeType ||\n    \"DoWhileStatement\" === nodeType ||\n    \"EmptyStatement\" === nodeType ||\n    \"ExpressionStatement\" === nodeType ||\n    \"ForInStatement\" === nodeType ||\n    \"ForStatement\" === nodeType ||\n    \"FunctionDeclaration\" === nodeType ||\n    \"IfStatement\" === nodeType ||\n    \"LabeledStatement\" === nodeType ||\n    \"ReturnStatement\" === nodeType ||\n    \"SwitchStatement\" === nodeType ||\n    \"ThrowStatement\" === nodeType ||\n    \"TryStatement\" === nodeType ||\n    \"VariableDeclaration\" === nodeType ||\n    \"WhileStatement\" === nodeType ||\n    \"WithStatement\" === nodeType ||\n    \"ClassDeclaration\" === nodeType ||\n    \"ExportAllDeclaration\" === nodeType ||\n    \"ExportDefaultDeclaration\" === nodeType ||\n    \"ExportNamedDeclaration\" === nodeType ||\n    \"ForOfStatement\" === nodeType ||\n    \"ImportDeclaration\" === nodeType ||\n    \"DeclareClass\" === nodeType ||\n    \"DeclareFunction\" === nodeType ||\n    \"DeclareInterface\" === nodeType ||\n    \"DeclareModule\" === nodeType ||\n    \"DeclareModuleExports\" === nodeType ||\n    \"DeclareTypeAlias\" === nodeType ||\n    \"DeclareOpaqueType\" === nodeType ||\n    \"DeclareVariable\" === nodeType ||\n    \"DeclareExportDeclaration\" === nodeType ||\n    \"DeclareExportAllDeclaration\" === nodeType ||\n    \"InterfaceDeclaration\" === nodeType ||\n    \"OpaqueType\" === nodeType ||\n    \"TypeAlias\" === nodeType ||\n    \"EnumDeclaration\" === nodeType ||\n    \"TSDeclareFunction\" === nodeType ||\n    \"TSInterfaceDeclaration\" === nodeType ||\n    \"TSTypeAliasDeclaration\" === nodeType ||\n    \"TSEnumDeclaration\" === nodeType ||\n    \"TSModuleDeclaration\" === nodeType ||\n    \"TSImportEqualsDeclaration\" === nodeType ||\n    \"TSExportAssignment\" === nodeType ||\n    \"TSNamespaceExportDeclaration\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      (\"Statement\" === (node as t.Placeholder).expectedNode ||\n        \"Declaration\" === (node as t.Placeholder).expectedNode ||\n        \"BlockStatement\" === (node as t.Placeholder).expectedNode))\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Terminatorless {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"BreakStatement\" === nodeType ||\n    \"ContinueStatement\" === nodeType ||\n    \"ReturnStatement\" === nodeType ||\n    \"ThrowStatement\" === nodeType ||\n    \"YieldExpression\" === nodeType ||\n    \"AwaitExpression\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.CompletionStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"BreakStatement\" === nodeType ||\n    \"ContinueStatement\" === nodeType ||\n    \"ReturnStatement\" === nodeType ||\n    \"ThrowStatement\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Conditional {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"ConditionalExpression\" === nodeType || \"IfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Loop {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"DoWhileStatement\" === nodeType ||\n    \"ForInStatement\" === nodeType ||\n    \"ForStatement\" === nodeType ||\n    \"WhileStatement\" === nodeType ||\n    \"ForOfStatement\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.While {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"DoWhileStatement\" === nodeType || \"WhileStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExpressionWrapper {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ExpressionStatement\" === nodeType ||\n    \"ParenthesizedExpression\" === nodeType ||\n    \"TypeCastExpression\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.For {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ForInStatement\" === nodeType ||\n    \"ForStatement\" === nodeType ||\n    \"ForOfStatement\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ForXStatement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"ForInStatement\" === nodeType || \"ForOfStatement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Function {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"FunctionDeclaration\" === nodeType ||\n    \"FunctionExpression\" === nodeType ||\n    \"ObjectMethod\" === nodeType ||\n    \"ArrowFunctionExpression\" === nodeType ||\n    \"ClassMethod\" === nodeType ||\n    \"ClassPrivateMethod\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FunctionParent {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"FunctionDeclaration\" === nodeType ||\n    \"FunctionExpression\" === nodeType ||\n    \"ObjectMethod\" === nodeType ||\n    \"ArrowFunctionExpression\" === nodeType ||\n    \"ClassMethod\" === nodeType ||\n    \"ClassPrivateMethod\" === nodeType ||\n    \"StaticBlock\" === nodeType ||\n    \"TSModuleBlock\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Pureish {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"FunctionDeclaration\" === nodeType ||\n    \"FunctionExpression\" === nodeType ||\n    \"StringLiteral\" === nodeType ||\n    \"NumericLiteral\" === nodeType ||\n    \"NullLiteral\" === nodeType ||\n    \"BooleanLiteral\" === nodeType ||\n    \"RegExpLiteral\" === nodeType ||\n    \"ArrowFunctionExpression\" === nodeType ||\n    \"BigIntLiteral\" === nodeType ||\n    \"DecimalLiteral\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"StringLiteral\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Declaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"FunctionDeclaration\" === nodeType ||\n    \"VariableDeclaration\" === nodeType ||\n    \"ClassDeclaration\" === nodeType ||\n    \"ExportAllDeclaration\" === nodeType ||\n    \"ExportDefaultDeclaration\" === nodeType ||\n    \"ExportNamedDeclaration\" === nodeType ||\n    \"ImportDeclaration\" === nodeType ||\n    \"DeclareClass\" === nodeType ||\n    \"DeclareFunction\" === nodeType ||\n    \"DeclareInterface\" === nodeType ||\n    \"DeclareModule\" === nodeType ||\n    \"DeclareModuleExports\" === nodeType ||\n    \"DeclareTypeAlias\" === nodeType ||\n    \"DeclareOpaqueType\" === nodeType ||\n    \"DeclareVariable\" === nodeType ||\n    \"DeclareExportDeclaration\" === nodeType ||\n    \"DeclareExportAllDeclaration\" === nodeType ||\n    \"InterfaceDeclaration\" === nodeType ||\n    \"OpaqueType\" === nodeType ||\n    \"TypeAlias\" === nodeType ||\n    \"EnumDeclaration\" === nodeType ||\n    \"TSDeclareFunction\" === nodeType ||\n    \"TSInterfaceDeclaration\" === nodeType ||\n    \"TSTypeAliasDeclaration\" === nodeType ||\n    \"TSEnumDeclaration\" === nodeType ||\n    \"TSModuleDeclaration\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"Declaration\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.PatternLike {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"Identifier\" === nodeType ||\n    \"RestElement\" === nodeType ||\n    \"AssignmentPattern\" === nodeType ||\n    \"ArrayPattern\" === nodeType ||\n    \"ObjectPattern\" === nodeType ||\n    \"TSAsExpression\" === nodeType ||\n    \"TSSatisfiesExpression\" === nodeType ||\n    \"TSTypeAssertion\" === nodeType ||\n    \"TSNonNullExpression\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      (\"Pattern\" === (node as t.Placeholder).expectedNode ||\n        \"Identifier\" === (node as t.Placeholder).expectedNode))\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.LVal {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"Identifier\" === nodeType ||\n    \"MemberExpression\" === nodeType ||\n    \"RestElement\" === nodeType ||\n    \"AssignmentPattern\" === nodeType ||\n    \"ArrayPattern\" === nodeType ||\n    \"ObjectPattern\" === nodeType ||\n    \"TSParameterProperty\" === nodeType ||\n    \"TSAsExpression\" === nodeType ||\n    \"TSSatisfiesExpression\" === nodeType ||\n    \"TSTypeAssertion\" === nodeType ||\n    \"TSNonNullExpression\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      (\"Pattern\" === (node as t.Placeholder).expectedNode ||\n        \"Identifier\" === (node as t.Placeholder).expectedNode))\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSEntityName {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"Identifier\" === nodeType ||\n    \"TSQualifiedName\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"Identifier\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Literal {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"StringLiteral\" === nodeType ||\n    \"NumericLiteral\" === nodeType ||\n    \"NullLiteral\" === nodeType ||\n    \"BooleanLiteral\" === nodeType ||\n    \"RegExpLiteral\" === nodeType ||\n    \"TemplateLiteral\" === nodeType ||\n    \"BigIntLiteral\" === nodeType ||\n    \"DecimalLiteral\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"StringLiteral\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Immutable {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"StringLiteral\" === nodeType ||\n    \"NumericLiteral\" === nodeType ||\n    \"NullLiteral\" === nodeType ||\n    \"BooleanLiteral\" === nodeType ||\n    \"BigIntLiteral\" === nodeType ||\n    \"JSXAttribute\" === nodeType ||\n    \"JSXClosingElement\" === nodeType ||\n    \"JSXElement\" === nodeType ||\n    \"JSXExpressionContainer\" === nodeType ||\n    \"JSXSpreadChild\" === nodeType ||\n    \"JSXOpeningElement\" === nodeType ||\n    \"JSXText\" === nodeType ||\n    \"JSXFragment\" === nodeType ||\n    \"JSXOpeningFragment\" === nodeType ||\n    \"JSXClosingFragment\" === nodeType ||\n    \"DecimalLiteral\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"StringLiteral\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.UserWhitespacable {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ObjectMethod\" === nodeType ||\n    \"ObjectProperty\" === nodeType ||\n    \"ObjectTypeInternalSlot\" === nodeType ||\n    \"ObjectTypeCallProperty\" === nodeType ||\n    \"ObjectTypeIndexer\" === nodeType ||\n    \"ObjectTypeProperty\" === nodeType ||\n    \"ObjectTypeSpreadProperty\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Method {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ObjectMethod\" === nodeType ||\n    \"ClassMethod\" === nodeType ||\n    \"ClassPrivateMethod\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ObjectMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"ObjectMethod\" === nodeType || \"ObjectProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Property {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ObjectProperty\" === nodeType ||\n    \"ClassProperty\" === nodeType ||\n    \"ClassAccessorProperty\" === nodeType ||\n    \"ClassPrivateProperty\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.UnaryLike {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"UnaryExpression\" === nodeType || \"SpreadElement\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Pattern {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"AssignmentPattern\" === nodeType ||\n    \"ArrayPattern\" === nodeType ||\n    \"ObjectPattern\" === nodeType ||\n    (nodeType === \"Placeholder\" &&\n      \"Pattern\" === (node as t.Placeholder).expectedNode)\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Class {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"ClassExpression\" === nodeType || \"ClassDeclaration\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ModuleDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ExportAllDeclaration\" === nodeType ||\n    \"ExportDefaultDeclaration\" === nodeType ||\n    \"ExportNamedDeclaration\" === nodeType ||\n    \"ImportDeclaration\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ExportDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ExportAllDeclaration\" === nodeType ||\n    \"ExportDefaultDeclaration\" === nodeType ||\n    \"ExportNamedDeclaration\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.ModuleSpecifier {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ExportSpecifier\" === nodeType ||\n    \"ImportDefaultSpecifier\" === nodeType ||\n    \"ImportNamespaceSpecifier\" === nodeType ||\n    \"ImportSpecifier\" === nodeType ||\n    \"ExportNamespaceSpecifier\" === nodeType ||\n    \"ExportDefaultSpecifier\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Accessor {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"ClassAccessorProperty\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Private {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"ClassPrivateProperty\" === nodeType ||\n    \"ClassPrivateMethod\" === nodeType ||\n    \"PrivateName\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Flow {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"AnyTypeAnnotation\" === nodeType ||\n    \"ArrayTypeAnnotation\" === nodeType ||\n    \"BooleanTypeAnnotation\" === nodeType ||\n    \"BooleanLiteralTypeAnnotation\" === nodeType ||\n    \"NullLiteralTypeAnnotation\" === nodeType ||\n    \"ClassImplements\" === nodeType ||\n    \"DeclareClass\" === nodeType ||\n    \"DeclareFunction\" === nodeType ||\n    \"DeclareInterface\" === nodeType ||\n    \"DeclareModule\" === nodeType ||\n    \"DeclareModuleExports\" === nodeType ||\n    \"DeclareTypeAlias\" === nodeType ||\n    \"DeclareOpaqueType\" === nodeType ||\n    \"DeclareVariable\" === nodeType ||\n    \"DeclareExportDeclaration\" === nodeType ||\n    \"DeclareExportAllDeclaration\" === nodeType ||\n    \"DeclaredPredicate\" === nodeType ||\n    \"ExistsTypeAnnotation\" === nodeType ||\n    \"FunctionTypeAnnotation\" === nodeType ||\n    \"FunctionTypeParam\" === nodeType ||\n    \"GenericTypeAnnotation\" === nodeType ||\n    \"InferredPredicate\" === nodeType ||\n    \"InterfaceExtends\" === nodeType ||\n    \"InterfaceDeclaration\" === nodeType ||\n    \"InterfaceTypeAnnotation\" === nodeType ||\n    \"IntersectionTypeAnnotation\" === nodeType ||\n    \"MixedTypeAnnotation\" === nodeType ||\n    \"EmptyTypeAnnotation\" === nodeType ||\n    \"NullableTypeAnnotation\" === nodeType ||\n    \"NumberLiteralTypeAnnotation\" === nodeType ||\n    \"NumberTypeAnnotation\" === nodeType ||\n    \"ObjectTypeAnnotation\" === nodeType ||\n    \"ObjectTypeInternalSlot\" === nodeType ||\n    \"ObjectTypeCallProperty\" === nodeType ||\n    \"ObjectTypeIndexer\" === nodeType ||\n    \"ObjectTypeProperty\" === nodeType ||\n    \"ObjectTypeSpreadProperty\" === nodeType ||\n    \"OpaqueType\" === nodeType ||\n    \"QualifiedTypeIdentifier\" === nodeType ||\n    \"StringLiteralTypeAnnotation\" === nodeType ||\n    \"StringTypeAnnotation\" === nodeType ||\n    \"SymbolTypeAnnotation\" === nodeType ||\n    \"ThisTypeAnnotation\" === nodeType ||\n    \"TupleTypeAnnotation\" === nodeType ||\n    \"TypeofTypeAnnotation\" === nodeType ||\n    \"TypeAlias\" === nodeType ||\n    \"TypeAnnotation\" === nodeType ||\n    \"TypeCastExpression\" === nodeType ||\n    \"TypeParameter\" === nodeType ||\n    \"TypeParameterDeclaration\" === nodeType ||\n    \"TypeParameterInstantiation\" === nodeType ||\n    \"UnionTypeAnnotation\" === nodeType ||\n    \"Variance\" === nodeType ||\n    \"VoidTypeAnnotation\" === nodeType ||\n    \"EnumDeclaration\" === nodeType ||\n    \"EnumBooleanBody\" === nodeType ||\n    \"EnumNumberBody\" === nodeType ||\n    \"EnumStringBody\" === nodeType ||\n    \"EnumSymbolBody\" === nodeType ||\n    \"EnumBooleanMember\" === nodeType ||\n    \"EnumNumberMember\" === nodeType ||\n    \"EnumStringMember\" === nodeType ||\n    \"EnumDefaultedMember\" === nodeType ||\n    \"IndexedAccessType\" === nodeType ||\n    \"OptionalIndexedAccessType\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FlowType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"AnyTypeAnnotation\" === nodeType ||\n    \"ArrayTypeAnnotation\" === nodeType ||\n    \"BooleanTypeAnnotation\" === nodeType ||\n    \"BooleanLiteralTypeAnnotation\" === nodeType ||\n    \"NullLiteralTypeAnnotation\" === nodeType ||\n    \"ExistsTypeAnnotation\" === nodeType ||\n    \"FunctionTypeAnnotation\" === nodeType ||\n    \"GenericTypeAnnotation\" === nodeType ||\n    \"InterfaceTypeAnnotation\" === nodeType ||\n    \"IntersectionTypeAnnotation\" === nodeType ||\n    \"MixedTypeAnnotation\" === nodeType ||\n    \"EmptyTypeAnnotation\" === nodeType ||\n    \"NullableTypeAnnotation\" === nodeType ||\n    \"NumberLiteralTypeAnnotation\" === nodeType ||\n    \"NumberTypeAnnotation\" === nodeType ||\n    \"ObjectTypeAnnotation\" === nodeType ||\n    \"StringLiteralTypeAnnotation\" === nodeType ||\n    \"StringTypeAnnotation\" === nodeType ||\n    \"SymbolTypeAnnotation\" === nodeType ||\n    \"ThisTypeAnnotation\" === nodeType ||\n    \"TupleTypeAnnotation\" === nodeType ||\n    \"TypeofTypeAnnotation\" === nodeType ||\n    \"UnionTypeAnnotation\" === nodeType ||\n    \"VoidTypeAnnotation\" === nodeType ||\n    \"IndexedAccessType\" === nodeType ||\n    \"OptionalIndexedAccessType\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FlowBaseAnnotation {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"AnyTypeAnnotation\" === nodeType ||\n    \"BooleanTypeAnnotation\" === nodeType ||\n    \"NullLiteralTypeAnnotation\" === nodeType ||\n    \"MixedTypeAnnotation\" === nodeType ||\n    \"EmptyTypeAnnotation\" === nodeType ||\n    \"NumberTypeAnnotation\" === nodeType ||\n    \"StringTypeAnnotation\" === nodeType ||\n    \"SymbolTypeAnnotation\" === nodeType ||\n    \"ThisTypeAnnotation\" === nodeType ||\n    \"VoidTypeAnnotation\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FlowDeclaration {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"DeclareClass\" === nodeType ||\n    \"DeclareFunction\" === nodeType ||\n    \"DeclareInterface\" === nodeType ||\n    \"DeclareModule\" === nodeType ||\n    \"DeclareModuleExports\" === nodeType ||\n    \"DeclareTypeAlias\" === nodeType ||\n    \"DeclareOpaqueType\" === nodeType ||\n    \"DeclareVariable\" === nodeType ||\n    \"DeclareExportDeclaration\" === nodeType ||\n    \"DeclareExportAllDeclaration\" === nodeType ||\n    \"InterfaceDeclaration\" === nodeType ||\n    \"OpaqueType\" === nodeType ||\n    \"TypeAlias\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.FlowPredicate {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\"DeclaredPredicate\" === nodeType || \"InferredPredicate\" === nodeType) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumBody {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"EnumBooleanBody\" === nodeType ||\n    \"EnumNumberBody\" === nodeType ||\n    \"EnumStringBody\" === nodeType ||\n    \"EnumSymbolBody\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.EnumMember {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"EnumBooleanMember\" === nodeType ||\n    \"EnumNumberMember\" === nodeType ||\n    \"EnumStringMember\" === nodeType ||\n    \"EnumDefaultedMember\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.JSX {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"JSXAttribute\" === nodeType ||\n    \"JSXClosingElement\" === nodeType ||\n    \"JSXElement\" === nodeType ||\n    \"JSXEmptyExpression\" === nodeType ||\n    \"JSXExpressionContainer\" === nodeType ||\n    \"JSXSpreadChild\" === nodeType ||\n    \"JSXIdentifier\" === nodeType ||\n    \"JSXMemberExpression\" === nodeType ||\n    \"JSXNamespacedName\" === nodeType ||\n    \"JSXOpeningElement\" === nodeType ||\n    \"JSXSpreadAttribute\" === nodeType ||\n    \"JSXText\" === nodeType ||\n    \"JSXFragment\" === nodeType ||\n    \"JSXOpeningFragment\" === nodeType ||\n    \"JSXClosingFragment\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.Miscellaneous {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"Noop\" === nodeType ||\n    \"Placeholder\" === nodeType ||\n    \"V8IntrinsicIdentifier\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TypeScript {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"TSParameterProperty\" === nodeType ||\n    \"TSDeclareFunction\" === nodeType ||\n    \"TSDeclareMethod\" === nodeType ||\n    \"TSQualifiedName\" === nodeType ||\n    \"TSCallSignatureDeclaration\" === nodeType ||\n    \"TSConstructSignatureDeclaration\" === nodeType ||\n    \"TSPropertySignature\" === nodeType ||\n    \"TSMethodSignature\" === nodeType ||\n    \"TSIndexSignature\" === nodeType ||\n    \"TSAnyKeyword\" === nodeType ||\n    \"TSBooleanKeyword\" === nodeType ||\n    \"TSBigIntKeyword\" === nodeType ||\n    \"TSIntrinsicKeyword\" === nodeType ||\n    \"TSNeverKeyword\" === nodeType ||\n    \"TSNullKeyword\" === nodeType ||\n    \"TSNumberKeyword\" === nodeType ||\n    \"TSObjectKeyword\" === nodeType ||\n    \"TSStringKeyword\" === nodeType ||\n    \"TSSymbolKeyword\" === nodeType ||\n    \"TSUndefinedKeyword\" === nodeType ||\n    \"TSUnknownKeyword\" === nodeType ||\n    \"TSVoidKeyword\" === nodeType ||\n    \"TSThisType\" === nodeType ||\n    \"TSFunctionType\" === nodeType ||\n    \"TSConstructorType\" === nodeType ||\n    \"TSTypeReference\" === nodeType ||\n    \"TSTypePredicate\" === nodeType ||\n    \"TSTypeQuery\" === nodeType ||\n    \"TSTypeLiteral\" === nodeType ||\n    \"TSArrayType\" === nodeType ||\n    \"TSTupleType\" === nodeType ||\n    \"TSOptionalType\" === nodeType ||\n    \"TSRestType\" === nodeType ||\n    \"TSNamedTupleMember\" === nodeType ||\n    \"TSUnionType\" === nodeType ||\n    \"TSIntersectionType\" === nodeType ||\n    \"TSConditionalType\" === nodeType ||\n    \"TSInferType\" === nodeType ||\n    \"TSParenthesizedType\" === nodeType ||\n    \"TSTypeOperator\" === nodeType ||\n    \"TSIndexedAccessType\" === nodeType ||\n    \"TSMappedType\" === nodeType ||\n    \"TSLiteralType\" === nodeType ||\n    \"TSExpressionWithTypeArguments\" === nodeType ||\n    \"TSInterfaceDeclaration\" === nodeType ||\n    \"TSInterfaceBody\" === nodeType ||\n    \"TSTypeAliasDeclaration\" === nodeType ||\n    \"TSInstantiationExpression\" === nodeType ||\n    \"TSAsExpression\" === nodeType ||\n    \"TSSatisfiesExpression\" === nodeType ||\n    \"TSTypeAssertion\" === nodeType ||\n    \"TSEnumDeclaration\" === nodeType ||\n    \"TSEnumMember\" === nodeType ||\n    \"TSModuleDeclaration\" === nodeType ||\n    \"TSModuleBlock\" === nodeType ||\n    \"TSImportType\" === nodeType ||\n    \"TSImportEqualsDeclaration\" === nodeType ||\n    \"TSExternalModuleReference\" === nodeType ||\n    \"TSNonNullExpression\" === nodeType ||\n    \"TSExportAssignment\" === nodeType ||\n    \"TSNamespaceExportDeclaration\" === nodeType ||\n    \"TSTypeAnnotation\" === nodeType ||\n    \"TSTypeParameterInstantiation\" === nodeType ||\n    \"TSTypeParameterDeclaration\" === nodeType ||\n    \"TSTypeParameter\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSTypeElement {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"TSCallSignatureDeclaration\" === nodeType ||\n    \"TSConstructSignatureDeclaration\" === nodeType ||\n    \"TSPropertySignature\" === nodeType ||\n    \"TSMethodSignature\" === nodeType ||\n    \"TSIndexSignature\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"TSAnyKeyword\" === nodeType ||\n    \"TSBooleanKeyword\" === nodeType ||\n    \"TSBigIntKeyword\" === nodeType ||\n    \"TSIntrinsicKeyword\" === nodeType ||\n    \"TSNeverKeyword\" === nodeType ||\n    \"TSNullKeyword\" === nodeType ||\n    \"TSNumberKeyword\" === nodeType ||\n    \"TSObjectKeyword\" === nodeType ||\n    \"TSStringKeyword\" === nodeType ||\n    \"TSSymbolKeyword\" === nodeType ||\n    \"TSUndefinedKeyword\" === nodeType ||\n    \"TSUnknownKeyword\" === nodeType ||\n    \"TSVoidKeyword\" === nodeType ||\n    \"TSThisType\" === nodeType ||\n    \"TSFunctionType\" === nodeType ||\n    \"TSConstructorType\" === nodeType ||\n    \"TSTypeReference\" === nodeType ||\n    \"TSTypePredicate\" === nodeType ||\n    \"TSTypeQuery\" === nodeType ||\n    \"TSTypeLiteral\" === nodeType ||\n    \"TSArrayType\" === nodeType ||\n    \"TSTupleType\" === nodeType ||\n    \"TSOptionalType\" === nodeType ||\n    \"TSRestType\" === nodeType ||\n    \"TSUnionType\" === nodeType ||\n    \"TSIntersectionType\" === nodeType ||\n    \"TSConditionalType\" === nodeType ||\n    \"TSInferType\" === nodeType ||\n    \"TSParenthesizedType\" === nodeType ||\n    \"TSTypeOperator\" === nodeType ||\n    \"TSIndexedAccessType\" === nodeType ||\n    \"TSMappedType\" === nodeType ||\n    \"TSLiteralType\" === nodeType ||\n    \"TSExpressionWithTypeArguments\" === nodeType ||\n    \"TSImportType\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): node is t.TSBaseType {\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (\n    \"TSAnyKeyword\" === nodeType ||\n    \"TSBooleanKeyword\" === nodeType ||\n    \"TSBigIntKeyword\" === nodeType ||\n    \"TSIntrinsicKeyword\" === nodeType ||\n    \"TSNeverKeyword\" === nodeType ||\n    \"TSNullKeyword\" === nodeType ||\n    \"TSNumberKeyword\" === nodeType ||\n    \"TSObjectKeyword\" === nodeType ||\n    \"TSStringKeyword\" === nodeType ||\n    \"TSSymbolKeyword\" === nodeType ||\n    \"TSUndefinedKeyword\" === nodeType ||\n    \"TSUnknownKeyword\" === nodeType ||\n    \"TSVoidKeyword\" === nodeType ||\n    \"TSThisType\" === nodeType ||\n    \"TSLiteralType\" === nodeType\n  ) {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isNumberLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): boolean {\n  console.trace(\n    \"The node type NumberLiteral has been renamed to NumericLiteral\",\n  );\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"NumberLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isRegexLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): boolean {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"RegexLiteral\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isRestProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): boolean {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"RestProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\nexport function isSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): boolean {\n  console.trace(\n    \"The node type SpreadProperty has been renamed to SpreadElement\",\n  );\n  if (!node) return false;\n\n  const nodeType = (node as t.Node).type;\n  if (nodeType === \"SpreadProperty\") {\n    if (typeof opts === \"undefined\") {\n      return true;\n    } else {\n      return shallowEqual(node, opts);\n    }\n  }\n\n  return false;\n}\n", "import {\n  isIdentifier,\n  isMemberExpression,\n  isStringLiteral,\n  isThisExpression,\n} from \"./generated\";\nimport type * as t from \"..\";\n\n/**\n * Determines whether or not the input node `member` matches the\n * input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function matchesPattern(\n  member: t.Node | null | undefined,\n  match: string | string[],\n  allowPartial?: boolean,\n): boolean {\n  // not a member expression\n  if (!isMemberExpression(member)) return false;\n\n  const parts = Array.isArray(match) ? match : match.split(\".\");\n  const nodes = [];\n\n  let node;\n  for (node = member; isMemberExpression(node); node = node.object) {\n    nodes.push(node.property);\n  }\n  nodes.push(node);\n\n  if (nodes.length < parts.length) return false;\n  if (!allowPartial && nodes.length > parts.length) return false;\n\n  for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {\n    const node = nodes[j];\n    let value;\n    if (isIdentifier(node)) {\n      value = node.name;\n    } else if (isStringLiteral(node)) {\n      value = node.value;\n    } else if (isThisExpression(node)) {\n      value = \"this\";\n    } else {\n      return false;\n    }\n\n    if (parts[i] !== value) return false;\n  }\n\n  return true;\n}\n", "import matchesPattern from \"./matchesPattern\";\nimport type * as t from \"..\";\n\n/**\n * Build a function that when called will return whether or not the\n * input `node` `MemberExpression` matches the input `match`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\nexport default function buildMatchMemberExpression(\n  match: string,\n  allowPartial?: boolean,\n) {\n  const parts = match.split(\".\");\n\n  return (member: t.Node) => matchesPattern(member, parts, allowPartial);\n}\n", "import buildMatchMemberExpression from \"../buildMatchMemberExpression\";\n\nconst isReactComponent = buildMatchMemberExpression(\"React.Component\");\n\nexport default isReactComponent;\n", "export default function isCompatTag(tagName?: string): boolean {\n  // Must start with a lowercase ASCII letter\n  return !!tagName && /^[a-z]/.test(tagName);\n}\n", "'use strict';\n\nlet fastProto = null;\n\n// Creates an object with permanently fast properties in V8. See Toon Verwaest's\n// post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62\n// for more details. Use %HasFastProperties(object) and the Node.js flag\n// --allow-natives-syntax to check whether an object has fast properties.\nfunction FastObject(o) {\n\t// A prototype object will have \"fast properties\" enabled once it is checked\n\t// against the inline property cache of a function, e.g. fastProto.property:\n\t// https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63\n\tif (fastProto !== null && typeof fastProto.property) {\n\t\tconst result = fastProto;\n\t\tfastProto = FastObject.prototype = null;\n\t\treturn result;\n\t}\n\tfastProto = FastObject.prototype = o == null ? Object.create(null) : o;\n\treturn new FastObject;\n}\n\n// Initialize the inline property cache of FastObject\nFastObject();\n\nmodule.exports = function toFastproperties(o) {\n\treturn FastObject(o);\n};\n", "import { FLIPPED_ALIAS_KEYS, ALIAS_KEYS } from \"../definitions\";\nimport type * as t from \"..\";\n\nexport default function isType<T extends t.Node[\"type\"]>(\n  nodeType: string,\n  targetType: T,\n): nodeType is T;\n\nexport default function isType(\n  nodeType: string | null | undefined,\n  targetType: string,\n): boolean;\n\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\nexport default function isType(nodeType: string, targetType: string): boolean {\n  if (nodeType === targetType) return true;\n\n  // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n  // @ts-expect-error targetType may not index ALIAS_KEYS\n  if (ALIAS_KEYS[targetType]) return false;\n\n  const aliases: Array<string> | undefined = FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n\n    for (const alias of aliases) {\n      if (nodeType === alias) return true;\n    }\n  }\n\n  return false;\n}\n", "import { PLACEHOLDERS_ALIAS } from \"../definitions\";\n\n/**\n * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.\n */\nexport default function isPlaceholderType(\n  placeholderType: string,\n  targetType: string,\n): boolean {\n  if (placeholderType === targetType) return true;\n\n  const aliases: Array<string> | undefined =\n    PLACEHOLDERS_ALIAS[placeholderType];\n  if (aliases) {\n    for (const alias of aliases) {\n      if (targetType === alias) return true;\n    }\n  }\n\n  return false;\n}\n", "import shallowEqual from \"../utils/shallowEqual\";\nimport isType from \"./isType\";\nimport isPlaceholderType from \"./isPlaceholderType\";\nimport { FLIPPED_ALIAS_KEYS } from \"../definitions\";\nimport type * as t from \"..\";\n\nexport default function is<T extends t.Node[\"type\"]>(\n  type: T,\n  node: t.Node | null | undefined,\n  opts?: undefined,\n): node is Extract<t.Node, { type: T }>;\n\nexport default function is<\n  T extends t.Node[\"type\"],\n  P extends Extract<t.Node, { type: T }>,\n>(type: T, n: t.Node | null | undefined, required: Partial<P>): n is P;\n\nexport default function is<P extends t.Node>(\n  type: string,\n  node: t.Node | null | undefined,\n  opts: Partial<P>,\n): node is P;\n\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node;\n/**\n * Returns whether `node` is of given `type`.\n *\n * For better performance, use this instead of `is[Type]` when `type` is unknown.\n */\nexport default function is(\n  type: string,\n  node: t.Node | null | undefined,\n  opts?: Partial<t.Node>,\n): node is t.Node {\n  if (!node) return false;\n\n  const matches = isType(node.type, type);\n  if (!matches) {\n    if (!opts && node.type === \"Placeholder\" && type in FLIPPED_ALIAS_KEYS) {\n      // We can only return true if the placeholder doesn't replace a real node,\n      // but it replaces a category of nodes (an alias).\n      //\n      // t.is(\"Identifier\", node) gives some guarantees about node's shape, so we\n      // can't say that Placeholder(expectedNode: \"Identifier\") is an identifier\n      // because it doesn't have the same properties.\n      // On the other hand, t.is(\"Expression\", node) doesn't say anything about\n      // the shape of node because Expression can be many different nodes: we can,\n      // and should, safely report expression placeholders as Expressions.\n      return isPlaceholderType(node.expectedNode, type);\n    }\n    return false;\n  }\n\n  if (typeof opts === \"undefined\") {\n    return true;\n  } else {\n    return shallowEqual(node, opts);\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "export {\n  isIdentifierName,\n  isIdentifierChar,\n  isIdentifierStart,\n} from \"./identifier\";\nexport {\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"./keyword\";\n", "import {\n  isIdentifierName,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\n/**\n * Check if the input `name` is a valid identifier name\n * and isn't a reserved word.\n */\nexport default function isValidIdentifier(\n  name: string,\n  reserved: boolean = true,\n): boolean {\n  if (typeof name !== \"string\") return false;\n\n  if (reserved) {\n    // \"await\" is invalid in module, valid in script; better be safe (see #4952)\n    if (isKeyword(name) || isStrictReservedWord(name, true)) {\n      return false;\n    }\n  }\n\n  return isIdentifierName(name);\n}\n", "import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "export const STATEMENT_OR_BLOCK_KEYS = [\"consequent\", \"body\", \"alternate\"];\nexport const FLATTENABLE_KEYS = [\"body\", \"expressions\"];\nexport const FOR_INIT_KEYS = [\"left\", \"init\"];\nexport const COMMENT_KEYS = [\n  \"leadingComments\",\n  \"trailingComments\",\n  \"innerComments\",\n] as const;\n\nexport const LOGICAL_OPERATORS = [\"||\", \"&&\", \"??\"];\nexport const UPDATE_OPERATORS = [\"++\", \"--\"];\n\nexport const BOOLEAN_NUMBER_BINARY_OPERATORS = [\">\", \"<\", \">=\", \"<=\"];\nexport const EQUALITY_BINARY_OPERATORS = [\"==\", \"===\", \"!=\", \"!==\"];\nexport const COMPARISON_BINARY_OPERATORS = [\n  ...EQUALITY_BINARY_OPERATORS,\n  \"in\",\n  \"instanceof\",\n];\nexport const BOOLEAN_BINARY_OPERATORS = [\n  ...COMPARISON_BINARY_OPERATORS,\n  ...BOOLEAN_NUMBER_BINARY_OPERATORS,\n];\nexport const NUMBER_BINARY_OPERATORS = [\n  \"-\",\n  \"/\",\n  \"%\",\n  \"*\",\n  \"**\",\n  \"&\",\n  \"|\",\n  \">>\",\n  \">>>\",\n  \"<<\",\n  \"^\",\n];\nexport const BINARY_OPERATORS = [\n  \"+\",\n  ...NUMBER_BINARY_OPERATORS,\n  ...BOOLEAN_BINARY_OPERATORS,\n  \"|>\",\n];\n\nexport const ASSIGNMENT_OPERATORS = [\n  \"=\",\n  \"+=\",\n  ...NUMBER_BINARY_OPERATORS.map(op => op + \"=\"),\n  ...LOGICAL_OPERATORS.map(op => op + \"=\"),\n];\n\nexport const BOOLEAN_UNARY_OPERATORS = [\"delete\", \"!\"];\nexport const NUMBER_UNARY_OPERATORS = [\"+\", \"-\", \"~\"];\nexport const STRING_UNARY_OPERATORS = [\"typeof\"];\nexport const UNARY_OPERATORS = [\n  \"void\",\n  \"throw\",\n  ...BOOLEAN_UNARY_OPERATORS,\n  ...NUMBER_UNARY_OPERATORS,\n  ...STRING_UNARY_OPERATORS,\n];\n\nexport const INHERIT_KEYS = {\n  optional: [\"typeAnnotation\", \"typeParameters\", \"returnType\"],\n  force: [\"start\", \"loc\", \"end\"],\n} as const;\n\nexport const BLOCK_SCOPED_SYMBOL = Symbol.for(\"var used to be block scoped\");\nexport const NOT_LOCAL_BINDING = Symbol.for(\n  \"should not be considered a local binding\",\n);\n", "import is from \"../validators/is\";\nimport { validateField, validateChild } from \"../validators/validate\";\nimport type * as t from \"..\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | {}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) {\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions {\n  return { validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (getType(val) === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\n        `Property ${key} expected type of ${type} but got ${getType(val)}`,\n      );\n    }\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\nconst store = {} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    return defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n", "import is from \"../validators/is\";\nimport isValidIdentifier from \"../validators/isValidIdentifier\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"..\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n} from \"./utils\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n        ),\n      ),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertValueType(\"string\");\n        }\n\n        const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n        const pattern = assertOneOf(\"=\");\n\n        return function (node: t.AssignmentExpression, key, val) {\n          const validator = is(\"Pattern\", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? Object.assign(() => {}, {\n            each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n          })\n        : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n        : assertNodeType(\n            \"VariableDeclaration\",\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Identifier\", \"Pattern\", \"RestElement\")),\n    ),\n  },\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate: (function () {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};\n\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (!isValidIdentifier(val, false)) {\n              throw new TypeError(`\"${val}\" is not a valid identifier name`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n    },\n    optional: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n\n    const [, parentKey] = match;\n    const nonComp = { computed: false };\n\n    // We can't check if `parent.property === node`, because nodes are validated\n    // before replacing them in the AST.\n    if (parentKey === \"property\") {\n      if (is(\"MemberExpression\", parent, nonComp)) return;\n      if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n    } else if (parentKey === \"key\") {\n      if (is(\"Property\", parent, nonComp)) return;\n      if (is(\"Method\", parent, nonComp)) return;\n    } else if (parentKey === \"exported\") {\n      if (is(\"ExportSpecifier\", parent)) return;\n    } else if (parentKey === \"imported\") {\n      if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n    } else if (parentKey === \"meta\") {\n      if (is(\"MetaProperty\", parent, { meta: node })) return;\n    }\n\n    if (\n      // Ideally we should call isStrictReservedWord if this node is a descendant\n      // of a block in strict mode. Also, we should pass the inModule option so\n      // we can disable \"await\" in module.\n      (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n      // Even if \"this\" is a keyword, we are using the Identifier\n      // node to represent it.\n      node.name !== \"this\"\n    ) {\n      throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n    }\n  },\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: assertValueType(\"number\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            const invalid = /[^gimsuy]/.exec(val);\n            if (invalid) {\n              throw new TypeError(`\"${invalid[0]}\" is not a valid RegExp flag`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"optional\"] : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceFile: {\n      validate: assertValueType(\"string\"),\n    },\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\"),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_TYPES_8_BREAKING ? { default: \"method\" } : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"decorators\"] : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"DecimalLiteral\",\n          \"PrivateName\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: [\n              \"Expression\",\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && node.computed) {\n              throw new TypeError(\n                \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n        function (node: t.ObjectProperty, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          if (val && !is(\"Identifier\", node.key)) {\n            throw new TypeError(\n              \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n            );\n          }\n        } as Validator,\n      ),\n      default: false,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate: (function () {\n    const pattern = assertNodeType(\n      \"Identifier\",\n      \"Pattern\",\n      \"TSAsExpression\",\n      \"TSSatisfiesExpression\",\n      \"TSNonNullExpression\",\n      \"TSTypeAssertion\",\n    );\n    const expression = assertNodeType(\"Expression\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      const validator = is(\"ObjectPattern\", parent) ? pattern : expression;\n      validator(node, \"value\", node.value);\n    };\n  })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"MemberExpression\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    // For Flow\n    optional: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate(parent: t.ArrayPattern | t.ObjectPattern, key) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n    const [, listKey, index] = match as unknown as [\n      string,\n      keyof typeof parent,\n      string,\n    ];\n    if ((parent[listKey] as t.Node[]).length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  },\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\")),\n      ),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"SwitchCase\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: chain(\n        assertNodeType(\"BlockStatement\"),\n        Object.assign(\n          function (node: t.TryStatement) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (!node.handler && !node.finalizer) {\n              throw new TypeError(\n                \"TryStatement expects either a handler or finalizer, or both\",\n              );\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\"BlockStatement\"],\n          },\n        ),\n      ),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"Expression\")\n        : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n      ),\n    },\n    declarations: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"VariableDeclarator\")),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    if (!is(\"ForXStatement\", parent, { left: node })) return;\n    if (node.declarations.length !== 1) {\n      throw new TypeError(\n        `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n      );\n    }\n  },\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"LVal\");\n        }\n\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n        );\n        const without = assertNodeType(\"Identifier\");\n\n        return function (node: t.VariableDeclarator, key, val) {\n          const validator = node.init ? normal : without;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\", \"LVal\")),\n      ),\n    },\n    // For TypeScript\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    optional: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ClassMethod\",\n            \"ClassPrivateMethod\",\n            \"ClassProperty\",\n            \"ClassPrivateProperty\",\n            \"ClassAccessorProperty\",\n            \"TSDeclareMethod\",\n            \"TSIndexSignature\",\n            \"StaticBlock\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"id\",\n    \"body\",\n    \"superClass\",\n    \"mixins\",\n    \"typeParameters\",\n    \"superTypeParameters\",\n    \"implements\",\n    \"decorators\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // In declarations, this is missing if this is the\n      // child of an ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate: (function () {\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ModuleDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ModuleDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\n        \"TSDeclareFunction\",\n        \"FunctionDeclaration\",\n        \"ClassDeclaration\",\n        \"Expression\",\n      ),\n    },\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ModuleDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate: chain(\n        assertNodeType(\"Declaration\"),\n        Object.assign(\n          function (node: t.ExportNamedDeclaration, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (val && node.specifiers.length) {\n              throw new TypeError(\n                \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n              );\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Declaration\"] },\n        ),\n        function (node: t.ExportNamedDeclaration, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          // This validator isn't put at the top level because we can run it\n          // even if this node doesn't have a parent.\n\n          if (val && node.source) {\n            throw new TypeError(\"Cannot export a declaration from a source\");\n          }\n        },\n      ),\n    },\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    specifiers: {\n      default: [],\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          (function () {\n            const sourced = assertNodeType(\n              \"ExportSpecifier\",\n              \"ExportDefaultSpecifier\",\n              \"ExportNamespaceSpecifier\",\n            );\n            const sourceless = assertNodeType(\"ExportSpecifier\");\n\n            if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n\n            return function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator;\n          })(),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return function (node, key, val) {\n          if (is(\"VariableDeclaration\", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        };\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  visitor: [\"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ModuleDeclaration\"],\n  fields: {\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ImportSpecifier\",\n            \"ImportDefaultSpecifier\",\n            \"ImportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: chain(\n        assertNodeType(\"Identifier\"),\n        Object.assign(\n          function (node: t.MetaProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            let property;\n            switch (val.name) {\n              case \"function\":\n                property = \"sent\";\n                break;\n              case \"new\":\n                property = \"target\";\n                break;\n              case \"import\":\n                property = \"meta\";\n                break;\n            }\n            if (!is(\"Identifier\", node.property, { name: property })) {\n              throw new TypeError(\"Unrecognised MetaProperty\");\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Identifier\"] },\n        ),\n      ),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(\n        assertNodeType(\n          \"Identifier\",\n          \"Pattern\",\n          \"RestElement\",\n          \"TSParameterProperty\",\n        ),\n      ),\n    ),\n  },\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"RestElement\", \"ObjectProperty\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\", \"typeParameters\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TemplateElement\")),\n      ),\n    },\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.YieldExpression, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && !node.argument) {\n              throw new TypeError(\n                \"Property delegate of YieldExpression cannot be true if there is no argument\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n      ),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\", \"typeAnnotation\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n", "import {\n  defineAliasedType,\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils\";\n\nconst defineType = defineAliasedType(\"Flow\");\n\nconst defineInterfaceishType = (\n  name: \"DeclareClass\" | \"DeclareInterface\" | \"InterfaceDeclaration\",\n) => {\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      \"mixins\",\n      \"implements\",\n      \"body\",\n    ],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      implements: validateOptional(arrayOfType(\"ClassImplements\")),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"]),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validate(arrayOfType(\"FunctionTypeParam\")),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    this: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"]),\n    ),\n    indexers: {\n      validate: arrayOfType(\"ObjectTypeIndexer\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    callProperties: {\n      validate: arrayOfType(\"ObjectTypeCallProperty\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    internalSlots: {\n      validate: arrayOfType(\"ObjectTypeInternalSlot\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: validateType([\"Identifier\", \"StringLiteral\"]),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\n// Enums\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    body: validateType([\n      \"EnumBooleanBody\",\n      \"EnumNumberBody\",\n      \"EnumStringBody\",\n      \"EnumSymbolBody\",\n    ]),\n  },\n});\n\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumBooleanMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumNumberMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType([\"EnumStringMember\", \"EnumDefaultedMember\"]),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"BooleanLiteral\"),\n  },\n});\n\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"NumericLiteral\"),\n  },\n});\n\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n  },\n});\n", "import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n", "import { ALIAS_KEYS } from \"./utils\";\n\nexport const PLACEHOLDERS = [\n  \"Identifier\",\n  \"StringLiteral\",\n  \"Expression\",\n  \"Statement\",\n  \"Declaration\",\n  \"BlockStatement\",\n  \"ClassBody\",\n  \"Pattern\",\n] as const;\n\nexport const PLACEHOLDERS_ALIAS: Record<string, string[]> = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"],\n};\n\nfor (const type of PLACEHOLDERS) {\n  const alias = ALIAS_KEYS[type];\n  if (alias?.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nexport const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]> = {};\n\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n", "import {\n  defineAliasedType,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n} from \"./utils\";\nimport { PLACEHOLDERS } from \"./placeholders\";\n\nconst defineType = defineAliasedType(\"Miscellaneous\");\n\nif (!process.env.BABEL_8_BREAKING) {\n  defineType(\"Noop\", {\n    visitor: [],\n  });\n}\n\ndefineType(\"Placeholder\", {\n  visitor: [],\n  builder: [\"expectedNode\", \"name\"],\n  // aliases: [], defined in placeholders.js\n  fields: {\n    name: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    expectedNode: {\n      validate: assertOneOf(...PLACEHOLDERS),\n    },\n  },\n});\n\ndefineType(\"V8IntrinsicIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n", "import defineType, {\n  assertEach,\n  assertNodeType,\n  assertValueType,\n  chain,\n} from \"./utils\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING\n    ? {\n        object: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n        callee: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n      }\n    : {\n        object: {\n          validate: assertNodeType(\"Expression\"),\n        },\n        callee: {\n          validate: assertNodeType(\"Expression\"),\n        },\n      },\n});\n\ndefineType(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    value: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    async: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ObjectProperty\", \"SpreadElement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\", \"SpreadElement\")),\n      ),\n      default: [],\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\n// https://github.com/tc39/proposal-js-module-blocks\ndefineType(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"Program\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-hack-pipes\ndefineType(\"TopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-smart-pipes\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n", "import {\n  defineAliasedType,\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils\";\nimport {\n  functionDeclarationCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./core\";\nimport is from \"../validators/is\";\n\nconst defineType = defineAliasedType(\"TypeScript\");\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeAnnotation\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeParameterDeclaration\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n});\n\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"], // TODO: This isn't usable in general as an LVal. Should have a \"Parameter\" alias.\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n    override: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = () => ({\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  [process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\"]: validateArrayOfType(\n    [\"Identifier\", \"RestElement\"],\n  ),\n  [process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\"]:\n    validateOptionalType(\"TSTypeAnnotation\"),\n});\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: signatureDeclarationCommon(),\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = () => ({\n  key: validateType(\"Expression\"),\n  computed: { default: false },\n  optional: validateOptional(bool),\n});\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: {\n    ...namedTypeElementCommon(),\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    initializer: validateOptionalType(\"Expression\"),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"key\",\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: {\n    ...signatureDeclarationCommon(),\n    ...namedTypeElementCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    static: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSBigIntKeyword\",\n  \"TSIntrinsicKeyword\",\n  \"TSNeverKeyword\",\n  \"TSNullKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSVoidKeyword\",\n] as const;\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n};\n\ndefineType(\"TSFunctionType\", {\n  ...fnOrCtrBase,\n  fields: signatureDeclarationCommon(),\n});\ndefineType(\"TSConstructorType\", {\n  ...fnOrCtrBase,\n  fields: {\n    ...signatureDeclarationCommon(),\n    abstract: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: validateType([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    asserts: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\", \"typeParameters\"],\n  fields: {\n    exprName: validateType([\"TSEntityName\", \"TSImportType\"]),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType([\"TSType\", \"TSNamedTupleMember\"]),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: validateType(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false,\n    },\n    elementType: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: validate(assertValueType(\"string\")),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeParameter: validateType(\"TSTypeParameter\"),\n    optional: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n    nameType: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: (function () {\n        const unaryExpression = assertNodeType(\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const unaryOperator = assertOneOf(\"-\");\n\n        const literal = assertNodeType(\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n        );\n        function validator(parent: any, key: string, node: any) {\n          // type A = -1 | 1;\n          if (is(\"UnaryExpression\", node)) {\n            // check operator first\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            // type A = 'foo' | 'bar' | false | 1;\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n          \"UnaryExpression\",\n        ];\n\n        return validator;\n      })(),\n    },\n  },\n});\n\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(arrayOfType(\"TSExpressionWithTypeArguments\")),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInstantiationExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\nconst TSTypeExpression = {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSAsExpression\", TSTypeExpression);\ndefineType(\"TSSatisfiesExpression\", TSTypeExpression);\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: validateOptional(bool),\n    const: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    members: validateArrayOfType(\"TSEnumMember\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    global: validateOptional(bool),\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType([\"TSModuleBlock\", \"TSModuleDeclaration\"]),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\", \"FunctionParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: validate(bool),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType([\n      \"TSEntityName\",\n      \"TSExternalModuleReference\",\n    ]),\n    importKind: {\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSTypeParameter\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: !process.env.BABEL_8_BREAKING\n        ? assertValueType(\"string\")\n        : assertNodeType(\"Identifier\"),\n    },\n    in: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    out: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n", "import toFastProperties from \"to-fast-properties\";\nimport \"./core\";\nimport \"./flow\";\nimport \"./jsx\";\nimport \"./misc\";\nimport \"./experimental\";\nimport \"./typescript\";\nimport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n} from \"./utils\";\nimport {\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n} from \"./placeholders\";\n\n// We do this here, because at this point the visitor keys should be ready and setup\ntoFastProperties(VISITOR_KEYS);\ntoFastProperties(ALIAS_KEYS);\ntoFastProperties(FLIPPED_ALIAS_KEYS);\ntoFastProperties(NODE_FIELDS);\ntoFastProperties(BUILDER_KEYS);\ntoFastProperties(DEPRECATED_KEYS);\n\ntoFastProperties(PLACEHOLDERS_ALIAS);\ntoFastProperties(PLACEHOLDERS_FLIPPED_ALIAS);\n\nconst TYPES: Array<string> = [].concat(\n  Object.keys(VISITOR_KEYS),\n  Object.keys(FLIPPED_ALIAS_KEYS),\n  Object.keys(DEPRECATED_KEYS),\n);\n\nexport {\n  VISITOR_KEYS,\n  ALIAS_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  NODE_FIELDS,\n  BUILDER_KEYS,\n  DEPRECATED_KEYS,\n  NODE_PARENT_VALIDATIONS,\n  PLACEHOLDERS,\n  PLACEHOLDERS_ALIAS,\n  PLACEHOLDERS_FLIPPED_ALIAS,\n  TYPES,\n};\n\nexport type { FieldOptions } from \"./utils\";\n", "import {\n  NODE_FIELDS,\n  NODE_PARENT_VALIDATIONS,\n  type FieldOptions,\n} from \"../definitions\";\nimport type * as t from \"..\";\n\nexport default function validate(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n): void {\n  if (!node) return;\n\n  const fields = NODE_FIELDS[node.type];\n  if (!fields) return;\n\n  const field = fields[key];\n  validateField(node, key, val, field);\n  validateChild(node, key, val);\n}\n\nexport function validateField(\n  node: t.Node | undefined | null,\n  key: string,\n  val: any,\n  field: FieldOptions | undefined | null,\n): void {\n  if (!field?.validate) return;\n  if (field.optional && val == null) return;\n\n  field.validate(node, key, val);\n}\n\nexport function validateChild(\n  node: t.Node | undefined | null,\n  key: string,\n  val?: t.Node | undefined | null,\n) {\n  if (val == null) return;\n  const validate = NODE_PARENT_VALIDATIONS[val.type];\n  if (!validate) return;\n  validate(node, key, val);\n}\n", "import validate from \"../validators/validate\";\nimport type * as t from \"..\";\nimport { BUILDER_KEYS } from \"..\";\n\nexport default function validateNode<N extends t.Node>(node: N) {\n  // todo: because keys not in BUILDER_KEYS are not validated - this actually allows invalid nodes in some cases\n  const keys = BUILDER_KEYS[node.type] as (keyof N & string)[];\n  for (const key of keys) {\n    validate(node, key, node[key]);\n  }\n  return node;\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport validateNode from \"../validateNode\";\nimport type * as t from \"../..\";\nexport function arrayExpression(\n  elements: Array<null | t.Expression | t.SpreadElement> = [],\n): t.ArrayExpression {\n  return validateNode<t.ArrayExpression>({\n    type: \"ArrayExpression\",\n    elements,\n  });\n}\nexport function assignmentExpression(\n  operator: string,\n  left: t.LVal,\n  right: t.Expression,\n): t.AssignmentExpression {\n  return validateNode<t.AssignmentExpression>({\n    type: \"AssignmentExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function binaryExpression(\n  operator:\n    | \"+\"\n    | \"-\"\n    | \"/\"\n    | \"%\"\n    | \"*\"\n    | \"**\"\n    | \"&\"\n    | \"|\"\n    | \">>\"\n    | \">>>\"\n    | \"<<\"\n    | \"^\"\n    | \"==\"\n    | \"===\"\n    | \"!=\"\n    | \"!==\"\n    | \"in\"\n    | \"instanceof\"\n    | \">\"\n    | \"<\"\n    | \">=\"\n    | \"<=\"\n    | \"|>\",\n  left: t.Expression | t.PrivateName,\n  right: t.Expression,\n): t.BinaryExpression {\n  return validateNode<t.BinaryExpression>({\n    type: \"BinaryExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function interpreterDirective(value: string): t.InterpreterDirective {\n  return validateNode<t.InterpreterDirective>({\n    type: \"InterpreterDirective\",\n    value,\n  });\n}\nexport function directive(value: t.DirectiveLiteral): t.Directive {\n  return validateNode<t.Directive>({\n    type: \"Directive\",\n    value,\n  });\n}\nexport function directiveLiteral(value: string): t.DirectiveLiteral {\n  return validateNode<t.DirectiveLiteral>({\n    type: \"DirectiveLiteral\",\n    value,\n  });\n}\nexport function blockStatement(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n): t.BlockStatement {\n  return validateNode<t.BlockStatement>({\n    type: \"BlockStatement\",\n    body,\n    directives,\n  });\n}\nexport function breakStatement(\n  label: t.Identifier | null = null,\n): t.BreakStatement {\n  return validateNode<t.BreakStatement>({\n    type: \"BreakStatement\",\n    label,\n  });\n}\nexport function callExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.CallExpression {\n  return validateNode<t.CallExpression>({\n    type: \"CallExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function catchClause(\n  param:\n    | t.Identifier\n    | t.ArrayPattern\n    | t.ObjectPattern\n    | null\n    | undefined = null,\n  body: t.BlockStatement,\n): t.CatchClause {\n  return validateNode<t.CatchClause>({\n    type: \"CatchClause\",\n    param,\n    body,\n  });\n}\nexport function conditionalExpression(\n  test: t.Expression,\n  consequent: t.Expression,\n  alternate: t.Expression,\n): t.ConditionalExpression {\n  return validateNode<t.ConditionalExpression>({\n    type: \"ConditionalExpression\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function continueStatement(\n  label: t.Identifier | null = null,\n): t.ContinueStatement {\n  return validateNode<t.ContinueStatement>({\n    type: \"ContinueStatement\",\n    label,\n  });\n}\nexport function debuggerStatement(): t.DebuggerStatement {\n  return {\n    type: \"DebuggerStatement\",\n  };\n}\nexport function doWhileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.DoWhileStatement {\n  return validateNode<t.DoWhileStatement>({\n    type: \"DoWhileStatement\",\n    test,\n    body,\n  });\n}\nexport function emptyStatement(): t.EmptyStatement {\n  return {\n    type: \"EmptyStatement\",\n  };\n}\nexport function expressionStatement(\n  expression: t.Expression,\n): t.ExpressionStatement {\n  return validateNode<t.ExpressionStatement>({\n    type: \"ExpressionStatement\",\n    expression,\n  });\n}\nexport function file(\n  program: t.Program,\n  comments: Array<t.CommentBlock | t.CommentLine> | null = null,\n  tokens: Array<any> | null = null,\n): t.File {\n  return validateNode<t.File>({\n    type: \"File\",\n    program,\n    comments,\n    tokens,\n  });\n}\nexport function forInStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n): t.ForInStatement {\n  return validateNode<t.ForInStatement>({\n    type: \"ForInStatement\",\n    left,\n    right,\n    body,\n  });\n}\nexport function forStatement(\n  init: t.VariableDeclaration | t.Expression | null | undefined = null,\n  test: t.Expression | null | undefined = null,\n  update: t.Expression | null | undefined = null,\n  body: t.Statement,\n): t.ForStatement {\n  return validateNode<t.ForStatement>({\n    type: \"ForStatement\",\n    init,\n    test,\n    update,\n    body,\n  });\n}\nexport function functionDeclaration(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionDeclaration {\n  return validateNode<t.FunctionDeclaration>({\n    type: \"FunctionDeclaration\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function functionExpression(\n  id: t.Identifier | null | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  generator: boolean = false,\n  async: boolean = false,\n): t.FunctionExpression {\n  return validateNode<t.FunctionExpression>({\n    type: \"FunctionExpression\",\n    id,\n    params,\n    body,\n    generator,\n    async,\n  });\n}\nexport function identifier(name: string): t.Identifier {\n  return validateNode<t.Identifier>({\n    type: \"Identifier\",\n    name,\n  });\n}\nexport function ifStatement(\n  test: t.Expression,\n  consequent: t.Statement,\n  alternate: t.Statement | null = null,\n): t.IfStatement {\n  return validateNode<t.IfStatement>({\n    type: \"IfStatement\",\n    test,\n    consequent,\n    alternate,\n  });\n}\nexport function labeledStatement(\n  label: t.Identifier,\n  body: t.Statement,\n): t.LabeledStatement {\n  return validateNode<t.LabeledStatement>({\n    type: \"LabeledStatement\",\n    label,\n    body,\n  });\n}\nexport function stringLiteral(value: string): t.StringLiteral {\n  return validateNode<t.StringLiteral>({\n    type: \"StringLiteral\",\n    value,\n  });\n}\nexport function numericLiteral(value: number): t.NumericLiteral {\n  return validateNode<t.NumericLiteral>({\n    type: \"NumericLiteral\",\n    value,\n  });\n}\nexport function nullLiteral(): t.NullLiteral {\n  return {\n    type: \"NullLiteral\",\n  };\n}\nexport function booleanLiteral(value: boolean): t.BooleanLiteral {\n  return validateNode<t.BooleanLiteral>({\n    type: \"BooleanLiteral\",\n    value,\n  });\n}\nexport function regExpLiteral(\n  pattern: string,\n  flags: string = \"\",\n): t.RegExpLiteral {\n  return validateNode<t.RegExpLiteral>({\n    type: \"RegExpLiteral\",\n    pattern,\n    flags,\n  });\n}\nexport function logicalExpression(\n  operator: \"||\" | \"&&\" | \"??\",\n  left: t.Expression,\n  right: t.Expression,\n): t.LogicalExpression {\n  return validateNode<t.LogicalExpression>({\n    type: \"LogicalExpression\",\n    operator,\n    left,\n    right,\n  });\n}\nexport function memberExpression(\n  object: t.Expression | t.Super,\n  property: t.Expression | t.Identifier | t.PrivateName,\n  computed: boolean = false,\n  optional: true | false | null = null,\n): t.MemberExpression {\n  return validateNode<t.MemberExpression>({\n    type: \"MemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function newExpression(\n  callee: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n): t.NewExpression {\n  return validateNode<t.NewExpression>({\n    type: \"NewExpression\",\n    callee,\n    arguments: _arguments,\n  });\n}\nexport function program(\n  body: Array<t.Statement>,\n  directives: Array<t.Directive> = [],\n  sourceType: \"script\" | \"module\" = \"script\",\n  interpreter: t.InterpreterDirective | null = null,\n): t.Program {\n  return validateNode<t.Program>({\n    type: \"Program\",\n    body,\n    directives,\n    sourceType,\n    interpreter,\n    sourceFile: null,\n  });\n}\nexport function objectExpression(\n  properties: Array<t.ObjectMethod | t.ObjectProperty | t.SpreadElement>,\n): t.ObjectExpression {\n  return validateNode<t.ObjectExpression>({\n    type: \"ObjectExpression\",\n    properties,\n  });\n}\nexport function objectMethod(\n  kind: \"method\" | \"get\" | \"set\" | undefined = \"method\",\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ObjectMethod {\n  return validateNode<t.ObjectMethod>({\n    type: \"ObjectMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    generator,\n    async,\n  });\n}\nexport function objectProperty(\n  key:\n    | t.Expression\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.DecimalLiteral\n    | t.PrivateName,\n  value: t.Expression | t.PatternLike,\n  computed: boolean = false,\n  shorthand: boolean = false,\n  decorators: Array<t.Decorator> | null = null,\n): t.ObjectProperty {\n  return validateNode<t.ObjectProperty>({\n    type: \"ObjectProperty\",\n    key,\n    value,\n    computed,\n    shorthand,\n    decorators,\n  });\n}\nexport function restElement(argument: t.LVal): t.RestElement {\n  return validateNode<t.RestElement>({\n    type: \"RestElement\",\n    argument,\n  });\n}\nexport function returnStatement(\n  argument: t.Expression | null = null,\n): t.ReturnStatement {\n  return validateNode<t.ReturnStatement>({\n    type: \"ReturnStatement\",\n    argument,\n  });\n}\nexport function sequenceExpression(\n  expressions: Array<t.Expression>,\n): t.SequenceExpression {\n  return validateNode<t.SequenceExpression>({\n    type: \"SequenceExpression\",\n    expressions,\n  });\n}\nexport function parenthesizedExpression(\n  expression: t.Expression,\n): t.ParenthesizedExpression {\n  return validateNode<t.ParenthesizedExpression>({\n    type: \"ParenthesizedExpression\",\n    expression,\n  });\n}\nexport function switchCase(\n  test: t.Expression | null | undefined = null,\n  consequent: Array<t.Statement>,\n): t.SwitchCase {\n  return validateNode<t.SwitchCase>({\n    type: \"SwitchCase\",\n    test,\n    consequent,\n  });\n}\nexport function switchStatement(\n  discriminant: t.Expression,\n  cases: Array<t.SwitchCase>,\n): t.SwitchStatement {\n  return validateNode<t.SwitchStatement>({\n    type: \"SwitchStatement\",\n    discriminant,\n    cases,\n  });\n}\nexport function thisExpression(): t.ThisExpression {\n  return {\n    type: \"ThisExpression\",\n  };\n}\nexport function throwStatement(argument: t.Expression): t.ThrowStatement {\n  return validateNode<t.ThrowStatement>({\n    type: \"ThrowStatement\",\n    argument,\n  });\n}\nexport function tryStatement(\n  block: t.BlockStatement,\n  handler: t.CatchClause | null = null,\n  finalizer: t.BlockStatement | null = null,\n): t.TryStatement {\n  return validateNode<t.TryStatement>({\n    type: \"TryStatement\",\n    block,\n    handler,\n    finalizer,\n  });\n}\nexport function unaryExpression(\n  operator: \"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\",\n  argument: t.Expression,\n  prefix: boolean = true,\n): t.UnaryExpression {\n  return validateNode<t.UnaryExpression>({\n    type: \"UnaryExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function updateExpression(\n  operator: \"++\" | \"--\",\n  argument: t.Expression,\n  prefix: boolean = false,\n): t.UpdateExpression {\n  return validateNode<t.UpdateExpression>({\n    type: \"UpdateExpression\",\n    operator,\n    argument,\n    prefix,\n  });\n}\nexport function variableDeclaration(\n  kind: \"var\" | \"let\" | \"const\" | \"using\",\n  declarations: Array<t.VariableDeclarator>,\n): t.VariableDeclaration {\n  return validateNode<t.VariableDeclaration>({\n    type: \"VariableDeclaration\",\n    kind,\n    declarations,\n  });\n}\nexport function variableDeclarator(\n  id: t.LVal,\n  init: t.Expression | null = null,\n): t.VariableDeclarator {\n  return validateNode<t.VariableDeclarator>({\n    type: \"VariableDeclarator\",\n    id,\n    init,\n  });\n}\nexport function whileStatement(\n  test: t.Expression,\n  body: t.Statement,\n): t.WhileStatement {\n  return validateNode<t.WhileStatement>({\n    type: \"WhileStatement\",\n    test,\n    body,\n  });\n}\nexport function withStatement(\n  object: t.Expression,\n  body: t.Statement,\n): t.WithStatement {\n  return validateNode<t.WithStatement>({\n    type: \"WithStatement\",\n    object,\n    body,\n  });\n}\nexport function assignmentPattern(\n  left:\n    | t.Identifier\n    | t.ObjectPattern\n    | t.ArrayPattern\n    | t.MemberExpression\n    | t.TSAsExpression\n    | t.TSSatisfiesExpression\n    | t.TSTypeAssertion\n    | t.TSNonNullExpression,\n  right: t.Expression,\n): t.AssignmentPattern {\n  return validateNode<t.AssignmentPattern>({\n    type: \"AssignmentPattern\",\n    left,\n    right,\n  });\n}\nexport function arrayPattern(\n  elements: Array<null | t.PatternLike | t.LVal>,\n): t.ArrayPattern {\n  return validateNode<t.ArrayPattern>({\n    type: \"ArrayPattern\",\n    elements,\n  });\n}\nexport function arrowFunctionExpression(\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  body: t.BlockStatement | t.Expression,\n  async: boolean = false,\n): t.ArrowFunctionExpression {\n  return validateNode<t.ArrowFunctionExpression>({\n    type: \"ArrowFunctionExpression\",\n    params,\n    body,\n    async,\n    expression: null,\n  });\n}\nexport function classBody(\n  body: Array<\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty\n    | t.TSDeclareMethod\n    | t.TSIndexSignature\n    | t.StaticBlock\n  >,\n): t.ClassBody {\n  return validateNode<t.ClassBody>({\n    type: \"ClassBody\",\n    body,\n  });\n}\nexport function classExpression(\n  id: t.Identifier | null | undefined = null,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassExpression {\n  return validateNode<t.ClassExpression>({\n    type: \"ClassExpression\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function classDeclaration(\n  id: t.Identifier,\n  superClass: t.Expression | null | undefined = null,\n  body: t.ClassBody,\n  decorators: Array<t.Decorator> | null = null,\n): t.ClassDeclaration {\n  return validateNode<t.ClassDeclaration>({\n    type: \"ClassDeclaration\",\n    id,\n    superClass,\n    body,\n    decorators,\n  });\n}\nexport function exportAllDeclaration(\n  source: t.StringLiteral,\n): t.ExportAllDeclaration {\n  return validateNode<t.ExportAllDeclaration>({\n    type: \"ExportAllDeclaration\",\n    source,\n  });\n}\nexport function exportDefaultDeclaration(\n  declaration:\n    | t.TSDeclareFunction\n    | t.FunctionDeclaration\n    | t.ClassDeclaration\n    | t.Expression,\n): t.ExportDefaultDeclaration {\n  return validateNode<t.ExportDefaultDeclaration>({\n    type: \"ExportDefaultDeclaration\",\n    declaration,\n  });\n}\nexport function exportNamedDeclaration(\n  declaration: t.Declaration | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportDefaultSpecifier | t.ExportNamespaceSpecifier\n  > = [],\n  source: t.StringLiteral | null = null,\n): t.ExportNamedDeclaration {\n  return validateNode<t.ExportNamedDeclaration>({\n    type: \"ExportNamedDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function exportSpecifier(\n  local: t.Identifier,\n  exported: t.Identifier | t.StringLiteral,\n): t.ExportSpecifier {\n  return validateNode<t.ExportSpecifier>({\n    type: \"ExportSpecifier\",\n    local,\n    exported,\n  });\n}\nexport function forOfStatement(\n  left: t.VariableDeclaration | t.LVal,\n  right: t.Expression,\n  body: t.Statement,\n  _await: boolean = false,\n): t.ForOfStatement {\n  return validateNode<t.ForOfStatement>({\n    type: \"ForOfStatement\",\n    left,\n    right,\n    body,\n    await: _await,\n  });\n}\nexport function importDeclaration(\n  specifiers: Array<\n    t.ImportSpecifier | t.ImportDefaultSpecifier | t.ImportNamespaceSpecifier\n  >,\n  source: t.StringLiteral,\n): t.ImportDeclaration {\n  return validateNode<t.ImportDeclaration>({\n    type: \"ImportDeclaration\",\n    specifiers,\n    source,\n  });\n}\nexport function importDefaultSpecifier(\n  local: t.Identifier,\n): t.ImportDefaultSpecifier {\n  return validateNode<t.ImportDefaultSpecifier>({\n    type: \"ImportDefaultSpecifier\",\n    local,\n  });\n}\nexport function importNamespaceSpecifier(\n  local: t.Identifier,\n): t.ImportNamespaceSpecifier {\n  return validateNode<t.ImportNamespaceSpecifier>({\n    type: \"ImportNamespaceSpecifier\",\n    local,\n  });\n}\nexport function importSpecifier(\n  local: t.Identifier,\n  imported: t.Identifier | t.StringLiteral,\n): t.ImportSpecifier {\n  return validateNode<t.ImportSpecifier>({\n    type: \"ImportSpecifier\",\n    local,\n    imported,\n  });\n}\nexport function metaProperty(\n  meta: t.Identifier,\n  property: t.Identifier,\n): t.MetaProperty {\n  return validateNode<t.MetaProperty>({\n    type: \"MetaProperty\",\n    meta,\n    property,\n  });\n}\nexport function classMethod(\n  kind: \"get\" | \"set\" | \"method\" | \"constructor\" | undefined = \"method\",\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  computed: boolean = false,\n  _static: boolean = false,\n  generator: boolean = false,\n  async: boolean = false,\n): t.ClassMethod {\n  return validateNode<t.ClassMethod>({\n    type: \"ClassMethod\",\n    kind,\n    key,\n    params,\n    body,\n    computed,\n    static: _static,\n    generator,\n    async,\n  });\n}\nexport function objectPattern(\n  properties: Array<t.RestElement | t.ObjectProperty>,\n): t.ObjectPattern {\n  return validateNode<t.ObjectPattern>({\n    type: \"ObjectPattern\",\n    properties,\n  });\n}\nexport function spreadElement(argument: t.Expression): t.SpreadElement {\n  return validateNode<t.SpreadElement>({\n    type: \"SpreadElement\",\n    argument,\n  });\n}\nfunction _super(): t.Super {\n  return {\n    type: \"Super\",\n  };\n}\nexport { _super as super };\nexport function taggedTemplateExpression(\n  tag: t.Expression,\n  quasi: t.TemplateLiteral,\n): t.TaggedTemplateExpression {\n  return validateNode<t.TaggedTemplateExpression>({\n    type: \"TaggedTemplateExpression\",\n    tag,\n    quasi,\n  });\n}\nexport function templateElement(\n  value: { raw: string; cooked?: string },\n  tail: boolean = false,\n): t.TemplateElement {\n  return validateNode<t.TemplateElement>({\n    type: \"TemplateElement\",\n    value,\n    tail,\n  });\n}\nexport function templateLiteral(\n  quasis: Array<t.TemplateElement>,\n  expressions: Array<t.Expression | t.TSType>,\n): t.TemplateLiteral {\n  return validateNode<t.TemplateLiteral>({\n    type: \"TemplateLiteral\",\n    quasis,\n    expressions,\n  });\n}\nexport function yieldExpression(\n  argument: t.Expression | null = null,\n  delegate: boolean = false,\n): t.YieldExpression {\n  return validateNode<t.YieldExpression>({\n    type: \"YieldExpression\",\n    argument,\n    delegate,\n  });\n}\nexport function awaitExpression(argument: t.Expression): t.AwaitExpression {\n  return validateNode<t.AwaitExpression>({\n    type: \"AwaitExpression\",\n    argument,\n  });\n}\nfunction _import(): t.Import {\n  return {\n    type: \"Import\",\n  };\n}\nexport { _import as import };\nexport function bigIntLiteral(value: string): t.BigIntLiteral {\n  return validateNode<t.BigIntLiteral>({\n    type: \"BigIntLiteral\",\n    value,\n  });\n}\nexport function exportNamespaceSpecifier(\n  exported: t.Identifier,\n): t.ExportNamespaceSpecifier {\n  return validateNode<t.ExportNamespaceSpecifier>({\n    type: \"ExportNamespaceSpecifier\",\n    exported,\n  });\n}\nexport function optionalMemberExpression(\n  object: t.Expression,\n  property: t.Expression | t.Identifier,\n  computed: boolean | undefined = false,\n  optional: boolean,\n): t.OptionalMemberExpression {\n  return validateNode<t.OptionalMemberExpression>({\n    type: \"OptionalMemberExpression\",\n    object,\n    property,\n    computed,\n    optional,\n  });\n}\nexport function optionalCallExpression(\n  callee: t.Expression,\n  _arguments: Array<\n    t.Expression | t.SpreadElement | t.JSXNamespacedName | t.ArgumentPlaceholder\n  >,\n  optional: boolean,\n): t.OptionalCallExpression {\n  return validateNode<t.OptionalCallExpression>({\n    type: \"OptionalCallExpression\",\n    callee,\n    arguments: _arguments,\n    optional,\n  });\n}\nexport function classProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassProperty {\n  return validateNode<t.ClassProperty>({\n    type: \"ClassProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classAccessorProperty(\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression\n    | t.PrivateName,\n  value: t.Expression | null = null,\n  typeAnnotation: t.TypeAnnotation | t.TSTypeAnnotation | t.Noop | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  computed: boolean = false,\n  _static: boolean = false,\n): t.ClassAccessorProperty {\n  return validateNode<t.ClassAccessorProperty>({\n    type: \"ClassAccessorProperty\",\n    key,\n    value,\n    typeAnnotation,\n    decorators,\n    computed,\n    static: _static,\n  });\n}\nexport function classPrivateProperty(\n  key: t.PrivateName,\n  value: t.Expression | null = null,\n  decorators: Array<t.Decorator> | null = null,\n  _static: boolean = false,\n): t.ClassPrivateProperty {\n  return validateNode<t.ClassPrivateProperty>({\n    type: \"ClassPrivateProperty\",\n    key,\n    value,\n    decorators,\n    static: _static,\n  });\n}\nexport function classPrivateMethod(\n  kind: \"get\" | \"set\" | \"method\" | undefined = \"method\",\n  key: t.PrivateName,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  body: t.BlockStatement,\n  _static: boolean = false,\n): t.ClassPrivateMethod {\n  return validateNode<t.ClassPrivateMethod>({\n    type: \"ClassPrivateMethod\",\n    kind,\n    key,\n    params,\n    body,\n    static: _static,\n  });\n}\nexport function privateName(id: t.Identifier): t.PrivateName {\n  return validateNode<t.PrivateName>({\n    type: \"PrivateName\",\n    id,\n  });\n}\nexport function staticBlock(body: Array<t.Statement>): t.StaticBlock {\n  return validateNode<t.StaticBlock>({\n    type: \"StaticBlock\",\n    body,\n  });\n}\nexport function anyTypeAnnotation(): t.AnyTypeAnnotation {\n  return {\n    type: \"AnyTypeAnnotation\",\n  };\n}\nexport function arrayTypeAnnotation(\n  elementType: t.FlowType,\n): t.ArrayTypeAnnotation {\n  return validateNode<t.ArrayTypeAnnotation>({\n    type: \"ArrayTypeAnnotation\",\n    elementType,\n  });\n}\nexport function booleanTypeAnnotation(): t.BooleanTypeAnnotation {\n  return {\n    type: \"BooleanTypeAnnotation\",\n  };\n}\nexport function booleanLiteralTypeAnnotation(\n  value: boolean,\n): t.BooleanLiteralTypeAnnotation {\n  return validateNode<t.BooleanLiteralTypeAnnotation>({\n    type: \"BooleanLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function nullLiteralTypeAnnotation(): t.NullLiteralTypeAnnotation {\n  return {\n    type: \"NullLiteralTypeAnnotation\",\n  };\n}\nexport function classImplements(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.ClassImplements {\n  return validateNode<t.ClassImplements>({\n    type: \"ClassImplements\",\n    id,\n    typeParameters,\n  });\n}\nexport function declareClass(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareClass {\n  return validateNode<t.DeclareClass>({\n    type: \"DeclareClass\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareFunction(id: t.Identifier): t.DeclareFunction {\n  return validateNode<t.DeclareFunction>({\n    type: \"DeclareFunction\",\n    id,\n  });\n}\nexport function declareInterface(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.DeclareInterface {\n  return validateNode<t.DeclareInterface>({\n    type: \"DeclareInterface\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function declareModule(\n  id: t.Identifier | t.StringLiteral,\n  body: t.BlockStatement,\n  kind: \"CommonJS\" | \"ES\" | null = null,\n): t.DeclareModule {\n  return validateNode<t.DeclareModule>({\n    type: \"DeclareModule\",\n    id,\n    body,\n    kind,\n  });\n}\nexport function declareModuleExports(\n  typeAnnotation: t.TypeAnnotation,\n): t.DeclareModuleExports {\n  return validateNode<t.DeclareModuleExports>({\n    type: \"DeclareModuleExports\",\n    typeAnnotation,\n  });\n}\nexport function declareTypeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.DeclareTypeAlias {\n  return validateNode<t.DeclareTypeAlias>({\n    type: \"DeclareTypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function declareOpaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null = null,\n  supertype: t.FlowType | null = null,\n): t.DeclareOpaqueType {\n  return validateNode<t.DeclareOpaqueType>({\n    type: \"DeclareOpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n  });\n}\nexport function declareVariable(id: t.Identifier): t.DeclareVariable {\n  return validateNode<t.DeclareVariable>({\n    type: \"DeclareVariable\",\n    id,\n  });\n}\nexport function declareExportDeclaration(\n  declaration: t.Flow | null = null,\n  specifiers: Array<\n    t.ExportSpecifier | t.ExportNamespaceSpecifier\n  > | null = null,\n  source: t.StringLiteral | null = null,\n): t.DeclareExportDeclaration {\n  return validateNode<t.DeclareExportDeclaration>({\n    type: \"DeclareExportDeclaration\",\n    declaration,\n    specifiers,\n    source,\n  });\n}\nexport function declareExportAllDeclaration(\n  source: t.StringLiteral,\n): t.DeclareExportAllDeclaration {\n  return validateNode<t.DeclareExportAllDeclaration>({\n    type: \"DeclareExportAllDeclaration\",\n    source,\n  });\n}\nexport function declaredPredicate(value: t.Flow): t.DeclaredPredicate {\n  return validateNode<t.DeclaredPredicate>({\n    type: \"DeclaredPredicate\",\n    value,\n  });\n}\nexport function existsTypeAnnotation(): t.ExistsTypeAnnotation {\n  return {\n    type: \"ExistsTypeAnnotation\",\n  };\n}\nexport function functionTypeAnnotation(\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  params: Array<t.FunctionTypeParam>,\n  rest: t.FunctionTypeParam | null | undefined = null,\n  returnType: t.FlowType,\n): t.FunctionTypeAnnotation {\n  return validateNode<t.FunctionTypeAnnotation>({\n    type: \"FunctionTypeAnnotation\",\n    typeParameters,\n    params,\n    rest,\n    returnType,\n  });\n}\nexport function functionTypeParam(\n  name: t.Identifier | null | undefined = null,\n  typeAnnotation: t.FlowType,\n): t.FunctionTypeParam {\n  return validateNode<t.FunctionTypeParam>({\n    type: \"FunctionTypeParam\",\n    name,\n    typeAnnotation,\n  });\n}\nexport function genericTypeAnnotation(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.GenericTypeAnnotation {\n  return validateNode<t.GenericTypeAnnotation>({\n    type: \"GenericTypeAnnotation\",\n    id,\n    typeParameters,\n  });\n}\nexport function inferredPredicate(): t.InferredPredicate {\n  return {\n    type: \"InferredPredicate\",\n  };\n}\nexport function interfaceExtends(\n  id: t.Identifier | t.QualifiedTypeIdentifier,\n  typeParameters: t.TypeParameterInstantiation | null = null,\n): t.InterfaceExtends {\n  return validateNode<t.InterfaceExtends>({\n    type: \"InterfaceExtends\",\n    id,\n    typeParameters,\n  });\n}\nexport function interfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceDeclaration {\n  return validateNode<t.InterfaceDeclaration>({\n    type: \"InterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport function interfaceTypeAnnotation(\n  _extends: Array<t.InterfaceExtends> | null | undefined = null,\n  body: t.ObjectTypeAnnotation,\n): t.InterfaceTypeAnnotation {\n  return validateNode<t.InterfaceTypeAnnotation>({\n    type: \"InterfaceTypeAnnotation\",\n    extends: _extends,\n    body,\n  });\n}\nexport function intersectionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.IntersectionTypeAnnotation {\n  return validateNode<t.IntersectionTypeAnnotation>({\n    type: \"IntersectionTypeAnnotation\",\n    types,\n  });\n}\nexport function mixedTypeAnnotation(): t.MixedTypeAnnotation {\n  return {\n    type: \"MixedTypeAnnotation\",\n  };\n}\nexport function emptyTypeAnnotation(): t.EmptyTypeAnnotation {\n  return {\n    type: \"EmptyTypeAnnotation\",\n  };\n}\nexport function nullableTypeAnnotation(\n  typeAnnotation: t.FlowType,\n): t.NullableTypeAnnotation {\n  return validateNode<t.NullableTypeAnnotation>({\n    type: \"NullableTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function numberLiteralTypeAnnotation(\n  value: number,\n): t.NumberLiteralTypeAnnotation {\n  return validateNode<t.NumberLiteralTypeAnnotation>({\n    type: \"NumberLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function numberTypeAnnotation(): t.NumberTypeAnnotation {\n  return {\n    type: \"NumberTypeAnnotation\",\n  };\n}\nexport function objectTypeAnnotation(\n  properties: Array<t.ObjectTypeProperty | t.ObjectTypeSpreadProperty>,\n  indexers: Array<t.ObjectTypeIndexer> = [],\n  callProperties: Array<t.ObjectTypeCallProperty> = [],\n  internalSlots: Array<t.ObjectTypeInternalSlot> = [],\n  exact: boolean = false,\n): t.ObjectTypeAnnotation {\n  return validateNode<t.ObjectTypeAnnotation>({\n    type: \"ObjectTypeAnnotation\",\n    properties,\n    indexers,\n    callProperties,\n    internalSlots,\n    exact,\n  });\n}\nexport function objectTypeInternalSlot(\n  id: t.Identifier,\n  value: t.FlowType,\n  optional: boolean,\n  _static: boolean,\n  method: boolean,\n): t.ObjectTypeInternalSlot {\n  return validateNode<t.ObjectTypeInternalSlot>({\n    type: \"ObjectTypeInternalSlot\",\n    id,\n    value,\n    optional,\n    static: _static,\n    method,\n  });\n}\nexport function objectTypeCallProperty(\n  value: t.FlowType,\n): t.ObjectTypeCallProperty {\n  return validateNode<t.ObjectTypeCallProperty>({\n    type: \"ObjectTypeCallProperty\",\n    value,\n    static: null,\n  });\n}\nexport function objectTypeIndexer(\n  id: t.Identifier | null | undefined = null,\n  key: t.FlowType,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeIndexer {\n  return validateNode<t.ObjectTypeIndexer>({\n    type: \"ObjectTypeIndexer\",\n    id,\n    key,\n    value,\n    variance,\n    static: null,\n  });\n}\nexport function objectTypeProperty(\n  key: t.Identifier | t.StringLiteral,\n  value: t.FlowType,\n  variance: t.Variance | null = null,\n): t.ObjectTypeProperty {\n  return validateNode<t.ObjectTypeProperty>({\n    type: \"ObjectTypeProperty\",\n    key,\n    value,\n    variance,\n    kind: null,\n    method: null,\n    optional: null,\n    proto: null,\n    static: null,\n  });\n}\nexport function objectTypeSpreadProperty(\n  argument: t.FlowType,\n): t.ObjectTypeSpreadProperty {\n  return validateNode<t.ObjectTypeSpreadProperty>({\n    type: \"ObjectTypeSpreadProperty\",\n    argument,\n  });\n}\nexport function opaqueType(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  supertype: t.FlowType | null | undefined = null,\n  impltype: t.FlowType,\n): t.OpaqueType {\n  return validateNode<t.OpaqueType>({\n    type: \"OpaqueType\",\n    id,\n    typeParameters,\n    supertype,\n    impltype,\n  });\n}\nexport function qualifiedTypeIdentifier(\n  id: t.Identifier,\n  qualification: t.Identifier | t.QualifiedTypeIdentifier,\n): t.QualifiedTypeIdentifier {\n  return validateNode<t.QualifiedTypeIdentifier>({\n    type: \"QualifiedTypeIdentifier\",\n    id,\n    qualification,\n  });\n}\nexport function stringLiteralTypeAnnotation(\n  value: string,\n): t.StringLiteralTypeAnnotation {\n  return validateNode<t.StringLiteralTypeAnnotation>({\n    type: \"StringLiteralTypeAnnotation\",\n    value,\n  });\n}\nexport function stringTypeAnnotation(): t.StringTypeAnnotation {\n  return {\n    type: \"StringTypeAnnotation\",\n  };\n}\nexport function symbolTypeAnnotation(): t.SymbolTypeAnnotation {\n  return {\n    type: \"SymbolTypeAnnotation\",\n  };\n}\nexport function thisTypeAnnotation(): t.ThisTypeAnnotation {\n  return {\n    type: \"ThisTypeAnnotation\",\n  };\n}\nexport function tupleTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.TupleTypeAnnotation {\n  return validateNode<t.TupleTypeAnnotation>({\n    type: \"TupleTypeAnnotation\",\n    types,\n  });\n}\nexport function typeofTypeAnnotation(\n  argument: t.FlowType,\n): t.TypeofTypeAnnotation {\n  return validateNode<t.TypeofTypeAnnotation>({\n    type: \"TypeofTypeAnnotation\",\n    argument,\n  });\n}\nexport function typeAlias(\n  id: t.Identifier,\n  typeParameters: t.TypeParameterDeclaration | null | undefined = null,\n  right: t.FlowType,\n): t.TypeAlias {\n  return validateNode<t.TypeAlias>({\n    type: \"TypeAlias\",\n    id,\n    typeParameters,\n    right,\n  });\n}\nexport function typeAnnotation(typeAnnotation: t.FlowType): t.TypeAnnotation {\n  return validateNode<t.TypeAnnotation>({\n    type: \"TypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport function typeCastExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TypeAnnotation,\n): t.TypeCastExpression {\n  return validateNode<t.TypeCastExpression>({\n    type: \"TypeCastExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport function typeParameter(\n  bound: t.TypeAnnotation | null = null,\n  _default: t.FlowType | null = null,\n  variance: t.Variance | null = null,\n): t.TypeParameter {\n  return validateNode<t.TypeParameter>({\n    type: \"TypeParameter\",\n    bound,\n    default: _default,\n    variance,\n    name: null,\n  });\n}\nexport function typeParameterDeclaration(\n  params: Array<t.TypeParameter>,\n): t.TypeParameterDeclaration {\n  return validateNode<t.TypeParameterDeclaration>({\n    type: \"TypeParameterDeclaration\",\n    params,\n  });\n}\nexport function typeParameterInstantiation(\n  params: Array<t.FlowType>,\n): t.TypeParameterInstantiation {\n  return validateNode<t.TypeParameterInstantiation>({\n    type: \"TypeParameterInstantiation\",\n    params,\n  });\n}\nexport function unionTypeAnnotation(\n  types: Array<t.FlowType>,\n): t.UnionTypeAnnotation {\n  return validateNode<t.UnionTypeAnnotation>({\n    type: \"UnionTypeAnnotation\",\n    types,\n  });\n}\nexport function variance(kind: \"minus\" | \"plus\"): t.Variance {\n  return validateNode<t.Variance>({\n    type: \"Variance\",\n    kind,\n  });\n}\nexport function voidTypeAnnotation(): t.VoidTypeAnnotation {\n  return {\n    type: \"VoidTypeAnnotation\",\n  };\n}\nexport function enumDeclaration(\n  id: t.Identifier,\n  body:\n    | t.EnumBooleanBody\n    | t.EnumNumberBody\n    | t.EnumStringBody\n    | t.EnumSymbolBody,\n): t.EnumDeclaration {\n  return validateNode<t.EnumDeclaration>({\n    type: \"EnumDeclaration\",\n    id,\n    body,\n  });\n}\nexport function enumBooleanBody(\n  members: Array<t.EnumBooleanMember>,\n): t.EnumBooleanBody {\n  return validateNode<t.EnumBooleanBody>({\n    type: \"EnumBooleanBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumNumberBody(\n  members: Array<t.EnumNumberMember>,\n): t.EnumNumberBody {\n  return validateNode<t.EnumNumberBody>({\n    type: \"EnumNumberBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumStringBody(\n  members: Array<t.EnumStringMember | t.EnumDefaultedMember>,\n): t.EnumStringBody {\n  return validateNode<t.EnumStringBody>({\n    type: \"EnumStringBody\",\n    members,\n    explicitType: null,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumSymbolBody(\n  members: Array<t.EnumDefaultedMember>,\n): t.EnumSymbolBody {\n  return validateNode<t.EnumSymbolBody>({\n    type: \"EnumSymbolBody\",\n    members,\n    hasUnknownMembers: null,\n  });\n}\nexport function enumBooleanMember(id: t.Identifier): t.EnumBooleanMember {\n  return validateNode<t.EnumBooleanMember>({\n    type: \"EnumBooleanMember\",\n    id,\n    init: null,\n  });\n}\nexport function enumNumberMember(\n  id: t.Identifier,\n  init: t.NumericLiteral,\n): t.EnumNumberMember {\n  return validateNode<t.EnumNumberMember>({\n    type: \"EnumNumberMember\",\n    id,\n    init,\n  });\n}\nexport function enumStringMember(\n  id: t.Identifier,\n  init: t.StringLiteral,\n): t.EnumStringMember {\n  return validateNode<t.EnumStringMember>({\n    type: \"EnumStringMember\",\n    id,\n    init,\n  });\n}\nexport function enumDefaultedMember(id: t.Identifier): t.EnumDefaultedMember {\n  return validateNode<t.EnumDefaultedMember>({\n    type: \"EnumDefaultedMember\",\n    id,\n  });\n}\nexport function indexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.IndexedAccessType {\n  return validateNode<t.IndexedAccessType>({\n    type: \"IndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport function optionalIndexedAccessType(\n  objectType: t.FlowType,\n  indexType: t.FlowType,\n): t.OptionalIndexedAccessType {\n  return validateNode<t.OptionalIndexedAccessType>({\n    type: \"OptionalIndexedAccessType\",\n    objectType,\n    indexType,\n    optional: null,\n  });\n}\nexport function jsxAttribute(\n  name: t.JSXIdentifier | t.JSXNamespacedName,\n  value:\n    | t.JSXElement\n    | t.JSXFragment\n    | t.StringLiteral\n    | t.JSXExpressionContainer\n    | null = null,\n): t.JSXAttribute {\n  return validateNode<t.JSXAttribute>({\n    type: \"JSXAttribute\",\n    name,\n    value,\n  });\n}\nexport { jsxAttribute as jSXAttribute };\nexport function jsxClosingElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n): t.JSXClosingElement {\n  return validateNode<t.JSXClosingElement>({\n    type: \"JSXClosingElement\",\n    name,\n  });\n}\nexport { jsxClosingElement as jSXClosingElement };\nexport function jsxElement(\n  openingElement: t.JSXOpeningElement,\n  closingElement: t.JSXClosingElement | null | undefined = null,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n  selfClosing: boolean | null = null,\n): t.JSXElement {\n  return validateNode<t.JSXElement>({\n    type: \"JSXElement\",\n    openingElement,\n    closingElement,\n    children,\n    selfClosing,\n  });\n}\nexport { jsxElement as jSXElement };\nexport function jsxEmptyExpression(): t.JSXEmptyExpression {\n  return {\n    type: \"JSXEmptyExpression\",\n  };\n}\nexport { jsxEmptyExpression as jSXEmptyExpression };\nexport function jsxExpressionContainer(\n  expression: t.Expression | t.JSXEmptyExpression,\n): t.JSXExpressionContainer {\n  return validateNode<t.JSXExpressionContainer>({\n    type: \"JSXExpressionContainer\",\n    expression,\n  });\n}\nexport { jsxExpressionContainer as jSXExpressionContainer };\nexport function jsxSpreadChild(expression: t.Expression): t.JSXSpreadChild {\n  return validateNode<t.JSXSpreadChild>({\n    type: \"JSXSpreadChild\",\n    expression,\n  });\n}\nexport { jsxSpreadChild as jSXSpreadChild };\nexport function jsxIdentifier(name: string): t.JSXIdentifier {\n  return validateNode<t.JSXIdentifier>({\n    type: \"JSXIdentifier\",\n    name,\n  });\n}\nexport { jsxIdentifier as jSXIdentifier };\nexport function jsxMemberExpression(\n  object: t.JSXMemberExpression | t.JSXIdentifier,\n  property: t.JSXIdentifier,\n): t.JSXMemberExpression {\n  return validateNode<t.JSXMemberExpression>({\n    type: \"JSXMemberExpression\",\n    object,\n    property,\n  });\n}\nexport { jsxMemberExpression as jSXMemberExpression };\nexport function jsxNamespacedName(\n  namespace: t.JSXIdentifier,\n  name: t.JSXIdentifier,\n): t.JSXNamespacedName {\n  return validateNode<t.JSXNamespacedName>({\n    type: \"JSXNamespacedName\",\n    namespace,\n    name,\n  });\n}\nexport { jsxNamespacedName as jSXNamespacedName };\nexport function jsxOpeningElement(\n  name: t.JSXIdentifier | t.JSXMemberExpression | t.JSXNamespacedName,\n  attributes: Array<t.JSXAttribute | t.JSXSpreadAttribute>,\n  selfClosing: boolean = false,\n): t.JSXOpeningElement {\n  return validateNode<t.JSXOpeningElement>({\n    type: \"JSXOpeningElement\",\n    name,\n    attributes,\n    selfClosing,\n  });\n}\nexport { jsxOpeningElement as jSXOpeningElement };\nexport function jsxSpreadAttribute(\n  argument: t.Expression,\n): t.JSXSpreadAttribute {\n  return validateNode<t.JSXSpreadAttribute>({\n    type: \"JSXSpreadAttribute\",\n    argument,\n  });\n}\nexport { jsxSpreadAttribute as jSXSpreadAttribute };\nexport function jsxText(value: string): t.JSXText {\n  return validateNode<t.JSXText>({\n    type: \"JSXText\",\n    value,\n  });\n}\nexport { jsxText as jSXText };\nexport function jsxFragment(\n  openingFragment: t.JSXOpeningFragment,\n  closingFragment: t.JSXClosingFragment,\n  children: Array<\n    | t.JSXText\n    | t.JSXExpressionContainer\n    | t.JSXSpreadChild\n    | t.JSXElement\n    | t.JSXFragment\n  >,\n): t.JSXFragment {\n  return validateNode<t.JSXFragment>({\n    type: \"JSXFragment\",\n    openingFragment,\n    closingFragment,\n    children,\n  });\n}\nexport { jsxFragment as jSXFragment };\nexport function jsxOpeningFragment(): t.JSXOpeningFragment {\n  return {\n    type: \"JSXOpeningFragment\",\n  };\n}\nexport { jsxOpeningFragment as jSXOpeningFragment };\nexport function jsxClosingFragment(): t.JSXClosingFragment {\n  return {\n    type: \"JSXClosingFragment\",\n  };\n}\nexport { jsxClosingFragment as jSXClosingFragment };\nexport function noop(): t.Noop {\n  return {\n    type: \"Noop\",\n  };\n}\nexport function placeholder(\n  expectedNode:\n    | \"Identifier\"\n    | \"StringLiteral\"\n    | \"Expression\"\n    | \"Statement\"\n    | \"Declaration\"\n    | \"BlockStatement\"\n    | \"ClassBody\"\n    | \"Pattern\",\n  name: t.Identifier,\n): t.Placeholder {\n  return validateNode<t.Placeholder>({\n    type: \"Placeholder\",\n    expectedNode,\n    name,\n  });\n}\nexport function v8IntrinsicIdentifier(name: string): t.V8IntrinsicIdentifier {\n  return validateNode<t.V8IntrinsicIdentifier>({\n    type: \"V8IntrinsicIdentifier\",\n    name,\n  });\n}\nexport function argumentPlaceholder(): t.ArgumentPlaceholder {\n  return {\n    type: \"ArgumentPlaceholder\",\n  };\n}\nexport function bindExpression(\n  object: t.Expression,\n  callee: t.Expression,\n): t.BindExpression {\n  return validateNode<t.BindExpression>({\n    type: \"BindExpression\",\n    object,\n    callee,\n  });\n}\nexport function importAttribute(\n  key: t.Identifier | t.StringLiteral,\n  value: t.StringLiteral,\n): t.ImportAttribute {\n  return validateNode<t.ImportAttribute>({\n    type: \"ImportAttribute\",\n    key,\n    value,\n  });\n}\nexport function decorator(expression: t.Expression): t.Decorator {\n  return validateNode<t.Decorator>({\n    type: \"Decorator\",\n    expression,\n  });\n}\nexport function doExpression(\n  body: t.BlockStatement,\n  async: boolean = false,\n): t.DoExpression {\n  return validateNode<t.DoExpression>({\n    type: \"DoExpression\",\n    body,\n    async,\n  });\n}\nexport function exportDefaultSpecifier(\n  exported: t.Identifier,\n): t.ExportDefaultSpecifier {\n  return validateNode<t.ExportDefaultSpecifier>({\n    type: \"ExportDefaultSpecifier\",\n    exported,\n  });\n}\nexport function recordExpression(\n  properties: Array<t.ObjectProperty | t.SpreadElement>,\n): t.RecordExpression {\n  return validateNode<t.RecordExpression>({\n    type: \"RecordExpression\",\n    properties,\n  });\n}\nexport function tupleExpression(\n  elements: Array<t.Expression | t.SpreadElement> = [],\n): t.TupleExpression {\n  return validateNode<t.TupleExpression>({\n    type: \"TupleExpression\",\n    elements,\n  });\n}\nexport function decimalLiteral(value: string): t.DecimalLiteral {\n  return validateNode<t.DecimalLiteral>({\n    type: \"DecimalLiteral\",\n    value,\n  });\n}\nexport function moduleExpression(body: t.Program): t.ModuleExpression {\n  return validateNode<t.ModuleExpression>({\n    type: \"ModuleExpression\",\n    body,\n  });\n}\nexport function topicReference(): t.TopicReference {\n  return {\n    type: \"TopicReference\",\n  };\n}\nexport function pipelineTopicExpression(\n  expression: t.Expression,\n): t.PipelineTopicExpression {\n  return validateNode<t.PipelineTopicExpression>({\n    type: \"PipelineTopicExpression\",\n    expression,\n  });\n}\nexport function pipelineBareFunction(\n  callee: t.Expression,\n): t.PipelineBareFunction {\n  return validateNode<t.PipelineBareFunction>({\n    type: \"PipelineBareFunction\",\n    callee,\n  });\n}\nexport function pipelinePrimaryTopicReference(): t.PipelinePrimaryTopicReference {\n  return {\n    type: \"PipelinePrimaryTopicReference\",\n  };\n}\nexport function tsParameterProperty(\n  parameter: t.Identifier | t.AssignmentPattern,\n): t.TSParameterProperty {\n  return validateNode<t.TSParameterProperty>({\n    type: \"TSParameterProperty\",\n    parameter,\n  });\n}\nexport { tsParameterProperty as tSParameterProperty };\nexport function tsDeclareFunction(\n  id: t.Identifier | null | undefined = null,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<t.Identifier | t.Pattern | t.RestElement>,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareFunction {\n  return validateNode<t.TSDeclareFunction>({\n    type: \"TSDeclareFunction\",\n    id,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareFunction as tSDeclareFunction };\nexport function tsDeclareMethod(\n  decorators: Array<t.Decorator> | null | undefined = null,\n  key:\n    | t.Identifier\n    | t.StringLiteral\n    | t.NumericLiteral\n    | t.BigIntLiteral\n    | t.Expression,\n  typeParameters:\n    | t.TSTypeParameterDeclaration\n    | t.Noop\n    | null\n    | undefined = null,\n  params: Array<\n    t.Identifier | t.Pattern | t.RestElement | t.TSParameterProperty\n  >,\n  returnType: t.TSTypeAnnotation | t.Noop | null = null,\n): t.TSDeclareMethod {\n  return validateNode<t.TSDeclareMethod>({\n    type: \"TSDeclareMethod\",\n    decorators,\n    key,\n    typeParameters,\n    params,\n    returnType,\n  });\n}\nexport { tsDeclareMethod as tSDeclareMethod };\nexport function tsQualifiedName(\n  left: t.TSEntityName,\n  right: t.Identifier,\n): t.TSQualifiedName {\n  return validateNode<t.TSQualifiedName>({\n    type: \"TSQualifiedName\",\n    left,\n    right,\n  });\n}\nexport { tsQualifiedName as tSQualifiedName };\nexport function tsCallSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<t.Identifier | t.RestElement>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSCallSignatureDeclaration {\n  return validateNode<t.TSCallSignatureDeclaration>({\n    type: \"TSCallSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsCallSignatureDeclaration as tSCallSignatureDeclaration };\nexport function tsConstructSignatureDeclaration(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<t.Identifier | t.RestElement>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructSignatureDeclaration {\n  return validateNode<t.TSConstructSignatureDeclaration>({\n    type: \"TSConstructSignatureDeclaration\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructSignatureDeclaration as tSConstructSignatureDeclaration };\nexport function tsPropertySignature(\n  key: t.Expression,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  initializer: t.Expression | null = null,\n): t.TSPropertySignature {\n  return validateNode<t.TSPropertySignature>({\n    type: \"TSPropertySignature\",\n    key,\n    typeAnnotation,\n    initializer,\n    kind: null,\n  });\n}\nexport { tsPropertySignature as tSPropertySignature };\nexport function tsMethodSignature(\n  key: t.Expression,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<t.Identifier | t.RestElement>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSMethodSignature {\n  return validateNode<t.TSMethodSignature>({\n    type: \"TSMethodSignature\",\n    key,\n    typeParameters,\n    parameters,\n    typeAnnotation,\n    kind: null,\n  });\n}\nexport { tsMethodSignature as tSMethodSignature };\nexport function tsIndexSignature(\n  parameters: Array<t.Identifier>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSIndexSignature {\n  return validateNode<t.TSIndexSignature>({\n    type: \"TSIndexSignature\",\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsIndexSignature as tSIndexSignature };\nexport function tsAnyKeyword(): t.TSAnyKeyword {\n  return {\n    type: \"TSAnyKeyword\",\n  };\n}\nexport { tsAnyKeyword as tSAnyKeyword };\nexport function tsBooleanKeyword(): t.TSBooleanKeyword {\n  return {\n    type: \"TSBooleanKeyword\",\n  };\n}\nexport { tsBooleanKeyword as tSBooleanKeyword };\nexport function tsBigIntKeyword(): t.TSBigIntKeyword {\n  return {\n    type: \"TSBigIntKeyword\",\n  };\n}\nexport { tsBigIntKeyword as tSBigIntKeyword };\nexport function tsIntrinsicKeyword(): t.TSIntrinsicKeyword {\n  return {\n    type: \"TSIntrinsicKeyword\",\n  };\n}\nexport { tsIntrinsicKeyword as tSIntrinsicKeyword };\nexport function tsNeverKeyword(): t.TSNeverKeyword {\n  return {\n    type: \"TSNeverKeyword\",\n  };\n}\nexport { tsNeverKeyword as tSNeverKeyword };\nexport function tsNullKeyword(): t.TSNullKeyword {\n  return {\n    type: \"TSNullKeyword\",\n  };\n}\nexport { tsNullKeyword as tSNullKeyword };\nexport function tsNumberKeyword(): t.TSNumberKeyword {\n  return {\n    type: \"TSNumberKeyword\",\n  };\n}\nexport { tsNumberKeyword as tSNumberKeyword };\nexport function tsObjectKeyword(): t.TSObjectKeyword {\n  return {\n    type: \"TSObjectKeyword\",\n  };\n}\nexport { tsObjectKeyword as tSObjectKeyword };\nexport function tsStringKeyword(): t.TSStringKeyword {\n  return {\n    type: \"TSStringKeyword\",\n  };\n}\nexport { tsStringKeyword as tSStringKeyword };\nexport function tsSymbolKeyword(): t.TSSymbolKeyword {\n  return {\n    type: \"TSSymbolKeyword\",\n  };\n}\nexport { tsSymbolKeyword as tSSymbolKeyword };\nexport function tsUndefinedKeyword(): t.TSUndefinedKeyword {\n  return {\n    type: \"TSUndefinedKeyword\",\n  };\n}\nexport { tsUndefinedKeyword as tSUndefinedKeyword };\nexport function tsUnknownKeyword(): t.TSUnknownKeyword {\n  return {\n    type: \"TSUnknownKeyword\",\n  };\n}\nexport { tsUnknownKeyword as tSUnknownKeyword };\nexport function tsVoidKeyword(): t.TSVoidKeyword {\n  return {\n    type: \"TSVoidKeyword\",\n  };\n}\nexport { tsVoidKeyword as tSVoidKeyword };\nexport function tsThisType(): t.TSThisType {\n  return {\n    type: \"TSThisType\",\n  };\n}\nexport { tsThisType as tSThisType };\nexport function tsFunctionType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<t.Identifier | t.RestElement>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSFunctionType {\n  return validateNode<t.TSFunctionType>({\n    type: \"TSFunctionType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsFunctionType as tSFunctionType };\nexport function tsConstructorType(\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  parameters: Array<t.Identifier | t.RestElement>,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n): t.TSConstructorType {\n  return validateNode<t.TSConstructorType>({\n    type: \"TSConstructorType\",\n    typeParameters,\n    parameters,\n    typeAnnotation,\n  });\n}\nexport { tsConstructorType as tSConstructorType };\nexport function tsTypeReference(\n  typeName: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeReference {\n  return validateNode<t.TSTypeReference>({\n    type: \"TSTypeReference\",\n    typeName,\n    typeParameters,\n  });\n}\nexport { tsTypeReference as tSTypeReference };\nexport function tsTypePredicate(\n  parameterName: t.Identifier | t.TSThisType,\n  typeAnnotation: t.TSTypeAnnotation | null = null,\n  asserts: boolean | null = null,\n): t.TSTypePredicate {\n  return validateNode<t.TSTypePredicate>({\n    type: \"TSTypePredicate\",\n    parameterName,\n    typeAnnotation,\n    asserts,\n  });\n}\nexport { tsTypePredicate as tSTypePredicate };\nexport function tsTypeQuery(\n  exprName: t.TSEntityName | t.TSImportType,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSTypeQuery {\n  return validateNode<t.TSTypeQuery>({\n    type: \"TSTypeQuery\",\n    exprName,\n    typeParameters,\n  });\n}\nexport { tsTypeQuery as tSTypeQuery };\nexport function tsTypeLiteral(\n  members: Array<t.TSTypeElement>,\n): t.TSTypeLiteral {\n  return validateNode<t.TSTypeLiteral>({\n    type: \"TSTypeLiteral\",\n    members,\n  });\n}\nexport { tsTypeLiteral as tSTypeLiteral };\nexport function tsArrayType(elementType: t.TSType): t.TSArrayType {\n  return validateNode<t.TSArrayType>({\n    type: \"TSArrayType\",\n    elementType,\n  });\n}\nexport { tsArrayType as tSArrayType };\nexport function tsTupleType(\n  elementTypes: Array<t.TSType | t.TSNamedTupleMember>,\n): t.TSTupleType {\n  return validateNode<t.TSTupleType>({\n    type: \"TSTupleType\",\n    elementTypes,\n  });\n}\nexport { tsTupleType as tSTupleType };\nexport function tsOptionalType(typeAnnotation: t.TSType): t.TSOptionalType {\n  return validateNode<t.TSOptionalType>({\n    type: \"TSOptionalType\",\n    typeAnnotation,\n  });\n}\nexport { tsOptionalType as tSOptionalType };\nexport function tsRestType(typeAnnotation: t.TSType): t.TSRestType {\n  return validateNode<t.TSRestType>({\n    type: \"TSRestType\",\n    typeAnnotation,\n  });\n}\nexport { tsRestType as tSRestType };\nexport function tsNamedTupleMember(\n  label: t.Identifier,\n  elementType: t.TSType,\n  optional: boolean = false,\n): t.TSNamedTupleMember {\n  return validateNode<t.TSNamedTupleMember>({\n    type: \"TSNamedTupleMember\",\n    label,\n    elementType,\n    optional,\n  });\n}\nexport { tsNamedTupleMember as tSNamedTupleMember };\nexport function tsUnionType(types: Array<t.TSType>): t.TSUnionType {\n  return validateNode<t.TSUnionType>({\n    type: \"TSUnionType\",\n    types,\n  });\n}\nexport { tsUnionType as tSUnionType };\nexport function tsIntersectionType(\n  types: Array<t.TSType>,\n): t.TSIntersectionType {\n  return validateNode<t.TSIntersectionType>({\n    type: \"TSIntersectionType\",\n    types,\n  });\n}\nexport { tsIntersectionType as tSIntersectionType };\nexport function tsConditionalType(\n  checkType: t.TSType,\n  extendsType: t.TSType,\n  trueType: t.TSType,\n  falseType: t.TSType,\n): t.TSConditionalType {\n  return validateNode<t.TSConditionalType>({\n    type: \"TSConditionalType\",\n    checkType,\n    extendsType,\n    trueType,\n    falseType,\n  });\n}\nexport { tsConditionalType as tSConditionalType };\nexport function tsInferType(typeParameter: t.TSTypeParameter): t.TSInferType {\n  return validateNode<t.TSInferType>({\n    type: \"TSInferType\",\n    typeParameter,\n  });\n}\nexport { tsInferType as tSInferType };\nexport function tsParenthesizedType(\n  typeAnnotation: t.TSType,\n): t.TSParenthesizedType {\n  return validateNode<t.TSParenthesizedType>({\n    type: \"TSParenthesizedType\",\n    typeAnnotation,\n  });\n}\nexport { tsParenthesizedType as tSParenthesizedType };\nexport function tsTypeOperator(typeAnnotation: t.TSType): t.TSTypeOperator {\n  return validateNode<t.TSTypeOperator>({\n    type: \"TSTypeOperator\",\n    typeAnnotation,\n    operator: null,\n  });\n}\nexport { tsTypeOperator as tSTypeOperator };\nexport function tsIndexedAccessType(\n  objectType: t.TSType,\n  indexType: t.TSType,\n): t.TSIndexedAccessType {\n  return validateNode<t.TSIndexedAccessType>({\n    type: \"TSIndexedAccessType\",\n    objectType,\n    indexType,\n  });\n}\nexport { tsIndexedAccessType as tSIndexedAccessType };\nexport function tsMappedType(\n  typeParameter: t.TSTypeParameter,\n  typeAnnotation: t.TSType | null = null,\n  nameType: t.TSType | null = null,\n): t.TSMappedType {\n  return validateNode<t.TSMappedType>({\n    type: \"TSMappedType\",\n    typeParameter,\n    typeAnnotation,\n    nameType,\n  });\n}\nexport { tsMappedType as tSMappedType };\nexport function tsLiteralType(\n  literal:\n    | t.NumericLiteral\n    | t.StringLiteral\n    | t.BooleanLiteral\n    | t.BigIntLiteral\n    | t.TemplateLiteral\n    | t.UnaryExpression,\n): t.TSLiteralType {\n  return validateNode<t.TSLiteralType>({\n    type: \"TSLiteralType\",\n    literal,\n  });\n}\nexport { tsLiteralType as tSLiteralType };\nexport function tsExpressionWithTypeArguments(\n  expression: t.TSEntityName,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSExpressionWithTypeArguments {\n  return validateNode<t.TSExpressionWithTypeArguments>({\n    type: \"TSExpressionWithTypeArguments\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsExpressionWithTypeArguments as tSExpressionWithTypeArguments };\nexport function tsInterfaceDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  _extends: Array<t.TSExpressionWithTypeArguments> | null | undefined = null,\n  body: t.TSInterfaceBody,\n): t.TSInterfaceDeclaration {\n  return validateNode<t.TSInterfaceDeclaration>({\n    type: \"TSInterfaceDeclaration\",\n    id,\n    typeParameters,\n    extends: _extends,\n    body,\n  });\n}\nexport { tsInterfaceDeclaration as tSInterfaceDeclaration };\nexport function tsInterfaceBody(\n  body: Array<t.TSTypeElement>,\n): t.TSInterfaceBody {\n  return validateNode<t.TSInterfaceBody>({\n    type: \"TSInterfaceBody\",\n    body,\n  });\n}\nexport { tsInterfaceBody as tSInterfaceBody };\nexport function tsTypeAliasDeclaration(\n  id: t.Identifier,\n  typeParameters: t.TSTypeParameterDeclaration | null | undefined = null,\n  typeAnnotation: t.TSType,\n): t.TSTypeAliasDeclaration {\n  return validateNode<t.TSTypeAliasDeclaration>({\n    type: \"TSTypeAliasDeclaration\",\n    id,\n    typeParameters,\n    typeAnnotation,\n  });\n}\nexport { tsTypeAliasDeclaration as tSTypeAliasDeclaration };\nexport function tsInstantiationExpression(\n  expression: t.Expression,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSInstantiationExpression {\n  return validateNode<t.TSInstantiationExpression>({\n    type: \"TSInstantiationExpression\",\n    expression,\n    typeParameters,\n  });\n}\nexport { tsInstantiationExpression as tSInstantiationExpression };\nexport function tsAsExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSAsExpression {\n  return validateNode<t.TSAsExpression>({\n    type: \"TSAsExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsAsExpression as tSAsExpression };\nexport function tsSatisfiesExpression(\n  expression: t.Expression,\n  typeAnnotation: t.TSType,\n): t.TSSatisfiesExpression {\n  return validateNode<t.TSSatisfiesExpression>({\n    type: \"TSSatisfiesExpression\",\n    expression,\n    typeAnnotation,\n  });\n}\nexport { tsSatisfiesExpression as tSSatisfiesExpression };\nexport function tsTypeAssertion(\n  typeAnnotation: t.TSType,\n  expression: t.Expression,\n): t.TSTypeAssertion {\n  return validateNode<t.TSTypeAssertion>({\n    type: \"TSTypeAssertion\",\n    typeAnnotation,\n    expression,\n  });\n}\nexport { tsTypeAssertion as tSTypeAssertion };\nexport function tsEnumDeclaration(\n  id: t.Identifier,\n  members: Array<t.TSEnumMember>,\n): t.TSEnumDeclaration {\n  return validateNode<t.TSEnumDeclaration>({\n    type: \"TSEnumDeclaration\",\n    id,\n    members,\n  });\n}\nexport { tsEnumDeclaration as tSEnumDeclaration };\nexport function tsEnumMember(\n  id: t.Identifier | t.StringLiteral,\n  initializer: t.Expression | null = null,\n): t.TSEnumMember {\n  return validateNode<t.TSEnumMember>({\n    type: \"TSEnumMember\",\n    id,\n    initializer,\n  });\n}\nexport { tsEnumMember as tSEnumMember };\nexport function tsModuleDeclaration(\n  id: t.Identifier | t.StringLiteral,\n  body: t.TSModuleBlock | t.TSModuleDeclaration,\n): t.TSModuleDeclaration {\n  return validateNode<t.TSModuleDeclaration>({\n    type: \"TSModuleDeclaration\",\n    id,\n    body,\n  });\n}\nexport { tsModuleDeclaration as tSModuleDeclaration };\nexport function tsModuleBlock(body: Array<t.Statement>): t.TSModuleBlock {\n  return validateNode<t.TSModuleBlock>({\n    type: \"TSModuleBlock\",\n    body,\n  });\n}\nexport { tsModuleBlock as tSModuleBlock };\nexport function tsImportType(\n  argument: t.StringLiteral,\n  qualifier: t.TSEntityName | null = null,\n  typeParameters: t.TSTypeParameterInstantiation | null = null,\n): t.TSImportType {\n  return validateNode<t.TSImportType>({\n    type: \"TSImportType\",\n    argument,\n    qualifier,\n    typeParameters,\n  });\n}\nexport { tsImportType as tSImportType };\nexport function tsImportEqualsDeclaration(\n  id: t.Identifier,\n  moduleReference: t.TSEntityName | t.TSExternalModuleReference,\n): t.TSImportEqualsDeclaration {\n  return validateNode<t.TSImportEqualsDeclaration>({\n    type: \"TSImportEqualsDeclaration\",\n    id,\n    moduleReference,\n    isExport: null,\n  });\n}\nexport { tsImportEqualsDeclaration as tSImportEqualsDeclaration };\nexport function tsExternalModuleReference(\n  expression: t.StringLiteral,\n): t.TSExternalModuleReference {\n  return validateNode<t.TSExternalModuleReference>({\n    type: \"TSExternalModuleReference\",\n    expression,\n  });\n}\nexport { tsExternalModuleReference as tSExternalModuleReference };\nexport function tsNonNullExpression(\n  expression: t.Expression,\n): t.TSNonNullExpression {\n  return validateNode<t.TSNonNullExpression>({\n    type: \"TSNonNullExpression\",\n    expression,\n  });\n}\nexport { tsNonNullExpression as tSNonNullExpression };\nexport function tsExportAssignment(\n  expression: t.Expression,\n): t.TSExportAssignment {\n  return validateNode<t.TSExportAssignment>({\n    type: \"TSExportAssignment\",\n    expression,\n  });\n}\nexport { tsExportAssignment as tSExportAssignment };\nexport function tsNamespaceExportDeclaration(\n  id: t.Identifier,\n): t.TSNamespaceExportDeclaration {\n  return validateNode<t.TSNamespaceExportDeclaration>({\n    type: \"TSNamespaceExportDeclaration\",\n    id,\n  });\n}\nexport { tsNamespaceExportDeclaration as tSNamespaceExportDeclaration };\nexport function tsTypeAnnotation(typeAnnotation: t.TSType): t.TSTypeAnnotation {\n  return validateNode<t.TSTypeAnnotation>({\n    type: \"TSTypeAnnotation\",\n    typeAnnotation,\n  });\n}\nexport { tsTypeAnnotation as tSTypeAnnotation };\nexport function tsTypeParameterInstantiation(\n  params: Array<t.TSType>,\n): t.TSTypeParameterInstantiation {\n  return validateNode<t.TSTypeParameterInstantiation>({\n    type: \"TSTypeParameterInstantiation\",\n    params,\n  });\n}\nexport { tsTypeParameterInstantiation as tSTypeParameterInstantiation };\nexport function tsTypeParameterDeclaration(\n  params: Array<t.TSTypeParameter>,\n): t.TSTypeParameterDeclaration {\n  return validateNode<t.TSTypeParameterDeclaration>({\n    type: \"TSTypeParameterDeclaration\",\n    params,\n  });\n}\nexport { tsTypeParameterDeclaration as tSTypeParameterDeclaration };\nexport function tsTypeParameter(\n  constraint: t.TSType | null | undefined = null,\n  _default: t.TSType | null | undefined = null,\n  name: string,\n): t.TSTypeParameter {\n  return validateNode<t.TSTypeParameter>({\n    type: \"TSTypeParameter\",\n    constraint,\n    default: _default,\n    name,\n  });\n}\nexport { tsTypeParameter as tSTypeParameter };\n/** @deprecated */\nfunction NumberLiteral(value: number) {\n  console.trace(\n    \"The node type NumberLiteral has been renamed to NumericLiteral\",\n  );\n  return numericLiteral(value);\n}\nexport { NumberLiteral as numberLiteral };\n/** @deprecated */\nfunction RegexLiteral(pattern: string, flags: string = \"\") {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  return regExpLiteral(pattern, flags);\n}\nexport { RegexLiteral as regexLiteral };\n/** @deprecated */\nfunction RestProperty(argument: t.LVal) {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  return restElement(argument);\n}\nexport { RestProperty as restProperty };\n/** @deprecated */\nfunction SpreadProperty(argument: t.Expression) {\n  console.trace(\n    \"The node type SpreadProperty has been renamed to SpreadElement\",\n  );\n  return spreadElement(argument);\n}\nexport { SpreadProperty as spreadProperty };\n", "import { stringLiteral } from \"../../builders/generated\";\nimport type * as t from \"../..\";\nimport { inherits } from \"../..\";\n\nexport default function cleanJSXElementLiteralChild(\n  child: t.JSXText,\n  args: Array<t.Node>,\n) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push(inherits(stringLiteral(str), child));\n}\n", "import {\n  isJSXText,\n  isJSXExpressionContainer,\n  isJSXEmptyExpression,\n} from \"../../validators/generated\";\nimport cleanJSXElementLiteralChild from \"../../utils/react/cleanJSXElementLiteralChild\";\nimport type * as t from \"../..\";\n\ntype ReturnedChild =\n  | t.JSXSpreadChild\n  | t.JSXElement\n  | t.JSXFragment\n  | t.Expression;\n\nexport default function buildChildren(\n  node: t.JSXElement | t.JSXFragment,\n): ReturnedChild[] {\n  const elements = [];\n\n  for (let i = 0; i < node.children.length; i++) {\n    let child: any = node.children[i];\n\n    if (isJSXText(child)) {\n      cleanJSXElementLiteralChild(child, elements);\n      continue;\n    }\n\n    if (isJSXExpressionContainer(child)) child = child.expression;\n    if (isJSXEmptyExpression(child)) continue;\n\n    elements.push(child);\n  }\n\n  return elements;\n}\n", "import { VISITOR_KEYS } from \"../definitions\";\nimport type * as t from \"..\";\n\nexport default function isNode(node: any): node is t.Node {\n  return !!(node && VISITOR_KEYS[node.type]);\n}\n", "import isNode from \"../validators/isNode\";\nimport type * as t from \"..\";\n\nexport default function assertNode(node?: any): asserts node is t.Node {\n  if (!isNode(node)) {\n    const type = node?.type ?? JSON.stringify(node);\n    throw new TypeError(`Not a valid node of type \"${type}\"`);\n  }\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport is from \"../../validators/is\";\nimport type * as t from \"../..\";\n\nfunction assert(type: string, node: any, opts?: any): void {\n  if (!is(type, node, opts)) {\n    throw new Error(\n      `Expected type \"${type}\" with option ${JSON.stringify(opts)}, ` +\n        `but instead got \"${node.type}\".`,\n    );\n  }\n}\n\nexport function assertArrayExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayExpression {\n  assert(\"ArrayExpression\", node, opts);\n}\nexport function assertAssignmentExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentExpression {\n  assert(\"AssignmentExpression\", node, opts);\n}\nexport function assertBinaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BinaryExpression {\n  assert(\"BinaryExpression\", node, opts);\n}\nexport function assertInterpreterDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterpreterDirective {\n  assert(\"InterpreterDirective\", node, opts);\n}\nexport function assertDirective(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Directive {\n  assert(\"Directive\", node, opts);\n}\nexport function assertDirectiveLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DirectiveLiteral {\n  assert(\"DirectiveLiteral\", node, opts);\n}\nexport function assertBlockStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockStatement {\n  assert(\"BlockStatement\", node, opts);\n}\nexport function assertBreakStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BreakStatement {\n  assert(\"BreakStatement\", node, opts);\n}\nexport function assertCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CallExpression {\n  assert(\"CallExpression\", node, opts);\n}\nexport function assertCatchClause(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CatchClause {\n  assert(\"CatchClause\", node, opts);\n}\nexport function assertConditionalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ConditionalExpression {\n  assert(\"ConditionalExpression\", node, opts);\n}\nexport function assertContinueStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ContinueStatement {\n  assert(\"ContinueStatement\", node, opts);\n}\nexport function assertDebuggerStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DebuggerStatement {\n  assert(\"DebuggerStatement\", node, opts);\n}\nexport function assertDoWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoWhileStatement {\n  assert(\"DoWhileStatement\", node, opts);\n}\nexport function assertEmptyStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyStatement {\n  assert(\"EmptyStatement\", node, opts);\n}\nexport function assertExpressionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionStatement {\n  assert(\"ExpressionStatement\", node, opts);\n}\nexport function assertFile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.File {\n  assert(\"File\", node, opts);\n}\nexport function assertForInStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForInStatement {\n  assert(\"ForInStatement\", node, opts);\n}\nexport function assertForStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForStatement {\n  assert(\"ForStatement\", node, opts);\n}\nexport function assertFunctionDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionDeclaration {\n  assert(\"FunctionDeclaration\", node, opts);\n}\nexport function assertFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionExpression {\n  assert(\"FunctionExpression\", node, opts);\n}\nexport function assertIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Identifier {\n  assert(\"Identifier\", node, opts);\n}\nexport function assertIfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IfStatement {\n  assert(\"IfStatement\", node, opts);\n}\nexport function assertLabeledStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LabeledStatement {\n  assert(\"LabeledStatement\", node, opts);\n}\nexport function assertStringLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteral {\n  assert(\"StringLiteral\", node, opts);\n}\nexport function assertNumericLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumericLiteral {\n  assert(\"NumericLiteral\", node, opts);\n}\nexport function assertNullLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteral {\n  assert(\"NullLiteral\", node, opts);\n}\nexport function assertBooleanLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteral {\n  assert(\"BooleanLiteral\", node, opts);\n}\nexport function assertRegExpLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RegExpLiteral {\n  assert(\"RegExpLiteral\", node, opts);\n}\nexport function assertLogicalExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LogicalExpression {\n  assert(\"LogicalExpression\", node, opts);\n}\nexport function assertMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MemberExpression {\n  assert(\"MemberExpression\", node, opts);\n}\nexport function assertNewExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NewExpression {\n  assert(\"NewExpression\", node, opts);\n}\nexport function assertProgram(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Program {\n  assert(\"Program\", node, opts);\n}\nexport function assertObjectExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectExpression {\n  assert(\"ObjectExpression\", node, opts);\n}\nexport function assertObjectMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMethod {\n  assert(\"ObjectMethod\", node, opts);\n}\nexport function assertObjectProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectProperty {\n  assert(\"ObjectProperty\", node, opts);\n}\nexport function assertRestElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RestElement {\n  assert(\"RestElement\", node, opts);\n}\nexport function assertReturnStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ReturnStatement {\n  assert(\"ReturnStatement\", node, opts);\n}\nexport function assertSequenceExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SequenceExpression {\n  assert(\"SequenceExpression\", node, opts);\n}\nexport function assertParenthesizedExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ParenthesizedExpression {\n  assert(\"ParenthesizedExpression\", node, opts);\n}\nexport function assertSwitchCase(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchCase {\n  assert(\"SwitchCase\", node, opts);\n}\nexport function assertSwitchStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SwitchStatement {\n  assert(\"SwitchStatement\", node, opts);\n}\nexport function assertThisExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisExpression {\n  assert(\"ThisExpression\", node, opts);\n}\nexport function assertThrowStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThrowStatement {\n  assert(\"ThrowStatement\", node, opts);\n}\nexport function assertTryStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TryStatement {\n  assert(\"TryStatement\", node, opts);\n}\nexport function assertUnaryExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryExpression {\n  assert(\"UnaryExpression\", node, opts);\n}\nexport function assertUpdateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UpdateExpression {\n  assert(\"UpdateExpression\", node, opts);\n}\nexport function assertVariableDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclaration {\n  assert(\"VariableDeclaration\", node, opts);\n}\nexport function assertVariableDeclarator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VariableDeclarator {\n  assert(\"VariableDeclarator\", node, opts);\n}\nexport function assertWhileStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WhileStatement {\n  assert(\"WhileStatement\", node, opts);\n}\nexport function assertWithStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.WithStatement {\n  assert(\"WithStatement\", node, opts);\n}\nexport function assertAssignmentPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AssignmentPattern {\n  assert(\"AssignmentPattern\", node, opts);\n}\nexport function assertArrayPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayPattern {\n  assert(\"ArrayPattern\", node, opts);\n}\nexport function assertArrowFunctionExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrowFunctionExpression {\n  assert(\"ArrowFunctionExpression\", node, opts);\n}\nexport function assertClassBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassBody {\n  assert(\"ClassBody\", node, opts);\n}\nexport function assertClassExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassExpression {\n  assert(\"ClassExpression\", node, opts);\n}\nexport function assertClassDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassDeclaration {\n  assert(\"ClassDeclaration\", node, opts);\n}\nexport function assertExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportAllDeclaration {\n  assert(\"ExportAllDeclaration\", node, opts);\n}\nexport function assertExportDefaultDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultDeclaration {\n  assert(\"ExportDefaultDeclaration\", node, opts);\n}\nexport function assertExportNamedDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamedDeclaration {\n  assert(\"ExportNamedDeclaration\", node, opts);\n}\nexport function assertExportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportSpecifier {\n  assert(\"ExportSpecifier\", node, opts);\n}\nexport function assertForOfStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForOfStatement {\n  assert(\"ForOfStatement\", node, opts);\n}\nexport function assertImportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDeclaration {\n  assert(\"ImportDeclaration\", node, opts);\n}\nexport function assertImportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportDefaultSpecifier {\n  assert(\"ImportDefaultSpecifier\", node, opts);\n}\nexport function assertImportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportNamespaceSpecifier {\n  assert(\"ImportNamespaceSpecifier\", node, opts);\n}\nexport function assertImportSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportSpecifier {\n  assert(\"ImportSpecifier\", node, opts);\n}\nexport function assertMetaProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MetaProperty {\n  assert(\"MetaProperty\", node, opts);\n}\nexport function assertClassMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassMethod {\n  assert(\"ClassMethod\", node, opts);\n}\nexport function assertObjectPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectPattern {\n  assert(\"ObjectPattern\", node, opts);\n}\nexport function assertSpreadElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SpreadElement {\n  assert(\"SpreadElement\", node, opts);\n}\nexport function assertSuper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Super {\n  assert(\"Super\", node, opts);\n}\nexport function assertTaggedTemplateExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TaggedTemplateExpression {\n  assert(\"TaggedTemplateExpression\", node, opts);\n}\nexport function assertTemplateElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateElement {\n  assert(\"TemplateElement\", node, opts);\n}\nexport function assertTemplateLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TemplateLiteral {\n  assert(\"TemplateLiteral\", node, opts);\n}\nexport function assertYieldExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.YieldExpression {\n  assert(\"YieldExpression\", node, opts);\n}\nexport function assertAwaitExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AwaitExpression {\n  assert(\"AwaitExpression\", node, opts);\n}\nexport function assertImport(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Import {\n  assert(\"Import\", node, opts);\n}\nexport function assertBigIntLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BigIntLiteral {\n  assert(\"BigIntLiteral\", node, opts);\n}\nexport function assertExportNamespaceSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportNamespaceSpecifier {\n  assert(\"ExportNamespaceSpecifier\", node, opts);\n}\nexport function assertOptionalMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalMemberExpression {\n  assert(\"OptionalMemberExpression\", node, opts);\n}\nexport function assertOptionalCallExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalCallExpression {\n  assert(\"OptionalCallExpression\", node, opts);\n}\nexport function assertClassProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassProperty {\n  assert(\"ClassProperty\", node, opts);\n}\nexport function assertClassAccessorProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassAccessorProperty {\n  assert(\"ClassAccessorProperty\", node, opts);\n}\nexport function assertClassPrivateProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateProperty {\n  assert(\"ClassPrivateProperty\", node, opts);\n}\nexport function assertClassPrivateMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassPrivateMethod {\n  assert(\"ClassPrivateMethod\", node, opts);\n}\nexport function assertPrivateName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PrivateName {\n  assert(\"PrivateName\", node, opts);\n}\nexport function assertStaticBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StaticBlock {\n  assert(\"StaticBlock\", node, opts);\n}\nexport function assertAnyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.AnyTypeAnnotation {\n  assert(\"AnyTypeAnnotation\", node, opts);\n}\nexport function assertArrayTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArrayTypeAnnotation {\n  assert(\"ArrayTypeAnnotation\", node, opts);\n}\nexport function assertBooleanTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanTypeAnnotation {\n  assert(\"BooleanTypeAnnotation\", node, opts);\n}\nexport function assertBooleanLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BooleanLiteralTypeAnnotation {\n  assert(\"BooleanLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNullLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullLiteralTypeAnnotation {\n  assert(\"NullLiteralTypeAnnotation\", node, opts);\n}\nexport function assertClassImplements(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ClassImplements {\n  assert(\"ClassImplements\", node, opts);\n}\nexport function assertDeclareClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareClass {\n  assert(\"DeclareClass\", node, opts);\n}\nexport function assertDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareFunction {\n  assert(\"DeclareFunction\", node, opts);\n}\nexport function assertDeclareInterface(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareInterface {\n  assert(\"DeclareInterface\", node, opts);\n}\nexport function assertDeclareModule(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModule {\n  assert(\"DeclareModule\", node, opts);\n}\nexport function assertDeclareModuleExports(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareModuleExports {\n  assert(\"DeclareModuleExports\", node, opts);\n}\nexport function assertDeclareTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareTypeAlias {\n  assert(\"DeclareTypeAlias\", node, opts);\n}\nexport function assertDeclareOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareOpaqueType {\n  assert(\"DeclareOpaqueType\", node, opts);\n}\nexport function assertDeclareVariable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareVariable {\n  assert(\"DeclareVariable\", node, opts);\n}\nexport function assertDeclareExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportDeclaration {\n  assert(\"DeclareExportDeclaration\", node, opts);\n}\nexport function assertDeclareExportAllDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclareExportAllDeclaration {\n  assert(\"DeclareExportAllDeclaration\", node, opts);\n}\nexport function assertDeclaredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DeclaredPredicate {\n  assert(\"DeclaredPredicate\", node, opts);\n}\nexport function assertExistsTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExistsTypeAnnotation {\n  assert(\"ExistsTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeAnnotation {\n  assert(\"FunctionTypeAnnotation\", node, opts);\n}\nexport function assertFunctionTypeParam(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionTypeParam {\n  assert(\"FunctionTypeParam\", node, opts);\n}\nexport function assertGenericTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.GenericTypeAnnotation {\n  assert(\"GenericTypeAnnotation\", node, opts);\n}\nexport function assertInferredPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InferredPredicate {\n  assert(\"InferredPredicate\", node, opts);\n}\nexport function assertInterfaceExtends(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceExtends {\n  assert(\"InterfaceExtends\", node, opts);\n}\nexport function assertInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceDeclaration {\n  assert(\"InterfaceDeclaration\", node, opts);\n}\nexport function assertInterfaceTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.InterfaceTypeAnnotation {\n  assert(\"InterfaceTypeAnnotation\", node, opts);\n}\nexport function assertIntersectionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IntersectionTypeAnnotation {\n  assert(\"IntersectionTypeAnnotation\", node, opts);\n}\nexport function assertMixedTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.MixedTypeAnnotation {\n  assert(\"MixedTypeAnnotation\", node, opts);\n}\nexport function assertEmptyTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EmptyTypeAnnotation {\n  assert(\"EmptyTypeAnnotation\", node, opts);\n}\nexport function assertNullableTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NullableTypeAnnotation {\n  assert(\"NullableTypeAnnotation\", node, opts);\n}\nexport function assertNumberLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberLiteralTypeAnnotation {\n  assert(\"NumberLiteralTypeAnnotation\", node, opts);\n}\nexport function assertNumberTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.NumberTypeAnnotation {\n  assert(\"NumberTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeAnnotation {\n  assert(\"ObjectTypeAnnotation\", node, opts);\n}\nexport function assertObjectTypeInternalSlot(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeInternalSlot {\n  assert(\"ObjectTypeInternalSlot\", node, opts);\n}\nexport function assertObjectTypeCallProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeCallProperty {\n  assert(\"ObjectTypeCallProperty\", node, opts);\n}\nexport function assertObjectTypeIndexer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeIndexer {\n  assert(\"ObjectTypeIndexer\", node, opts);\n}\nexport function assertObjectTypeProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeProperty {\n  assert(\"ObjectTypeProperty\", node, opts);\n}\nexport function assertObjectTypeSpreadProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectTypeSpreadProperty {\n  assert(\"ObjectTypeSpreadProperty\", node, opts);\n}\nexport function assertOpaqueType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OpaqueType {\n  assert(\"OpaqueType\", node, opts);\n}\nexport function assertQualifiedTypeIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.QualifiedTypeIdentifier {\n  assert(\"QualifiedTypeIdentifier\", node, opts);\n}\nexport function assertStringLiteralTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringLiteralTypeAnnotation {\n  assert(\"StringLiteralTypeAnnotation\", node, opts);\n}\nexport function assertStringTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.StringTypeAnnotation {\n  assert(\"StringTypeAnnotation\", node, opts);\n}\nexport function assertSymbolTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.SymbolTypeAnnotation {\n  assert(\"SymbolTypeAnnotation\", node, opts);\n}\nexport function assertThisTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ThisTypeAnnotation {\n  assert(\"ThisTypeAnnotation\", node, opts);\n}\nexport function assertTupleTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleTypeAnnotation {\n  assert(\"TupleTypeAnnotation\", node, opts);\n}\nexport function assertTypeofTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeofTypeAnnotation {\n  assert(\"TypeofTypeAnnotation\", node, opts);\n}\nexport function assertTypeAlias(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAlias {\n  assert(\"TypeAlias\", node, opts);\n}\nexport function assertTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeAnnotation {\n  assert(\"TypeAnnotation\", node, opts);\n}\nexport function assertTypeCastExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeCastExpression {\n  assert(\"TypeCastExpression\", node, opts);\n}\nexport function assertTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameter {\n  assert(\"TypeParameter\", node, opts);\n}\nexport function assertTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterDeclaration {\n  assert(\"TypeParameterDeclaration\", node, opts);\n}\nexport function assertTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeParameterInstantiation {\n  assert(\"TypeParameterInstantiation\", node, opts);\n}\nexport function assertUnionTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnionTypeAnnotation {\n  assert(\"UnionTypeAnnotation\", node, opts);\n}\nexport function assertVariance(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Variance {\n  assert(\"Variance\", node, opts);\n}\nexport function assertVoidTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.VoidTypeAnnotation {\n  assert(\"VoidTypeAnnotation\", node, opts);\n}\nexport function assertEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDeclaration {\n  assert(\"EnumDeclaration\", node, opts);\n}\nexport function assertEnumBooleanBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanBody {\n  assert(\"EnumBooleanBody\", node, opts);\n}\nexport function assertEnumNumberBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberBody {\n  assert(\"EnumNumberBody\", node, opts);\n}\nexport function assertEnumStringBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringBody {\n  assert(\"EnumStringBody\", node, opts);\n}\nexport function assertEnumSymbolBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumSymbolBody {\n  assert(\"EnumSymbolBody\", node, opts);\n}\nexport function assertEnumBooleanMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBooleanMember {\n  assert(\"EnumBooleanMember\", node, opts);\n}\nexport function assertEnumNumberMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumNumberMember {\n  assert(\"EnumNumberMember\", node, opts);\n}\nexport function assertEnumStringMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumStringMember {\n  assert(\"EnumStringMember\", node, opts);\n}\nexport function assertEnumDefaultedMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumDefaultedMember {\n  assert(\"EnumDefaultedMember\", node, opts);\n}\nexport function assertIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.IndexedAccessType {\n  assert(\"IndexedAccessType\", node, opts);\n}\nexport function assertOptionalIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.OptionalIndexedAccessType {\n  assert(\"OptionalIndexedAccessType\", node, opts);\n}\nexport function assertJSXAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXAttribute {\n  assert(\"JSXAttribute\", node, opts);\n}\nexport function assertJSXClosingElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingElement {\n  assert(\"JSXClosingElement\", node, opts);\n}\nexport function assertJSXElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXElement {\n  assert(\"JSXElement\", node, opts);\n}\nexport function assertJSXEmptyExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXEmptyExpression {\n  assert(\"JSXEmptyExpression\", node, opts);\n}\nexport function assertJSXExpressionContainer(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXExpressionContainer {\n  assert(\"JSXExpressionContainer\", node, opts);\n}\nexport function assertJSXSpreadChild(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadChild {\n  assert(\"JSXSpreadChild\", node, opts);\n}\nexport function assertJSXIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXIdentifier {\n  assert(\"JSXIdentifier\", node, opts);\n}\nexport function assertJSXMemberExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXMemberExpression {\n  assert(\"JSXMemberExpression\", node, opts);\n}\nexport function assertJSXNamespacedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXNamespacedName {\n  assert(\"JSXNamespacedName\", node, opts);\n}\nexport function assertJSXOpeningElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningElement {\n  assert(\"JSXOpeningElement\", node, opts);\n}\nexport function assertJSXSpreadAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXSpreadAttribute {\n  assert(\"JSXSpreadAttribute\", node, opts);\n}\nexport function assertJSXText(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXText {\n  assert(\"JSXText\", node, opts);\n}\nexport function assertJSXFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXFragment {\n  assert(\"JSXFragment\", node, opts);\n}\nexport function assertJSXOpeningFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXOpeningFragment {\n  assert(\"JSXOpeningFragment\", node, opts);\n}\nexport function assertJSXClosingFragment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSXClosingFragment {\n  assert(\"JSXClosingFragment\", node, opts);\n}\nexport function assertNoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Noop {\n  assert(\"Noop\", node, opts);\n}\nexport function assertPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Placeholder {\n  assert(\"Placeholder\", node, opts);\n}\nexport function assertV8IntrinsicIdentifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.V8IntrinsicIdentifier {\n  assert(\"V8IntrinsicIdentifier\", node, opts);\n}\nexport function assertArgumentPlaceholder(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ArgumentPlaceholder {\n  assert(\"ArgumentPlaceholder\", node, opts);\n}\nexport function assertBindExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BindExpression {\n  assert(\"BindExpression\", node, opts);\n}\nexport function assertImportAttribute(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ImportAttribute {\n  assert(\"ImportAttribute\", node, opts);\n}\nexport function assertDecorator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Decorator {\n  assert(\"Decorator\", node, opts);\n}\nexport function assertDoExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DoExpression {\n  assert(\"DoExpression\", node, opts);\n}\nexport function assertExportDefaultSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDefaultSpecifier {\n  assert(\"ExportDefaultSpecifier\", node, opts);\n}\nexport function assertRecordExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.RecordExpression {\n  assert(\"RecordExpression\", node, opts);\n}\nexport function assertTupleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TupleExpression {\n  assert(\"TupleExpression\", node, opts);\n}\nexport function assertDecimalLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.DecimalLiteral {\n  assert(\"DecimalLiteral\", node, opts);\n}\nexport function assertModuleExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleExpression {\n  assert(\"ModuleExpression\", node, opts);\n}\nexport function assertTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TopicReference {\n  assert(\"TopicReference\", node, opts);\n}\nexport function assertPipelineTopicExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineTopicExpression {\n  assert(\"PipelineTopicExpression\", node, opts);\n}\nexport function assertPipelineBareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelineBareFunction {\n  assert(\"PipelineBareFunction\", node, opts);\n}\nexport function assertPipelinePrimaryTopicReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PipelinePrimaryTopicReference {\n  assert(\"PipelinePrimaryTopicReference\", node, opts);\n}\nexport function assertTSParameterProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParameterProperty {\n  assert(\"TSParameterProperty\", node, opts);\n}\nexport function assertTSDeclareFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareFunction {\n  assert(\"TSDeclareFunction\", node, opts);\n}\nexport function assertTSDeclareMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSDeclareMethod {\n  assert(\"TSDeclareMethod\", node, opts);\n}\nexport function assertTSQualifiedName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSQualifiedName {\n  assert(\"TSQualifiedName\", node, opts);\n}\nexport function assertTSCallSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSCallSignatureDeclaration {\n  assert(\"TSCallSignatureDeclaration\", node, opts);\n}\nexport function assertTSConstructSignatureDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructSignatureDeclaration {\n  assert(\"TSConstructSignatureDeclaration\", node, opts);\n}\nexport function assertTSPropertySignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSPropertySignature {\n  assert(\"TSPropertySignature\", node, opts);\n}\nexport function assertTSMethodSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMethodSignature {\n  assert(\"TSMethodSignature\", node, opts);\n}\nexport function assertTSIndexSignature(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexSignature {\n  assert(\"TSIndexSignature\", node, opts);\n}\nexport function assertTSAnyKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAnyKeyword {\n  assert(\"TSAnyKeyword\", node, opts);\n}\nexport function assertTSBooleanKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBooleanKeyword {\n  assert(\"TSBooleanKeyword\", node, opts);\n}\nexport function assertTSBigIntKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBigIntKeyword {\n  assert(\"TSBigIntKeyword\", node, opts);\n}\nexport function assertTSIntrinsicKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntrinsicKeyword {\n  assert(\"TSIntrinsicKeyword\", node, opts);\n}\nexport function assertTSNeverKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNeverKeyword {\n  assert(\"TSNeverKeyword\", node, opts);\n}\nexport function assertTSNullKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNullKeyword {\n  assert(\"TSNullKeyword\", node, opts);\n}\nexport function assertTSNumberKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNumberKeyword {\n  assert(\"TSNumberKeyword\", node, opts);\n}\nexport function assertTSObjectKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSObjectKeyword {\n  assert(\"TSObjectKeyword\", node, opts);\n}\nexport function assertTSStringKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSStringKeyword {\n  assert(\"TSStringKeyword\", node, opts);\n}\nexport function assertTSSymbolKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSymbolKeyword {\n  assert(\"TSSymbolKeyword\", node, opts);\n}\nexport function assertTSUndefinedKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUndefinedKeyword {\n  assert(\"TSUndefinedKeyword\", node, opts);\n}\nexport function assertTSUnknownKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnknownKeyword {\n  assert(\"TSUnknownKeyword\", node, opts);\n}\nexport function assertTSVoidKeyword(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSVoidKeyword {\n  assert(\"TSVoidKeyword\", node, opts);\n}\nexport function assertTSThisType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSThisType {\n  assert(\"TSThisType\", node, opts);\n}\nexport function assertTSFunctionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSFunctionType {\n  assert(\"TSFunctionType\", node, opts);\n}\nexport function assertTSConstructorType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConstructorType {\n  assert(\"TSConstructorType\", node, opts);\n}\nexport function assertTSTypeReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeReference {\n  assert(\"TSTypeReference\", node, opts);\n}\nexport function assertTSTypePredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypePredicate {\n  assert(\"TSTypePredicate\", node, opts);\n}\nexport function assertTSTypeQuery(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeQuery {\n  assert(\"TSTypeQuery\", node, opts);\n}\nexport function assertTSTypeLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeLiteral {\n  assert(\"TSTypeLiteral\", node, opts);\n}\nexport function assertTSArrayType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSArrayType {\n  assert(\"TSArrayType\", node, opts);\n}\nexport function assertTSTupleType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTupleType {\n  assert(\"TSTupleType\", node, opts);\n}\nexport function assertTSOptionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSOptionalType {\n  assert(\"TSOptionalType\", node, opts);\n}\nexport function assertTSRestType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSRestType {\n  assert(\"TSRestType\", node, opts);\n}\nexport function assertTSNamedTupleMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamedTupleMember {\n  assert(\"TSNamedTupleMember\", node, opts);\n}\nexport function assertTSUnionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSUnionType {\n  assert(\"TSUnionType\", node, opts);\n}\nexport function assertTSIntersectionType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIntersectionType {\n  assert(\"TSIntersectionType\", node, opts);\n}\nexport function assertTSConditionalType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSConditionalType {\n  assert(\"TSConditionalType\", node, opts);\n}\nexport function assertTSInferType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInferType {\n  assert(\"TSInferType\", node, opts);\n}\nexport function assertTSParenthesizedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSParenthesizedType {\n  assert(\"TSParenthesizedType\", node, opts);\n}\nexport function assertTSTypeOperator(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeOperator {\n  assert(\"TSTypeOperator\", node, opts);\n}\nexport function assertTSIndexedAccessType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSIndexedAccessType {\n  assert(\"TSIndexedAccessType\", node, opts);\n}\nexport function assertTSMappedType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSMappedType {\n  assert(\"TSMappedType\", node, opts);\n}\nexport function assertTSLiteralType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSLiteralType {\n  assert(\"TSLiteralType\", node, opts);\n}\nexport function assertTSExpressionWithTypeArguments(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExpressionWithTypeArguments {\n  assert(\"TSExpressionWithTypeArguments\", node, opts);\n}\nexport function assertTSInterfaceDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceDeclaration {\n  assert(\"TSInterfaceDeclaration\", node, opts);\n}\nexport function assertTSInterfaceBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInterfaceBody {\n  assert(\"TSInterfaceBody\", node, opts);\n}\nexport function assertTSTypeAliasDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAliasDeclaration {\n  assert(\"TSTypeAliasDeclaration\", node, opts);\n}\nexport function assertTSInstantiationExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSInstantiationExpression {\n  assert(\"TSInstantiationExpression\", node, opts);\n}\nexport function assertTSAsExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSAsExpression {\n  assert(\"TSAsExpression\", node, opts);\n}\nexport function assertTSSatisfiesExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSSatisfiesExpression {\n  assert(\"TSSatisfiesExpression\", node, opts);\n}\nexport function assertTSTypeAssertion(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAssertion {\n  assert(\"TSTypeAssertion\", node, opts);\n}\nexport function assertTSEnumDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumDeclaration {\n  assert(\"TSEnumDeclaration\", node, opts);\n}\nexport function assertTSEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEnumMember {\n  assert(\"TSEnumMember\", node, opts);\n}\nexport function assertTSModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleDeclaration {\n  assert(\"TSModuleDeclaration\", node, opts);\n}\nexport function assertTSModuleBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSModuleBlock {\n  assert(\"TSModuleBlock\", node, opts);\n}\nexport function assertTSImportType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportType {\n  assert(\"TSImportType\", node, opts);\n}\nexport function assertTSImportEqualsDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSImportEqualsDeclaration {\n  assert(\"TSImportEqualsDeclaration\", node, opts);\n}\nexport function assertTSExternalModuleReference(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExternalModuleReference {\n  assert(\"TSExternalModuleReference\", node, opts);\n}\nexport function assertTSNonNullExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNonNullExpression {\n  assert(\"TSNonNullExpression\", node, opts);\n}\nexport function assertTSExportAssignment(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSExportAssignment {\n  assert(\"TSExportAssignment\", node, opts);\n}\nexport function assertTSNamespaceExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSNamespaceExportDeclaration {\n  assert(\"TSNamespaceExportDeclaration\", node, opts);\n}\nexport function assertTSTypeAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeAnnotation {\n  assert(\"TSTypeAnnotation\", node, opts);\n}\nexport function assertTSTypeParameterInstantiation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterInstantiation {\n  assert(\"TSTypeParameterInstantiation\", node, opts);\n}\nexport function assertTSTypeParameterDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameterDeclaration {\n  assert(\"TSTypeParameterDeclaration\", node, opts);\n}\nexport function assertTSTypeParameter(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeParameter {\n  assert(\"TSTypeParameter\", node, opts);\n}\nexport function assertStandardized(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Standardized {\n  assert(\"Standardized\", node, opts);\n}\nexport function assertExpression(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Expression {\n  assert(\"Expression\", node, opts);\n}\nexport function assertBinary(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Binary {\n  assert(\"Binary\", node, opts);\n}\nexport function assertScopable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Scopable {\n  assert(\"Scopable\", node, opts);\n}\nexport function assertBlockParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.BlockParent {\n  assert(\"BlockParent\", node, opts);\n}\nexport function assertBlock(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Block {\n  assert(\"Block\", node, opts);\n}\nexport function assertStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Statement {\n  assert(\"Statement\", node, opts);\n}\nexport function assertTerminatorless(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Terminatorless {\n  assert(\"Terminatorless\", node, opts);\n}\nexport function assertCompletionStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.CompletionStatement {\n  assert(\"CompletionStatement\", node, opts);\n}\nexport function assertConditional(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Conditional {\n  assert(\"Conditional\", node, opts);\n}\nexport function assertLoop(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Loop {\n  assert(\"Loop\", node, opts);\n}\nexport function assertWhile(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.While {\n  assert(\"While\", node, opts);\n}\nexport function assertExpressionWrapper(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExpressionWrapper {\n  assert(\"ExpressionWrapper\", node, opts);\n}\nexport function assertFor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.For {\n  assert(\"For\", node, opts);\n}\nexport function assertForXStatement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ForXStatement {\n  assert(\"ForXStatement\", node, opts);\n}\nexport function assertFunction(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Function {\n  assert(\"Function\", node, opts);\n}\nexport function assertFunctionParent(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FunctionParent {\n  assert(\"FunctionParent\", node, opts);\n}\nexport function assertPureish(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pureish {\n  assert(\"Pureish\", node, opts);\n}\nexport function assertDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Declaration {\n  assert(\"Declaration\", node, opts);\n}\nexport function assertPatternLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.PatternLike {\n  assert(\"PatternLike\", node, opts);\n}\nexport function assertLVal(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.LVal {\n  assert(\"LVal\", node, opts);\n}\nexport function assertTSEntityName(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSEntityName {\n  assert(\"TSEntityName\", node, opts);\n}\nexport function assertLiteral(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Literal {\n  assert(\"Literal\", node, opts);\n}\nexport function assertImmutable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Immutable {\n  assert(\"Immutable\", node, opts);\n}\nexport function assertUserWhitespacable(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UserWhitespacable {\n  assert(\"UserWhitespacable\", node, opts);\n}\nexport function assertMethod(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Method {\n  assert(\"Method\", node, opts);\n}\nexport function assertObjectMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ObjectMember {\n  assert(\"ObjectMember\", node, opts);\n}\nexport function assertProperty(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Property {\n  assert(\"Property\", node, opts);\n}\nexport function assertUnaryLike(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.UnaryLike {\n  assert(\"UnaryLike\", node, opts);\n}\nexport function assertPattern(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Pattern {\n  assert(\"Pattern\", node, opts);\n}\nexport function assertClass(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Class {\n  assert(\"Class\", node, opts);\n}\nexport function assertModuleDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleDeclaration {\n  assert(\"ModuleDeclaration\", node, opts);\n}\nexport function assertExportDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ExportDeclaration {\n  assert(\"ExportDeclaration\", node, opts);\n}\nexport function assertModuleSpecifier(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.ModuleSpecifier {\n  assert(\"ModuleSpecifier\", node, opts);\n}\nexport function assertAccessor(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Accessor {\n  assert(\"Accessor\", node, opts);\n}\nexport function assertPrivate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Private {\n  assert(\"Private\", node, opts);\n}\nexport function assertFlow(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Flow {\n  assert(\"Flow\", node, opts);\n}\nexport function assertFlowType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowType {\n  assert(\"FlowType\", node, opts);\n}\nexport function assertFlowBaseAnnotation(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowBaseAnnotation {\n  assert(\"FlowBaseAnnotation\", node, opts);\n}\nexport function assertFlowDeclaration(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowDeclaration {\n  assert(\"FlowDeclaration\", node, opts);\n}\nexport function assertFlowPredicate(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.FlowPredicate {\n  assert(\"FlowPredicate\", node, opts);\n}\nexport function assertEnumBody(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumBody {\n  assert(\"EnumBody\", node, opts);\n}\nexport function assertEnumMember(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.EnumMember {\n  assert(\"EnumMember\", node, opts);\n}\nexport function assertJSX(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.JSX {\n  assert(\"JSX\", node, opts);\n}\nexport function assertMiscellaneous(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.Miscellaneous {\n  assert(\"Miscellaneous\", node, opts);\n}\nexport function assertTypeScript(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TypeScript {\n  assert(\"TypeScript\", node, opts);\n}\nexport function assertTSTypeElement(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSTypeElement {\n  assert(\"TSTypeElement\", node, opts);\n}\nexport function assertTSType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSType {\n  assert(\"TSType\", node, opts);\n}\nexport function assertTSBaseType(\n  node: object | null | undefined,\n  opts?: object | null,\n): asserts node is t.TSBaseType {\n  assert(\"TSBaseType\", node, opts);\n}\nexport function assertNumberLiteral(node: any, opts: any): void {\n  console.trace(\n    \"The node type NumberLiteral has been renamed to NumericLiteral\",\n  );\n  assert(\"NumberLiteral\", node, opts);\n}\nexport function assertRegexLiteral(node: any, opts: any): void {\n  console.trace(\"The node type RegexLiteral has been renamed to RegExpLiteral\");\n  assert(\"RegexLiteral\", node, opts);\n}\nexport function assertRestProperty(node: any, opts: any): void {\n  console.trace(\"The node type RestProperty has been renamed to RestElement\");\n  assert(\"RestProperty\", node, opts);\n}\nexport function assertSpreadProperty(node: any, opts: any): void {\n  console.trace(\n    \"The node type SpreadProperty has been renamed to SpreadElement\",\n  );\n  assert(\"SpreadProperty\", node, opts);\n}\n", "import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated\";\nimport type * as t from \"../..\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n", "import {\n  isAnyTypeAnnotation,\n  isGenericTypeAnnotation,\n  isUnionTypeAnnotation,\n  isFlowBaseAnnotation,\n  isIdentifier,\n} from \"../../validators/generated\";\nimport type * as t from \"../..\";\n\nfunction getQualifiedName(node: t.GenericTypeAnnotation[\"id\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.id.name}.${getQualifiedName(node.qualification)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  // todo(babel-8): change type to Array<...>\n  nodes: ReadonlyArray<t.FlowType | false | null | undefined>,\n): t.FlowType[] {\n  const generics = new Map<string, t.GenericTypeAnnotation>();\n  const bases = new Map<t.FlowBaseAnnotation[\"type\"], t.FlowBaseAnnotation>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.FlowType[]>();\n\n  const types: t.FlowType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (isFlowBaseAnnotation(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isUnionTypeAnnotation(node)) {\n      if (!typeGroups.has(node.types)) {\n        // todo(babel-8): use .push when nodes is mutable\n        nodes = nodes.concat(node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // find a matching generic type and merge and deduplicate the type parameters\n    if (isGenericTypeAnnotation(node)) {\n      const name = getQualifiedName(node.id);\n\n      if (generics.has(name)) {\n        let existing: t.Flow = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params.concat(node.typeParameters.params),\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n", "import { unionTypeAnnotation } from \"../generated\";\nimport removeTypeDuplicates from \"../../modifications/flow/removeTypeDuplicates\";\nimport type * as t from \"../..\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createFlowUnionType<T extends t.FlowType>(\n  types: [T] | Array<T>,\n): T | t.UnionTypeAnnotation {\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0] as T;\n  } else {\n    return unionTypeAnnotation(flattened);\n  }\n}\n", "import {\n  isIdentifier,\n  isTSAnyKeyword,\n  isTSTypeReference,\n  isTSUnionType,\n  isTSBaseType,\n} from \"../../validators/generated\";\nimport type * as t from \"../..\";\n\nfunction getQualifiedName(node: t.TSTypeReference[\"typeName\"]): string {\n  return isIdentifier(node)\n    ? node.name\n    : `${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n * Dedupe type annotations.\n */\nexport default function removeTypeDuplicates(\n  nodes: Array<t.TSType>,\n): Array<t.TSType> {\n  const generics = new Map<string, t.TSTypeReference>();\n  const bases = new Map<t.TSBaseType[\"type\"], t.TSBaseType>();\n\n  // store union type groups to circular references\n  const typeGroups = new Set<t.TSType[]>();\n\n  const types: t.TSType[] = [];\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!node) continue;\n\n    // detect duplicates\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    // this type matches anything\n    if (isTSAnyKeyword(node)) {\n      return [node];\n    }\n\n    // Analogue of FlowBaseAnnotation\n    if (isTSBaseType(node)) {\n      bases.set(node.type, node);\n      continue;\n    }\n\n    if (isTSUnionType(node)) {\n      if (!typeGroups.has(node.types)) {\n        nodes.push(...node.types);\n        typeGroups.add(node.types);\n      }\n      continue;\n    }\n\n    // todo: support merging tuples: number[]\n    if (isTSTypeReference(node) && node.typeParameters) {\n      const name = getQualifiedName(node.typeName);\n\n      if (generics.has(name)) {\n        let existing: t.TypeScript = generics.get(name);\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(\n              existing.typeParameters.params.concat(node.typeParameters.params),\n            );\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics.set(name, node);\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  // add back in bases\n  for (const [, baseType] of bases) {\n    types.push(baseType);\n  }\n\n  // add back in generics\n  for (const [, genericName] of generics) {\n    types.push(genericName);\n  }\n\n  return types;\n}\n", "import { tsUnionType } from \"../generated\";\nimport removeTypeDuplicates from \"../../modifications/typescript/removeTypeDuplicates\";\nimport { isTSTypeAnnotation } from \"../../validators/generated/index\";\nimport type * as t from \"../..\";\n\n/**\n * Takes an array of `types` and flattens them, removing duplicates and\n * returns a `UnionTypeAnnotation` node containing them.\n */\nexport default function createTSUnionType(\n  typeAnnotations: Array<t.TSTypeAnnotation | t.TSType>,\n): t.TSType {\n  const types = typeAnnotations.map(type => {\n    return isTSTypeAnnotation(type) ? type.typeAnnotation : type;\n  });\n  const flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return tsUnionType(flattened);\n  }\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\n\n/**\n * This file is written in JavaScript and not TypeScript because uppercase builders\n * conflict with AST types. TypeScript reads the uppercase.d.ts file instead.\n */\n\nexport {\n  arrayExpression as ArrayExpression,\n  assignmentExpression as AssignmentExpression,\n  binaryExpression as BinaryExpression,\n  interpreterDirective as InterpreterDirective,\n  directive as Directive,\n  directiveLiteral as DirectiveLiteral,\n  blockStatement as BlockStatement,\n  breakStatement as BreakStatement,\n  callExpression as CallExpression,\n  catchClause as CatchClause,\n  conditionalExpression as ConditionalExpression,\n  continueStatement as ContinueStatement,\n  debuggerStatement as DebuggerStatement,\n  doWhileStatement as DoWhileStatement,\n  emptyStatement as EmptyStatement,\n  expressionStatement as ExpressionStatement,\n  file as File,\n  forInStatement as ForInStatement,\n  forStatement as ForStatement,\n  functionDeclaration as FunctionDeclaration,\n  functionExpression as FunctionExpression,\n  identifier as Identifier,\n  ifStatement as IfStatement,\n  labeledStatement as LabeledStatement,\n  stringLiteral as StringLiteral,\n  numericLiteral as NumericLiteral,\n  nullLiteral as NullLiteral,\n  booleanLiteral as BooleanLiteral,\n  regExpLiteral as RegExpLiteral,\n  logicalExpression as LogicalExpression,\n  memberExpression as MemberExpression,\n  newExpression as NewExpression,\n  program as Program,\n  objectExpression as ObjectExpression,\n  objectMethod as ObjectMethod,\n  objectProperty as ObjectProperty,\n  restElement as RestElement,\n  returnStatement as ReturnStatement,\n  sequenceExpression as SequenceExpression,\n  parenthesizedExpression as ParenthesizedExpression,\n  switchCase as SwitchCase,\n  switchStatement as SwitchStatement,\n  thisExpression as ThisExpression,\n  throwStatement as ThrowStatement,\n  tryStatement as TryStatement,\n  unaryExpression as UnaryExpression,\n  updateExpression as UpdateExpression,\n  variableDeclaration as VariableDeclaration,\n  variableDeclarator as VariableDeclarator,\n  whileStatement as WhileStatement,\n  withStatement as WithStatement,\n  assignmentPattern as AssignmentPattern,\n  arrayPattern as ArrayPattern,\n  arrowFunctionExpression as ArrowFunctionExpression,\n  classBody as ClassBody,\n  classExpression as ClassExpression,\n  classDeclaration as ClassDeclaration,\n  exportAllDeclaration as ExportAllDeclaration,\n  exportDefaultDeclaration as ExportDefaultDeclaration,\n  exportNamedDeclaration as ExportNamedDeclaration,\n  exportSpecifier as ExportSpecifier,\n  forOfStatement as ForOfStatement,\n  importDeclaration as ImportDeclaration,\n  importDefaultSpecifier as ImportDefaultSpecifier,\n  importNamespaceSpecifier as ImportNamespaceSpecifier,\n  importSpecifier as ImportSpecifier,\n  metaProperty as MetaProperty,\n  classMethod as ClassMethod,\n  objectPattern as ObjectPattern,\n  spreadElement as SpreadElement,\n  super as Super,\n  taggedTemplateExpression as TaggedTemplateExpression,\n  templateElement as TemplateElement,\n  templateLiteral as TemplateLiteral,\n  yieldExpression as YieldExpression,\n  awaitExpression as AwaitExpression,\n  import as Import,\n  bigIntLiteral as BigIntLiteral,\n  exportNamespaceSpecifier as ExportNamespaceSpecifier,\n  optionalMemberExpression as OptionalMemberExpression,\n  optionalCallExpression as OptionalCallExpression,\n  classProperty as ClassProperty,\n  classAccessorProperty as ClassAccessorProperty,\n  classPrivateProperty as ClassPrivateProperty,\n  classPrivateMethod as ClassPrivateMethod,\n  privateName as PrivateName,\n  staticBlock as StaticBlock,\n  anyTypeAnnotation as AnyTypeAnnotation,\n  arrayTypeAnnotation as ArrayTypeAnnotation,\n  booleanTypeAnnotation as BooleanTypeAnnotation,\n  booleanLiteralTypeAnnotation as BooleanLiteralTypeAnnotation,\n  nullLiteralTypeAnnotation as NullLiteralTypeAnnotation,\n  classImplements as ClassImplements,\n  declareClass as DeclareClass,\n  declareFunction as DeclareFunction,\n  declareInterface as DeclareInterface,\n  declareModule as DeclareModule,\n  declareModuleExports as DeclareModuleExports,\n  declareTypeAlias as DeclareTypeAlias,\n  declareOpaqueType as DeclareOpaqueType,\n  declareVariable as DeclareVariable,\n  declareExportDeclaration as DeclareExportDeclaration,\n  declareExportAllDeclaration as DeclareExportAllDeclaration,\n  declaredPredicate as DeclaredPredicate,\n  existsTypeAnnotation as ExistsTypeAnnotation,\n  functionTypeAnnotation as FunctionTypeAnnotation,\n  functionTypeParam as FunctionTypeParam,\n  genericTypeAnnotation as GenericTypeAnnotation,\n  inferredPredicate as InferredPredicate,\n  interfaceExtends as InterfaceExtends,\n  interfaceDeclaration as InterfaceDeclaration,\n  interfaceTypeAnnotation as InterfaceTypeAnnotation,\n  intersectionTypeAnnotation as IntersectionTypeAnnotation,\n  mixedTypeAnnotation as MixedTypeAnnotation,\n  emptyTypeAnnotation as EmptyTypeAnnotation,\n  nullableTypeAnnotation as NullableTypeAnnotation,\n  numberLiteralTypeAnnotation as NumberLiteralTypeAnnotation,\n  numberTypeAnnotation as NumberTypeAnnotation,\n  objectTypeAnnotation as ObjectTypeAnnotation,\n  objectTypeInternalSlot as ObjectTypeInternalSlot,\n  objectTypeCallProperty as ObjectTypeCallProperty,\n  objectTypeIndexer as ObjectTypeIndexer,\n  objectTypeProperty as ObjectTypeProperty,\n  objectTypeSpreadProperty as ObjectTypeSpreadProperty,\n  opaqueType as OpaqueType,\n  qualifiedTypeIdentifier as QualifiedTypeIdentifier,\n  stringLiteralTypeAnnotation as StringLiteralTypeAnnotation,\n  stringTypeAnnotation as StringTypeAnnotation,\n  symbolTypeAnnotation as SymbolTypeAnnotation,\n  thisTypeAnnotation as ThisTypeAnnotation,\n  tupleTypeAnnotation as TupleTypeAnnotation,\n  typeofTypeAnnotation as TypeofTypeAnnotation,\n  typeAlias as TypeAlias,\n  typeAnnotation as TypeAnnotation,\n  typeCastExpression as TypeCastExpression,\n  typeParameter as TypeParameter,\n  typeParameterDeclaration as TypeParameterDeclaration,\n  typeParameterInstantiation as TypeParameterInstantiation,\n  unionTypeAnnotation as UnionTypeAnnotation,\n  variance as Variance,\n  voidTypeAnnotation as VoidTypeAnnotation,\n  enumDeclaration as EnumDeclaration,\n  enumBooleanBody as EnumBooleanBody,\n  enumNumberBody as EnumNumberBody,\n  enumStringBody as EnumStringBody,\n  enumSymbolBody as EnumSymbolBody,\n  enumBooleanMember as EnumBooleanMember,\n  enumNumberMember as EnumNumberMember,\n  enumStringMember as EnumStringMember,\n  enumDefaultedMember as EnumDefaultedMember,\n  indexedAccessType as IndexedAccessType,\n  optionalIndexedAccessType as OptionalIndexedAccessType,\n  jsxAttribute as JSXAttribute,\n  jsxClosingElement as JSXClosingElement,\n  jsxElement as JSXElement,\n  jsxEmptyExpression as JSXEmptyExpression,\n  jsxExpressionContainer as JSXExpressionContainer,\n  jsxSpreadChild as JSXSpreadChild,\n  jsxIdentifier as JSXIdentifier,\n  jsxMemberExpression as JSXMemberExpression,\n  jsxNamespacedName as JSXNamespacedName,\n  jsxOpeningElement as JSXOpeningElement,\n  jsxSpreadAttribute as JSXSpreadAttribute,\n  jsxText as JSXText,\n  jsxFragment as JSXFragment,\n  jsxOpeningFragment as JSXOpeningFragment,\n  jsxClosingFragment as JSXClosingFragment,\n  noop as Noop,\n  placeholder as Placeholder,\n  v8IntrinsicIdentifier as V8IntrinsicIdentifier,\n  argumentPlaceholder as ArgumentPlaceholder,\n  bindExpression as BindExpression,\n  importAttribute as ImportAttribute,\n  decorator as Decorator,\n  doExpression as DoExpression,\n  exportDefaultSpecifier as ExportDefaultSpecifier,\n  recordExpression as RecordExpression,\n  tupleExpression as TupleExpression,\n  decimalLiteral as DecimalLiteral,\n  moduleExpression as ModuleExpression,\n  topicReference as TopicReference,\n  pipelineTopicExpression as PipelineTopicExpression,\n  pipelineBareFunction as PipelineBareFunction,\n  pipelinePrimaryTopicReference as PipelinePrimaryTopicReference,\n  tsParameterProperty as TSParameterProperty,\n  tsDeclareFunction as TSDeclareFunction,\n  tsDeclareMethod as TSDeclareMethod,\n  tsQualifiedName as TSQualifiedName,\n  tsCallSignatureDeclaration as TSCallSignatureDeclaration,\n  tsConstructSignatureDeclaration as TSConstructSignatureDeclaration,\n  tsPropertySignature as TSPropertySignature,\n  tsMethodSignature as TSMethodSignature,\n  tsIndexSignature as TSIndexSignature,\n  tsAnyKeyword as TSAnyKeyword,\n  tsBooleanKeyword as TSBooleanKeyword,\n  tsBigIntKeyword as TSBigIntKeyword,\n  tsIntrinsicKeyword as TSIntrinsicKeyword,\n  tsNeverKeyword as TSNeverKeyword,\n  tsNullKeyword as TSNullKeyword,\n  tsNumberKeyword as TSNumberKeyword,\n  tsObjectKeyword as TSObjectKeyword,\n  tsStringKeyword as TSStringKeyword,\n  tsSymbolKeyword as TSSymbolKeyword,\n  tsUndefinedKeyword as TSUndefinedKeyword,\n  tsUnknownKeyword as TSUnknownKeyword,\n  tsVoidKeyword as TSVoidKeyword,\n  tsThisType as TSThisType,\n  tsFunctionType as TSFunctionType,\n  tsConstructorType as TSConstructorType,\n  tsTypeReference as TSTypeReference,\n  tsTypePredicate as TSTypePredicate,\n  tsTypeQuery as TSTypeQuery,\n  tsTypeLiteral as TSTypeLiteral,\n  tsArrayType as TSArrayType,\n  tsTupleType as TSTupleType,\n  tsOptionalType as TSOptionalType,\n  tsRestType as TSRestType,\n  tsNamedTupleMember as TSNamedTupleMember,\n  tsUnionType as TSUnionType,\n  tsIntersectionType as TSIntersectionType,\n  tsConditionalType as TSConditionalType,\n  tsInferType as TSInferType,\n  tsParenthesizedType as TSParenthesizedType,\n  tsTypeOperator as TSTypeOperator,\n  tsIndexedAccessType as TSIndexedAccessType,\n  tsMappedType as TSMappedType,\n  tsLiteralType as TSLiteralType,\n  tsExpressionWithTypeArguments as TSExpressionWithTypeArguments,\n  tsInterfaceDeclaration as TSInterfaceDeclaration,\n  tsInterfaceBody as TSInterfaceBody,\n  tsTypeAliasDeclaration as TSTypeAliasDeclaration,\n  tsInstantiationExpression as TSInstantiationExpression,\n  tsAsExpression as TSAsExpression,\n  tsSatisfiesExpression as TSSatisfiesExpression,\n  tsTypeAssertion as TSTypeAssertion,\n  tsEnumDeclaration as TSEnumDeclaration,\n  tsEnumMember as TSEnumMember,\n  tsModuleDeclaration as TSModuleDeclaration,\n  tsModuleBlock as TSModuleBlock,\n  tsImportType as TSImportType,\n  tsImportEqualsDeclaration as TSImportEqualsDeclaration,\n  tsExternalModuleReference as TSExternalModuleReference,\n  tsNonNullExpression as TSNonNullExpression,\n  tsExportAssignment as TSExportAssignment,\n  tsNamespaceExportDeclaration as TSNamespaceExportDeclaration,\n  tsTypeAnnotation as TSTypeAnnotation,\n  tsTypeParameterInstantiation as TSTypeParameterInstantiation,\n  tsTypeParameterDeclaration as TSTypeParameterDeclaration,\n  tsTypeParameter as TSTypeParameter,\n  numberLiteral as NumberLiteral,\n  regexLiteral as RegexLiteral,\n  restProperty as RestProperty,\n  spreadProperty as SpreadProperty,\n} from \"./index\";\n", "import { NODE_FIELDS } from \"../definitions\";\nimport type * as t from \"..\";\nimport { isFile, isIdentifier } from \"../validators/generated\";\n\nconst has = Function.call.bind(Object.prototype.hasOwnProperty);\n\ntype CommentCache = Map<t.Comment, t.Comment>;\n\n// This function will never be called for comments, only for real nodes.\nfunction cloneIfNode(\n  obj: t.Node | undefined | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(\n  obj: t.Node | undefined | null | (t.Node | undefined | null)[],\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\n\n/**\n * Create a clone of a `node` including only properties belonging to the node.\n * If the second parameter is `false`, cloneNode performs a shallow clone.\n * If the third parameter is true, the cloned nodes exclude location properties.\n */\nexport default function cloneNode<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n): T {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\n\nfunction cloneNodeInternal<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n  commentsCache: CommentCache,\n): T {\n  if (!node) return node;\n\n  const { type } = node;\n  const newNode: any = { type: node.type };\n\n  // Special-case identifiers since they are the most cloned nodes.\n  if (isIdentifier(node)) {\n    newNode.name = node.name;\n\n    if (has(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (has(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep\n        ? cloneIfNodeOrArray(\n            node.typeAnnotation,\n            true,\n            withoutLoc,\n            commentsCache,\n          )\n        : node.typeAnnotation;\n    }\n  } else if (!has(NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(NODE_FIELDS[type])) {\n      if (has(node, field)) {\n        if (deep) {\n          newNode[field] =\n            isFile(node) && field === \"comments\"\n              ? maybeCloneComments(\n                  node.comments,\n                  deep,\n                  withoutLoc,\n                  commentsCache,\n                )\n              : cloneIfNodeOrArray(\n                  // @ts-expect-error node[field] has been guarded by has check\n                  node[field],\n                  true,\n                  withoutLoc,\n                  commentsCache,\n                );\n        } else {\n          newNode[field] =\n            // @ts-expect-error node[field] has been guarded by has check\n            node[field];\n        }\n      }\n    }\n  }\n\n  if (has(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (has(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(\n      node.leadingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (has(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(\n      node.innerComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (has(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(\n      node.trailingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (has(node, \"extra\")) {\n    newNode.extra = {\n      ...node.extra,\n    };\n  }\n\n  return newNode;\n}\n\nfunction maybeCloneComments<T extends t.Comment>(\n  comments: ReadonlyArray<T> | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: Map<T, T>,\n): ReadonlyArray<T> | null {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n\n    const { type, value, loc } = comment;\n\n    const ret = { type, value, loc } as T;\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n\n    commentsCache.set(comment, ret);\n\n    return ret;\n  });\n}\n", "import cloneNode from \"./cloneNode\";\nimport type * as t from \"..\";\n\n/**\n * Create a shallow clone of a `node`, including only\n * properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function clone<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false);\n}\n", "import cloneNode from \"./cloneNode\";\nimport type * as t from \"..\";\n\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * @deprecated Use t.cloneNode instead.\n */\nexport default function cloneDeep<T extends t.Node>(node: T): T {\n  return cloneNode(node);\n}\n", "import cloneNode from \"./cloneNode\";\nimport type * as t from \"..\";\n/**\n * Create a deep clone of a `node` and all of it's child nodes\n * including only properties belonging to the node.\n * excluding `_private` and location properties.\n */\nexport default function cloneDeepWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ true, /* withoutLoc */ true);\n}\n", "import cloneNode from \"./cloneNode\";\nimport type * as t from \"..\";\n\n/**\n * Create a shallow clone of a `node` excluding `_private` and location properties.\n */\nexport default function cloneWithoutLoc<T extends t.Node>(node: T): T {\n  return cloneNode(node, /* deep */ false, /* withoutLoc */ true);\n}\n", "import type * as t from \"..\";\n\n/**\n * Add comments of certain type to a node.\n */\nexport default function addComments<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  comments: Array<t.Comment>,\n): T {\n  if (!comments || !node) return node;\n\n  const key = `${type}Comments` as const;\n\n  if (node[key]) {\n    if (type === \"leading\") {\n      node[key] = comments.concat(node[key]);\n    } else {\n      node[key].push(...comments);\n    }\n  } else {\n    node[key] = comments;\n  }\n\n  return node;\n}\n", "import addComments from \"./addComments\";\nimport type * as t from \"..\";\n\n/**\n * Add comment of certain type to a node.\n */\nexport default function addComment<T extends t.Node>(\n  node: T,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n): T {\n  return addComments(node, type, [\n    {\n      type: line ? \"CommentLine\" : \"CommentBlock\",\n      value: content,\n    } as t.Comment,\n  ]);\n}\n", "import type * as t from \"..\";\n\nexport default function inherit<\n  C extends t.Node | undefined,\n  P extends t.Node | undefined,\n>(key: keyof C & keyof P, child: C, parent: P): void {\n  if (child && parent) {\n    // @ts-expect-error Could further refine key definitions\n    child[key] = Array.from(\n      new Set([].concat(child[key], parent[key]).filter(Boolean)),\n    );\n  }\n}\n", "import inherit from \"../utils/inherit\";\nimport type * as t from \"..\";\n\nexport default function inheritInnerComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"innerComments\", child, parent);\n}\n", "import inherit from \"../utils/inherit\";\nimport type * as t from \"..\";\n\nexport default function inheritLeadingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"leadingComments\", child, parent);\n}\n", "import inherit from \"../utils/inherit\";\nimport type * as t from \"..\";\n\nexport default function inheritTrailingComments(\n  child: t.Node,\n  parent: t.Node,\n): void {\n  inherit(\"trailingComments\", child, parent);\n}\n", "import inheritTrailingComments from \"./inheritTrailingComments\";\nimport inheritLeadingComments from \"./inheritLeadingComments\";\nimport inheritInnerComments from \"./inheritInnerComments\";\nimport type * as t from \"..\";\n\n/**\n * Inherit all unique comments from `parent` node to `child` node.\n */\nexport default function inheritsComments<T extends t.Node>(\n  child: T,\n  parent: t.Node,\n): T {\n  inheritTrailingComments(child, parent);\n  inheritLeadingComments(child, parent);\n  inheritInnerComments(child, parent);\n\n  return child;\n}\n", "import { COMMENT_KEYS } from \"../constants\";\nimport type * as t from \"..\";\n\n/**\n * Remove comment properties from a node.\n */\nexport default function removeComments<T extends t.Node>(node: T): T {\n  COMMENT_KEYS.forEach(key => {\n    node[key] = null;\n  });\n\n  return node;\n}\n", "/*\n * This file is auto-generated! Do not modify it directly.\n * To re-generate run 'make build'\n */\nimport { FLIPPED_ALIAS_KEYS } from \"../../definitions\";\n\nexport const STANDARDIZED_TYPES = FLIPPED_ALIAS_KEYS[\"Standardized\"];\nexport const EXPRESSION_TYPES = FLIPPED_ALIAS_KEYS[\"Expression\"];\nexport const BINARY_TYPES = FLIPPED_ALIAS_KEYS[\"Binary\"];\nexport const SCOPABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Scopable\"];\nexport const BLOCKPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"BlockParent\"];\nexport const BLOCK_TYPES = FLIPPED_ALIAS_KEYS[\"Block\"];\nexport const STATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"Statement\"];\nexport const TERMINATORLESS_TYPES = FLIPPED_ALIAS_KEYS[\"Terminatorless\"];\nexport const COMPLETIONSTATEMENT_TYPES =\n  FLIPPED_ALIAS_KEYS[\"CompletionStatement\"];\nexport const CONDITIONAL_TYPES = FLIPPED_ALIAS_KEYS[\"Conditional\"];\nexport const LOOP_TYPES = FLIPPED_ALIAS_KEYS[\"Loop\"];\nexport const WHILE_TYPES = FLIPPED_ALIAS_KEYS[\"While\"];\nexport const EXPRESSIONWRAPPER_TYPES = FLIPPED_ALIAS_KEYS[\"ExpressionWrapper\"];\nexport const FOR_TYPES = FLIPPED_ALIAS_KEYS[\"For\"];\nexport const FORXSTATEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"ForXStatement\"];\nexport const FUNCTION_TYPES = FLIPPED_ALIAS_KEYS[\"Function\"];\nexport const FUNCTIONPARENT_TYPES = FLIPPED_ALIAS_KEYS[\"FunctionParent\"];\nexport const PUREISH_TYPES = FLIPPED_ALIAS_KEYS[\"Pureish\"];\nexport const DECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"Declaration\"];\nexport const PATTERNLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"PatternLike\"];\nexport const LVAL_TYPES = FLIPPED_ALIAS_KEYS[\"LVal\"];\nexport const TSENTITYNAME_TYPES = FLIPPED_ALIAS_KEYS[\"TSEntityName\"];\nexport const LITERAL_TYPES = FLIPPED_ALIAS_KEYS[\"Literal\"];\nexport const IMMUTABLE_TYPES = FLIPPED_ALIAS_KEYS[\"Immutable\"];\nexport const USERWHITESPACABLE_TYPES = FLIPPED_ALIAS_KEYS[\"UserWhitespacable\"];\nexport const METHOD_TYPES = FLIPPED_ALIAS_KEYS[\"Method\"];\nexport const OBJECTMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"ObjectMember\"];\nexport const PROPERTY_TYPES = FLIPPED_ALIAS_KEYS[\"Property\"];\nexport const UNARYLIKE_TYPES = FLIPPED_ALIAS_KEYS[\"UnaryLike\"];\nexport const PATTERN_TYPES = FLIPPED_ALIAS_KEYS[\"Pattern\"];\nexport const CLASS_TYPES = FLIPPED_ALIAS_KEYS[\"Class\"];\nexport const MODULEDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"ModuleDeclaration\"];\nexport const EXPORTDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"ExportDeclaration\"];\nexport const MODULESPECIFIER_TYPES = FLIPPED_ALIAS_KEYS[\"ModuleSpecifier\"];\nexport const ACCESSOR_TYPES = FLIPPED_ALIAS_KEYS[\"Accessor\"];\nexport const PRIVATE_TYPES = FLIPPED_ALIAS_KEYS[\"Private\"];\nexport const FLOW_TYPES = FLIPPED_ALIAS_KEYS[\"Flow\"];\nexport const FLOWTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowType\"];\nexport const FLOWBASEANNOTATION_TYPES =\n  FLIPPED_ALIAS_KEYS[\"FlowBaseAnnotation\"];\nexport const FLOWDECLARATION_TYPES = FLIPPED_ALIAS_KEYS[\"FlowDeclaration\"];\nexport const FLOWPREDICATE_TYPES = FLIPPED_ALIAS_KEYS[\"FlowPredicate\"];\nexport const ENUMBODY_TYPES = FLIPPED_ALIAS_KEYS[\"EnumBody\"];\nexport const ENUMMEMBER_TYPES = FLIPPED_ALIAS_KEYS[\"EnumMember\"];\nexport const JSX_TYPES = FLIPPED_ALIAS_KEYS[\"JSX\"];\nexport const MISCELLANEOUS_TYPES = FLIPPED_ALIAS_KEYS[\"Miscellaneous\"];\nexport const TYPESCRIPT_TYPES = FLIPPED_ALIAS_KEYS[\"TypeScript\"];\nexport const TSTYPEELEMENT_TYPES = FLIPPED_ALIAS_KEYS[\"TSTypeElement\"];\nexport const TSTYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSType\"];\nexport const TSBASETYPE_TYPES = FLIPPED_ALIAS_KEYS[\"TSBaseType\"];\n", "import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n", "import toBlock from \"./toBlock\";\nimport type * as t from \"..\";\n\n/**\n * Ensure the `key` (defaults to \"body\") of a `node` is a block.\n * Casting it to a block if it is not.\n *\n * Returns the BlockStatement\n */\nexport default function ensureBlock(\n  node: t.Node,\n  key: string = \"body\",\n): t.BlockStatement {\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  const result = toBlock(node[key], node);\n  // @ts-expect-error Fixme: key may not exist in node, consider remove key = \"body\"\n  node[key] = result;\n  return result;\n}\n", "import isValidIdentifier from \"../validators/isValidIdentifier\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n", "import toIdentifier from \"./toIdentifier\";\n\nexport default function toBindingIdentifierName(name: string): string {\n  name = toIdentifier(name);\n  if (name === \"eval\" || name === \"arguments\") name = \"_\" + name;\n\n  return name;\n}\n", "import { isIdentifier } from \"../validators/generated\";\nimport { stringLiteral } from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default function toComputedKey(\n  node:\n    | t.ObjectMember\n    | t.ObjectProperty\n    | t.ClassMethod\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.MemberExpression\n    | t.OptionalMemberExpression,\n  // @ts-expect-error todo(flow->ts): maybe check the type of node before accessing .key and .property\n  key: t.Expression | t.PrivateName = node.key || node.property,\n) {\n  if (!node.computed && isIdentifier(key)) key = stringLiteral(key.name);\n\n  return key;\n}\n", "import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated\";\nimport type * as t from \"..\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n", "import { VISITOR_KEYS } from \"../definitions\";\nimport type * as t from \"..\";\n\n/**\n * A prefix AST traversal implementation meant for simple searching\n * and processing.\n */\nexport default function traverseFast<Options = {}>(\n  node: t.Node | null | undefined,\n  enter: (node: t.Node, opts?: Options) => void,\n  opts?: Options,\n): void {\n  if (!node) return;\n\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  opts = opts || ({} as Options);\n  enter(node, opts);\n\n  for (const key of keys) {\n    const subNode: t.Node | undefined | null =\n      // @ts-expect-error key must present in node\n      node[key];\n\n    if (Array.isArray(subNode)) {\n      for (const node of subNode) {\n        traverseFast(node, enter, opts);\n      }\n    } else {\n      traverseFast(subNode, enter, opts);\n    }\n  }\n}\n", "import { COMMENT_KEYS } from \"../constants\";\nimport type * as t from \"..\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n", "import traverseFast from \"../traverse/traverseFast\";\nimport removeProperties from \"./removeProperties\";\nimport type * as t from \"..\";\n\nexport default function removePropertiesDeep<T extends t.Node>(\n  tree: T,\n  opts?: { preserveComments: boolean } | null,\n): T {\n  traverseFast(tree, removeProperties, opts);\n\n  return tree;\n}\n", "import { isIdentifier, isStringLiteral } from \"../validators/generated\";\nimport cloneNode from \"../clone/cloneNode\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep\";\nimport type * as t from \"..\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n", "import {\n  isExportDeclaration,\n  isIdentifier,\n  isDeclaration,\n  isFunctionDeclaration,\n  isFunctionExpression,\n  isExportAllDeclaration,\n} from \"../validators/generated\";\nimport type * as t from \"..\";\n\nexport { getBindingIdentifiers as default };\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates: true,\n  outerOnly?: boolean,\n): Record<string, Array<t.Identifier>>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: false,\n  outerOnly?: boolean,\n): Record<string, t.Identifier>;\n\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>>;\n\n/**\n * Return a list of binding identifiers associated with the input `node`.\n */\nfunction getBindingIdentifiers(\n  node: t.Node,\n  duplicates?: boolean,\n  outerOnly?: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  const search: t.Node[] = [].concat(node);\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n\n    const keys =\n      // @ts-expect-error getBindingIdentifiers.keys do not cover all AST types\n      getBindingIdentifiers.keys[id.type];\n\n    if (isIdentifier(id)) {\n      if (duplicates) {\n        const _ids = (ids[id.name] = ids[id.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.name] = id;\n      }\n      continue;\n    }\n\n    if (isExportDeclaration(id) && !isExportAllDeclaration(id)) {\n      if (isDeclaration(id.declaration)) {\n        search.push(id.declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (isFunctionDeclaration(id)) {\n        search.push(id.id);\n        continue;\n      }\n\n      if (isFunctionExpression(id)) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const nodes =\n          // @ts-expect-error key must present in id\n          id[key] as t.Node[] | t.Node | undefined | null;\n        if (nodes) {\n          Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes);\n        }\n      }\n    }\n  }\n\n  // $FlowIssue Object.create() seems broken\n  return ids;\n}\n\n/**\n * Mapping of types to their identifier keys.\n */\ngetBindingIdentifiers.keys = {\n  DeclareClass: [\"id\"],\n  DeclareFunction: [\"id\"],\n  DeclareModule: [\"id\"],\n  DeclareVariable: [\"id\"],\n  DeclareInterface: [\"id\"],\n  DeclareTypeAlias: [\"id\"],\n  DeclareOpaqueType: [\"id\"],\n  InterfaceDeclaration: [\"id\"],\n  TypeAlias: [\"id\"],\n  OpaqueType: [\"id\"],\n\n  CatchClause: [\"param\"],\n  LabeledStatement: [\"label\"],\n  UnaryExpression: [\"argument\"],\n  AssignmentExpression: [\"left\"],\n\n  ImportSpecifier: [\"local\"],\n  ImportNamespaceSpecifier: [\"local\"],\n  ImportDefaultSpecifier: [\"local\"],\n  ImportDeclaration: [\"specifiers\"],\n\n  ExportSpecifier: [\"exported\"],\n  ExportNamespaceSpecifier: [\"exported\"],\n  ExportDefaultSpecifier: [\"exported\"],\n\n  FunctionDeclaration: [\"id\", \"params\"],\n  FunctionExpression: [\"id\", \"params\"],\n  ArrowFunctionExpression: [\"params\"],\n  ObjectMethod: [\"params\"],\n  ClassMethod: [\"params\"],\n  ClassPrivateMethod: [\"params\"],\n\n  ForInStatement: [\"left\"],\n  ForOfStatement: [\"left\"],\n\n  ClassDeclaration: [\"id\"],\n  ClassExpression: [\"id\"],\n\n  RestElement: [\"argument\"],\n  UpdateExpression: [\"argument\"],\n\n  ObjectProperty: [\"value\"],\n\n  AssignmentPattern: [\"left\"],\n  ArrayPattern: [\"elements\"],\n  ObjectPattern: [\"properties\"],\n\n  VariableDeclaration: [\"declarations\"],\n  VariableDeclarator: [\"id\"],\n};\n", "import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers\";\nimport {\n  isExpression,\n  isExpressionStatement,\n  isVariableDeclaration,\n  isIfStatement,\n  isBlockStatement,\n  isEmptyStatement,\n} from \"../validators/generated\";\nimport {\n  sequenceExpression,\n  assignmentExpression,\n  conditionalExpression,\n} from \"../builders/generated\";\nimport cloneNode from \"../clone/cloneNode\";\nimport type * as t from \"..\";\nimport type { Scope } from \"@babel/traverse\";\n\nexport type DeclarationInfo = {\n  kind: t.VariableDeclaration[\"kind\"];\n  id: t.Identifier;\n};\n\nexport default function gatherSequenceExpressions(\n  nodes: ReadonlyArray<t.Node>,\n  scope: Scope,\n  declars: Array<DeclarationInfo>,\n) {\n  const exprs: t.Expression[] = [];\n  let ensureLastUndefined = true;\n\n  for (const node of nodes) {\n    // if we encounter emptyStatement before a non-emptyStatement\n    // we want to disregard that\n    if (!isEmptyStatement(node)) {\n      ensureLastUndefined = false;\n    }\n\n    if (isExpression(node)) {\n      exprs.push(node);\n    } else if (isExpressionStatement(node)) {\n      exprs.push(node.expression);\n    } else if (isVariableDeclaration(node)) {\n      if (node.kind !== \"var\") return; // bailed\n\n      for (const declar of node.declarations) {\n        const bindings = getBindingIdentifiers(declar);\n        for (const key of Object.keys(bindings)) {\n          declars.push({\n            kind: node.kind,\n            id: cloneNode(bindings[key]),\n          });\n        }\n\n        if (declar.init) {\n          exprs.push(assignmentExpression(\"=\", declar.id, declar.init));\n        }\n      }\n\n      ensureLastUndefined = true;\n    } else if (isIfStatement(node)) {\n      const consequent = node.consequent\n        ? gatherSequenceExpressions([node.consequent], scope, declars)\n        : scope.buildUndefinedNode();\n      const alternate = node.alternate\n        ? gatherSequenceExpressions([node.alternate], scope, declars)\n        : scope.buildUndefinedNode();\n      if (!consequent || !alternate) return; // bailed\n\n      exprs.push(conditionalExpression(node.test, consequent, alternate));\n    } else if (isBlockStatement(node)) {\n      const body = gatherSequenceExpressions(node.body, scope, declars);\n      if (!body) return; // bailed\n\n      exprs.push(body);\n    } else if (isEmptyStatement(node)) {\n      // empty statement so ensure the last item is undefined if we're last\n      // checks if emptyStatement is first\n      if (nodes.indexOf(node) === 0) {\n        ensureLastUndefined = true;\n      }\n    } else {\n      // bailed, we can't turn this statement into an expression\n      return;\n    }\n  }\n\n  if (ensureLastUndefined) {\n    exprs.push(scope.buildUndefinedNode());\n  }\n\n  if (exprs.length === 1) {\n    return exprs[0];\n  } else {\n    return sequenceExpression(exprs);\n  }\n}\n", "import gatherSequenceExpressions from \"./gatherSequenceExpressions\";\nimport type * as t from \"..\";\nimport type { DeclarationInfo } from \"./gatherSequenceExpressions\";\n\n/**\n * Turn an array of statement `nodes` into a `SequenceExpression`.\n *\n * Variable declarations are turned into simple assignments and their\n * declarations hoisted to the top of the current scope.\n *\n * Expression statements are just resolved to their expression.\n */\nexport default function toSequenceExpression(\n  nodes: ReadonlyArray<t.Node>,\n  scope: any,\n): t.SequenceExpression | undefined {\n  if (!nodes?.length) return;\n\n  const declars: DeclarationInfo[] = [];\n  const result = gatherSequenceExpressions(nodes, scope, declars);\n  if (!result) return;\n\n  for (const declar of declars) {\n    scope.push(declar);\n  }\n\n  // @ts-expect-error fixme: gatherSequenceExpressions will return an Expression when there are only one element\n  return result;\n}\n", "import {\n  isStatement,\n  isFunction,\n  isClass,\n  isAssignmentExpression,\n} from \"../validators/generated\";\nimport { expressionStatement } from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default toStatement as {\n  (node: t.AssignmentExpression, ignore?: boolean): t.ExpressionStatement;\n\n  <T extends t.Statement>(node: T, ignore: false): T;\n  <T extends t.Statement>(node: T, ignore?: boolean): T | false;\n\n  (node: t.Class, ignore: false): t.ClassDeclaration;\n  (node: t.Class, ignore?: boolean): t.ClassDeclaration | false;\n\n  (node: t.Function, ignore: false): t.FunctionDeclaration;\n  (node: t.Function, ignore?: boolean): t.FunctionDeclaration | false;\n\n  (node: t.Node, ignore: false): t.Statement;\n  (node: t.Node, ignore?: boolean): t.Statement | false;\n};\n\nfunction toStatement(node: t.Node, ignore?: boolean): t.Statement | false {\n  if (isStatement(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if (isClass(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\" as const;\n  } else if (isFunction(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\" as const;\n  } else if (isAssignmentExpression(node)) {\n    return expressionStatement(node);\n  }\n\n  // @ts-expect-error todo(flow->ts): node.id might be missing\n  if (mustHaveId && !node.id) {\n    newType = false as false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  // @ts-expect-error manipulating node.type\n  node.type = newType;\n\n  // @ts-expect-error todo(flow->ts) refactor to avoid type unsafe mutations like reassigning node type above\n  return node;\n}\n", "import isValidIdentifier from \"../validators/isValidIdentifier\";\nimport {\n  identifier,\n  booleanLiteral,\n  nullLiteral,\n  stringLiteral,\n  numericLiteral,\n  regExpLiteral,\n  arrayExpression,\n  objectProperty,\n  objectExpression,\n  unaryExpression,\n  binaryExpression,\n} from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default valueToNode as {\n  (value: undefined): t.Identifier; // TODO: This should return \"void 0\"\n  (value: boolean): t.BooleanLiteral;\n  (value: null): t.NullLiteral;\n  (value: string): t.StringLiteral;\n  // Infinities and NaN need to use a BinaryExpression; negative values must be wrapped in UnaryExpression\n  (value: number): t.NumericLiteral | t.BinaryExpression | t.UnaryExpression;\n  (value: RegExp): t.RegExpLiteral;\n  (value: ReadonlyArray<unknown>): t.ArrayExpression;\n\n  // this throws with objects that are not plain objects,\n  // or if there are non-valueToNode-able values\n  (value: object): t.ObjectExpression;\n\n  (value: unknown): t.Expression;\n};\n\n// @ts-expect-error: Object.prototype.toString must return a string\nconst objectToString: (value: unknown) => string = Function.call.bind(\n  Object.prototype.toString,\n);\n\nfunction isRegExp(value: unknown): value is RegExp {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value: unknown): value is object {\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    Object.prototype.toString.call(value) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  // Object.prototype's __proto__ is null. Every other class's __proto__.__proto__ is\n  // not null by default. We cannot check if proto === Object.prototype because it\n  // could come from another realm.\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\n\nfunction valueToNode(value: unknown): t.Expression {\n  // undefined\n  if (value === undefined) {\n    return identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return nullLiteral();\n  }\n\n  // strings\n  if (typeof value === \"string\") {\n    return stringLiteral(value);\n  }\n\n  // numbers\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = numericLiteral(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        // NaN\n        numerator = numericLiteral(0);\n      } else {\n        // Infinity / -Infinity\n        numerator = numericLiteral(1);\n      }\n\n      result = binaryExpression(\"/\", numerator, numericLiteral(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = unaryExpression(\"-\", result);\n    }\n\n    return result;\n  }\n\n  // regexes\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return arrayExpression(value.map(valueToNode));\n  }\n\n  // object\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if (isValidIdentifier(key)) {\n        nodeKey = identifier(key);\n      } else {\n        nodeKey = stringLiteral(key);\n      }\n      props.push(\n        objectProperty(\n          nodeKey,\n          valueToNode(\n            // @ts-expect-error key must present in value\n            value[key],\n          ),\n        ),\n      );\n    }\n    return objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}\n", "import { memberExpression } from \"../builders/generated\";\nimport type * as t from \"..\";\n\n/**\n * Append a node to a member expression.\n */\nexport default function appendToMemberExpression(\n  member: t.MemberExpression,\n  append: t.MemberExpression[\"property\"],\n  computed: boolean = false,\n): t.MemberExpression {\n  member.object = memberExpression(\n    member.object,\n    member.property,\n    member.computed,\n  );\n  member.property = append;\n  member.computed = !!computed;\n\n  return member;\n}\n", "import { INHERIT_KEYS } from \"../constants\";\nimport inheritsComments from \"../comments/inheritsComments\";\nimport type * as t from \"..\";\n\n/**\n * Inherit all contextual properties from `parent` node to `child` node.\n */\nexport default function inherits<T extends t.Node | null | undefined>(\n  child: T,\n  parent: t.Node | null | undefined,\n): T {\n  if (!child || !parent) return child;\n\n  // optionally inherit specific properties if not null\n  for (const key of INHERIT_KEYS.optional) {\n    // @ts-expect-error Fixme: refine parent types\n    if (child[key] == null) {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit \"private\" properties\n  for (const key of Object.keys(parent)) {\n    if (key[0] === \"_\" && key !== \"__clone\") {\n      // @ts-expect-error Fixme: refine parent types\n      child[key] = parent[key];\n    }\n  }\n\n  // force inherit select properties\n  for (const key of INHERIT_KEYS.force) {\n    // @ts-expect-error Fixme: refine parent types\n    child[key] = parent[key];\n  }\n\n  inheritsComments(child, parent);\n\n  return child;\n}\n", "import { memberExpression } from \"../builders/generated\";\nimport { isSuper } from \"..\";\nimport type * as t from \"..\";\n\n/**\n * Prepend a node to a member expression.\n */\nexport default function prependToMemberExpression<\n  T extends Pick<t.MemberExpression, \"object\" | \"property\">,\n>(member: T, prepend: t.MemberExpression[\"object\"]): T {\n  if (isSuper(member.object)) {\n    throw new Error(\n      \"Cannot prepend node to super property access (`super.foo`).\",\n    );\n  }\n  member.object = memberExpression(prepend, member.object);\n\n  return member;\n}\n", "import getBindingIdentifiers from \"./getBindingIdentifiers\";\nimport type * as t from \"..\";\n\nexport default getOuterBindingIdentifiers as {\n  (node: t.Node, duplicates: true): Record<string, Array<t.Identifier>>;\n  (node: t.Node, duplicates?: false): Record<string, t.Identifier>;\n  (node: t.Node, duplicates?: boolean):\n    | Record<string, t.Identifier>\n    | Record<string, Array<t.Identifier>>;\n};\n\nfunction getOuterBindingIdentifiers(\n  node: t.Node,\n  duplicates: boolean,\n): Record<string, t.Identifier> | Record<string, Array<t.Identifier>> {\n  return getBindingIdentifiers(node, duplicates, true);\n}\n", "import { VISITOR_KEYS } from \"../definitions\";\nimport type * as t from \"..\";\n\nexport type TraversalAncestors = Array<{\n  node: t.Node;\n  key: string;\n  index?: number;\n}>;\n\nexport type TraversalHandler<T> = (\n  this: undefined,\n  node: t.Node,\n  parent: TraversalAncestors,\n  state: T,\n) => void;\n\nexport type TraversalHandlers<T> = {\n  enter?: TraversalHandler<T>;\n  exit?: TraversalHandler<T>;\n};\n\n/**\n * A general AST traversal with both prefix and postfix handlers, and a\n * state object. Exposes ancestry data to each handler so that more complex\n * AST data can be taken into account.\n */\nexport default function traverse<T>(\n  node: t.Node,\n  handlers: TraversalHandler<T> | TraversalHandlers<T>,\n  state?: T,\n): void {\n  if (typeof handlers === \"function\") {\n    handlers = { enter: handlers };\n  }\n\n  const { enter, exit } = handlers;\n\n  traverseSimpleImpl(node, enter, exit, state, []);\n}\n\nfunction traverseSimpleImpl<T>(\n  node: any,\n  enter: Function | undefined,\n  exit: Function | undefined,\n  state: T | undefined,\n  ancestors: TraversalAncestors,\n) {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return;\n\n  if (enter) enter(node, ancestors, state);\n\n  for (const key of keys) {\n    const subNode = node[key];\n\n    if (Array.isArray(subNode)) {\n      for (let i = 0; i < subNode.length; i++) {\n        const child = subNode[i];\n        if (!child) continue;\n\n        ancestors.push({\n          node,\n          key,\n          index: i,\n        });\n\n        traverseSimpleImpl(child, enter, exit, state, ancestors);\n\n        ancestors.pop();\n      }\n    } else if (subNode) {\n      ancestors.push({\n        node,\n        key,\n      });\n\n      traverseSimpleImpl(subNode, enter, exit, state, ancestors);\n\n      ancestors.pop();\n    }\n  }\n\n  if (exit) exit(node, ancestors, state);\n}\n", "import getBindingIdentifiers from \"../retrievers/getBindingIdentifiers\";\nimport type * as t from \"..\";\n/**\n * Check if the input `node` is a binding identifier.\n */\nexport default function isBinding(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  if (\n    grandparent &&\n    node.type === \"Identifier\" &&\n    parent.type === \"ObjectProperty\" &&\n    grandparent.type === \"ObjectExpression\"\n  ) {\n    // We need to special-case this, because getBindingIdentifiers\n    // has an ObjectProperty->value entry for destructuring patterns.\n    return false;\n  }\n\n  const keys =\n    // @ts-expect-error getBindingIdentifiers.keys does not cover all AST types\n    getBindingIdentifiers.keys[parent.type];\n  if (keys) {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const val =\n        // @ts-expect-error key must present in parent\n        parent[key];\n      if (Array.isArray(val)) {\n        if (val.indexOf(node) >= 0) return true;\n      } else {\n        if (val === node) return true;\n      }\n    }\n  }\n\n  return false;\n}\n", "import { isVariableDeclaration } from \"./generated\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `node` is a `let` variable declaration.\n */\nexport default function isLet(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node) &&\n    (node.kind !== \"var\" ||\n      // @ts-expect-error Fixme: document private properties\n      node[BLOCK_SCOPED_SYMBOL])\n  );\n}\n", "import { isClassDeclaration, isFunctionDeclaration } from \"./generated\";\nimport isLet from \"./isLet\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `node` is block scoped.\n */\nexport default function isBlockScoped(node: t.Node): boolean {\n  return isFunctionDeclaration(node) || isClassDeclaration(node) || isLet(node);\n}\n", "import isType from \"./isType\";\nimport { isIdentifier } from \"./generated\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `node` is definitely immutable.\n */\nexport default function isImmutable(node: t.Node): boolean {\n  if (isType(node.type, \"Immutable\")) return true;\n\n  if (isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}\n", "import { NODE_FIELDS, VISITOR_KEYS } from \"../definitions\";\nimport type * as t from \"..\";\n\n/**\n * Check if two nodes are equivalent\n */\nexport default function isNodesEquivalent<T extends Partial<t.Node>>(\n  a: T,\n  b: any,\n): b is T {\n  if (\n    typeof a !== \"object\" ||\n    typeof b !== \"object\" ||\n    a == null ||\n    b == null\n  ) {\n    return a === b;\n  }\n\n  if (a.type !== b.type) {\n    return false;\n  }\n\n  const fields = Object.keys(NODE_FIELDS[a.type] || a.type);\n  const visitorKeys = VISITOR_KEYS[a.type];\n\n  for (const field of fields) {\n    const val_a =\n      // @ts-expect-error field must present in a\n      a[field];\n    const val_b = b[field];\n    if (typeof val_a !== typeof val_b) {\n      return false;\n    }\n    if (val_a == null && val_b == null) {\n      continue;\n    } else if (val_a == null || val_b == null) {\n      return false;\n    }\n\n    if (Array.isArray(val_a)) {\n      if (!Array.isArray(val_b)) {\n        return false;\n      }\n      if (val_a.length !== val_b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < val_a.length; i++) {\n        if (!isNodesEquivalent(val_a[i], val_b[i])) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (typeof val_a === \"object\" && !visitorKeys?.includes(field)) {\n      for (const key of Object.keys(val_a)) {\n        if (val_a[key] !== val_b[key]) {\n          return false;\n        }\n      }\n      continue;\n    }\n\n    if (!isNodesEquivalent(val_a, val_b)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "import type * as t from \"..\";\n\n/**\n * Check if the input `node` is a reference to a bound variable.\n */\nexport default function isReferenced(\n  node: t.Node,\n  parent: t.Node,\n  grandparent?: t.Node,\n): boolean {\n  switch (parent.type) {\n    // yes: PARENT[NODE]\n    // yes: NODE.child\n    // no: parent.NODE\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n      if (parent.property === node) {\n        return !!parent.computed;\n      }\n      return parent.object === node;\n\n    case \"JSXMemberExpression\":\n      return parent.object === node;\n    // no: let NODE = init;\n    // yes: let id = NODE;\n    case \"VariableDeclarator\":\n      return parent.init === node;\n\n    // yes: () => NODE\n    // no: (NODE) => {}\n    case \"ArrowFunctionExpression\":\n      return parent.body === node;\n\n    // no: class { #NODE; }\n    // no: class { get #NODE() {} }\n    // no: class { #NODE() {} }\n    // no: class { fn() { return this.#NODE; } }\n    case \"PrivateName\":\n      return false;\n\n    // no: class { NODE() {} }\n    // yes: class { [NODE]() {} }\n    // no: class { foo(NODE) {} }\n    case \"ClassMethod\":\n    case \"ClassPrivateMethod\":\n    case \"ObjectMethod\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return false;\n\n    // yes: { [NODE]: \"\" }\n    // no: { NODE: \"\" }\n    // depends: { NODE }\n    // depends: { key: NODE }\n    case \"ObjectProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      // parent.value === node\n      return !grandparent || grandparent.type !== \"ObjectPattern\";\n    // no: class { NODE = value; }\n    // yes: class { [NODE] = value; }\n    // yes: class { key = NODE; }\n    case \"ClassProperty\":\n    case \"ClassAccessorProperty\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n      return true;\n    case \"ClassPrivateProperty\":\n      return parent.key !== node;\n\n    // no: class NODE {}\n    // yes: class Foo extends NODE {}\n    case \"ClassDeclaration\":\n    case \"ClassExpression\":\n      return parent.superClass === node;\n\n    // yes: left = NODE;\n    // no: NODE = right;\n    case \"AssignmentExpression\":\n      return parent.right === node;\n\n    // no: [NODE = foo] = [];\n    // yes: [foo = NODE] = [];\n    case \"AssignmentPattern\":\n      return parent.right === node;\n\n    // no: NODE: for (;;) {}\n    case \"LabeledStatement\":\n      return false;\n\n    // no: try {} catch (NODE) {}\n    case \"CatchClause\":\n      return false;\n\n    // no: function foo(...NODE) {}\n    case \"RestElement\":\n      return false;\n\n    case \"BreakStatement\":\n    case \"ContinueStatement\":\n      return false;\n\n    // no: function NODE() {}\n    // no: function foo(NODE) {}\n    case \"FunctionDeclaration\":\n    case \"FunctionExpression\":\n      return false;\n\n    // no: export NODE from \"foo\";\n    // no: export * as NODE from \"foo\";\n    case \"ExportNamespaceSpecifier\":\n    case \"ExportDefaultSpecifier\":\n      return false;\n\n    // no: export { foo as NODE };\n    // yes: export { NODE as foo };\n    // no: export { NODE as foo } from \"foo\";\n    case \"ExportSpecifier\":\n      // @ts-expect-error todo(flow->ts): Property 'source' does not exist on type 'AnyTypeAnnotation'.\n      if (grandparent?.source) {\n        return false;\n      }\n      return parent.local === node;\n\n    // no: import NODE from \"foo\";\n    // no: import * as NODE from \"foo\";\n    // no: import { NODE as foo } from \"foo\";\n    // no: import { foo as NODE } from \"foo\";\n    // no: import NODE from \"bar\";\n    case \"ImportDefaultSpecifier\":\n    case \"ImportNamespaceSpecifier\":\n    case \"ImportSpecifier\":\n      return false;\n\n    // no: import \"foo\" assert { NODE: \"json\" }\n    case \"ImportAttribute\":\n      return false;\n\n    // no: <div NODE=\"foo\" />\n    case \"JSXAttribute\":\n      return false;\n\n    // no: [NODE] = [];\n    // no: ({ NODE }) = [];\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n      return false;\n\n    // no: new.NODE\n    // no: NODE.target\n    case \"MetaProperty\":\n      return false;\n\n    // yes: type X = { somePropert: NODE }\n    // no: type X = { NODE: OtherType }\n    case \"ObjectTypeProperty\":\n      return parent.key !== node;\n\n    // yes: enum X { Foo = NODE }\n    // no: enum X { NODE }\n    case \"TSEnumMember\":\n      return parent.id !== node;\n\n    // yes: { [NODE]: value }\n    // no: { NODE: value }\n    case \"TSPropertySignature\":\n      if (parent.key === node) {\n        return !!parent.computed;\n      }\n\n      return true;\n  }\n\n  return true;\n}\n", "import {\n  isFunction,\n  isCatchClause,\n  isBlockStatement,\n  isScopable,\n  isPattern,\n} from \"./generated\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `node` is a scope.\n */\nexport default function isScope(node: t.Node, parent: t.Node): boolean {\n  // If a BlockStatement is an immediate descendent of a Function/CatchClause, it must be in the body.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isBlockStatement(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return false;\n  }\n\n  // If a Pattern is an immediate descendent of a Function/CatchClause, it must be in the params.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isPattern(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return true;\n  }\n\n  return isScopable(node);\n}\n", "import { isIdentifier, isImportDefaultSpecifier } from \"./generated\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `specifier` is a `default` import or export.\n */\nexport default function isSpecifierDefault(\n  specifier: t.ModuleSpecifier,\n): boolean {\n  return (\n    isImportDefaultSpecifier(specifier) ||\n    // @ts-expect-error todo(flow->ts): stricter type for specifier\n    isIdentifier(specifier.imported || specifier.exported, {\n      name: \"default\",\n    })\n  );\n}\n", "import isValidIdentifier from \"./isValidIdentifier\";\n\nconst RESERVED_WORDS_ES3_ONLY: Set<string> = new Set([\n  \"abstract\",\n  \"boolean\",\n  \"byte\",\n  \"char\",\n  \"double\",\n  \"enum\",\n  \"final\",\n  \"float\",\n  \"goto\",\n  \"implements\",\n  \"int\",\n  \"interface\",\n  \"long\",\n  \"native\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"short\",\n  \"static\",\n  \"synchronized\",\n  \"throws\",\n  \"transient\",\n  \"volatile\",\n]);\n\n/**\n * Check if the input `name` is a valid identifier name according to the ES3 specification.\n *\n * Additional ES3 reserved words are\n */\nexport default function isValidES3Identifier(name: string): boolean {\n  return isValidIdentifier(name) && !RESERVED_WORDS_ES3_ONLY.has(name);\n}\n", "import { isVariableDeclaration } from \"./generated\";\nimport { BLOCK_SCOPED_SYMBOL } from \"../constants\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `node` is a variable declaration.\n */\nexport default function isVar(node: t.Node): boolean {\n  return (\n    isVariableDeclaration(node, { kind: \"var\" }) &&\n    !(\n      // @ts-expect-error document private properties\n      node[BLOCK_SCOPED_SYMBOL]\n    )\n  );\n}\n", "\n\n//# sourceMappingURL=index.js.map\n", "import isReactComponent from \"./validators/react/isReactComponent\";\nimport isCompatTag from \"./validators/react/isCompatTag\";\nimport buildChildren from \"./builders/react/buildChildren\";\n\n// asserts\nexport { default as assertNode } from \"./asserts/assertNode\";\nexport * from \"./asserts/generated\";\n\n// builders\nexport { default as createTypeAnnotationBasedOnTypeof } from \"./builders/flow/createTypeAnnotationBasedOnTypeof\";\n/** @deprecated use createFlowUnionType instead */\nexport { default as createUnionTypeAnnotation } from \"./builders/flow/createFlowUnionType\";\nexport { default as createFlowUnionType } from \"./builders/flow/createFlowUnionType\";\nexport { default as createTSUnionType } from \"./builders/typescript/createTSUnionType\";\nexport * from \"./builders/generated\";\nexport * from \"./builders/generated/uppercase\";\n\n// clone\nexport { default as cloneNode } from \"./clone/cloneNode\";\nexport { default as clone } from \"./clone/clone\";\nexport { default as cloneDeep } from \"./clone/cloneDeep\";\nexport { default as cloneDeepWithoutLoc } from \"./clone/cloneDeepWithoutLoc\";\nexport { default as cloneWithoutLoc } from \"./clone/cloneWithoutLoc\";\n\n// comments\nexport { default as addComment } from \"./comments/addComment\";\nexport { default as addComments } from \"./comments/addComments\";\nexport { default as inheritInnerComments } from \"./comments/inheritInnerComments\";\nexport { default as inheritLeadingComments } from \"./comments/inheritLeadingComments\";\nexport { default as inheritsComments } from \"./comments/inheritsComments\";\nexport { default as inheritTrailingComments } from \"./comments/inheritTrailingComments\";\nexport { default as removeComments } from \"./comments/removeComments\";\n\n// constants\nexport * from \"./constants/generated\";\nexport * from \"./constants\";\n\n// converters\nexport { default as ensureBlock } from \"./converters/ensureBlock\";\nexport { default as toBindingIdentifierName } from \"./converters/toBindingIdentifierName\";\nexport { default as toBlock } from \"./converters/toBlock\";\nexport { default as toComputedKey } from \"./converters/toComputedKey\";\nexport { default as toExpression } from \"./converters/toExpression\";\nexport { default as toIdentifier } from \"./converters/toIdentifier\";\nexport { default as toKeyAlias } from \"./converters/toKeyAlias\";\nexport { default as toSequenceExpression } from \"./converters/toSequenceExpression\";\nexport { default as toStatement } from \"./converters/toStatement\";\nexport { default as valueToNode } from \"./converters/valueToNode\";\n\n// definitions\nexport * from \"./definitions\";\n\n// modifications\nexport { default as appendToMemberExpression } from \"./modifications/appendToMemberExpression\";\nexport { default as inherits } from \"./modifications/inherits\";\nexport { default as prependToMemberExpression } from \"./modifications/prependToMemberExpression\";\nexport {\n  default as removeProperties,\n  type Options as RemovePropertiesOptions,\n} from \"./modifications/removeProperties\";\nexport { default as removePropertiesDeep } from \"./modifications/removePropertiesDeep\";\nexport { default as removeTypeDuplicates } from \"./modifications/flow/removeTypeDuplicates\";\n\n// retrievers\nexport { default as getBindingIdentifiers } from \"./retrievers/getBindingIdentifiers\";\nexport { default as getOuterBindingIdentifiers } from \"./retrievers/getOuterBindingIdentifiers\";\n\n// traverse\nexport { default as traverse } from \"./traverse/traverse\";\nexport * from \"./traverse/traverse\";\nexport { default as traverseFast } from \"./traverse/traverseFast\";\n\n// utils\nexport { default as shallowEqual } from \"./utils/shallowEqual\";\n\n// validators\nexport { default as is } from \"./validators/is\";\nexport { default as isBinding } from \"./validators/isBinding\";\nexport { default as isBlockScoped } from \"./validators/isBlockScoped\";\nexport { default as isImmutable } from \"./validators/isImmutable\";\nexport { default as isLet } from \"./validators/isLet\";\nexport { default as isNode } from \"./validators/isNode\";\nexport { default as isNodesEquivalent } from \"./validators/isNodesEquivalent\";\nexport { default as isPlaceholderType } from \"./validators/isPlaceholderType\";\nexport { default as isReferenced } from \"./validators/isReferenced\";\nexport { default as isScope } from \"./validators/isScope\";\nexport { default as isSpecifierDefault } from \"./validators/isSpecifierDefault\";\nexport { default as isType } from \"./validators/isType\";\nexport { default as isValidES3Identifier } from \"./validators/isValidES3Identifier\";\nexport { default as isValidIdentifier } from \"./validators/isValidIdentifier\";\nexport { default as isVar } from \"./validators/isVar\";\nexport { default as matchesPattern } from \"./validators/matchesPattern\";\nexport { default as validate } from \"./validators/validate\";\nexport { default as buildMatchMemberExpression } from \"./validators/buildMatchMemberExpression\";\nexport * from \"./validators/generated\";\n\n// react\nexport const react = {\n  isReactComponent,\n  isCompatTag,\n  buildChildren,\n};\n\nexport * from \"./ast-types/generated\";\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  importDeclaration,\n  importDefaultSpecifier,\n  importNamespaceSpecifier,\n  importSpecifier,\n  memberExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nclass ImportBuilder {\n  constructor(importedSource, scope, hub) {\n    this._statements = [];\n    this._resultName = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName\n    };\n  }\n\n  import() {\n    this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));\n\n    return this;\n  }\n\n  require() {\n    this._statements.push(expressionStatement(callExpression(identifier(\"require\"), [stringLiteral(this._importedSource)])));\n\n    return this;\n  }\n\n  namespace(name = \"namespace\") {\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importNamespaceSpecifier(local)];\n    this._resultName = cloneNode(local);\n    return this;\n  }\n\n  default(name) {\n    const id = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importDefaultSpecifier(id)];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  named(name, importName) {\n    if (importName === \"default\") return this.default(name);\n\n    const id = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importSpecifier(id, identifier(importName))];\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  var(name) {\n    const id = this._scope.generateUidIdentifier(name);\n\n    let statement = this._statements[this._statements.length - 1];\n\n    if (statement.type !== \"ExpressionStatement\") {\n      _assert(this._resultName);\n\n      statement = expressionStatement(this._resultName);\n\n      this._statements.push(statement);\n    }\n\n    this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [variableDeclarator(id, statement.expression)]);\n    this._resultName = cloneNode(id);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);\n    } else {\n      _assert.fail(\"Unexpected type.\");\n    }\n\n    return this;\n  }\n\n  prop(name) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = memberExpression(statement.expression, identifier(name));\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));\n    } else {\n      _assert.fail(\"Unexpected type:\" + statement.type);\n    }\n\n    return this;\n  }\n\n  read(name) {\n    this._resultName = memberExpression(this._resultName, identifier(name));\n  }\n\n}\n\nexports.default = ImportBuilder;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isModule;\n\nfunction isModule(path) {\n  const {\n    sourceType\n  } = path.node;\n\n  if (sourceType !== \"module\" && sourceType !== \"script\") {\n    throw path.buildCodeFrameError(`Unknown sourceType \"${sourceType}\", cannot transform.`);\n  }\n\n  return path.node.sourceType === \"module\";\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nvar _importBuilder = require(\"./import-builder\");\n\nvar _isModule = require(\"./is-module\");\n\nconst {\n  numericLiteral,\n  sequenceExpression\n} = _t;\n\nclass ImportInjector {\n  constructor(path, importedSource, opts) {\n    this._defaultOpts = {\n      importedSource: null,\n      importedType: \"commonjs\",\n      importedInterop: \"babel\",\n      importingInterop: \"babel\",\n      ensureLiveReference: false,\n      ensureNoContext: false,\n      importPosition: \"before\"\n    };\n    const programPath = path.find(p => p.isProgram());\n    this._programPath = programPath;\n    this._programScope = programPath.scope;\n    this._hub = programPath.hub;\n    this._defaultOpts = this._applyDefaults(importedSource, opts, true);\n  }\n\n  addDefault(importedSourceIn, opts) {\n    return this.addNamed(\"default\", importedSourceIn, opts);\n  }\n\n  addNamed(importName, importedSourceIn, opts) {\n    _assert(typeof importName === \"string\");\n\n    return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);\n  }\n\n  addNamespace(importedSourceIn, opts) {\n    return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);\n  }\n\n  addSideEffect(importedSourceIn, opts) {\n    return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);\n  }\n\n  _applyDefaults(importedSource, opts, isInit = false) {\n    let newOpts;\n\n    if (typeof importedSource === \"string\") {\n      newOpts = Object.assign({}, this._defaultOpts, {\n        importedSource\n      }, opts);\n    } else {\n      _assert(!opts, \"Unexpected secondary arguments.\");\n\n      newOpts = Object.assign({}, this._defaultOpts, importedSource);\n    }\n\n    if (!isInit && opts) {\n      if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;\n      if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;\n    }\n\n    return newOpts;\n  }\n\n  _generateImport(opts, importName) {\n    const isDefault = importName === \"default\";\n    const isNamed = !!importName && !isDefault;\n    const isNamespace = importName === null;\n    const {\n      importedSource,\n      importedType,\n      importedInterop,\n      importingInterop,\n      ensureLiveReference,\n      ensureNoContext,\n      nameHint,\n      importPosition,\n      blockHoist\n    } = opts;\n    let name = nameHint || importName;\n    const isMod = (0, _isModule.default)(this._programPath);\n    const isModuleForNode = isMod && importingInterop === \"node\";\n    const isModuleForBabel = isMod && importingInterop === \"babel\";\n\n    if (importPosition === \"after\" && !isMod) {\n      throw new Error(`\"importPosition\": \"after\" is only supported in modules`);\n    }\n\n    const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);\n\n    if (importedType === \"es6\") {\n      if (!isModuleForNode && !isModuleForBabel) {\n        throw new Error(\"Cannot import an ES6 module from CommonJS\");\n      }\n\n      builder.import();\n\n      if (isNamespace) {\n        builder.namespace(nameHint || importedSource);\n      } else if (isDefault || isNamed) {\n        builder.named(name, importName);\n      }\n    } else if (importedType !== \"commonjs\") {\n      throw new Error(`Unexpected interopType \"${importedType}\"`);\n    } else if (importedInterop === \"babel\") {\n      if (isModuleForNode) {\n        name = name !== \"default\" ? name : importedSource;\n        const es6Default = `${importedSource}$es6Default`;\n        builder.import();\n\n        if (isNamespace) {\n          builder.default(es6Default).var(name || importedSource).wildcardInterop();\n        } else if (isDefault) {\n          if (ensureLiveReference) {\n            builder.default(es6Default).var(name || importedSource).defaultInterop().read(\"default\");\n          } else {\n            builder.default(es6Default).var(name).defaultInterop().prop(importName);\n          }\n        } else if (isNamed) {\n          builder.default(es6Default).read(importName);\n        }\n      } else if (isModuleForBabel) {\n        builder.import();\n\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        builder.require();\n\n        if (isNamespace) {\n          builder.var(name || importedSource).wildcardInterop();\n        } else if ((isDefault || isNamed) && ensureLiveReference) {\n          if (isDefault) {\n            name = name !== \"default\" ? name : importedSource;\n            builder.var(name).read(importName);\n            builder.defaultInterop();\n          } else {\n            builder.var(importedSource).read(importName);\n          }\n        } else if (isDefault) {\n          builder.var(name).defaultInterop().prop(importName);\n        } else if (isNamed) {\n          builder.var(name).prop(importName);\n        }\n      }\n    } else if (importedInterop === \"compiled\") {\n      if (isModuleForNode) {\n        builder.import();\n\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        builder.import();\n\n        if (isNamespace) {\n          builder.namespace(name || importedSource);\n        } else if (isDefault || isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        builder.require();\n\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault || isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.prop(importName).var(name);\n          }\n        }\n      }\n    } else if (importedInterop === \"uncompiled\") {\n      if (isDefault && ensureLiveReference) {\n        throw new Error(\"No live reference for commonjs default\");\n      }\n\n      if (isModuleForNode) {\n        builder.import();\n\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.default(importedSource).read(name);\n        }\n      } else if (isModuleForBabel) {\n        builder.import();\n\n        if (isNamespace) {\n          builder.default(name || importedSource);\n        } else if (isDefault) {\n          builder.default(name);\n        } else if (isNamed) {\n          builder.named(name, importName);\n        }\n      } else {\n        builder.require();\n\n        if (isNamespace) {\n          builder.var(name || importedSource);\n        } else if (isDefault) {\n          builder.var(name);\n        } else if (isNamed) {\n          if (ensureLiveReference) {\n            builder.var(importedSource).read(name);\n          } else {\n            builder.var(name).prop(importName);\n          }\n        }\n      }\n    } else {\n      throw new Error(`Unknown importedInterop \"${importedInterop}\".`);\n    }\n\n    const {\n      statements,\n      resultName\n    } = builder.done();\n\n    this._insertStatements(statements, importPosition, blockHoist);\n\n    if ((isDefault || isNamed) && ensureNoContext && resultName.type !== \"Identifier\") {\n      return sequenceExpression([numericLiteral(0), resultName]);\n    }\n\n    return resultName;\n  }\n\n  _insertStatements(statements, importPosition = \"before\", blockHoist = 3) {\n    const body = this._programPath.get(\"body\");\n\n    if (importPosition === \"after\") {\n      for (let i = body.length - 1; i >= 0; i--) {\n        if (body[i].isImportDeclaration()) {\n          body[i].insertAfter(statements);\n          return;\n        }\n      }\n    } else {\n      statements.forEach(node => {\n        node._blockHoist = blockHoist;\n      });\n      const targetPath = body.find(p => {\n        const val = p.node._blockHoist;\n        return Number.isFinite(val) && val < 4;\n      });\n\n      if (targetPath) {\n        targetPath.insertBefore(statements);\n        return;\n      }\n    }\n\n    this._programPath.unshiftContainer(\"body\", statements);\n  }\n\n}\n\nexports.default = ImportInjector;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"ImportInjector\", {\n  enumerable: true,\n  get: function () {\n    return _importInjector.default;\n  }\n});\nexports.addDefault = addDefault;\nexports.addNamed = addNamed;\nexports.addNamespace = addNamespace;\nexports.addSideEffect = addSideEffect;\nObject.defineProperty(exports, \"isModule\", {\n  enumerable: true,\n  get: function () {\n    return _isModule.default;\n  }\n});\n\nvar _importInjector = require(\"./import-injector\");\n\nvar _isModule = require(\"./is-module\");\n\nfunction addDefault(path, importedSource, opts) {\n  return new _importInjector.default(path).addDefault(importedSource, opts);\n}\n\nfunction addNamed(path, name, importedSource, opts) {\n  return new _importInjector.default(path).addNamed(name, importedSource, opts);\n}\n\nfunction addNamespace(path, importedSource, opts) {\n  return new _importInjector.default(path).addNamespace(importedSource, opts);\n}\n\nfunction addSideEffect(path, importedSource, opts) {\n  return new _importInjector.default(path).addSideEffect(importedSource, opts);\n}", "import type * as t from \"@babel/types\";\n\nexport interface VirtualTypeAliases {\n  BindingIdentifier: t.Identifier;\n  BlockScoped: t.Node;\n  ExistentialTypeParam: t.ExistsTypeAnnotation;\n  Expression: t.Expression;\n  Flow: t.Flow | t.ImportDeclaration | t.ExportDeclaration | t.ImportSpecifier;\n  ForAwaitStatement: t.ForOfStatement;\n  Generated: t.Node;\n  NumericLiteralTypeAnnotation: t.NumberLiteralTypeAnnotation;\n  Pure: t.Node;\n  Referenced: t.Node;\n  ReferencedIdentifier: t.Identifier | t.JSXIdentifier;\n  ReferencedMemberExpression: t.MemberExpression;\n  RestProperty: t.RestElement;\n  Scope: t.Scopable | t.Pattern;\n  SpreadProperty: t.RestElement;\n  Statement: t.Statement;\n  User: t.Node;\n  Var: t.VariableDeclaration;\n}\n\ntype VirtualTypeMapping = readonly (t.Node[\"type\"] | keyof t.Aliases)[] | null;\n\nexport const ReferencedIdentifier: VirtualTypeMapping = [\n  \"Identifier\",\n  \"JSXIdentifier\",\n] as const;\n\nexport const ReferencedMemberExpression: VirtualTypeMapping = [\n  \"MemberExpression\",\n] as const;\n\nexport const BindingIdentifier: VirtualTypeMapping = [\"Identifier\"] as const;\n\nexport const Statement: VirtualTypeMapping = [\"Statement\"] as const;\n\nexport const Expression: VirtualTypeMapping = [\"Expression\"] as const;\n\nexport const Scope: VirtualTypeMapping = [\"Scopable\", \"Pattern\"] as const;\n\nexport const Referenced: VirtualTypeMapping = null as null;\n\nexport const BlockScoped: VirtualTypeMapping = null as null;\n\nexport const Var: VirtualTypeMapping = [\"VariableDeclaration\"];\n\nexport const User: VirtualTypeMapping = null as null;\n\nexport const Generated: VirtualTypeMapping = null as null;\n\nexport const Pure: VirtualTypeMapping = null as null;\n\nexport const Flow: VirtualTypeMapping = [\n  \"Flow\",\n  \"ImportDeclaration\",\n  \"ExportDeclaration\",\n  \"ImportSpecifier\",\n] as const;\n\n// TODO: 7.0 Backwards Compat\nexport const RestProperty: VirtualTypeMapping = [\"RestElement\"] as const;\n\nexport const SpreadProperty: VirtualTypeMapping = [\"RestElement\"] as const;\n\nexport const ExistentialTypeParam: VirtualTypeMapping = [\n  \"ExistsTypeAnnotation\",\n] as const;\n\nexport const NumericLiteralTypeAnnotation: VirtualTypeMapping = [\n  \"NumberLiteralTypeAnnotation\",\n] as const;\n\nexport const ForAwaitStatement: VirtualTypeMapping = [\n  \"ForOfStatement\",\n] as const;\n", "import * as virtualTypes from \"./path/lib/virtual-types\";\nimport { DEPRECATED_KEYS, FLIPPED_ALIAS_KEYS, TYPES } from \"@babel/types\";\nimport type { NodePath, Visitor } from \"./index\";\n\ntype VIRTUAL_TYPES = keyof typeof virtualTypes;\nfunction isVirtualType(type: string): type is VIRTUAL_TYPES {\n  return type in virtualTypes;\n}\n\n/**\n * explode() will take a visitor object with all of the various shorthands\n * that we support, and validates & normalizes it into a common format, ready\n * to be used in traversal\n *\n * The various shorthands are:\n * * `Identifier() { ... }` -> `Identifier: { enter() { ... } }`\n * * `\"Identifier|NumericLiteral\": { ... }` -> `Identifier: { ... }, NumericLiteral: { ... }`\n * * Aliases in `@babel/types`: e.g. `Property: { ... }` -> `ObjectProperty: { ... }, ClassProperty: { ... }`\n *\n * Other normalizations are:\n * * Visitors of virtual types are wrapped, so that they are only visited when\n *   their dynamic check passes\n * * `enter` and `exit` functions are wrapped in arrays, to ease merging of\n *   visitors\n */\nexport function explode(visitor: Visitor) {\n  if (visitor._exploded) return visitor;\n  visitor._exploded = true;\n\n  // normalise pipes\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    const parts: Array<string> = nodeType.split(\"|\");\n    if (parts.length === 1) continue;\n\n    const fns = visitor[nodeType];\n    delete visitor[nodeType];\n\n    for (const part of parts) {\n      // @ts-expect-error part will be verified by `verify` later\n      visitor[part] = fns;\n    }\n  }\n\n  // verify data structure\n  verify(visitor);\n\n  // make sure there's no __esModule type since this is because we're using loose mode\n  // and it sets __esModule to be enumerable on all modules :(\n  // @ts-expect-error ESModule interop\n  delete visitor.__esModule;\n\n  // ensure visitors are objects\n  ensureEntranceObjects(visitor);\n\n  // ensure enter/exit callbacks are arrays\n  ensureCallbackArrays(visitor);\n\n  // add type wrappers\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (!isVirtualType(nodeType)) continue;\n\n    // wrap all the functions\n    const fns = visitor[nodeType];\n    for (const type of Object.keys(fns)) {\n      // @ts-expect-error manipulating visitors\n      fns[type] = wrapCheck(nodeType, fns[type]);\n    }\n\n    // clear it from the visitor\n    delete visitor[nodeType];\n\n    const types = virtualTypes[nodeType];\n    if (types !== null) {\n      for (const type of types) {\n        // merge the visitor if necessary or just put it back in\n        if (visitor[type]) {\n          mergePair(visitor[type], fns);\n        } else {\n          // @ts-expect-error Expression produces too complex union\n          visitor[type] = fns;\n        }\n      }\n    } else {\n      mergePair(visitor, fns);\n    }\n  }\n\n  // add aliases\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    const fns = visitor[nodeType];\n\n    let aliases = FLIPPED_ALIAS_KEYS[nodeType];\n\n    const deprecatedKey = DEPRECATED_KEYS[nodeType];\n    if (deprecatedKey) {\n      console.trace(\n        `Visitor defined for ${nodeType} but it has been renamed to ${deprecatedKey}`,\n      );\n      aliases = [deprecatedKey];\n    }\n\n    if (!aliases) continue;\n\n    // clear it from the visitor\n    delete visitor[nodeType];\n\n    for (const alias of aliases) {\n      const existing = visitor[alias];\n      if (existing) {\n        mergePair(existing, fns);\n      } else {\n        // @ts-expect-error Expression produces a union type that is too complex to represent.\n        visitor[alias] = { ...fns };\n      }\n    }\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    ensureCallbackArrays(\n      // @ts-expect-error nodeType must present in visitor after previous validations\n      visitor[nodeType],\n    );\n  }\n\n  return visitor;\n}\n\nexport function verify(visitor: Visitor) {\n  if (visitor._verified) return;\n\n  if (typeof visitor === \"function\") {\n    throw new Error(\n      \"You passed `traverse()` a function when it expected a visitor object, \" +\n        \"are you sure you didn't mean `{ enter: Function }`?\",\n    );\n  }\n\n  for (const nodeType of Object.keys(visitor) as (keyof Visitor)[]) {\n    if (nodeType === \"enter\" || nodeType === \"exit\") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (TYPES.indexOf(nodeType) < 0) {\n      throw new Error(\n        `You gave us a visitor for the node type ${nodeType} but it's not a valid type`,\n      );\n    }\n\n    const visitors = visitor[nodeType];\n    if (typeof visitors === \"object\") {\n      for (const visitorKey of Object.keys(visitors)) {\n        if (visitorKey === \"enter\" || visitorKey === \"exit\") {\n          // verify that it just contains functions\n          validateVisitorMethods(\n            `${nodeType}.${visitorKey}`,\n            visitors[visitorKey],\n          );\n        } else {\n          throw new Error(\n            \"You passed `traverse()` a visitor object with the property \" +\n              `${nodeType} that has the invalid property ${visitorKey}`,\n          );\n        }\n      }\n    }\n  }\n\n  visitor._verified = true;\n}\n\nfunction validateVisitorMethods(\n  path: string,\n  val: any,\n): asserts val is Function | Function[] {\n  const fns = [].concat(val);\n  for (const fn of fns) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError(\n        `Non-function found defined in ${path} with type ${typeof fn}`,\n      );\n    }\n  }\n}\n\nexport function merge<State>(visitors: Visitor<State>[]): Visitor<State>;\nexport function merge(\n  visitors: Visitor<unknown>[],\n  states?: any[],\n  wrapper?: Function | null,\n): Visitor<unknown>;\nexport function merge(\n  visitors: any[],\n  states: any[] = [],\n  wrapper?: Function | null,\n) {\n  const rootVisitor: Visitor = {};\n\n  for (let i = 0; i < visitors.length; i++) {\n    const visitor = visitors[i];\n    const state = states[i];\n\n    explode(visitor);\n\n    for (const type of Object.keys(visitor) as (keyof Visitor)[]) {\n      let visitorType = visitor[type];\n\n      // if we have state or wrapper then overload the callbacks to take it\n      if (state || wrapper) {\n        visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);\n      }\n\n      // @ts-expect-error: Expression produces a union type that is too complex to represent.\n      const nodeVisitor = (rootVisitor[type] ||= {});\n      mergePair(nodeVisitor, visitorType);\n    }\n  }\n\n  return rootVisitor;\n}\n\nfunction wrapWithStateOrWrapper<State>(\n  oldVisitor: Visitor<State>,\n  state: State,\n  wrapper?: Function | null,\n) {\n  const newVisitor: Visitor = {};\n\n  for (const key of Object.keys(oldVisitor) as (keyof Visitor<State>)[]) {\n    let fns = oldVisitor[key];\n\n    // not an enter/exit array of callbacks\n    if (!Array.isArray(fns)) continue;\n\n    // @ts-expect-error manipulating visitors\n    fns = fns.map(function (fn) {\n      let newFn = fn;\n\n      if (state) {\n        newFn = function (path: NodePath) {\n          return fn.call(state, path, state);\n        };\n      }\n\n      if (wrapper) {\n        // @ts-expect-error Fixme: document state.key\n        newFn = wrapper(state.key, key, newFn);\n      }\n\n      // Override toString in case this function is printed, we want to print the wrapped function, same as we do in `wrapCheck`\n      if (newFn !== fn) {\n        newFn.toString = () => fn.toString();\n      }\n\n      return newFn;\n    });\n\n    // @ts-expect-error: Expression produces a union type that is too complex to represent.\n    newVisitor[key] = fns;\n  }\n\n  return newVisitor;\n}\n\nfunction ensureEntranceObjects(obj: Visitor) {\n  for (const key of Object.keys(obj) as (keyof Visitor)[]) {\n    if (shouldIgnoreKey(key)) continue;\n\n    const fns = obj[key];\n    if (typeof fns === \"function\") {\n      // @ts-expect-error: Expression produces a union type that is too complex to represent.\n      obj[key] = { enter: fns };\n    }\n  }\n}\n\nfunction ensureCallbackArrays(obj: Visitor) {\n  // @ts-expect-error normalizing enter property\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  // @ts-expect-error normalizing exit property\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\n\nfunction wrapCheck(nodeType: VIRTUAL_TYPES, fn: Function) {\n  const newFn = function (this: unknown, path: NodePath) {\n    if (path[`is${nodeType}`]()) {\n      return fn.apply(this, arguments);\n    }\n  };\n  newFn.toString = () => fn.toString();\n  return newFn;\n}\n\nfunction shouldIgnoreKey(\n  key: string,\n): key is\n  | \"enter\"\n  | \"exit\"\n  | \"shouldSkip\"\n  | \"denylist\"\n  | \"noScope\"\n  | \"skipKeys\"\n  | \"blacklist\" {\n  // internal/hidden key\n  if (key[0] === \"_\") return true;\n\n  // ignore function keys\n  if (key === \"enter\" || key === \"exit\" || key === \"shouldSkip\") return true;\n\n  // ignore other options\n  if (\n    key === \"denylist\" ||\n    key === \"noScope\" ||\n    key === \"skipKeys\" ||\n    // TODO: Remove in Babel 8\n    key === \"blacklist\"\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction mergePair(dest: any, src: any) {\n  for (const key of Object.keys(src)) {\n    dest[key] = [].concat(dest[key] || [], src[key]);\n  }\n}\n", "export let path = new WeakMap();\nexport let scope = new WeakMap();\n\nexport function clear() {\n  clearPath();\n  clearScope();\n}\n\nexport function clearPath() {\n  path = new WeakMap();\n}\n\nexport function clearScope() {\n  scope = new WeakMap();\n}\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = splitExportDeclaration;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  cloneNode,\n  exportNamedDeclaration,\n  exportSpecifier,\n  identifier,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction splitExportDeclaration(exportDeclaration) {\n  if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration()) {\n    throw new Error(\"Only default and named export declarations can be split.\");\n  }\n\n  if (exportDeclaration.isExportDefaultDeclaration()) {\n    const declaration = exportDeclaration.get(\"declaration\");\n    const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration();\n    const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;\n    let id = declaration.node.id;\n    let needBindingRegistration = false;\n\n    if (!id) {\n      needBindingRegistration = true;\n      id = scope.generateUidIdentifier(\"default\");\n\n      if (standaloneDeclaration || declaration.isFunctionExpression() || declaration.isClassExpression()) {\n        declaration.node.id = cloneNode(id);\n      }\n    }\n\n    const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration(\"var\", [variableDeclarator(cloneNode(id), declaration.node)]);\n    const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier(\"default\"))]);\n    exportDeclaration.insertAfter(updatedExportDeclaration);\n    exportDeclaration.replaceWith(updatedDeclaration);\n\n    if (needBindingRegistration) {\n      scope.registerDeclaration(exportDeclaration);\n    }\n\n    return exportDeclaration;\n  } else if (exportDeclaration.get(\"specifiers\").length > 0) {\n    throw new Error(\"It doesn't make sense to split exported specifiers.\");\n  }\n\n  const declaration = exportDeclaration.get(\"declaration\");\n  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();\n  const specifiers = Object.keys(bindingIdentifiers).map(name => {\n    return exportSpecifier(identifier(name), identifier(name));\n  });\n  const aliasDeclar = exportNamedDeclaration(null, specifiers);\n  exportDeclaration.insertAfter(aliasDeclar);\n  exportDeclaration.replaceWith(declaration.node);\n  return exportDeclaration;\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;\nexports.skipAllButComputedKey = skipAllButComputedKey;\n\nfunction skipAllButComputedKey(path) {\n  path.skip();\n\n  if (path.node.computed) {\n    path.context.maybeQueue(path.get(\"key\"));\n  }\n}\n\nfunction requeueComputedKeyAndDecorators(path) {\n  const {\n    context,\n    node\n  } = path;\n\n  if (node.computed) {\n    context.maybeQueue(path.get(\"key\"));\n  }\n\n  if (node.decorators) {\n    for (const decorator of path.get(\"decorators\")) {\n      context.maybeQueue(decorator);\n    }\n  }\n}\n\nconst visitor = {\n  FunctionParent(path) {\n    if (path.isArrowFunctionExpression()) {\n      return;\n    } else {\n      path.skip();\n\n      if (path.isMethod()) {\n        requeueComputedKeyAndDecorators(path);\n      }\n    }\n  },\n\n  Property(path) {\n    if (path.isObjectProperty()) {\n      return;\n    }\n\n    path.skip();\n    requeueComputedKeyAndDecorators(path);\n  }\n\n};\nvar _default = visitor;\nexports.default = _default;", "import type Binding from \"../binding\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\nimport * as t from \"@babel/types\";\nimport type { NodePath, Visitor } from \"../..\";\nimport { requeueComputedKeyAndDecorators } from \"@babel/helper-environment-visitor\";\nimport { traverseNode } from \"../../traverse-node\";\nimport { explode } from \"../../visitors\";\n\nconst renameVisitor: Visitor<Renamer> = {\n  ReferencedIdentifier({ node }, state) {\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n\n  Scope(path, state) {\n    if (\n      !path.scope.bindingIdentifierEquals(\n        state.oldName,\n        state.binding.identifier,\n      )\n    ) {\n      path.skip();\n      if (path.isMethod()) {\n        requeueComputedKeyAndDecorators(path);\n      }\n    }\n  },\n\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(\n    path: NodePath<t.AssignmentPattern | t.Declaration | t.VariableDeclarator>,\n    state,\n  ) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.getOuterBindingIdentifiers();\n\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  },\n};\n\nexport default class Renamer {\n  constructor(binding: Binding, oldName: string, newName: string) {\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  declare oldName: string;\n  declare newName: string;\n  declare binding: Binding;\n\n  maybeConvertFromExportDeclaration(parentDeclar: NodePath) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n\n    if (maybeExportDeclar.isExportDefaultDeclaration()) {\n      const { declaration } = maybeExportDeclar.node;\n      if (t.isDeclaration(declaration) && !declaration.id) {\n        return;\n      }\n    }\n\n    if (maybeExportDeclar.isExportAllDeclaration()) {\n      return;\n    }\n\n    splitExportDeclaration(\n      maybeExportDeclar as NodePath<\n        Exclude<t.ExportDeclaration, t.ExportAllDeclaration>\n      >,\n    );\n  }\n\n  maybeConvertFromClassFunctionDeclaration(path: NodePath) {\n    return path; // TODO\n\n    // // retain the `name` of a class/function declaration\n\n    // if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n    // if (this.binding.kind !== \"hoisted\") return;\n\n    // path.node.id = identifier(this.oldName);\n    // path.node._blockHoist = 3;\n\n    // path.replaceWith(\n    //   variableDeclaration(\"let\", [\n    //     variableDeclarator(identifier(this.newName), toExpression(path.node)),\n    //   ]),\n    // );\n  }\n\n  maybeConvertFromClassFunctionExpression(path: NodePath) {\n    return path; // TODO\n\n    // // retain the `name` of a class/function expression\n\n    // if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n    // if (this.binding.kind !== \"local\") return;\n\n    // path.node.id = identifier(this.oldName);\n\n    // this.binding.scope.parent.push({\n    //   id: identifier(this.newName),\n    // });\n\n    // path.replaceWith(\n    //   assignmentExpression(\"=\", identifier(this.newName), path.node),\n    // );\n  }\n\n  rename(/* Babel 7 - block?: t.Pattern | t.Scopable */) {\n    const { binding, oldName, newName } = this;\n    const { scope, path } = binding;\n\n    const parentDeclar = path.find(\n      path =>\n        path.isDeclaration() ||\n        path.isFunctionExpression() ||\n        path.isClassExpression(),\n    );\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n      if (bindingIds[oldName] === binding.identifier) {\n        // When we are renaming an exported identifier, we need to ensure that\n        // the exported binding keeps the old name.\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n\n    const blockToTraverse = process.env.BABEL_8_BREAKING\n      ? scope.block\n      : (arguments[0] as t.Pattern | t.Scopable) || scope.block;\n    traverseNode(\n      blockToTraverse,\n      explode(renameVisitor),\n      scope,\n      this,\n      scope.path,\n      // When blockToTraverse is a SwitchStatement, the discriminant\n      // is not part of the current scope and thus should be skipped.\n      { discriminant: true },\n    );\n\n    if (process.env.BABEL_8_BREAKING) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    } else if (!arguments[0]) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(path);\n      this.maybeConvertFromClassFunctionExpression(path);\n    }\n  }\n}\n", "import type NodePath from \"../path\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"./index\";\n\nexport type BindingKind =\n  | \"var\" /* var declarator */\n  | \"let\" /* let declarator, class declaration id, catch clause parameters */\n  | \"const\" /* const/using declarator */\n  | \"module\" /* import specifiers */\n  | \"hoisted\" /* function declaration id */\n  | \"param\" /* function declaration parameters */\n  | \"local\" /* function expression id, class expression id */\n  | \"unknown\"; /* export specifiers */\n/**\n * This class is responsible for a binding inside of a scope.\n *\n * It tracks the following:\n *\n *  * Node path.\n *  * Amount of times referenced by other nodes.\n *  * Paths to nodes that reassign or modify this binding.\n *  * The kind of binding. (Is it a parameter, declaration etc)\n */\n\nexport default class Binding {\n  identifier: t.Identifier;\n  scope: Scope;\n  path: NodePath;\n  kind: BindingKind;\n\n  constructor({\n    identifier,\n    scope,\n    path,\n    kind,\n  }: {\n    identifier: t.Identifier;\n    scope: Scope;\n    path: NodePath;\n    kind: BindingKind;\n  }) {\n    this.identifier = identifier;\n    this.scope = scope;\n    this.path = path;\n    this.kind = kind;\n\n    if (\n      (kind === \"var\" || kind === \"hoisted\") &&\n      // https://github.com/rollup/rollup/issues/4654\n      // Rollup removes the path argument from this call. Add an\n      // unreachable IIFE (that rollup doesn't know is unreachable)\n      // with side effects, to prevent it from messing up with arguments.\n      // You can reproduce this with\n      //   BABEL_8_BREAKING=true make prepublish-build\n      isDeclaredInLoop(\n        path ||\n          (() => {\n            throw new Error(\"Internal Babel error: unreachable \");\n          })(),\n      )\n    ) {\n      this.reassign(path);\n    }\n\n    this.clearValue();\n  }\n\n  constantViolations: Array<NodePath> = [];\n  constant: boolean = true;\n\n  referencePaths: Array<NodePath> = [];\n  referenced: boolean = false;\n  references: number = 0;\n\n  declare hasDeoptedValue: boolean;\n  declare hasValue: boolean;\n  declare value: any;\n\n  deoptValue() {\n    this.clearValue();\n    this.hasDeoptedValue = true;\n  }\n\n  setValue(value: any) {\n    if (this.hasDeoptedValue) return;\n    this.hasValue = true;\n    this.value = value;\n  }\n\n  clearValue() {\n    this.hasDeoptedValue = false;\n    this.hasValue = false;\n    this.value = null;\n  }\n\n  /**\n   * Register a constant violation with the provided `path`.\n   */\n\n  reassign(path: NodePath) {\n    this.constant = false;\n    if (this.constantViolations.indexOf(path) !== -1) {\n      return;\n    }\n    this.constantViolations.push(path);\n  }\n\n  /**\n   * Increment the amount of references to this binding.\n   */\n\n  reference(path: NodePath) {\n    if (this.referencePaths.indexOf(path) !== -1) {\n      return;\n    }\n    this.referenced = true;\n    this.references++;\n    this.referencePaths.push(path);\n  }\n\n  /**\n   * Decrement the amount of references to this binding.\n   */\n\n  dereference() {\n    this.references--;\n    this.referenced = !!this.references;\n  }\n}\n\nfunction isDeclaredInLoop(path: NodePath) {\n  for (\n    let { parentPath, key } = path;\n    parentPath;\n    { parentPath, key } = parentPath\n  ) {\n    if (parentPath.isFunctionParent()) return false;\n    if (\n      parentPath.isWhile() ||\n      parentPath.isForXStatement() ||\n      (parentPath.isForStatement() && key === \"body\")\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n", "{\n\t\"builtin\": {\n\t\t\"Array\": false,\n\t\t\"ArrayBuffer\": false,\n\t\t\"Atomics\": false,\n\t\t\"BigInt\": false,\n\t\t\"BigInt64Array\": false,\n\t\t\"BigUint64Array\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"DataView\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Float32Array\": false,\n\t\t\"Float64Array\": false,\n\t\t\"Function\": false,\n\t\t\"globalThis\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"Int16Array\": false,\n\t\t\"Int32Array\": false,\n\t\t\"Int8Array\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Map\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"Promise\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"Proxy\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"Reflect\": false,\n\t\t\"RegExp\": false,\n\t\t\"Set\": false,\n\t\t\"SharedArrayBuffer\": false,\n\t\t\"String\": false,\n\t\t\"Symbol\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"Uint16Array\": false,\n\t\t\"Uint32Array\": false,\n\t\t\"Uint8Array\": false,\n\t\t\"Uint8ClampedArray\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false,\n\t\t\"WeakMap\": false,\n\t\t\"WeakSet\": false\n\t},\n\t\"es5\": {\n\t\t\"Array\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Function\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"RegExp\": false,\n\t\t\"String\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false\n\t},\n\t\"es2015\": {\n\t\t\"Array\": false,\n\t\t\"ArrayBuffer\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"DataView\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Float32Array\": false,\n\t\t\"Float64Array\": false,\n\t\t\"Function\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"Int16Array\": false,\n\t\t\"Int32Array\": false,\n\t\t\"Int8Array\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Map\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"Promise\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"Proxy\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"Reflect\": false,\n\t\t\"RegExp\": false,\n\t\t\"Set\": false,\n\t\t\"String\": false,\n\t\t\"Symbol\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"Uint16Array\": false,\n\t\t\"Uint32Array\": false,\n\t\t\"Uint8Array\": false,\n\t\t\"Uint8ClampedArray\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false,\n\t\t\"WeakMap\": false,\n\t\t\"WeakSet\": false\n\t},\n\t\"es2017\": {\n\t\t\"Array\": false,\n\t\t\"ArrayBuffer\": false,\n\t\t\"Atomics\": false,\n\t\t\"Boolean\": false,\n\t\t\"constructor\": false,\n\t\t\"DataView\": false,\n\t\t\"Date\": false,\n\t\t\"decodeURI\": false,\n\t\t\"decodeURIComponent\": false,\n\t\t\"encodeURI\": false,\n\t\t\"encodeURIComponent\": false,\n\t\t\"Error\": false,\n\t\t\"escape\": false,\n\t\t\"eval\": false,\n\t\t\"EvalError\": false,\n\t\t\"Float32Array\": false,\n\t\t\"Float64Array\": false,\n\t\t\"Function\": false,\n\t\t\"hasOwnProperty\": false,\n\t\t\"Infinity\": false,\n\t\t\"Int16Array\": false,\n\t\t\"Int32Array\": false,\n\t\t\"Int8Array\": false,\n\t\t\"isFinite\": false,\n\t\t\"isNaN\": false,\n\t\t\"isPrototypeOf\": false,\n\t\t\"JSON\": false,\n\t\t\"Map\": false,\n\t\t\"Math\": false,\n\t\t\"NaN\": false,\n\t\t\"Number\": false,\n\t\t\"Object\": false,\n\t\t\"parseFloat\": false,\n\t\t\"parseInt\": false,\n\t\t\"Promise\": false,\n\t\t\"propertyIsEnumerable\": false,\n\t\t\"Proxy\": false,\n\t\t\"RangeError\": false,\n\t\t\"ReferenceError\": false,\n\t\t\"Reflect\": false,\n\t\t\"RegExp\": false,\n\t\t\"Set\": false,\n\t\t\"SharedArrayBuffer\": false,\n\t\t\"String\": false,\n\t\t\"Symbol\": false,\n\t\t\"SyntaxError\": false,\n\t\t\"toLocaleString\": false,\n\t\t\"toString\": false,\n\t\t\"TypeError\": false,\n\t\t\"Uint16Array\": false,\n\t\t\"Uint32Array\": false,\n\t\t\"Uint8Array\": false,\n\t\t\"Uint8ClampedArray\": false,\n\t\t\"undefined\": false,\n\t\t\"unescape\": false,\n\t\t\"URIError\": false,\n\t\t\"valueOf\": false,\n\t\t\"WeakMap\": false,\n\t\t\"WeakSet\": false\n\t},\n\t\"browser\": {\n\t\t\"AbortController\": false,\n\t\t\"AbortSignal\": false,\n\t\t\"addEventListener\": false,\n\t\t\"alert\": false,\n\t\t\"AnalyserNode\": false,\n\t\t\"Animation\": false,\n\t\t\"AnimationEffectReadOnly\": false,\n\t\t\"AnimationEffectTiming\": false,\n\t\t\"AnimationEffectTimingReadOnly\": false,\n\t\t\"AnimationEvent\": false,\n\t\t\"AnimationPlaybackEvent\": false,\n\t\t\"AnimationTimeline\": false,\n\t\t\"applicationCache\": false,\n\t\t\"ApplicationCache\": false,\n\t\t\"ApplicationCacheErrorEvent\": false,\n\t\t\"atob\": false,\n\t\t\"Attr\": false,\n\t\t\"Audio\": false,\n\t\t\"AudioBuffer\": false,\n\t\t\"AudioBufferSourceNode\": false,\n\t\t\"AudioContext\": false,\n\t\t\"AudioDestinationNode\": false,\n\t\t\"AudioListener\": false,\n\t\t\"AudioNode\": false,\n\t\t\"AudioParam\": false,\n\t\t\"AudioProcessingEvent\": false,\n\t\t\"AudioScheduledSourceNode\": false,\n\t\t\"AudioWorkletGlobalScope \": false,\n\t\t\"AudioWorkletNode\": false,\n\t\t\"AudioWorkletProcessor\": false,\n\t\t\"BarProp\": false,\n\t\t\"BaseAudioContext\": false,\n\t\t\"BatteryManager\": false,\n\t\t\"BeforeUnloadEvent\": false,\n\t\t\"BiquadFilterNode\": false,\n\t\t\"Blob\": false,\n\t\t\"BlobEvent\": false,\n\t\t\"blur\": false,\n\t\t\"BroadcastChannel\": false,\n\t\t\"btoa\": false,\n\t\t\"BudgetService\": false,\n\t\t\"ByteLengthQueuingStrategy\": false,\n\t\t\"Cache\": false,\n\t\t\"caches\": false,\n\t\t\"CacheStorage\": false,\n\t\t\"cancelAnimationFrame\": false,\n\t\t\"cancelIdleCallback\": false,\n\t\t\"CanvasCaptureMediaStreamTrack\": false,\n\t\t\"CanvasGradient\": false,\n\t\t\"CanvasPattern\": false,\n\t\t\"CanvasRenderingContext2D\": false,\n\t\t\"ChannelMergerNode\": false,\n\t\t\"ChannelSplitterNode\": false,\n\t\t\"CharacterData\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"clientInformation\": false,\n\t\t\"ClipboardEvent\": false,\n\t\t\"close\": false,\n\t\t\"closed\": false,\n\t\t\"CloseEvent\": false,\n\t\t\"Comment\": false,\n\t\t\"CompositionEvent\": false,\n\t\t\"confirm\": false,\n\t\t\"console\": false,\n\t\t\"ConstantSourceNode\": false,\n\t\t\"ConvolverNode\": false,\n\t\t\"CountQueuingStrategy\": false,\n\t\t\"createImageBitmap\": false,\n\t\t\"Credential\": false,\n\t\t\"CredentialsContainer\": false,\n\t\t\"crypto\": false,\n\t\t\"Crypto\": false,\n\t\t\"CryptoKey\": false,\n\t\t\"CSS\": false,\n\t\t\"CSSConditionRule\": false,\n\t\t\"CSSFontFaceRule\": false,\n\t\t\"CSSGroupingRule\": false,\n\t\t\"CSSImportRule\": false,\n\t\t\"CSSKeyframeRule\": false,\n\t\t\"CSSKeyframesRule\": false,\n\t\t\"CSSMediaRule\": false,\n\t\t\"CSSNamespaceRule\": false,\n\t\t\"CSSPageRule\": false,\n\t\t\"CSSRule\": false,\n\t\t\"CSSRuleList\": false,\n\t\t\"CSSStyleDeclaration\": false,\n\t\t\"CSSStyleRule\": false,\n\t\t\"CSSStyleSheet\": false,\n\t\t\"CSSSupportsRule\": false,\n\t\t\"CustomElementRegistry\": false,\n\t\t\"customElements\": false,\n\t\t\"CustomEvent\": false,\n\t\t\"DataTransfer\": false,\n\t\t\"DataTransferItem\": false,\n\t\t\"DataTransferItemList\": false,\n\t\t\"defaultstatus\": false,\n\t\t\"defaultStatus\": false,\n\t\t\"DelayNode\": false,\n\t\t\"DeviceMotionEvent\": false,\n\t\t\"DeviceOrientationEvent\": false,\n\t\t\"devicePixelRatio\": false,\n\t\t\"dispatchEvent\": false,\n\t\t\"document\": false,\n\t\t\"Document\": false,\n\t\t\"DocumentFragment\": false,\n\t\t\"DocumentType\": false,\n\t\t\"DOMError\": false,\n\t\t\"DOMException\": false,\n\t\t\"DOMImplementation\": false,\n\t\t\"DOMMatrix\": false,\n\t\t\"DOMMatrixReadOnly\": false,\n\t\t\"DOMParser\": false,\n\t\t\"DOMPoint\": false,\n\t\t\"DOMPointReadOnly\": false,\n\t\t\"DOMQuad\": false,\n\t\t\"DOMRect\": false,\n\t\t\"DOMRectReadOnly\": false,\n\t\t\"DOMStringList\": false,\n\t\t\"DOMStringMap\": false,\n\t\t\"DOMTokenList\": false,\n\t\t\"DragEvent\": false,\n\t\t\"DynamicsCompressorNode\": false,\n\t\t\"Element\": false,\n\t\t\"ErrorEvent\": false,\n\t\t\"event\": false,\n\t\t\"Event\": false,\n\t\t\"EventSource\": false,\n\t\t\"EventTarget\": false,\n\t\t\"external\": false,\n\t\t\"fetch\": false,\n\t\t\"File\": false,\n\t\t\"FileList\": false,\n\t\t\"FileReader\": false,\n\t\t\"find\": false,\n\t\t\"focus\": false,\n\t\t\"FocusEvent\": false,\n\t\t\"FontFace\": false,\n\t\t\"FontFaceSetLoadEvent\": false,\n\t\t\"FormData\": false,\n\t\t\"frameElement\": false,\n\t\t\"frames\": false,\n\t\t\"GainNode\": false,\n\t\t\"Gamepad\": false,\n\t\t\"GamepadButton\": false,\n\t\t\"GamepadEvent\": false,\n\t\t\"getComputedStyle\": false,\n\t\t\"getSelection\": false,\n\t\t\"HashChangeEvent\": false,\n\t\t\"Headers\": false,\n\t\t\"history\": false,\n\t\t\"History\": false,\n\t\t\"HTMLAllCollection\": false,\n\t\t\"HTMLAnchorElement\": false,\n\t\t\"HTMLAreaElement\": false,\n\t\t\"HTMLAudioElement\": false,\n\t\t\"HTMLBaseElement\": false,\n\t\t\"HTMLBodyElement\": false,\n\t\t\"HTMLBRElement\": false,\n\t\t\"HTMLButtonElement\": false,\n\t\t\"HTMLCanvasElement\": false,\n\t\t\"HTMLCollection\": false,\n\t\t\"HTMLContentElement\": false,\n\t\t\"HTMLDataElement\": false,\n\t\t\"HTMLDataListElement\": false,\n\t\t\"HTMLDetailsElement\": false,\n\t\t\"HTMLDialogElement\": false,\n\t\t\"HTMLDirectoryElement\": false,\n\t\t\"HTMLDivElement\": false,\n\t\t\"HTMLDListElement\": false,\n\t\t\"HTMLDocument\": false,\n\t\t\"HTMLElement\": false,\n\t\t\"HTMLEmbedElement\": false,\n\t\t\"HTMLFieldSetElement\": false,\n\t\t\"HTMLFontElement\": false,\n\t\t\"HTMLFormControlsCollection\": false,\n\t\t\"HTMLFormElement\": false,\n\t\t\"HTMLFrameElement\": false,\n\t\t\"HTMLFrameSetElement\": false,\n\t\t\"HTMLHeadElement\": false,\n\t\t\"HTMLHeadingElement\": false,\n\t\t\"HTMLHRElement\": false,\n\t\t\"HTMLHtmlElement\": false,\n\t\t\"HTMLIFrameElement\": false,\n\t\t\"HTMLImageElement\": false,\n\t\t\"HTMLInputElement\": false,\n\t\t\"HTMLLabelElement\": false,\n\t\t\"HTMLLegendElement\": false,\n\t\t\"HTMLLIElement\": false,\n\t\t\"HTMLLinkElement\": false,\n\t\t\"HTMLMapElement\": false,\n\t\t\"HTMLMarqueeElement\": false,\n\t\t\"HTMLMediaElement\": false,\n\t\t\"HTMLMenuElement\": false,\n\t\t\"HTMLMetaElement\": false,\n\t\t\"HTMLMeterElement\": false,\n\t\t\"HTMLModElement\": false,\n\t\t\"HTMLObjectElement\": false,\n\t\t\"HTMLOListElement\": false,\n\t\t\"HTMLOptGroupElement\": false,\n\t\t\"HTMLOptionElement\": false,\n\t\t\"HTMLOptionsCollection\": false,\n\t\t\"HTMLOutputElement\": false,\n\t\t\"HTMLParagraphElement\": false,\n\t\t\"HTMLParamElement\": false,\n\t\t\"HTMLPictureElement\": false,\n\t\t\"HTMLPreElement\": false,\n\t\t\"HTMLProgressElement\": false,\n\t\t\"HTMLQuoteElement\": false,\n\t\t\"HTMLScriptElement\": false,\n\t\t\"HTMLSelectElement\": false,\n\t\t\"HTMLShadowElement\": false,\n\t\t\"HTMLSlotElement\": false,\n\t\t\"HTMLSourceElement\": false,\n\t\t\"HTMLSpanElement\": false,\n\t\t\"HTMLStyleElement\": false,\n\t\t\"HTMLTableCaptionElement\": false,\n\t\t\"HTMLTableCellElement\": false,\n\t\t\"HTMLTableColElement\": false,\n\t\t\"HTMLTableElement\": false,\n\t\t\"HTMLTableRowElement\": false,\n\t\t\"HTMLTableSectionElement\": false,\n\t\t\"HTMLTemplateElement\": false,\n\t\t\"HTMLTextAreaElement\": false,\n\t\t\"HTMLTimeElement\": false,\n\t\t\"HTMLTitleElement\": false,\n\t\t\"HTMLTrackElement\": false,\n\t\t\"HTMLUListElement\": false,\n\t\t\"HTMLUnknownElement\": false,\n\t\t\"HTMLVideoElement\": false,\n\t\t\"IDBCursor\": false,\n\t\t\"IDBCursorWithValue\": false,\n\t\t\"IDBDatabase\": false,\n\t\t\"IDBFactory\": false,\n\t\t\"IDBIndex\": false,\n\t\t\"IDBKeyRange\": false,\n\t\t\"IDBObjectStore\": false,\n\t\t\"IDBOpenDBRequest\": false,\n\t\t\"IDBRequest\": false,\n\t\t\"IDBTransaction\": false,\n\t\t\"IDBVersionChangeEvent\": false,\n\t\t\"IdleDeadline\": false,\n\t\t\"IIRFilterNode\": false,\n\t\t\"Image\": false,\n\t\t\"ImageBitmap\": false,\n\t\t\"ImageBitmapRenderingContext\": false,\n\t\t\"ImageCapture\": false,\n\t\t\"ImageData\": false,\n\t\t\"indexedDB\": false,\n\t\t\"innerHeight\": false,\n\t\t\"innerWidth\": false,\n\t\t\"InputEvent\": false,\n\t\t\"IntersectionObserver\": false,\n\t\t\"IntersectionObserverEntry\": false,\n\t\t\"Intl\": false,\n\t\t\"isSecureContext\": false,\n\t\t\"KeyboardEvent\": false,\n\t\t\"KeyframeEffect\": false,\n\t\t\"KeyframeEffectReadOnly\": false,\n\t\t\"length\": false,\n\t\t\"localStorage\": false,\n\t\t\"location\": true,\n\t\t\"Location\": false,\n\t\t\"locationbar\": false,\n\t\t\"matchMedia\": false,\n\t\t\"MediaDeviceInfo\": false,\n\t\t\"MediaDevices\": false,\n\t\t\"MediaElementAudioSourceNode\": false,\n\t\t\"MediaEncryptedEvent\": false,\n\t\t\"MediaError\": false,\n\t\t\"MediaKeyMessageEvent\": false,\n\t\t\"MediaKeySession\": false,\n\t\t\"MediaKeyStatusMap\": false,\n\t\t\"MediaKeySystemAccess\": false,\n\t\t\"MediaList\": false,\n\t\t\"MediaQueryList\": false,\n\t\t\"MediaQueryListEvent\": false,\n\t\t\"MediaRecorder\": false,\n\t\t\"MediaSettingsRange\": false,\n\t\t\"MediaSource\": false,\n\t\t\"MediaStream\": false,\n\t\t\"MediaStreamAudioDestinationNode\": false,\n\t\t\"MediaStreamAudioSourceNode\": false,\n\t\t\"MediaStreamEvent\": false,\n\t\t\"MediaStreamTrack\": false,\n\t\t\"MediaStreamTrackEvent\": false,\n\t\t\"menubar\": false,\n\t\t\"MessageChannel\": false,\n\t\t\"MessageEvent\": false,\n\t\t\"MessagePort\": false,\n\t\t\"MIDIAccess\": false,\n\t\t\"MIDIConnectionEvent\": false,\n\t\t\"MIDIInput\": false,\n\t\t\"MIDIInputMap\": false,\n\t\t\"MIDIMessageEvent\": false,\n\t\t\"MIDIOutput\": false,\n\t\t\"MIDIOutputMap\": false,\n\t\t\"MIDIPort\": false,\n\t\t\"MimeType\": false,\n\t\t\"MimeTypeArray\": false,\n\t\t\"MouseEvent\": false,\n\t\t\"moveBy\": false,\n\t\t\"moveTo\": false,\n\t\t\"MutationEvent\": false,\n\t\t\"MutationObserver\": false,\n\t\t\"MutationRecord\": false,\n\t\t\"name\": false,\n\t\t\"NamedNodeMap\": false,\n\t\t\"NavigationPreloadManager\": false,\n\t\t\"navigator\": false,\n\t\t\"Navigator\": false,\n\t\t\"NetworkInformation\": false,\n\t\t\"Node\": false,\n\t\t\"NodeFilter\": false,\n\t\t\"NodeIterator\": false,\n\t\t\"NodeList\": false,\n\t\t\"Notification\": false,\n\t\t\"OfflineAudioCompletionEvent\": false,\n\t\t\"OfflineAudioContext\": false,\n\t\t\"offscreenBuffering\": false,\n\t\t\"OffscreenCanvas\": true,\n\t\t\"onabort\": true,\n\t\t\"onafterprint\": true,\n\t\t\"onanimationend\": true,\n\t\t\"onanimationiteration\": true,\n\t\t\"onanimationstart\": true,\n\t\t\"onappinstalled\": true,\n\t\t\"onauxclick\": true,\n\t\t\"onbeforeinstallprompt\": true,\n\t\t\"onbeforeprint\": true,\n\t\t\"onbeforeunload\": true,\n\t\t\"onblur\": true,\n\t\t\"oncancel\": true,\n\t\t\"oncanplay\": true,\n\t\t\"oncanplaythrough\": true,\n\t\t\"onchange\": true,\n\t\t\"onclick\": true,\n\t\t\"onclose\": true,\n\t\t\"oncontextmenu\": true,\n\t\t\"oncuechange\": true,\n\t\t\"ondblclick\": true,\n\t\t\"ondevicemotion\": true,\n\t\t\"ondeviceorientation\": true,\n\t\t\"ondeviceorientationabsolute\": true,\n\t\t\"ondrag\": true,\n\t\t\"ondragend\": true,\n\t\t\"ondragenter\": true,\n\t\t\"ondragleave\": true,\n\t\t\"ondragover\": true,\n\t\t\"ondragstart\": true,\n\t\t\"ondrop\": true,\n\t\t\"ondurationchange\": true,\n\t\t\"onemptied\": true,\n\t\t\"onended\": true,\n\t\t\"onerror\": true,\n\t\t\"onfocus\": true,\n\t\t\"ongotpointercapture\": true,\n\t\t\"onhashchange\": true,\n\t\t\"oninput\": true,\n\t\t\"oninvalid\": true,\n\t\t\"onkeydown\": true,\n\t\t\"onkeypress\": true,\n\t\t\"onkeyup\": true,\n\t\t\"onlanguagechange\": true,\n\t\t\"onload\": true,\n\t\t\"onloadeddata\": true,\n\t\t\"onloadedmetadata\": true,\n\t\t\"onloadstart\": true,\n\t\t\"onlostpointercapture\": true,\n\t\t\"onmessage\": true,\n\t\t\"onmessageerror\": true,\n\t\t\"onmousedown\": true,\n\t\t\"onmouseenter\": true,\n\t\t\"onmouseleave\": true,\n\t\t\"onmousemove\": true,\n\t\t\"onmouseout\": true,\n\t\t\"onmouseover\": true,\n\t\t\"onmouseup\": true,\n\t\t\"onmousewheel\": true,\n\t\t\"onoffline\": true,\n\t\t\"ononline\": true,\n\t\t\"onpagehide\": true,\n\t\t\"onpageshow\": true,\n\t\t\"onpause\": true,\n\t\t\"onplay\": true,\n\t\t\"onplaying\": true,\n\t\t\"onpointercancel\": true,\n\t\t\"onpointerdown\": true,\n\t\t\"onpointerenter\": true,\n\t\t\"onpointerleave\": true,\n\t\t\"onpointermove\": true,\n\t\t\"onpointerout\": true,\n\t\t\"onpointerover\": true,\n\t\t\"onpointerup\": true,\n\t\t\"onpopstate\": true,\n\t\t\"onprogress\": true,\n\t\t\"onratechange\": true,\n\t\t\"onrejectionhandled\": true,\n\t\t\"onreset\": true,\n\t\t\"onresize\": true,\n\t\t\"onscroll\": true,\n\t\t\"onsearch\": true,\n\t\t\"onseeked\": true,\n\t\t\"onseeking\": true,\n\t\t\"onselect\": true,\n\t\t\"onstalled\": true,\n\t\t\"onstorage\": true,\n\t\t\"onsubmit\": true,\n\t\t\"onsuspend\": true,\n\t\t\"ontimeupdate\": true,\n\t\t\"ontoggle\": true,\n\t\t\"ontransitionend\": true,\n\t\t\"onunhandledrejection\": true,\n\t\t\"onunload\": true,\n\t\t\"onvolumechange\": true,\n\t\t\"onwaiting\": true,\n\t\t\"onwheel\": true,\n\t\t\"open\": false,\n\t\t\"openDatabase\": false,\n\t\t\"opener\": false,\n\t\t\"Option\": false,\n\t\t\"origin\": false,\n\t\t\"OscillatorNode\": false,\n\t\t\"outerHeight\": false,\n\t\t\"outerWidth\": false,\n\t\t\"PageTransitionEvent\": false,\n\t\t\"pageXOffset\": false,\n\t\t\"pageYOffset\": false,\n\t\t\"PannerNode\": false,\n\t\t\"parent\": false,\n\t\t\"Path2D\": false,\n\t\t\"PaymentAddress\": false,\n\t\t\"PaymentRequest\": false,\n\t\t\"PaymentRequestUpdateEvent\": false,\n\t\t\"PaymentResponse\": false,\n\t\t\"performance\": false,\n\t\t\"Performance\": false,\n\t\t\"PerformanceEntry\": false,\n\t\t\"PerformanceLongTaskTiming\": false,\n\t\t\"PerformanceMark\": false,\n\t\t\"PerformanceMeasure\": false,\n\t\t\"PerformanceNavigation\": false,\n\t\t\"PerformanceNavigationTiming\": false,\n\t\t\"PerformanceObserver\": false,\n\t\t\"PerformanceObserverEntryList\": false,\n\t\t\"PerformancePaintTiming\": false,\n\t\t\"PerformanceResourceTiming\": false,\n\t\t\"PerformanceTiming\": false,\n\t\t\"PeriodicWave\": false,\n\t\t\"Permissions\": false,\n\t\t\"PermissionStatus\": false,\n\t\t\"personalbar\": false,\n\t\t\"PhotoCapabilities\": false,\n\t\t\"Plugin\": false,\n\t\t\"PluginArray\": false,\n\t\t\"PointerEvent\": false,\n\t\t\"PopStateEvent\": false,\n\t\t\"postMessage\": false,\n\t\t\"Presentation\": false,\n\t\t\"PresentationAvailability\": false,\n\t\t\"PresentationConnection\": false,\n\t\t\"PresentationConnectionAvailableEvent\": false,\n\t\t\"PresentationConnectionCloseEvent\": false,\n\t\t\"PresentationConnectionList\": false,\n\t\t\"PresentationReceiver\": false,\n\t\t\"PresentationRequest\": false,\n\t\t\"print\": false,\n\t\t\"ProcessingInstruction\": false,\n\t\t\"ProgressEvent\": false,\n\t\t\"PromiseRejectionEvent\": false,\n\t\t\"prompt\": false,\n\t\t\"PushManager\": false,\n\t\t\"PushSubscription\": false,\n\t\t\"PushSubscriptionOptions\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"RadioNodeList\": false,\n\t\t\"Range\": false,\n\t\t\"ReadableStream\": false,\n\t\t\"registerProcessor\": false,\n\t\t\"RemotePlayback\": false,\n\t\t\"removeEventListener\": false,\n\t\t\"Request\": false,\n\t\t\"requestAnimationFrame\": false,\n\t\t\"requestIdleCallback\": false,\n\t\t\"resizeBy\": false,\n\t\t\"ResizeObserver\": false,\n\t\t\"ResizeObserverEntry\": false,\n\t\t\"resizeTo\": false,\n\t\t\"Response\": false,\n\t\t\"RTCCertificate\": false,\n\t\t\"RTCDataChannel\": false,\n\t\t\"RTCDataChannelEvent\": false,\n\t\t\"RTCDtlsTransport\": false,\n\t\t\"RTCIceCandidate\": false,\n\t\t\"RTCIceGatherer\": false,\n\t\t\"RTCIceTransport\": false,\n\t\t\"RTCPeerConnection\": false,\n\t\t\"RTCPeerConnectionIceEvent\": false,\n\t\t\"RTCRtpContributingSource\": false,\n\t\t\"RTCRtpReceiver\": false,\n\t\t\"RTCRtpSender\": false,\n\t\t\"RTCSctpTransport\": false,\n\t\t\"RTCSessionDescription\": false,\n\t\t\"RTCStatsReport\": false,\n\t\t\"RTCTrackEvent\": false,\n\t\t\"screen\": false,\n\t\t\"Screen\": false,\n\t\t\"screenLeft\": false,\n\t\t\"ScreenOrientation\": false,\n\t\t\"screenTop\": false,\n\t\t\"screenX\": false,\n\t\t\"screenY\": false,\n\t\t\"ScriptProcessorNode\": false,\n\t\t\"scroll\": false,\n\t\t\"scrollbars\": false,\n\t\t\"scrollBy\": false,\n\t\t\"scrollTo\": false,\n\t\t\"scrollX\": false,\n\t\t\"scrollY\": false,\n\t\t\"SecurityPolicyViolationEvent\": false,\n\t\t\"Selection\": false,\n\t\t\"self\": false,\n\t\t\"ServiceWorker\": false,\n\t\t\"ServiceWorkerContainer\": false,\n\t\t\"ServiceWorkerRegistration\": false,\n\t\t\"sessionStorage\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"ShadowRoot\": false,\n\t\t\"SharedWorker\": false,\n\t\t\"SourceBuffer\": false,\n\t\t\"SourceBufferList\": false,\n\t\t\"speechSynthesis\": false,\n\t\t\"SpeechSynthesisEvent\": false,\n\t\t\"SpeechSynthesisUtterance\": false,\n\t\t\"StaticRange\": false,\n\t\t\"status\": false,\n\t\t\"statusbar\": false,\n\t\t\"StereoPannerNode\": false,\n\t\t\"stop\": false,\n\t\t\"Storage\": false,\n\t\t\"StorageEvent\": false,\n\t\t\"StorageManager\": false,\n\t\t\"styleMedia\": false,\n\t\t\"StyleSheet\": false,\n\t\t\"StyleSheetList\": false,\n\t\t\"SubtleCrypto\": false,\n\t\t\"SVGAElement\": false,\n\t\t\"SVGAngle\": false,\n\t\t\"SVGAnimatedAngle\": false,\n\t\t\"SVGAnimatedBoolean\": false,\n\t\t\"SVGAnimatedEnumeration\": false,\n\t\t\"SVGAnimatedInteger\": false,\n\t\t\"SVGAnimatedLength\": false,\n\t\t\"SVGAnimatedLengthList\": false,\n\t\t\"SVGAnimatedNumber\": false,\n\t\t\"SVGAnimatedNumberList\": false,\n\t\t\"SVGAnimatedPreserveAspectRatio\": false,\n\t\t\"SVGAnimatedRect\": false,\n\t\t\"SVGAnimatedString\": false,\n\t\t\"SVGAnimatedTransformList\": false,\n\t\t\"SVGAnimateElement\": false,\n\t\t\"SVGAnimateMotionElement\": false,\n\t\t\"SVGAnimateTransformElement\": false,\n\t\t\"SVGAnimationElement\": false,\n\t\t\"SVGCircleElement\": false,\n\t\t\"SVGClipPathElement\": false,\n\t\t\"SVGComponentTransferFunctionElement\": false,\n\t\t\"SVGDefsElement\": false,\n\t\t\"SVGDescElement\": false,\n\t\t\"SVGDiscardElement\": false,\n\t\t\"SVGElement\": false,\n\t\t\"SVGEllipseElement\": false,\n\t\t\"SVGFEBlendElement\": false,\n\t\t\"SVGFEColorMatrixElement\": false,\n\t\t\"SVGFEComponentTransferElement\": false,\n\t\t\"SVGFECompositeElement\": false,\n\t\t\"SVGFEConvolveMatrixElement\": false,\n\t\t\"SVGFEDiffuseLightingElement\": false,\n\t\t\"SVGFEDisplacementMapElement\": false,\n\t\t\"SVGFEDistantLightElement\": false,\n\t\t\"SVGFEDropShadowElement\": false,\n\t\t\"SVGFEFloodElement\": false,\n\t\t\"SVGFEFuncAElement\": false,\n\t\t\"SVGFEFuncBElement\": false,\n\t\t\"SVGFEFuncGElement\": false,\n\t\t\"SVGFEFuncRElement\": false,\n\t\t\"SVGFEGaussianBlurElement\": false,\n\t\t\"SVGFEImageElement\": false,\n\t\t\"SVGFEMergeElement\": false,\n\t\t\"SVGFEMergeNodeElement\": false,\n\t\t\"SVGFEMorphologyElement\": false,\n\t\t\"SVGFEOffsetElement\": false,\n\t\t\"SVGFEPointLightElement\": false,\n\t\t\"SVGFESpecularLightingElement\": false,\n\t\t\"SVGFESpotLightElement\": false,\n\t\t\"SVGFETileElement\": false,\n\t\t\"SVGFETurbulenceElement\": false,\n\t\t\"SVGFilterElement\": false,\n\t\t\"SVGForeignObjectElement\": false,\n\t\t\"SVGGElement\": false,\n\t\t\"SVGGeometryElement\": false,\n\t\t\"SVGGradientElement\": false,\n\t\t\"SVGGraphicsElement\": false,\n\t\t\"SVGImageElement\": false,\n\t\t\"SVGLength\": false,\n\t\t\"SVGLengthList\": false,\n\t\t\"SVGLinearGradientElement\": false,\n\t\t\"SVGLineElement\": false,\n\t\t\"SVGMarkerElement\": false,\n\t\t\"SVGMaskElement\": false,\n\t\t\"SVGMatrix\": false,\n\t\t\"SVGMetadataElement\": false,\n\t\t\"SVGMPathElement\": false,\n\t\t\"SVGNumber\": false,\n\t\t\"SVGNumberList\": false,\n\t\t\"SVGPathElement\": false,\n\t\t\"SVGPatternElement\": false,\n\t\t\"SVGPoint\": false,\n\t\t\"SVGPointList\": false,\n\t\t\"SVGPolygonElement\": false,\n\t\t\"SVGPolylineElement\": false,\n\t\t\"SVGPreserveAspectRatio\": false,\n\t\t\"SVGRadialGradientElement\": false,\n\t\t\"SVGRect\": false,\n\t\t\"SVGRectElement\": false,\n\t\t\"SVGScriptElement\": false,\n\t\t\"SVGSetElement\": false,\n\t\t\"SVGStopElement\": false,\n\t\t\"SVGStringList\": false,\n\t\t\"SVGStyleElement\": false,\n\t\t\"SVGSVGElement\": false,\n\t\t\"SVGSwitchElement\": false,\n\t\t\"SVGSymbolElement\": false,\n\t\t\"SVGTextContentElement\": false,\n\t\t\"SVGTextElement\": false,\n\t\t\"SVGTextPathElement\": false,\n\t\t\"SVGTextPositioningElement\": false,\n\t\t\"SVGTitleElement\": false,\n\t\t\"SVGTransform\": false,\n\t\t\"SVGTransformList\": false,\n\t\t\"SVGTSpanElement\": false,\n\t\t\"SVGUnitTypes\": false,\n\t\t\"SVGUseElement\": false,\n\t\t\"SVGViewElement\": false,\n\t\t\"TaskAttributionTiming\": false,\n\t\t\"Text\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"TextEvent\": false,\n\t\t\"TextMetrics\": false,\n\t\t\"TextTrack\": false,\n\t\t\"TextTrackCue\": false,\n\t\t\"TextTrackCueList\": false,\n\t\t\"TextTrackList\": false,\n\t\t\"TimeRanges\": false,\n\t\t\"toolbar\": false,\n\t\t\"top\": false,\n\t\t\"Touch\": false,\n\t\t\"TouchEvent\": false,\n\t\t\"TouchList\": false,\n\t\t\"TrackEvent\": false,\n\t\t\"TransitionEvent\": false,\n\t\t\"TreeWalker\": false,\n\t\t\"UIEvent\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false,\n\t\t\"ValidityState\": false,\n\t\t\"visualViewport\": false,\n\t\t\"VisualViewport\": false,\n\t\t\"VTTCue\": false,\n\t\t\"WaveShaperNode\": false,\n\t\t\"WebAssembly\": false,\n\t\t\"WebGL2RenderingContext\": false,\n\t\t\"WebGLActiveInfo\": false,\n\t\t\"WebGLBuffer\": false,\n\t\t\"WebGLContextEvent\": false,\n\t\t\"WebGLFramebuffer\": false,\n\t\t\"WebGLProgram\": false,\n\t\t\"WebGLQuery\": false,\n\t\t\"WebGLRenderbuffer\": false,\n\t\t\"WebGLRenderingContext\": false,\n\t\t\"WebGLSampler\": false,\n\t\t\"WebGLShader\": false,\n\t\t\"WebGLShaderPrecisionFormat\": false,\n\t\t\"WebGLSync\": false,\n\t\t\"WebGLTexture\": false,\n\t\t\"WebGLTransformFeedback\": false,\n\t\t\"WebGLUniformLocation\": false,\n\t\t\"WebGLVertexArrayObject\": false,\n\t\t\"WebSocket\": false,\n\t\t\"WheelEvent\": false,\n\t\t\"window\": false,\n\t\t\"Window\": false,\n\t\t\"Worker\": false,\n\t\t\"WritableStream\": false,\n\t\t\"XMLDocument\": false,\n\t\t\"XMLHttpRequest\": false,\n\t\t\"XMLHttpRequestEventTarget\": false,\n\t\t\"XMLHttpRequestUpload\": false,\n\t\t\"XMLSerializer\": false,\n\t\t\"XPathEvaluator\": false,\n\t\t\"XPathExpression\": false,\n\t\t\"XPathResult\": false,\n\t\t\"XSLTProcessor\": false\n\t},\n\t\"worker\": {\n\t\t\"addEventListener\": false,\n\t\t\"applicationCache\": false,\n\t\t\"atob\": false,\n\t\t\"Blob\": false,\n\t\t\"BroadcastChannel\": false,\n\t\t\"btoa\": false,\n\t\t\"Cache\": false,\n\t\t\"caches\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"close\": true,\n\t\t\"console\": false,\n\t\t\"fetch\": false,\n\t\t\"FileReaderSync\": false,\n\t\t\"FormData\": false,\n\t\t\"Headers\": false,\n\t\t\"IDBCursor\": false,\n\t\t\"IDBCursorWithValue\": false,\n\t\t\"IDBDatabase\": false,\n\t\t\"IDBFactory\": false,\n\t\t\"IDBIndex\": false,\n\t\t\"IDBKeyRange\": false,\n\t\t\"IDBObjectStore\": false,\n\t\t\"IDBOpenDBRequest\": false,\n\t\t\"IDBRequest\": false,\n\t\t\"IDBTransaction\": false,\n\t\t\"IDBVersionChangeEvent\": false,\n\t\t\"ImageData\": false,\n\t\t\"importScripts\": true,\n\t\t\"indexedDB\": false,\n\t\t\"location\": false,\n\t\t\"MessageChannel\": false,\n\t\t\"MessagePort\": false,\n\t\t\"name\": false,\n\t\t\"navigator\": false,\n\t\t\"Notification\": false,\n\t\t\"onclose\": true,\n\t\t\"onconnect\": true,\n\t\t\"onerror\": true,\n\t\t\"onlanguagechange\": true,\n\t\t\"onmessage\": true,\n\t\t\"onoffline\": true,\n\t\t\"ononline\": true,\n\t\t\"onrejectionhandled\": true,\n\t\t\"onunhandledrejection\": true,\n\t\t\"performance\": false,\n\t\t\"Performance\": false,\n\t\t\"PerformanceEntry\": false,\n\t\t\"PerformanceMark\": false,\n\t\t\"PerformanceMeasure\": false,\n\t\t\"PerformanceNavigation\": false,\n\t\t\"PerformanceResourceTiming\": false,\n\t\t\"PerformanceTiming\": false,\n\t\t\"postMessage\": true,\n\t\t\"Promise\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"removeEventListener\": false,\n\t\t\"Request\": false,\n\t\t\"Response\": false,\n\t\t\"self\": true,\n\t\t\"ServiceWorkerRegistration\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false,\n\t\t\"WebSocket\": false,\n\t\t\"Worker\": false,\n\t\t\"WorkerGlobalScope\": false,\n\t\t\"XMLHttpRequest\": false\n\t},\n\t\"node\": {\n\t\t\"__dirname\": false,\n\t\t\"__filename\": false,\n\t\t\"Buffer\": false,\n\t\t\"clearImmediate\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"console\": false,\n\t\t\"exports\": true,\n\t\t\"global\": false,\n\t\t\"Intl\": false,\n\t\t\"module\": false,\n\t\t\"process\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"require\": false,\n\t\t\"setImmediate\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false\n\t},\n\t\"commonjs\": {\n\t\t\"exports\": true,\n\t\t\"global\": false,\n\t\t\"module\": false,\n\t\t\"require\": false\n\t},\n\t\"amd\": {\n\t\t\"define\": false,\n\t\t\"require\": false\n\t},\n\t\"mocha\": {\n\t\t\"after\": false,\n\t\t\"afterEach\": false,\n\t\t\"before\": false,\n\t\t\"beforeEach\": false,\n\t\t\"context\": false,\n\t\t\"describe\": false,\n\t\t\"it\": false,\n\t\t\"mocha\": false,\n\t\t\"run\": false,\n\t\t\"setup\": false,\n\t\t\"specify\": false,\n\t\t\"suite\": false,\n\t\t\"suiteSetup\": false,\n\t\t\"suiteTeardown\": false,\n\t\t\"teardown\": false,\n\t\t\"test\": false,\n\t\t\"xcontext\": false,\n\t\t\"xdescribe\": false,\n\t\t\"xit\": false,\n\t\t\"xspecify\": false\n\t},\n\t\"jasmine\": {\n\t\t\"afterAll\": false,\n\t\t\"afterEach\": false,\n\t\t\"beforeAll\": false,\n\t\t\"beforeEach\": false,\n\t\t\"describe\": false,\n\t\t\"expect\": false,\n\t\t\"fail\": false,\n\t\t\"fdescribe\": false,\n\t\t\"fit\": false,\n\t\t\"it\": false,\n\t\t\"jasmine\": false,\n\t\t\"pending\": false,\n\t\t\"runs\": false,\n\t\t\"spyOn\": false,\n\t\t\"spyOnProperty\": false,\n\t\t\"waits\": false,\n\t\t\"waitsFor\": false,\n\t\t\"xdescribe\": false,\n\t\t\"xit\": false\n\t},\n\t\"jest\": {\n\t\t\"afterAll\": false,\n\t\t\"afterEach\": false,\n\t\t\"beforeAll\": false,\n\t\t\"beforeEach\": false,\n\t\t\"describe\": false,\n\t\t\"expect\": false,\n\t\t\"fdescribe\": false,\n\t\t\"fit\": false,\n\t\t\"it\": false,\n\t\t\"jest\": false,\n\t\t\"pit\": false,\n\t\t\"require\": false,\n\t\t\"test\": false,\n\t\t\"xdescribe\": false,\n\t\t\"xit\": false,\n\t\t\"xtest\": false\n\t},\n\t\"qunit\": {\n\t\t\"asyncTest\": false,\n\t\t\"deepEqual\": false,\n\t\t\"equal\": false,\n\t\t\"expect\": false,\n\t\t\"module\": false,\n\t\t\"notDeepEqual\": false,\n\t\t\"notEqual\": false,\n\t\t\"notOk\": false,\n\t\t\"notPropEqual\": false,\n\t\t\"notStrictEqual\": false,\n\t\t\"ok\": false,\n\t\t\"propEqual\": false,\n\t\t\"QUnit\": false,\n\t\t\"raises\": false,\n\t\t\"start\": false,\n\t\t\"stop\": false,\n\t\t\"strictEqual\": false,\n\t\t\"test\": false,\n\t\t\"throws\": false\n\t},\n\t\"phantomjs\": {\n\t\t\"console\": true,\n\t\t\"exports\": true,\n\t\t\"phantom\": true,\n\t\t\"require\": true,\n\t\t\"WebPage\": true\n\t},\n\t\"couch\": {\n\t\t\"emit\": false,\n\t\t\"exports\": false,\n\t\t\"getRow\": false,\n\t\t\"log\": false,\n\t\t\"module\": false,\n\t\t\"provides\": false,\n\t\t\"require\": false,\n\t\t\"respond\": false,\n\t\t\"send\": false,\n\t\t\"start\": false,\n\t\t\"sum\": false\n\t},\n\t\"rhino\": {\n\t\t\"defineClass\": false,\n\t\t\"deserialize\": false,\n\t\t\"gc\": false,\n\t\t\"help\": false,\n\t\t\"importClass\": false,\n\t\t\"importPackage\": false,\n\t\t\"java\": false,\n\t\t\"load\": false,\n\t\t\"loadClass\": false,\n\t\t\"Packages\": false,\n\t\t\"print\": false,\n\t\t\"quit\": false,\n\t\t\"readFile\": false,\n\t\t\"readUrl\": false,\n\t\t\"runCommand\": false,\n\t\t\"seal\": false,\n\t\t\"serialize\": false,\n\t\t\"spawn\": false,\n\t\t\"sync\": false,\n\t\t\"toint32\": false,\n\t\t\"version\": false\n\t},\n\t\"nashorn\": {\n\t\t\"__DIR__\": false,\n\t\t\"__FILE__\": false,\n\t\t\"__LINE__\": false,\n\t\t\"com\": false,\n\t\t\"edu\": false,\n\t\t\"exit\": false,\n\t\t\"java\": false,\n\t\t\"Java\": false,\n\t\t\"javafx\": false,\n\t\t\"JavaImporter\": false,\n\t\t\"javax\": false,\n\t\t\"JSAdapter\": false,\n\t\t\"load\": false,\n\t\t\"loadWithNewGlobal\": false,\n\t\t\"org\": false,\n\t\t\"Packages\": false,\n\t\t\"print\": false,\n\t\t\"quit\": false\n\t},\n\t\"wsh\": {\n\t\t\"ActiveXObject\": true,\n\t\t\"Enumerator\": true,\n\t\t\"GetObject\": true,\n\t\t\"ScriptEngine\": true,\n\t\t\"ScriptEngineBuildVersion\": true,\n\t\t\"ScriptEngineMajorVersion\": true,\n\t\t\"ScriptEngineMinorVersion\": true,\n\t\t\"VBArray\": true,\n\t\t\"WScript\": true,\n\t\t\"WSH\": true,\n\t\t\"XDomainRequest\": true\n\t},\n\t\"jquery\": {\n\t\t\"$\": false,\n\t\t\"jQuery\": false\n\t},\n\t\"yui\": {\n\t\t\"YAHOO\": false,\n\t\t\"YAHOO_config\": false,\n\t\t\"YUI\": false,\n\t\t\"YUI_config\": false\n\t},\n\t\"shelljs\": {\n\t\t\"cat\": false,\n\t\t\"cd\": false,\n\t\t\"chmod\": false,\n\t\t\"config\": false,\n\t\t\"cp\": false,\n\t\t\"dirs\": false,\n\t\t\"echo\": false,\n\t\t\"env\": false,\n\t\t\"error\": false,\n\t\t\"exec\": false,\n\t\t\"exit\": false,\n\t\t\"find\": false,\n\t\t\"grep\": false,\n\t\t\"ln\": false,\n\t\t\"ls\": false,\n\t\t\"mkdir\": false,\n\t\t\"mv\": false,\n\t\t\"popd\": false,\n\t\t\"pushd\": false,\n\t\t\"pwd\": false,\n\t\t\"rm\": false,\n\t\t\"sed\": false,\n\t\t\"set\": false,\n\t\t\"target\": false,\n\t\t\"tempdir\": false,\n\t\t\"test\": false,\n\t\t\"touch\": false,\n\t\t\"which\": false\n\t},\n\t\"prototypejs\": {\n\t\t\"$\": false,\n\t\t\"$$\": false,\n\t\t\"$A\": false,\n\t\t\"$break\": false,\n\t\t\"$continue\": false,\n\t\t\"$F\": false,\n\t\t\"$H\": false,\n\t\t\"$R\": false,\n\t\t\"$w\": false,\n\t\t\"Abstract\": false,\n\t\t\"Ajax\": false,\n\t\t\"Autocompleter\": false,\n\t\t\"Builder\": false,\n\t\t\"Class\": false,\n\t\t\"Control\": false,\n\t\t\"Draggable\": false,\n\t\t\"Draggables\": false,\n\t\t\"Droppables\": false,\n\t\t\"Effect\": false,\n\t\t\"Element\": false,\n\t\t\"Enumerable\": false,\n\t\t\"Event\": false,\n\t\t\"Field\": false,\n\t\t\"Form\": false,\n\t\t\"Hash\": false,\n\t\t\"Insertion\": false,\n\t\t\"ObjectRange\": false,\n\t\t\"PeriodicalExecuter\": false,\n\t\t\"Position\": false,\n\t\t\"Prototype\": false,\n\t\t\"Scriptaculous\": false,\n\t\t\"Selector\": false,\n\t\t\"Sortable\": false,\n\t\t\"SortableObserver\": false,\n\t\t\"Sound\": false,\n\t\t\"Template\": false,\n\t\t\"Toggle\": false,\n\t\t\"Try\": false\n\t},\n\t\"meteor\": {\n\t\t\"_\": false,\n\t\t\"$\": false,\n\t\t\"Accounts\": false,\n\t\t\"AccountsClient\": false,\n\t\t\"AccountsCommon\": false,\n\t\t\"AccountsServer\": false,\n\t\t\"App\": false,\n\t\t\"Assets\": false,\n\t\t\"Blaze\": false,\n\t\t\"check\": false,\n\t\t\"Cordova\": false,\n\t\t\"DDP\": false,\n\t\t\"DDPRateLimiter\": false,\n\t\t\"DDPServer\": false,\n\t\t\"Deps\": false,\n\t\t\"EJSON\": false,\n\t\t\"Email\": false,\n\t\t\"HTTP\": false,\n\t\t\"Log\": false,\n\t\t\"Match\": false,\n\t\t\"Meteor\": false,\n\t\t\"Mongo\": false,\n\t\t\"MongoInternals\": false,\n\t\t\"Npm\": false,\n\t\t\"Package\": false,\n\t\t\"Plugin\": false,\n\t\t\"process\": false,\n\t\t\"Random\": false,\n\t\t\"ReactiveDict\": false,\n\t\t\"ReactiveVar\": false,\n\t\t\"Router\": false,\n\t\t\"ServiceConfiguration\": false,\n\t\t\"Session\": false,\n\t\t\"share\": false,\n\t\t\"Spacebars\": false,\n\t\t\"Template\": false,\n\t\t\"Tinytest\": false,\n\t\t\"Tracker\": false,\n\t\t\"UI\": false,\n\t\t\"Utils\": false,\n\t\t\"WebApp\": false,\n\t\t\"WebAppInternals\": false\n\t},\n\t\"mongo\": {\n\t\t\"_isWindows\": false,\n\t\t\"_rand\": false,\n\t\t\"BulkWriteResult\": false,\n\t\t\"cat\": false,\n\t\t\"cd\": false,\n\t\t\"connect\": false,\n\t\t\"db\": false,\n\t\t\"getHostName\": false,\n\t\t\"getMemInfo\": false,\n\t\t\"hostname\": false,\n\t\t\"ISODate\": false,\n\t\t\"listFiles\": false,\n\t\t\"load\": false,\n\t\t\"ls\": false,\n\t\t\"md5sumFile\": false,\n\t\t\"mkdir\": false,\n\t\t\"Mongo\": false,\n\t\t\"NumberInt\": false,\n\t\t\"NumberLong\": false,\n\t\t\"ObjectId\": false,\n\t\t\"PlanCache\": false,\n\t\t\"print\": false,\n\t\t\"printjson\": false,\n\t\t\"pwd\": false,\n\t\t\"quit\": false,\n\t\t\"removeFile\": false,\n\t\t\"rs\": false,\n\t\t\"sh\": false,\n\t\t\"UUID\": false,\n\t\t\"version\": false,\n\t\t\"WriteResult\": false\n\t},\n\t\"applescript\": {\n\t\t\"$\": false,\n\t\t\"Application\": false,\n\t\t\"Automation\": false,\n\t\t\"console\": false,\n\t\t\"delay\": false,\n\t\t\"Library\": false,\n\t\t\"ObjC\": false,\n\t\t\"ObjectSpecifier\": false,\n\t\t\"Path\": false,\n\t\t\"Progress\": false,\n\t\t\"Ref\": false\n\t},\n\t\"serviceworker\": {\n\t\t\"addEventListener\": false,\n\t\t\"applicationCache\": false,\n\t\t\"atob\": false,\n\t\t\"Blob\": false,\n\t\t\"BroadcastChannel\": false,\n\t\t\"btoa\": false,\n\t\t\"Cache\": false,\n\t\t\"caches\": false,\n\t\t\"CacheStorage\": false,\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"Client\": false,\n\t\t\"clients\": false,\n\t\t\"Clients\": false,\n\t\t\"close\": true,\n\t\t\"console\": false,\n\t\t\"ExtendableEvent\": false,\n\t\t\"ExtendableMessageEvent\": false,\n\t\t\"fetch\": false,\n\t\t\"FetchEvent\": false,\n\t\t\"FileReaderSync\": false,\n\t\t\"FormData\": false,\n\t\t\"Headers\": false,\n\t\t\"IDBCursor\": false,\n\t\t\"IDBCursorWithValue\": false,\n\t\t\"IDBDatabase\": false,\n\t\t\"IDBFactory\": false,\n\t\t\"IDBIndex\": false,\n\t\t\"IDBKeyRange\": false,\n\t\t\"IDBObjectStore\": false,\n\t\t\"IDBOpenDBRequest\": false,\n\t\t\"IDBRequest\": false,\n\t\t\"IDBTransaction\": false,\n\t\t\"IDBVersionChangeEvent\": false,\n\t\t\"ImageData\": false,\n\t\t\"importScripts\": false,\n\t\t\"indexedDB\": false,\n\t\t\"location\": false,\n\t\t\"MessageChannel\": false,\n\t\t\"MessagePort\": false,\n\t\t\"name\": false,\n\t\t\"navigator\": false,\n\t\t\"Notification\": false,\n\t\t\"onclose\": true,\n\t\t\"onconnect\": true,\n\t\t\"onerror\": true,\n\t\t\"onfetch\": true,\n\t\t\"oninstall\": true,\n\t\t\"onlanguagechange\": true,\n\t\t\"onmessage\": true,\n\t\t\"onmessageerror\": true,\n\t\t\"onnotificationclick\": true,\n\t\t\"onnotificationclose\": true,\n\t\t\"onoffline\": true,\n\t\t\"ononline\": true,\n\t\t\"onpush\": true,\n\t\t\"onpushsubscriptionchange\": true,\n\t\t\"onrejectionhandled\": true,\n\t\t\"onsync\": true,\n\t\t\"onunhandledrejection\": true,\n\t\t\"performance\": false,\n\t\t\"Performance\": false,\n\t\t\"PerformanceEntry\": false,\n\t\t\"PerformanceMark\": false,\n\t\t\"PerformanceMeasure\": false,\n\t\t\"PerformanceNavigation\": false,\n\t\t\"PerformanceResourceTiming\": false,\n\t\t\"PerformanceTiming\": false,\n\t\t\"postMessage\": true,\n\t\t\"Promise\": false,\n\t\t\"queueMicrotask\": false,\n\t\t\"registration\": false,\n\t\t\"removeEventListener\": false,\n\t\t\"Request\": false,\n\t\t\"Response\": false,\n\t\t\"self\": false,\n\t\t\"ServiceWorker\": false,\n\t\t\"ServiceWorkerContainer\": false,\n\t\t\"ServiceWorkerGlobalScope\": false,\n\t\t\"ServiceWorkerMessageEvent\": false,\n\t\t\"ServiceWorkerRegistration\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"skipWaiting\": false,\n\t\t\"TextDecoder\": false,\n\t\t\"TextEncoder\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false,\n\t\t\"WebSocket\": false,\n\t\t\"WindowClient\": false,\n\t\t\"Worker\": false,\n\t\t\"WorkerGlobalScope\": false,\n\t\t\"XMLHttpRequest\": false\n\t},\n\t\"atomtest\": {\n\t\t\"advanceClock\": false,\n\t\t\"fakeClearInterval\": false,\n\t\t\"fakeClearTimeout\": false,\n\t\t\"fakeSetInterval\": false,\n\t\t\"fakeSetTimeout\": false,\n\t\t\"resetTimeouts\": false,\n\t\t\"waitsForPromise\": false\n\t},\n\t\"embertest\": {\n\t\t\"andThen\": false,\n\t\t\"click\": false,\n\t\t\"currentPath\": false,\n\t\t\"currentRouteName\": false,\n\t\t\"currentURL\": false,\n\t\t\"fillIn\": false,\n\t\t\"find\": false,\n\t\t\"findAll\": false,\n\t\t\"findWithAssert\": false,\n\t\t\"keyEvent\": false,\n\t\t\"pauseTest\": false,\n\t\t\"resumeTest\": false,\n\t\t\"triggerEvent\": false,\n\t\t\"visit\": false,\n\t\t\"wait\": false\n\t},\n\t\"protractor\": {\n\t\t\"$\": false,\n\t\t\"$$\": false,\n\t\t\"browser\": false,\n\t\t\"by\": false,\n\t\t\"By\": false,\n\t\t\"DartObject\": false,\n\t\t\"element\": false,\n\t\t\"protractor\": false\n\t},\n\t\"shared-node-browser\": {\n\t\t\"clearInterval\": false,\n\t\t\"clearTimeout\": false,\n\t\t\"console\": false,\n\t\t\"setInterval\": false,\n\t\t\"setTimeout\": false,\n\t\t\"URL\": false,\n\t\t\"URLSearchParams\": false\n\t},\n\t\"webextensions\": {\n\t\t\"browser\": false,\n\t\t\"chrome\": false,\n\t\t\"opr\": false\n\t},\n\t\"greasemonkey\": {\n\t\t\"cloneInto\": false,\n\t\t\"createObjectIn\": false,\n\t\t\"exportFunction\": false,\n\t\t\"GM\": false,\n\t\t\"GM_addStyle\": false,\n\t\t\"GM_deleteValue\": false,\n\t\t\"GM_getResourceText\": false,\n\t\t\"GM_getResourceURL\": false,\n\t\t\"GM_getValue\": false,\n\t\t\"GM_info\": false,\n\t\t\"GM_listValues\": false,\n\t\t\"GM_log\": false,\n\t\t\"GM_openInTab\": false,\n\t\t\"GM_registerMenuCommand\": false,\n\t\t\"GM_setClipboard\": false,\n\t\t\"GM_setValue\": false,\n\t\t\"GM_xmlhttpRequest\": false,\n\t\t\"unsafeWindow\": false\n\t},\n\t\"devtools\": {\n\t\t\"$\": false,\n\t\t\"$_\": false,\n\t\t\"$$\": false,\n\t\t\"$0\": false,\n\t\t\"$1\": false,\n\t\t\"$2\": false,\n\t\t\"$3\": false,\n\t\t\"$4\": false,\n\t\t\"$x\": false,\n\t\t\"chrome\": false,\n\t\t\"clear\": false,\n\t\t\"copy\": false,\n\t\t\"debug\": false,\n\t\t\"dir\": false,\n\t\t\"dirxml\": false,\n\t\t\"getEventListeners\": false,\n\t\t\"inspect\": false,\n\t\t\"keys\": false,\n\t\t\"monitor\": false,\n\t\t\"monitorEvents\": false,\n\t\t\"profile\": false,\n\t\t\"profileEnd\": false,\n\t\t\"queryObjects\": false,\n\t\t\"table\": false,\n\t\t\"undebug\": false,\n\t\t\"unmonitor\": false,\n\t\t\"unmonitorEvents\": false,\n\t\t\"values\": false\n\t}\n}\n", "'use strict';\nmodule.exports = require('./globals.json');\n", "import Renamer from \"./lib/renamer\";\nimport type NodePath from \"../path\";\nimport traverse from \"../index\";\nimport type { TraverseOptions } from \"../index\";\nimport Binding from \"./binding\";\nimport type { BindingKind } from \"./binding\";\nimport globals from \"globals\";\nimport {\n  NOT_LOCAL_BINDING,\n  callExpression,\n  cloneNode,\n  getBindingIdentifiers,\n  identifier,\n  isArrayExpression,\n  isBinary,\n  isClass,\n  isClassBody,\n  isClassDeclaration,\n  isExportAllDeclaration,\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n  isFunctionDeclaration,\n  isIdentifier,\n  isImportDeclaration,\n  isLiteral,\n  isMethod,\n  isModuleSpecifier,\n  isNullLiteral,\n  isObjectExpression,\n  isProperty,\n  isPureish,\n  isRegExpLiteral,\n  isSuper,\n  isTaggedTemplateExpression,\n  isTemplateLiteral,\n  isThisExpression,\n  isUnaryExpression,\n  isVariableDeclaration,\n  matchesPattern,\n  memberExpression,\n  numericLiteral,\n  toIdentifier,\n  unaryExpression,\n  variableDeclaration,\n  variableDeclarator,\n  isRecordExpression,\n  isTupleExpression,\n  isObjectProperty,\n  isTopicReference,\n  isMetaProperty,\n  isPrivateName,\n  isExportDeclaration,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { scope as scopeCache } from \"../cache\";\nimport type { Visitor } from \"../types\";\n\ntype NodePart = string | number | boolean;\n// Recursively gathers the identifying names of a node.\nfunction gatherNodeParts(node: t.Node, parts: NodePart[]) {\n  switch (node?.type) {\n    default:\n      if (isImportDeclaration(node) || isExportDeclaration(node)) {\n        if (\n          (isExportAllDeclaration(node) ||\n            isExportNamedDeclaration(node) ||\n            isImportDeclaration(node)) &&\n          node.source\n        ) {\n          gatherNodeParts(node.source, parts);\n        } else if (\n          (isExportNamedDeclaration(node) || isImportDeclaration(node)) &&\n          node.specifiers &&\n          node.specifiers.length\n        ) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if (\n          (isExportDefaultDeclaration(node) ||\n            isExportNamedDeclaration(node)) &&\n          node.declaration\n        ) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (isModuleSpecifier(node)) {\n        // todo(flow->ts): should condition instead be:\n        //    ```\n        //    t.isExportSpecifier(node) ||\n        //    t.isImportDefaultSpecifier(node) ||\n        //    t.isImportNamespaceSpecifier(node) ||\n        //    t.isImportSpecifier(node)\n        //    ```\n        //    allowing only nodes with `.local`?\n        // @ts-expect-error todo(flow->ts)\n        gatherNodeParts(node.local, parts);\n      } else if (\n        isLiteral(node) &&\n        !isNullLiteral(node) &&\n        !isRegExpLiteral(node) &&\n        !isTemplateLiteral(node)\n      ) {\n        parts.push(node.value);\n      }\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      gatherNodeParts(node.name, parts);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\n//\ninterface CollectVisitorState {\n  assignments: NodePath<t.AssignmentExpression>[];\n  references: NodePath<t.Identifier | t.JSXIdentifier>[];\n  constantViolations: NodePath[];\n}\n\nconst collectorVisitor: Visitor<CollectVisitorState> = {\n  ForStatement(path) {\n    const declar = path.get(\"init\");\n    // delegate block scope handling to the `BlockScoped` method\n    if (declar.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", declar);\n    }\n  },\n\n  Declaration(path) {\n    // delegate block scope handling to the `BlockScoped` method\n    if (path.isBlockScoped()) return;\n\n    // delegate import handing to the `ImportDeclaration` method\n    if (path.isImportDeclaration()) return;\n\n    // this will be hit again once we traverse into it after this iteration\n    if (path.isExportDeclaration()) return;\n\n    // we've ran into a declaration!\n    const parent =\n      path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ImportDeclaration(path) {\n    // import may only appear in the top level or inside a module/namespace (for TS/flow)\n    const parent = path.scope.getBlockParent();\n\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n    // delegate block scope handling to the `BlockScoped` method\n    else if (left.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", left);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const { node, scope } = path;\n      // ExportAllDeclaration does not have `declaration`\n      if (isExportAllDeclaration(node)) return;\n      const declar = node.declaration;\n      if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n\n        const binding = scope.getBinding(id.name);\n        binding?.reference(path);\n      } else if (isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            binding?.reference(path);\n          }\n        }\n      }\n    },\n  },\n\n  LabeledStatement(path) {\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    // Register class identifier in class' scope if this is a class declaration.\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    const params: Array<NodePath> = path.get(\"params\");\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n\n    // Register function expression id after params. When the id\n    // collides with a function param, the id effectively can't be\n    // referenced: here we registered it as a constantViolation\n    if (\n      path.isFunctionExpression() &&\n      path.has(\"id\") &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.get(\"id\").node[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n  },\n\n  ClassExpression(path) {\n    if (\n      path.has(\"id\") &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.get(\"id\").node[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  },\n};\n\nlet uid = 0;\n\nexport type { Binding };\n\nexport default class Scope {\n  uid;\n\n  path: NodePath;\n  block: t.Pattern | t.Scopable;\n\n  labels;\n  inited;\n\n  bindings: { [name: string]: Binding };\n  references: { [name: string]: true };\n  globals: { [name: string]: t.Identifier | t.JSXIdentifier };\n  uids: { [name: string]: boolean };\n  data: { [key: string | symbol]: unknown };\n  crawling: boolean;\n\n  /**\n   * This searches the current \"scope\" and collects all references/bindings\n   * within.\n   */\n  constructor(path: NodePath<t.Pattern | t.Scopable>) {\n    const { node } = path;\n    const cached = scopeCache.get(node);\n    // Sometimes, a scopable path is placed higher in the AST tree.\n    // In these cases, have to create a new Scope.\n    if (cached?.path === path) {\n      return cached;\n    }\n    scopeCache.set(node, this);\n\n    this.uid = uid++;\n\n    this.block = node;\n    this.path = path;\n\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  /**\n   * Globals.\n   */\n\n  static globals = Object.keys(globals.builtin);\n\n  /**\n   * Variables available in current context.\n   */\n\n  static contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];\n\n  get parent() {\n    let parent,\n      path = this.path;\n    do {\n      // Skip method scope if coming from inside computed key or decorator expression\n      const shouldSkip = path.key === \"key\" || path.listKey === \"decorators\";\n      path = path.parentPath;\n      if (shouldSkip && path.isMethod()) path = path.parentPath;\n      if (path && path.isScope()) parent = path;\n    } while (path && !parent);\n\n    return parent?.scope;\n  }\n\n  get parentBlock() {\n    return this.path.parent;\n  }\n\n  get hub() {\n    return this.path.hub;\n  }\n\n  traverse<S>(\n    node: t.Node | t.Node[],\n    opts: TraverseOptions<S>,\n    state: S,\n  ): void;\n  traverse(node: t.Node | t.Node[], opts?: TraverseOptions, state?: any): void;\n  /**\n   * Traverse node with current scope and path.\n   *\n   * !!! WARNING !!!\n   * This method assumes that `this.path` is the NodePath representing `node`.\n   * After running the traversal, the `.parentPath` of the NodePaths\n   * corresponding to `node`'s children will be set to `this.path`.\n   *\n   * There is no good reason to use this method, since the only safe way to use\n   * it is equivalent to `scope.path.traverse(opts, state)`.\n   */\n  traverse<S>(node: any, opts: any, state?: S) {\n    traverse(node, opts, this, state, this.path);\n  }\n\n  /**\n   * Generate a unique identifier and add it to the current scope.\n   */\n\n  generateDeclaredUidIdentifier(name?: string) {\n    const id = this.generateUidIdentifier(name);\n    this.push({ id });\n    return cloneNode(id);\n  }\n\n  /**\n   * Generate a unique identifier.\n   */\n\n  generateUidIdentifier(name?: string) {\n    return identifier(this.generateUid(name));\n  }\n\n  /**\n   * Generate a unique `_id1` binding.\n   */\n\n  generateUid(name: string = \"temp\"): string {\n    name = toIdentifier(name)\n      .replace(/^_+/, \"\")\n      .replace(/[0-9]+$/g, \"\");\n\n    let uid;\n    let i = 1;\n    do {\n      uid = this._generateUid(name, i);\n      i++;\n    } while (\n      this.hasLabel(uid) ||\n      this.hasBinding(uid) ||\n      this.hasGlobal(uid) ||\n      this.hasReference(uid)\n    );\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n\n    return uid;\n  }\n\n  /**\n   * Generate an `_id1`.\n   */\n\n  _generateUid(name: string, i: number) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  }\n\n  generateUidBasedOnNode(node: t.Node, defaultName?: string) {\n    const parts: NodePart[] = [];\n    gatherNodeParts(node, parts);\n\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  /**\n   * Generate a unique identifier based on a node.\n   */\n\n  generateUidIdentifierBasedOnNode(node: t.Node, defaultName?: string) {\n    return identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  /**\n   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.\n   * evaluating it wont result in potentially arbitrary code from being ran. The following are\n   * allowed and determined not to cause side effects:\n   *\n   *  - `this` expressions\n   *  - `super` expressions\n   *  - Bound identifiers\n   */\n\n  isStatic(node: t.Node): boolean {\n    if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) {\n      return true;\n    }\n\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Possibly generate a memoised identifier if it is not static and has consequences.\n   */\n\n  maybeGenerateMemoised(node: t.Node, dontPush?: boolean) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n      if (!dontPush) {\n        this.push({ id });\n        return cloneNode(id);\n      }\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(\n    local: Binding,\n    kind: BindingKind,\n    name: string,\n    id: any,\n  ) {\n    // ignore parameters\n    if (kind === \"param\") return;\n\n    // Ignore existing binding if it's the name of the current function or\n    // class expression\n    if (local.kind === \"local\") return;\n\n    const duplicate =\n      // don't allow duplicate bindings to exist alongside\n      kind === \"let\" ||\n      local.kind === \"let\" ||\n      local.kind === \"const\" ||\n      local.kind === \"module\" ||\n      // don't allow a local of param with a kind of let\n      (local.kind === \"param\" && kind === \"const\");\n\n    if (duplicate) {\n      throw this.hub.buildError(\n        id,\n        `Duplicate declaration \"${name}\"`,\n        TypeError,\n      );\n    }\n  }\n\n  rename(\n    oldName: string,\n    newName?: string,\n    // prettier-ignore\n    /* Babel 7 - block?: t.Pattern | t.Scopable */\n  ) {\n    const binding = this.getBinding(oldName);\n    if (binding) {\n      newName ||= this.generateUidIdentifier(oldName).name;\n      const renamer = new Renamer(binding, oldName, newName);\n      return process.env.BABEL_8_BREAKING\n        ? renamer.rename()\n        : // @ts-expect-error: babel 7->8\n          renamer.rename(arguments[2]);\n    }\n  }\n\n  /** @deprecated Not used in our codebase */\n  _renameFromMap(\n    map: Record<string | symbol, unknown>,\n    oldName: string | symbol,\n    newName: string | symbol,\n    value: unknown,\n  ) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  }\n\n  dump() {\n    const sep = \"-\".repeat(60);\n    console.log(sep);\n    let scope: Scope = this;\n    do {\n      console.log(\"#\", scope.block.type);\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind,\n        });\n      }\n    } while ((scope = scope.parent));\n    console.log(sep);\n  }\n\n  // TODO: (Babel 8) Split i in two parameters, and use an object of flags\n  toArray(\n    node: t.Node,\n    i?: number | boolean,\n    arrayLikeIsIterable?: boolean | void,\n  ) {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding?.constant && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (isArrayExpression(node)) {\n      return node;\n    }\n\n    if (isIdentifier(node, { name: \"arguments\" })) {\n      return callExpression(\n        memberExpression(\n          memberExpression(\n            memberExpression(identifier(\"Array\"), identifier(\"prototype\")),\n            identifier(\"slice\"),\n          ),\n          identifier(\"call\"),\n        ),\n        [node],\n      );\n    }\n\n    let helperName;\n    const args = [node];\n    if (i === true) {\n      // Used in array-spread to create an array.\n      helperName = \"toConsumableArray\";\n    } else if (typeof i === \"number\") {\n      args.push(numericLiteral(i));\n\n      // Used in array-rest to create an array from a subset of an iterable.\n      helperName = \"slicedToArray\";\n      // TODO if (this.hub.isLoose(\"es6.forOf\")) helperName += \"-loose\";\n    } else {\n      // Used in array-rest to create an array\n      helperName = \"toArray\";\n    }\n\n    if (arrayLikeIsIterable) {\n      args.unshift(this.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    // @ts-expect-error todo(flow->ts): t.Node is not valid to use in args, function argument typeneeds to be clarified\n    return callExpression(this.hub.addHelper(helperName), args);\n  }\n\n  hasLabel(name: string) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name: string) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path: NodePath<t.LabeledStatement>) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path: NodePath) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n      const { kind } = path.node;\n      for (const declar of declarations) {\n        this.registerBinding(kind === \"using\" ? \"const\" : kind, declar);\n      }\n    } else if (path.isClassDeclaration()) {\n      if (path.node.declare) return;\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const isTypeDeclaration =\n        path.node.importKind === \"type\" || path.node.importKind === \"typeof\";\n      const specifiers = path.get(\"specifiers\");\n      for (const specifier of specifiers) {\n        const isTypeSpecifier =\n          isTypeDeclaration ||\n          (specifier.isImportSpecifier() &&\n            (specifier.node.importKind === \"type\" ||\n              specifier.node.importKind === \"typeof\"));\n\n        this.registerBinding(isTypeSpecifier ? \"unknown\" : \"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      // todo: improve babel-types\n      const declar = path.get(\"declaration\") as NodePath;\n      if (\n        declar.isClassDeclaration() ||\n        declar.isFunctionDeclaration() ||\n        declar.isVariableDeclaration()\n      ) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return unaryExpression(\"void\", numericLiteral(0), true);\n  }\n\n  registerConstantViolation(path: NodePath) {\n    const ids = path.getBindingIdentifiers();\n    for (const name of Object.keys(ids)) {\n      const binding = this.getBinding(name);\n      if (binding) binding.reassign(path);\n    }\n  }\n\n  registerBinding(\n    kind: Binding[\"kind\"],\n    path: NodePath,\n    bindingPath: NodePath = path,\n  ) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators: Array<NodePath> = path.get(\"declarations\");\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          // same identifier so continue safely as we're likely trying to register it\n          // multiple times\n          if (local.identifier === id) continue;\n\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        // A redeclaration of an existing variable is a modification\n        if (local) {\n          this.registerConstantViolation(bindingPath);\n        } else {\n          this.bindings[name] = new Binding({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind,\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node: t.Identifier | t.JSXIdentifier) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasGlobal(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasReference(name: string): boolean {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node: t.Node, constantsOnly?: boolean): boolean {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (\n      isThisExpression(node) ||\n      isMetaProperty(node) ||\n      isTopicReference(node) ||\n      isPrivateName(node)\n    ) {\n      return true;\n    } else if (isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return this.isPure(node.body, constantsOnly);\n    } else if (isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isBinary(node)) {\n      return (\n        this.isPure(node.left, constantsOnly) &&\n        this.isPure(node.right, constantsOnly)\n      );\n    } else if (isArrayExpression(node) || isTupleExpression(node)) {\n      for (const elem of node.elements) {\n        if (elem !== null && !this.isPure(elem, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isObjectExpression(node) || isRecordExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return true;\n    } else if (isProperty(node)) {\n      // @ts-expect-error todo(flow->ts): computed in not present on private properties\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      if (isObjectProperty(node) || node.static) {\n        if (node.value !== null && !this.isPure(node.value, constantsOnly)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (isTaggedTemplateExpression(node)) {\n      return (\n        matchesPattern(node.tag, \"String.raw\") &&\n        !this.hasBinding(\"String\", true) &&\n        this.isPure(node.quasi, constantsOnly)\n      );\n    } else if (isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n      return true;\n    } else {\n      return isPureish(node);\n    }\n  }\n\n  /**\n   * Set some arbitrary data on the current scope.\n   */\n\n  setData(key: string | symbol, val: any) {\n    return (this.data[key] = val);\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key`.\n   */\n\n  getData(key: string | symbol): any {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while ((scope = scope.parent));\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key` and if it exists,\n   * remove it.\n   */\n\n  removeData(key: string) {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while ((scope = scope.parent));\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n\n    const state: CollectVisitorState = {\n      references: [],\n      constantViolations: [],\n      assignments: [],\n    };\n\n    this.crawling = true;\n    // traverse does not visit the root node, here we explicitly collect\n    // root node binding info when the root is not a Program.\n    if (path.type !== \"Program\" && collectorVisitor._exploded) {\n      // @ts-expect-error when collectorVisitor is exploded, `enter` always exists\n      for (const visit of collectorVisitor.enter) {\n        visit(path, state);\n      }\n      const typeVisitors = collectorVisitor[path.type];\n      if (typeVisitors) {\n        // @ts-expect-error when collectorVisitor is exploded, `enter` always exists\n        for (const visit of typeVisitors.enter) {\n          visit(path, state);\n        }\n      }\n    }\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    // register assignments\n    for (const path of state.assignments) {\n      // register undeclared bindings as globals\n      const ids = path.getBindingIdentifiers();\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      // register as constant violation\n      path.scope.registerConstantViolation(path);\n    }\n\n    // register references\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    // register constant violations\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts: {\n    id: t.LVal;\n    init?: t.Expression;\n    unique?: boolean;\n    _blockHoist?: number | undefined;\n    kind?: \"var\" | \"let\" | \"const\";\n  }) {\n    let path = this.path;\n\n    if (path.isPattern()) {\n      path = this.getPatternParent().path;\n    } else if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      // @ts-expect-error TS can not infer NodePath<Loop> | NodePath<CatchClause> as NodePath<Loop | CatchClause>\n      path.ensureBlock();\n      // @ts-expect-error todo(flow->ts): improve types\n      path = path.get(\"body\");\n    }\n\n    const unique = opts.unique;\n    const kind = opts.kind || \"var\";\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = variableDeclaration(kind, []);\n      // @ts-expect-error todo(flow->ts): avoid modifying nodes\n      declar._blockHoist = blockHoist;\n\n      [declarPath] = (path as NodePath<t.BlockStatement>).unshiftContainer(\n        \"body\",\n        [declar],\n      );\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = variableDeclarator(opts.id, opts.init);\n    const len = declarPath.node.declarations.push(declarator);\n    path.scope.registerBinding(kind, declarPath.get(\"declarations\")[len - 1]);\n  }\n\n  /**\n   * Walk up to the top of the scope tree and get the `Program`.\n   */\n\n  getProgramParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a Function or return null.\n   */\n\n  getFunctionParent(): Scope | null {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    return null;\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the\n   * very top and hit Program.\n   */\n\n  getBlockParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walk up from a pattern scope (function param initializer) until we hit a non-pattern scope,\n   * then returns its block parent\n   * @returns An ancestry scope whose path is a block parent\n   */\n  getPatternParent() {\n    let scope: Scope = this;\n    do {\n      if (!scope.path.isPattern()) {\n        return scope.getBlockParent();\n      }\n    } while ((scope = scope.parent.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walks the scope tree and gathers **all** bindings.\n   */\n\n  getAllBindings(): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    let scope: Scope = this;\n    do {\n      for (const key of Object.keys(scope.bindings)) {\n        if (key in ids === false) {\n          ids[key] = scope.bindings[key];\n        }\n      }\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  /**\n   * Walks the scope tree and gathers all declarations of `kind`.\n   */\n\n  getAllBindingsOfKind(...kinds: string[]): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    for (const kind of kinds) {\n      let scope: Scope = this;\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name: string, node: t.Node): boolean {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name: string): Binding | undefined {\n    let scope: Scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n      if (binding) {\n        // Check if a pattern is a part of parameter expressions.\n        // Note: for performance reason we skip checking previousPath.parentPath.isFunction()\n        // because `scope.path` is validated as scope in packages/babel-types/src/validators/isScope.js\n        // That is, if a scope path is pattern, its parent must be Function/CatchClause\n\n        // Spec 9.2.10.28: The closure created by this expression should not have visibility of\n        // declarations in the function body. If the binding is not a `param`-kind (as function parameters)\n        // or `local`-kind (as id in function expression),\n        // then it must be defined inside the function body, thus it should be skipped\n        if (\n          previousPath?.isPattern() &&\n          binding.kind !== \"param\" &&\n          binding.kind !== \"local\"\n        ) {\n          // do nothing\n        } else {\n          return binding;\n        }\n      } else if (\n        !binding &&\n        name === \"arguments\" &&\n        scope.path.isFunction() &&\n        !scope.path.isArrowFunctionExpression()\n      ) {\n        break;\n      }\n      previousPath = scope.path;\n    } while ((scope = scope.parent));\n  }\n\n  getOwnBinding(name: string): Binding | undefined {\n    return this.bindings[name];\n  }\n\n  // todo: return probably can be undefined…\n  getBindingIdentifier(name: string): t.Identifier {\n    return this.getBinding(name)?.identifier;\n  }\n\n  // todo: flow->ts return probably can be undefined\n  getOwnBindingIdentifier(name: string): t.Identifier {\n    const binding = this.bindings[name];\n    return binding?.identifier;\n  }\n\n  hasOwnBinding(name: string) {\n    return !!this.getOwnBinding(name);\n  }\n\n  // By default, we consider generated UIDs as bindings.\n  // This is because they are almost always used to declare variables,\n  // and since the scope isn't always up-to-date it's better to assume that\n  // there is a variable with that name. The `noUids` option can be used to\n  // turn off this behavior, for example if you know that the generate UID\n  // was used to declare a variable in a different scope.\n  hasBinding(\n    name: string,\n    opts?: boolean | { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    if (!name) return false;\n    if (this.hasOwnBinding(name)) return true;\n    {\n      // TODO: Only accept the object form.\n      if (typeof opts === \"boolean\") opts = { noGlobals: opts };\n    }\n    if (this.parentHasBinding(name, opts)) return true;\n    if (!opts?.noUids && this.hasUid(name)) return true;\n    if (!opts?.noGlobals && Scope.globals.includes(name)) return true;\n    if (!opts?.noGlobals && Scope.contextVariables.includes(name)) return true;\n    return false;\n  }\n\n  parentHasBinding(\n    name: string,\n    opts?: { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    return this.parent?.hasBinding(name, opts);\n  }\n\n  /**\n   * Move a binding of `name` to another `scope`.\n   */\n\n  moveBindingTo(name: string, scope: Scope) {\n    const info = this.getBinding(name);\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name: string) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name: string) {\n    // clear literal binding\n    this.getBinding(name)?.scope.removeOwnBinding(name);\n\n    // clear uids with this name - https://github.com/babel/babel/issues/2101\n    let scope: Scope = this;\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while ((scope = scope.parent));\n  }\n}\n", "/**\n * Gets the index associated with `key` in the backing array, if it is already present.\n */\nexport let get: (strarr: SetArray, key: string) => number | undefined;\n\n/**\n * Puts `key` into the backing array, if it is not already present. Returns\n * the index of the `key` in the backing array.\n */\nexport let put: (strarr: SetArray, key: string) => number;\n\n/**\n * Pops the last added item out of the SetArray.\n */\nexport let pop: (strarr: SetArray) => void;\n\n/**\n * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the\n * index of the `key` in the backing array.\n *\n * This is designed to allow synchronizing a second array with the contents of the backing array,\n * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,\n * and there are never duplicates.\n */\nexport class SetArray {\n  private declare _indexes: { [key: string]: number | undefined };\n  declare array: readonly string[];\n\n  constructor() {\n    this._indexes = { __proto__: null } as any;\n    this.array = [];\n  }\n\n  static {\n    get = (strarr, key) => strarr._indexes[key];\n\n    put = (strarr, key) => {\n      // The key may or may not be present. If it is present, it's a number.\n      const index = get(strarr, key);\n      if (index !== undefined) return index;\n\n      const { array, _indexes: indexes } = strarr;\n\n      return (indexes[key] = (array as string[]).push(key) - 1);\n    };\n\n    pop = (strarr) => {\n      const { array, _indexes: indexes } = strarr;\n      if (array.length === 0) return;\n\n      const last = (array as string[]).pop()!;\n      indexes[last] = undefined;\n    };\n  }\n}\n", null, "// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n * 6. Query, including \"?\", optional.\n * 7. Hash, including \"#\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?(\\?[^#]*)?(#.*)?/;\n\n/**\n * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start\n * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).\n *\n * 1. Host, optional.\n * 2. Path, which may include \"/\", guaranteed.\n * 3. Query, including \"?\", optional.\n * 4. Hash, including \"#\", optional.\n */\nconst fileRegex = /^file:(?:\\/\\/((?![a-z]:)[^/#?]*)?)?(\\/?[^#?]*)(\\?[^#]*)?(#.*)?/i;\n\ntype Url = {\n  scheme: string;\n  user: string;\n  host: string;\n  port: string;\n  path: string;\n  query: string;\n  hash: string;\n  type: UrlType;\n};\n\nenum UrlType {\n  Empty = 1,\n  Hash = 2,\n  Query = 3,\n  RelativePath = 4,\n  AbsolutePath = 5,\n  SchemeRelative = 6,\n  Absolute = 7,\n}\n\nfunction isAbsoluteUrl(input: string): boolean {\n  return schemeRegex.test(input);\n}\n\nfunction isSchemeRelativeUrl(input: string): boolean {\n  return input.startsWith('//');\n}\n\nfunction isAbsolutePath(input: string): boolean {\n  return input.startsWith('/');\n}\n\nfunction isFileUrl(input: string): boolean {\n  return input.startsWith('file:');\n}\n\nfunction isRelative(input: string): boolean {\n  return /^[.?#]/.test(input);\n}\n\nfunction parseAbsoluteUrl(input: string): Url {\n  const match = urlRegex.exec(input)!;\n  return makeUrl(\n    match[1],\n    match[2] || '',\n    match[3],\n    match[4] || '',\n    match[5] || '/',\n    match[6] || '',\n    match[7] || '',\n  );\n}\n\nfunction parseFileUrl(input: string): Url {\n  const match = fileRegex.exec(input)!;\n  const path = match[2];\n  return makeUrl(\n    'file:',\n    '',\n    match[1] || '',\n    '',\n    isAbsolutePath(path) ? path : '/' + path,\n    match[3] || '',\n    match[4] || '',\n  );\n}\n\nfunction makeUrl(\n  scheme: string,\n  user: string,\n  host: string,\n  port: string,\n  path: string,\n  query: string,\n  hash: string,\n): Url {\n  return {\n    scheme,\n    user,\n    host,\n    port,\n    path,\n    query,\n    hash,\n    type: UrlType.Absolute,\n  };\n}\n\nfunction parseUrl(input: string): Url {\n  if (isSchemeRelativeUrl(input)) {\n    const url = parseAbsoluteUrl('http:' + input);\n    url.scheme = '';\n    url.type = UrlType.SchemeRelative;\n    return url;\n  }\n\n  if (isAbsolutePath(input)) {\n    const url = parseAbsoluteUrl('http://foo.com' + input);\n    url.scheme = '';\n    url.host = '';\n    url.type = UrlType.AbsolutePath;\n    return url;\n  }\n\n  if (isFileUrl(input)) return parseFileUrl(input);\n\n  if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);\n\n  const url = parseAbsoluteUrl('http://foo.com/' + input);\n  url.scheme = '';\n  url.host = '';\n  url.type = input\n    ? input.startsWith('?')\n      ? UrlType.Query\n      : input.startsWith('#')\n      ? UrlType.Hash\n      : UrlType.RelativePath\n    : UrlType.Empty;\n  return url;\n}\n\nfunction stripPathFilename(path: string): string {\n  // If a path ends with a parent directory \"..\", then it's a relative path with excess parent\n  // paths. It's not a file, so we can't strip it.\n  if (path.endsWith('/..')) return path;\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n\nfunction mergePaths(url: Url, base: Url) {\n  normalizePath(base, base.type);\n\n  // If the path is just a \"/\", then it was an empty path to begin with (remember, we're a relative\n  // path).\n  if (url.path === '/') {\n    url.path = base.path;\n  } else {\n    // Resolution happens relative to the base path's directory, not the file.\n    url.path = stripPathFilename(base.path) + url.path;\n  }\n}\n\n/**\n * The path can have empty directories \"//\", unneeded parents \"foo/..\", or current directory\n * \"foo/.\". We need to normalize to a standard representation.\n */\nfunction normalizePath(url: Url, type: UrlType) {\n  const rel = type <= UrlType.RelativePath;\n  const pieces = url.path.split('/');\n\n  // We need to preserve the first piece always, so that we output a leading slash. The item at\n  // pieces[0] is an empty string.\n  let pointer = 1;\n\n  // Positive is the number of real directories we've output, used for popping a parent directory.\n  // Eg, \"foo/bar/..\" will have a positive 2, and we can decrement to be left with just \"foo\".\n  let positive = 0;\n\n  // We need to keep a trailing slash if we encounter an empty directory (eg, splitting \"foo/\" will\n  // generate `[\"foo\", \"\"]` pieces). And, if we pop a parent directory. But once we encounter a\n  // real directory, we won't need to append, unless the other conditions happen again.\n  let addTrailingSlash = false;\n\n  for (let i = 1; i < pieces.length; i++) {\n    const piece = pieces[i];\n\n    // An empty directory, could be a trailing slash, or just a double \"//\" in the path.\n    if (!piece) {\n      addTrailingSlash = true;\n      continue;\n    }\n\n    // If we encounter a real directory, then we don't need to append anymore.\n    addTrailingSlash = false;\n\n    // A current directory, which we can always drop.\n    if (piece === '.') continue;\n\n    // A parent directory, we need to see if there are any real directories we can pop. Else, we\n    // have an excess of parents, and we'll need to keep the \"..\".\n    if (piece === '..') {\n      if (positive) {\n        addTrailingSlash = true;\n        positive--;\n        pointer--;\n      } else if (rel) {\n        // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute\n        // URL, protocol relative URL, or an absolute path, we don't need to keep excess.\n        pieces[pointer++] = piece;\n      }\n      continue;\n    }\n\n    // We've encountered a real directory. Move it to the next insertion pointer, which accounts for\n    // any popped or dropped directories.\n    pieces[pointer++] = piece;\n    positive++;\n  }\n\n  let path = '';\n  for (let i = 1; i < pointer; i++) {\n    path += '/' + pieces[i];\n  }\n  if (!path || (addTrailingSlash && !path.endsWith('/..'))) {\n    path += '/';\n  }\n  url.path = path;\n}\n\n/**\n * Attempts to resolve `input` URL/path relative to `base`.\n */\nexport default function resolve(input: string, base: string | undefined): string {\n  if (!input && !base) return '';\n\n  const url = parseUrl(input);\n  let inputType = url.type;\n\n  if (base && inputType !== UrlType.Absolute) {\n    const baseUrl = parseUrl(base);\n    const baseType = baseUrl.type;\n\n    switch (inputType) {\n      case UrlType.Empty:\n        url.hash = baseUrl.hash;\n      // fall through\n\n      case UrlType.Hash:\n        url.query = baseUrl.query;\n      // fall through\n\n      case UrlType.Query:\n      case UrlType.RelativePath:\n        mergePaths(url, baseUrl);\n      // fall through\n\n      case UrlType.AbsolutePath:\n        // The host, user, and port are joined, you can't copy one without the others.\n        url.user = baseUrl.user;\n        url.host = baseUrl.host;\n        url.port = baseUrl.port;\n      // fall through\n\n      case UrlType.SchemeRelative:\n        // The input doesn't have a schema at least, so we need to copy at least that over.\n        url.scheme = baseUrl.scheme;\n    }\n    if (baseType > inputType) inputType = baseType;\n  }\n\n  normalizePath(url, inputType);\n\n  const queryHash = url.query + url.hash;\n  switch (inputType) {\n    // This is impossible, because of the empty checks at the start of the function.\n    // case UrlType.Empty:\n\n    case UrlType.Hash:\n    case UrlType.Query:\n      return queryHash;\n\n    case UrlType.RelativePath: {\n      // The first char is always a \"/\", and we need it to be relative.\n      const path = url.path.slice(1);\n\n      if (!path) return queryHash || '.';\n\n      if (isRelative(base || input) && !isRelative(path)) {\n        // If base started with a leading \".\", or there is no base and input started with a \".\",\n        // then we need to ensure that the relative path starts with a \".\". We don't know if\n        // relative starts with a \"..\", though, so check before prepending.\n        return './' + path + queryHash;\n      }\n\n      return path + queryHash;\n    }\n\n    case UrlType.AbsolutePath:\n      return url.path + queryHash;\n\n    default:\n      return url.scheme + '//' + url.user + url.host + url.port + url.path + queryHash;\n  }\n}\n", "import resolveUri from '@jridgewell/resolve-uri';\n\nexport default function resolve(input: string, base: string | undefined): string {\n  // The base is always treated as a directory, if it's not empty.\n  // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n  // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n  if (base && !base.endsWith('/')) base += '/';\n\n  return resolveUri(input, base);\n}\n", "/**\n * Removes everything after the last \"/\", but leaves the slash.\n */\nexport default function stripFilename(path: string | undefined | null): string {\n  if (!path) return '';\n  const index = path.lastIndexOf('/');\n  return path.slice(0, index + 1);\n}\n", "type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\ntype GeneratedLine = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport type ReverseSegment = [SourceColumn, GeneratedLine, GeneratedColumn];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n\nexport const REV_GENERATED_LINE = 1;\nexport const REV_GENERATED_COLUMN = 2;\n", "import { COLUMN } from './sourcemap-segment';\n\nimport type { SourceMapSegment } from './sourcemap-segment';\n\nexport default function maybeSort(\n  mappings: SourceMapSegment[][],\n  owned: boolean,\n): SourceMapSegment[][] {\n  const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n  if (unsortedIndex === mappings.length) return mappings;\n\n  // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n  // not, we do not want to modify the consumer's input array.\n  if (!owned) mappings = mappings.slice();\n\n  for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n    mappings[i] = sortSegments(mappings[i], owned);\n  }\n  return mappings;\n}\n\nfunction nextUnsortedSegmentLine(mappings: SourceMapSegment[][], start: number): number {\n  for (let i = start; i < mappings.length; i++) {\n    if (!isSorted(mappings[i])) return i;\n  }\n  return mappings.length;\n}\n\nfunction isSorted(line: SourceMapSegment[]): boolean {\n  for (let j = 1; j < line.length; j++) {\n    if (line[j][COLUMN] < line[j - 1][COLUMN]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction sortSegments(line: SourceMapSegment[], owned: boolean): SourceMapSegment[] {\n  if (!owned) line = line.slice();\n  return line.sort(sortComparator);\n}\n\nfunction sortComparator(a: SourceMapSegment, b: SourceMapSegment): number {\n  return a[COLUMN] - b[COLUMN];\n}\n", "import type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';\nimport { COLUMN } from './sourcemap-segment';\n\nexport type MemoState = {\n  lastKey: number;\n  lastNeedle: number;\n  lastIndex: number;\n};\n\nexport let found = false;\n\n/**\n * A binary search implementation that returns the index if a match is found.\n * If no match is found, then the left-index (the index associated with the item that comes just\n * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n * the next index:\n *\n * ```js\n * const array = [1, 3];\n * const needle = 2;\n * const index = binarySearch(array, needle, (item, needle) => item - needle);\n *\n * assert.equal(index, 0);\n * array.splice(index + 1, 0, needle);\n * assert.deepEqual(array, [1, 2, 3]);\n * ```\n */\nexport function binarySearch(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  low: number,\n  high: number,\n): number {\n  while (low <= high) {\n    const mid = low + ((high - low) >> 1);\n    const cmp = haystack[mid][COLUMN] - needle;\n\n    if (cmp === 0) {\n      found = true;\n      return mid;\n    }\n\n    if (cmp < 0) {\n      low = mid + 1;\n    } else {\n      high = mid - 1;\n    }\n  }\n\n  found = false;\n  return low - 1;\n}\n\nexport function upperBound(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  index: number,\n): number {\n  for (let i = index + 1; i < haystack.length; index = i++) {\n    if (haystack[i][COLUMN] !== needle) break;\n  }\n  return index;\n}\n\nexport function lowerBound(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  index: number,\n): number {\n  for (let i = index - 1; i >= 0; index = i--) {\n    if (haystack[i][COLUMN] !== needle) break;\n  }\n  return index;\n}\n\nexport function memoizedState(): MemoState {\n  return {\n    lastKey: -1,\n    lastNeedle: -1,\n    lastIndex: -1,\n  };\n}\n\n/**\n * This overly complicated beast is just to record the last tested line/column and the resulting\n * index, allowing us to skip a few tests if mappings are monotonically increasing.\n */\nexport function memoizedBinarySearch(\n  haystack: SourceMapSegment[] | ReverseSegment[],\n  needle: number,\n  state: MemoState,\n  key: number,\n): number {\n  const { lastKey, lastNeedle, lastIndex } = state;\n\n  let low = 0;\n  let high = haystack.length - 1;\n  if (key === lastKey) {\n    if (needle === lastNeedle) {\n      found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;\n      return lastIndex;\n    }\n\n    if (needle >= lastNeedle) {\n      // lastIndex may be -1 if the previous needle was not found.\n      low = lastIndex === -1 ? 0 : lastIndex;\n    } else {\n      high = lastIndex;\n    }\n  }\n  state.lastKey = key;\n  state.lastNeedle = needle;\n\n  return (state.lastIndex = binarySearch(haystack, needle, low, high));\n}\n", "import { COLUMN, SOURCES_INDEX, SOURCE_LINE, SOURCE_COLUMN } from './sourcemap-segment';\nimport { memoizedBinarySearch, upperBound } from './binary-search';\n\nimport type { ReverseSegment, SourceMapSegment } from './sourcemap-segment';\nimport type { MemoState } from './binary-search';\n\nexport type Source = {\n  __proto__: null;\n  [line: number]: Exclude<ReverseSegment, [number]>[];\n};\n\n// Rebuilds the original source files, with mappings that are ordered by source line/column instead\n// of generated line/column.\nexport default function buildBySources(\n  decoded: readonly SourceMapSegment[][],\n  memos: MemoState[],\n): Source[] {\n  const sources: Source[] = memos.map(buildNullArray);\n\n  for (let i = 0; i < decoded.length; i++) {\n    const line = decoded[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n      if (seg.length === 1) continue;\n\n      const sourceIndex = seg[SOURCES_INDEX];\n      const sourceLine = seg[SOURCE_LINE];\n      const sourceColumn = seg[SOURCE_COLUMN];\n      const originalSource = sources[sourceIndex];\n      const originalLine = (originalSource[sourceLine] ||= []);\n      const memo = memos[sourceIndex];\n\n      // The binary search either found a match, or it found the left-index just before where the\n      // segment should go. Either way, we want to insert after that. And there may be multiple\n      // generated segments associated with an original location, so there may need to move several\n      // indexes before we find where we need to insert.\n      const index = upperBound(\n        originalLine,\n        sourceColumn,\n        memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine),\n      );\n\n      insert(originalLine, (memo.lastIndex = index + 1), [sourceColumn, i, seg[COLUMN]]);\n    }\n  }\n\n  return sources;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\n// Null arrays allow us to use ordered index keys without actually allocating contiguous memory like\n// a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.\n// Numeric properties on objects are magically sorted in ascending order by the engine regardless of\n// the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending\n// order when iterating with for-in.\nfunction buildNullArray<T extends { __proto__: null }>(): T {\n  return { __proto__: null } as T;\n}\n", "import { TraceMap, presortedDecodedMap, decodedMappings } from './trace-mapping';\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type {\n  Section,\n  SectionedSourceMap,\n  DecodedSourceMap,\n  SectionedSourceMapInput,\n  Ro,\n} from './types';\nimport type { SourceMapSegment } from './sourcemap-segment';\n\ntype AnyMap = {\n  new (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;\n  (map: SectionedSourceMapInput, mapUrl?: string | null): TraceMap;\n};\n\nexport const AnyMap: AnyMap = function (map, mapUrl) {\n  const parsed =\n    typeof map === 'string' ? (JSON.parse(map) as Exclude<SectionedSourceMapInput, string>) : map;\n\n  if (!('sections' in parsed)) return new TraceMap(parsed, mapUrl);\n\n  const mappings: SourceMapSegment[][] = [];\n  const sources: string[] = [];\n  const sourcesContent: (string | null)[] = [];\n  const names: string[] = [];\n\n  recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, Infinity, Infinity);\n\n  const joined: DecodedSourceMap = {\n    version: 3,\n    file: parsed.file,\n    names,\n    sources,\n    sourcesContent,\n    mappings,\n  };\n\n  return presortedDecodedMap(joined);\n} as AnyMap;\n\nfunction recurse(\n  input: Ro<SectionedSourceMap>,\n  mapUrl: string | null | undefined,\n  mappings: SourceMapSegment[][],\n  sources: string[],\n  sourcesContent: (string | null)[],\n  names: string[],\n  lineOffset: number,\n  columnOffset: number,\n  stopLine: number,\n  stopColumn: number,\n) {\n  const { sections } = input;\n  for (let i = 0; i < sections.length; i++) {\n    const { map, offset } = sections[i];\n\n    let sl = stopLine;\n    let sc = stopColumn;\n    if (i + 1 < sections.length) {\n      const nextOffset = sections[i + 1].offset;\n      sl = Math.min(stopLine, lineOffset + nextOffset.line);\n\n      if (sl === stopLine) {\n        sc = Math.min(stopColumn, columnOffset + nextOffset.column);\n      } else if (sl < stopLine) {\n        sc = columnOffset + nextOffset.column;\n      }\n    }\n\n    addSection(\n      map,\n      mapUrl,\n      mappings,\n      sources,\n      sourcesContent,\n      names,\n      lineOffset + offset.line,\n      columnOffset + offset.column,\n      sl,\n      sc,\n    );\n  }\n}\n\nfunction addSection(\n  input: Ro<Section['map']>,\n  mapUrl: string | null | undefined,\n  mappings: SourceMapSegment[][],\n  sources: string[],\n  sourcesContent: (string | null)[],\n  names: string[],\n  lineOffset: number,\n  columnOffset: number,\n  stopLine: number,\n  stopColumn: number,\n) {\n  if ('sections' in input) return recurse(...(arguments as unknown as Parameters<typeof recurse>));\n\n  const map = new TraceMap(input, mapUrl);\n  const sourcesOffset = sources.length;\n  const namesOffset = names.length;\n  const decoded = decodedMappings(map);\n  const { resolvedSources, sourcesContent: contents } = map;\n\n  append(sources, resolvedSources);\n  append(names, map.names);\n  if (contents) append(sourcesContent, contents);\n  else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);\n\n  for (let i = 0; i < decoded.length; i++) {\n    const lineI = lineOffset + i;\n\n    // We can only add so many lines before we step into the range that the next section's map\n    // controls. When we get to the last line, then we'll start checking the segments to see if\n    // they've crossed into the column range. But it may not have any columns that overstep, so we\n    // still need to check that we don't overstep lines, too.\n    if (lineI > stopLine) return;\n\n    // The out line may already exist in mappings (if we're continuing the line started by a\n    // previous section). Or, we may have jumped ahead several lines to start this section.\n    const out = getLine(mappings, lineI);\n    // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the\n    // map can be multiple lines), it doesn't.\n    const cOffset = i === 0 ? columnOffset : 0;\n\n    const line = decoded[i];\n    for (let j = 0; j < line.length; j++) {\n      const seg = line[j];\n      const column = cOffset + seg[COLUMN];\n\n      // If this segment steps into the column range that the next section's map controls, we need\n      // to stop early.\n      if (lineI === stopLine && column >= stopColumn) return;\n\n      if (seg.length === 1) {\n        out.push([column]);\n        continue;\n      }\n\n      const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];\n      const sourceLine = seg[SOURCE_LINE];\n      const sourceColumn = seg[SOURCE_COLUMN];\n      out.push(\n        seg.length === 4\n          ? [column, sourcesIndex, sourceLine, sourceColumn]\n          : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]],\n      );\n    }\n  }\n}\n\nfunction append<T>(arr: T[], other: T[]) {\n  for (let i = 0; i < other.length; i++) arr.push(other[i]);\n}\n\nfunction getLine<T>(arr: T[][], index: number): T[] {\n  for (let i = arr.length; i <= index; i++) arr[i] = [];\n  return arr[index];\n}\n", "import { encode, decode } from '@jridgewell/sourcemap-codec';\n\nimport resolve from './resolve';\nimport stripFilename from './strip-filename';\nimport maybeSort from './sort';\nimport buildBySources from './by-source';\nimport {\n  memoizedState,\n  memoizedBinarySearch,\n  upperBound,\n  lowerBound,\n  found as bsFound,\n} from './binary-search';\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n  REV_GENERATED_LINE,\n  REV_GENERATED_COLUMN,\n} from './sourcemap-segment';\n\nimport type { SourceMapSegment, ReverseSegment } from './sourcemap-segment';\nimport type {\n  SourceMapV3,\n  DecodedSourceMap,\n  EncodedSourceMap,\n  InvalidOriginalMapping,\n  OriginalMapping,\n  InvalidGeneratedMapping,\n  GeneratedMapping,\n  SourceMapInput,\n  Needle,\n  SourceNeedle,\n  SourceMap,\n  EachMapping,\n  Bias,\n} from './types';\nimport type { Source } from './by-source';\nimport type { MemoState } from './binary-search';\n\nexport type { SourceMapSegment } from './sourcemap-segment';\nexport type {\n  SourceMapInput,\n  SectionedSourceMapInput,\n  DecodedSourceMap,\n  EncodedSourceMap,\n  SectionedSourceMap,\n  InvalidOriginalMapping,\n  OriginalMapping as Mapping,\n  OriginalMapping,\n  InvalidGeneratedMapping,\n  GeneratedMapping,\n  EachMapping,\n} from './types';\n\nconst LINE_GTR_ZERO = '`line` must be greater than 0 (lines start at line 1)';\nconst COL_GTR_EQ_ZERO = '`column` must be greater than or equal to 0 (columns start at column 0)';\n\nexport const LEAST_UPPER_BOUND = -1;\nexport const GREATEST_LOWER_BOUND = 1;\n\n/**\n * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n */\nexport let encodedMappings: (map: TraceMap) => EncodedSourceMap['mappings'];\n\n/**\n * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n */\nexport let decodedMappings: (map: TraceMap) => Readonly<DecodedSourceMap['mappings']>;\n\n/**\n * A low-level API to find the segment associated with a generated line/column (think, from a\n * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n */\nexport let traceSegment: (\n  map: TraceMap,\n  line: number,\n  column: number,\n) => Readonly<SourceMapSegment> | null;\n\n/**\n * A higher-level API to find the source/line/column associated with a generated line/column\n * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n * `source-map` library.\n */\nexport let originalPositionFor: (\n  map: TraceMap,\n  needle: Needle,\n) => OriginalMapping | InvalidOriginalMapping;\n\n/**\n * Finds the generated line/column position of the provided source/line/column source position.\n */\nexport let generatedPositionFor: (\n  map: TraceMap,\n  needle: SourceNeedle,\n) => GeneratedMapping | InvalidGeneratedMapping;\n\n/**\n * Finds all generated line/column positions of the provided source/line/column source position.\n */\nexport let allGeneratedPositionsFor: (map: TraceMap, needle: SourceNeedle) => GeneratedMapping[];\n\n/**\n * Iterates each mapping in generated position order.\n */\nexport let eachMapping: (map: TraceMap, cb: (mapping: EachMapping) => void) => void;\n\n/**\n * Retrieves the source content for a particular source, if its found. Returns null if not.\n */\nexport let sourceContentFor: (map: TraceMap, source: string) => string | null;\n\n/**\n * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n * maps.\n */\nexport let presortedDecodedMap: (map: DecodedSourceMap, mapUrl?: string) => TraceMap;\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let decodedMap: (\n  map: TraceMap,\n) => Omit<DecodedSourceMap, 'mappings'> & { mappings: readonly SourceMapSegment[][] };\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let encodedMap: (map: TraceMap) => EncodedSourceMap;\n\nexport { AnyMap } from './any-map';\n\nexport class TraceMap implements SourceMap {\n  declare version: SourceMapV3['version'];\n  declare file: SourceMapV3['file'];\n  declare names: SourceMapV3['names'];\n  declare sourceRoot: SourceMapV3['sourceRoot'];\n  declare sources: SourceMapV3['sources'];\n  declare sourcesContent: SourceMapV3['sourcesContent'];\n\n  declare resolvedSources: string[];\n  private declare _encoded: string | undefined;\n\n  private declare _decoded: SourceMapSegment[][] | undefined;\n  private declare _decodedMemo: MemoState;\n\n  private declare _bySources: Source[] | undefined;\n  private declare _bySourceMemos: MemoState[] | undefined;\n\n  constructor(map: SourceMapInput, mapUrl?: string | null) {\n    const isString = typeof map === 'string';\n\n    if (!isString && (map as unknown as { _decodedMemo: any })._decodedMemo) return map as TraceMap;\n\n    const parsed = (isString ? JSON.parse(map) : map) as DecodedSourceMap | EncodedSourceMap;\n\n    const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;\n    this.version = version;\n    this.file = file;\n    this.names = names;\n    this.sourceRoot = sourceRoot;\n    this.sources = sources;\n    this.sourcesContent = sourcesContent;\n\n    const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n    this.resolvedSources = sources.map((s) => resolve(s || '', from));\n\n    const { mappings } = parsed;\n    if (typeof mappings === 'string') {\n      this._encoded = mappings;\n      this._decoded = undefined;\n    } else {\n      this._encoded = undefined;\n      this._decoded = maybeSort(mappings, isString);\n    }\n\n    this._decodedMemo = memoizedState();\n    this._bySources = undefined;\n    this._bySourceMemos = undefined;\n  }\n\n  static {\n    encodedMappings = (map) => {\n      return (map._encoded ??= encode(map._decoded!));\n    };\n\n    decodedMappings = (map) => {\n      return (map._decoded ||= decode(map._encoded!));\n    };\n\n    traceSegment = (map, line, column) => {\n      const decoded = decodedMappings(map);\n\n      // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n      if (line >= decoded.length) return null;\n\n      const segments = decoded[line];\n      const index = traceSegmentInternal(\n        segments,\n        map._decodedMemo,\n        line,\n        column,\n        GREATEST_LOWER_BOUND,\n      );\n\n      return index === -1 ? null : segments[index];\n    };\n\n    originalPositionFor = (map, { line, column, bias }) => {\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n\n      const decoded = decodedMappings(map);\n\n      // It's common for parent source maps to have pointers to lines that have no\n      // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n      if (line >= decoded.length) return OMapping(null, null, null, null);\n\n      const segments = decoded[line];\n      const index = traceSegmentInternal(\n        segments,\n        map._decodedMemo,\n        line,\n        column,\n        bias || GREATEST_LOWER_BOUND,\n      );\n\n      if (index === -1) return OMapping(null, null, null, null);\n\n      const segment = segments[index];\n      if (segment.length === 1) return OMapping(null, null, null, null);\n\n      const { names, resolvedSources } = map;\n      return OMapping(\n        resolvedSources[segment[SOURCES_INDEX]],\n        segment[SOURCE_LINE] + 1,\n        segment[SOURCE_COLUMN],\n        segment.length === 5 ? names[segment[NAMES_INDEX]] : null,\n      );\n    };\n\n    allGeneratedPositionsFor = (map, { source, line, column, bias }) => {\n      // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.\n      return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);\n    };\n\n    generatedPositionFor = (map, { source, line, column, bias }) => {\n      return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);\n    };\n\n    eachMapping = (map, cb) => {\n      const decoded = decodedMappings(map);\n      const { names, resolvedSources } = map;\n\n      for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n\n          const generatedLine = i + 1;\n          const generatedColumn = seg[0];\n          let source = null;\n          let originalLine = null;\n          let originalColumn = null;\n          let name = null;\n          if (seg.length !== 1) {\n            source = resolvedSources[seg[1]];\n            originalLine = seg[2] + 1;\n            originalColumn = seg[3];\n          }\n          if (seg.length === 5) name = names[seg[4]];\n\n          cb({\n            generatedLine,\n            generatedColumn,\n            source,\n            originalLine,\n            originalColumn,\n            name,\n          } as EachMapping);\n        }\n      }\n    };\n\n    sourceContentFor = (map, source) => {\n      const { sources, resolvedSources, sourcesContent } = map;\n      if (sourcesContent == null) return null;\n\n      let index = sources.indexOf(source);\n      if (index === -1) index = resolvedSources.indexOf(source);\n\n      return index === -1 ? null : sourcesContent[index];\n    };\n\n    presortedDecodedMap = (map, mapUrl) => {\n      const tracer = new TraceMap(clone(map, []), mapUrl);\n      tracer._decoded = map.mappings;\n      return tracer;\n    };\n\n    decodedMap = (map) => {\n      return clone(map, decodedMappings(map));\n    };\n\n    encodedMap = (map) => {\n      return clone(map, encodedMappings(map));\n    };\n\n    function generatedPosition(\n      map: TraceMap,\n      source: string,\n      line: number,\n      column: number,\n      bias: Bias,\n      all: false,\n    ): GeneratedMapping | InvalidGeneratedMapping;\n    function generatedPosition(\n      map: TraceMap,\n      source: string,\n      line: number,\n      column: number,\n      bias: Bias,\n      all: true,\n    ): GeneratedMapping[];\n    function generatedPosition(\n      map: TraceMap,\n      source: string,\n      line: number,\n      column: number,\n      bias: Bias,\n      all: boolean,\n    ): GeneratedMapping | InvalidGeneratedMapping | GeneratedMapping[] {\n      line--;\n      if (line < 0) throw new Error(LINE_GTR_ZERO);\n      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);\n\n      const { sources, resolvedSources } = map;\n      let sourceIndex = sources.indexOf(source);\n      if (sourceIndex === -1) sourceIndex = resolvedSources.indexOf(source);\n      if (sourceIndex === -1) return all ? [] : GMapping(null, null);\n\n      const generated = (map._bySources ||= buildBySources(\n        decodedMappings(map),\n        (map._bySourceMemos = sources.map(memoizedState)),\n      ));\n\n      const segments = generated[sourceIndex][line];\n      if (segments == null) return all ? [] : GMapping(null, null);\n\n      const memo = map._bySourceMemos![sourceIndex];\n\n      if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);\n\n      const index = traceSegmentInternal(segments, memo, line, column, bias);\n      if (index === -1) return GMapping(null, null);\n\n      const segment = segments[index];\n      return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);\n    }\n  }\n}\n\nfunction clone<T extends string | readonly SourceMapSegment[][]>(\n  map: TraceMap | DecodedSourceMap | EncodedSourceMap,\n  mappings: T,\n): T extends string ? EncodedSourceMap : DecodedSourceMap {\n  return {\n    version: map.version,\n    file: map.file,\n    names: map.names,\n    sourceRoot: map.sourceRoot,\n    sources: map.sources,\n    sourcesContent: map.sourcesContent,\n    mappings,\n  } as any;\n}\n\nfunction OMapping(source: null, line: null, column: null, name: null): InvalidOriginalMapping;\nfunction OMapping(\n  source: string,\n  line: number,\n  column: number,\n  name: string | null,\n): OriginalMapping;\nfunction OMapping(\n  source: string | null,\n  line: number | null,\n  column: number | null,\n  name: string | null,\n): OriginalMapping | InvalidOriginalMapping {\n  return { source, line, column, name } as any;\n}\n\nfunction GMapping(line: null, column: null): InvalidGeneratedMapping;\nfunction GMapping(line: number, column: number): GeneratedMapping;\nfunction GMapping(\n  line: number | null,\n  column: number | null,\n): GeneratedMapping | InvalidGeneratedMapping {\n  return { line, column } as any;\n}\n\nfunction traceSegmentInternal(\n  segments: SourceMapSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number;\nfunction traceSegmentInternal(\n  segments: ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number;\nfunction traceSegmentInternal(\n  segments: SourceMapSegment[] | ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): number {\n  let index = memoizedBinarySearch(segments, column, memo, line);\n  if (bsFound) {\n    index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);\n  } else if (bias === LEAST_UPPER_BOUND) index++;\n\n  if (index === -1 || index === segments.length) return -1;\n  return index;\n}\n\nfunction sliceGeneratedPositions(\n  segments: ReverseSegment[],\n  memo: MemoState,\n  line: number,\n  column: number,\n  bias: Bias,\n): GeneratedMapping[] {\n  let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);\n\n  // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in\n  // insertion order) segment that matched. Even if we did respect the bias when tracing, we would\n  // still need to call `lowerBound()` to find the first segment, which is slower than just looking\n  // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the\n  // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to\n  // match LEAST_UPPER_BOUND.\n  if (!bsFound && bias === LEAST_UPPER_BOUND) min++;\n\n  if (min === -1 || min === segments.length) return [];\n\n  // We may have found the segment that started at an earlier column. If this is the case, then we\n  // need to slice all generated segments that match _that_ column, because all such segments span\n  // to our desired column.\n  const matchedColumn = bsFound ? column : segments[min][COLUMN];\n\n  // The binary search is not guaranteed to find the lower bound when a match wasn't found.\n  if (!bsFound) min = lowerBound(segments, matchedColumn, min);\n  const max = upperBound(segments, matchedColumn, min);\n\n  const result = [];\n  for (; min <= max; min++) {\n    const segment = segments[min];\n    result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));\n  }\n  return result;\n}\n", "type GeneratedColumn = number;\ntype SourcesIndex = number;\ntype SourceLine = number;\ntype SourceColumn = number;\ntype NamesIndex = number;\n\nexport type SourceMapSegment =\n  | [GeneratedColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn]\n  | [GeneratedColumn, SourcesIndex, SourceLine, SourceColumn, NamesIndex];\n\nexport const COLUMN = 0;\nexport const SOURCES_INDEX = 1;\nexport const SOURCE_LINE = 2;\nexport const SOURCE_COLUMN = 3;\nexport const NAMES_INDEX = 4;\n", "import { SetArray, put } from '@jridgewell/set-array';\nimport { encode } from '@jridgewell/sourcemap-codec';\nimport { TraceMap, decodedMappings } from '@jridgewell/trace-mapping';\n\nimport {\n  COLUMN,\n  SOURCES_INDEX,\n  SOURCE_LINE,\n  SOURCE_COLUMN,\n  NAMES_INDEX,\n} from './sourcemap-segment';\n\nimport type { SourceMapInput } from '@jridgewell/trace-mapping';\nimport type { SourceMapSegment } from './sourcemap-segment';\nimport type { DecodedSourceMap, EncodedSourceMap, Pos, Mapping } from './types';\n\nexport type { DecodedSourceMap, EncodedSourceMap, Mapping };\n\nexport type Options = {\n  file?: string | null;\n  sourceRoot?: string | null;\n};\n\nconst NO_NAME = -1;\n\n/**\n * A low-level API to associate a generated position with an original source position. Line and\n * column here are 0-based, unlike `addMapping`.\n */\nexport let addSegment: {\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source?: null,\n    sourceLine?: null,\n    sourceColumn?: null,\n    name?: null,\n    content?: null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name?: null,\n    content?: string | null,\n  ): void;\n  (\n    map: GenMapping,\n    genLine: number,\n    genColumn: number,\n    source: string,\n    sourceLine: number,\n    sourceColumn: number,\n    name: string,\n    content?: string | null,\n  ): void;\n};\n\n/**\n * A high-level API to associate a generated position with an original source position. Line is\n * 1-based, but column is 0-based, due to legacy behavior in `source-map` library.\n */\nexport let addMapping: {\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source?: null;\n      original?: null;\n      name?: null;\n      content?: null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name?: null;\n      content?: string | null;\n    },\n  ): void;\n  (\n    map: GenMapping,\n    mapping: {\n      generated: Pos;\n      source: string;\n      original: Pos;\n      name: string;\n      content?: string | null;\n    },\n  ): void;\n};\n\n/**\n * Same as `addSegment`, but will only add the segment if it generates useful information in the\n * resulting map. This only works correctly if segments are added **in order**, meaning you should\n * not add a segment with a lower generated line/column than one that came before.\n */\nexport let maybeAddSegment: typeof addSegment;\n\n/**\n * Same as `addMapping`, but will only add the mapping if it generates useful information in the\n * resulting map. This only works correctly if mappings are added **in order**, meaning you should\n * not add a mapping with a lower generated line/column than one that came before.\n */\nexport let maybeAddMapping: typeof addMapping;\n\n/**\n * Adds/removes the content of the source file to the source map.\n */\nexport let setSourceContent: (map: GenMapping, source: string, content: string | null) => void;\n\n/**\n * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let toDecodedMap: (map: GenMapping) => DecodedSourceMap;\n\n/**\n * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects\n * a sourcemap, or to JSON.stringify.\n */\nexport let toEncodedMap: (map: GenMapping) => EncodedSourceMap;\n\n/**\n * Constructs a new GenMapping, using the already present mappings of the input.\n */\nexport let fromMap: (input: SourceMapInput) => GenMapping;\n\n/**\n * Returns an array of high-level mapping objects for every recorded segment, which could then be\n * passed to the `source-map` library.\n */\nexport let allMappings: (map: GenMapping) => Mapping[];\n\n// This split declaration is only so that terser can elminiate the static initialization block.\nlet addSegmentInternal: <S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  genLine: number,\n  genColumn: number,\n  source: S,\n  sourceLine: S extends string ? number : null | undefined,\n  sourceColumn: S extends string ? number : null | undefined,\n  name: S extends string ? string | null | undefined : null | undefined,\n  content: S extends string ? string | null | undefined : null | undefined,\n) => void;\n\n/**\n * Provides the state to generate a sourcemap.\n */\nexport class GenMapping {\n  private _names = new SetArray();\n  private _sources = new SetArray();\n  private _sourcesContent: (string | null)[] = [];\n  private _mappings: SourceMapSegment[][] = [];\n  declare file: string | null | undefined;\n  declare sourceRoot: string | null | undefined;\n\n  constructor({ file, sourceRoot }: Options = {}) {\n    this.file = file;\n    this.sourceRoot = sourceRoot;\n  }\n\n  static {\n    addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {\n      return addSegmentInternal(\n        false,\n        map,\n        genLine,\n        genColumn,\n        source,\n        sourceLine,\n        sourceColumn,\n        name,\n        content,\n      );\n    };\n\n    maybeAddSegment = (\n      map,\n      genLine,\n      genColumn,\n      source,\n      sourceLine,\n      sourceColumn,\n      name,\n      content,\n    ) => {\n      return addSegmentInternal(\n        true,\n        map,\n        genLine,\n        genColumn,\n        source,\n        sourceLine,\n        sourceColumn,\n        name,\n        content,\n      );\n    };\n\n    addMapping = (map, mapping) => {\n      return addMappingInternal(false, map, mapping as Parameters<typeof addMappingInternal>[2]);\n    };\n\n    maybeAddMapping = (map, mapping) => {\n      return addMappingInternal(true, map, mapping as Parameters<typeof addMappingInternal>[2]);\n    };\n\n    setSourceContent = (map, source, content) => {\n      const { _sources: sources, _sourcesContent: sourcesContent } = map;\n      sourcesContent[put(sources, source)] = content;\n    };\n\n    toDecodedMap = (map) => {\n      const {\n        file,\n        sourceRoot,\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n      removeEmptyFinalLines(mappings);\n\n      return {\n        version: 3,\n        file: file || undefined,\n        names: names.array,\n        sourceRoot: sourceRoot || undefined,\n        sources: sources.array,\n        sourcesContent,\n        mappings,\n      };\n    };\n\n    toEncodedMap = (map) => {\n      const decoded = toDecodedMap(map);\n      return {\n        ...decoded,\n        mappings: encode(decoded.mappings as SourceMapSegment[][]),\n      };\n    };\n\n    allMappings = (map) => {\n      const out: Mapping[] = [];\n      const { _mappings: mappings, _sources: sources, _names: names } = map;\n\n      for (let i = 0; i < mappings.length; i++) {\n        const line = mappings[i];\n        for (let j = 0; j < line.length; j++) {\n          const seg = line[j];\n\n          const generated = { line: i + 1, column: seg[COLUMN] };\n          let source: string | undefined = undefined;\n          let original: Pos | undefined = undefined;\n          let name: string | undefined = undefined;\n\n          if (seg.length !== 1) {\n            source = sources.array[seg[SOURCES_INDEX]];\n            original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] };\n\n            if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];\n          }\n\n          out.push({ generated, source, original, name } as Mapping);\n        }\n      }\n\n      return out;\n    };\n\n    fromMap = (input) => {\n      const map = new TraceMap(input);\n      const gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });\n\n      putAll(gen._names, map.names);\n      putAll(gen._sources, map.sources as string[]);\n      gen._sourcesContent = map.sourcesContent || map.sources.map(() => null);\n      gen._mappings = decodedMappings(map) as GenMapping['_mappings'];\n\n      return gen;\n    };\n\n    // Internal helpers\n    addSegmentInternal = (\n      skipable,\n      map,\n      genLine,\n      genColumn,\n      source,\n      sourceLine,\n      sourceColumn,\n      name,\n      content,\n    ) => {\n      const {\n        _mappings: mappings,\n        _sources: sources,\n        _sourcesContent: sourcesContent,\n        _names: names,\n      } = map;\n      const line = getLine(mappings, genLine);\n      const index = getColumnIndex(line, genColumn);\n\n      if (!source) {\n        if (skipable && skipSourceless(line, index)) return;\n        return insert(line, index, [genColumn]);\n      }\n\n      // Sigh, TypeScript can't figure out sourceLine and sourceColumn aren't nullish if source\n      // isn't nullish.\n      assert<number>(sourceLine);\n      assert<number>(sourceColumn);\n\n      const sourcesIndex = put(sources, source);\n      const namesIndex = name ? put(names, name) : NO_NAME;\n      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content ?? null;\n\n      if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {\n        return;\n      }\n\n      return insert(\n        line,\n        index,\n        name\n          ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex]\n          : [genColumn, sourcesIndex, sourceLine, sourceColumn],\n      );\n    };\n  }\n}\n\nfunction assert<T>(_val: unknown): asserts _val is T {\n  // noop.\n}\n\nfunction getLine(mappings: SourceMapSegment[][], index: number): SourceMapSegment[] {\n  for (let i = mappings.length; i <= index; i++) {\n    mappings[i] = [];\n  }\n  return mappings[index];\n}\n\nfunction getColumnIndex(line: SourceMapSegment[], genColumn: number): number {\n  let index = line.length;\n  for (let i = index - 1; i >= 0; index = i--) {\n    const current = line[i];\n    if (genColumn >= current[COLUMN]) break;\n  }\n  return index;\n}\n\nfunction insert<T>(array: T[], index: number, value: T) {\n  for (let i = array.length; i > index; i--) {\n    array[i] = array[i - 1];\n  }\n  array[index] = value;\n}\n\nfunction removeEmptyFinalLines(mappings: SourceMapSegment[][]) {\n  const { length } = mappings;\n  let len = length;\n  for (let i = len - 1; i >= 0; len = i, i--) {\n    if (mappings[i].length > 0) break;\n  }\n  if (len < length) mappings.length = len;\n}\n\nfunction putAll(strarr: SetArray, array: string[]) {\n  for (let i = 0; i < array.length; i++) put(strarr, array[i]);\n}\n\nfunction skipSourceless(line: SourceMapSegment[], index: number): boolean {\n  // The start of a line is already sourceless, so adding a sourceless segment to the beginning\n  // doesn't generate any useful information.\n  if (index === 0) return true;\n\n  const prev = line[index - 1];\n  // If the previous segment is also sourceless, then adding another sourceless segment doesn't\n  // genrate any new information. Else, this segment will end the source/named segment and point to\n  // a sourceless position, which is useful.\n  return prev.length === 1;\n}\n\nfunction skipSource(\n  line: SourceMapSegment[],\n  index: number,\n  sourcesIndex: number,\n  sourceLine: number,\n  sourceColumn: number,\n  namesIndex: number,\n): boolean {\n  // A source/named segment at the start of a line gives position at that genColumn\n  if (index === 0) return false;\n\n  const prev = line[index - 1];\n\n  // If the previous segment is sourceless, then we're transitioning to a source.\n  if (prev.length === 1) return false;\n\n  // If the previous segment maps to the exact same source position, then this segment doesn't\n  // provide any new position information.\n  return (\n    sourcesIndex === prev[SOURCES_INDEX] &&\n    sourceLine === prev[SOURCE_LINE] &&\n    sourceColumn === prev[SOURCE_COLUMN] &&\n    namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME)\n  );\n}\n\nfunction addMappingInternal<S extends string | null | undefined>(\n  skipable: boolean,\n  map: GenMapping,\n  mapping: {\n    generated: Pos;\n    source: S;\n    original: S extends string ? Pos : null | undefined;\n    name: S extends string ? string | null | undefined : null | undefined;\n    content: S extends string ? string | null | undefined : null | undefined;\n  },\n) {\n  const { generated, source, original, name, content } = mapping;\n  if (!source) {\n    return addSegmentInternal(\n      skipable,\n      map,\n      generated.line - 1,\n      generated.column,\n      null,\n      null,\n      null,\n      null,\n      null,\n    );\n  }\n  const s: string = source;\n  assert<Pos>(original);\n  return addSegmentInternal(\n    skipable,\n    map,\n    generated.line - 1,\n    generated.column,\n    s,\n    original.line - 1,\n    original.column,\n    name,\n    content,\n  );\n}\n", "import {\n  GenMapping,\n  maybeAddMapping,\n  setSourceContent,\n  allMappings,\n  toEncodedMap,\n  toDecodedMap,\n} from \"@jridgewell/gen-mapping\";\n\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\n/**\n * Build a sourcemap.\n */\n\nexport default class SourceMap {\n  private _map: GenMapping;\n  private _rawMappings: Mapping[] | undefined;\n  private _sourceFileName: string | undefined;\n\n  // Any real line is > 0, so init to 0 is fine.\n  private _lastGenLine = 0;\n  private _lastSourceLine = 0;\n\n  // Source columns can be 0, but we ony check in unison with sourceLine, which\n  // inits to an impossible value. So init to 0 is fine.\n  private _lastSourceColumn = 0;\n\n  constructor(\n    opts: { sourceFileName?: string; sourceRoot?: string },\n    code: string | { [sourceFileName: string]: string },\n  ) {\n    const map = (this._map = new GenMapping({ sourceRoot: opts.sourceRoot }));\n    this._sourceFileName = opts.sourceFileName?.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n\n    if (typeof code === \"string\") {\n      setSourceContent(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      Object.keys(code).forEach(sourceFileName => {\n        setSourceContent(\n          map,\n          sourceFileName.replace(/\\\\/g, \"/\"),\n          code[sourceFileName],\n        );\n      });\n    }\n  }\n\n  /**\n   * Get the sourcemap.\n   */\n  get(): EncodedSourceMap {\n    return toEncodedMap(this._map);\n  }\n\n  getDecoded(): DecodedSourceMap {\n    return toDecodedMap(this._map);\n  }\n\n  getRawMappings(): Mapping[] {\n    return (this._rawMappings ||= allMappings(this._map));\n  }\n\n  /**\n   * Mark the current generated position with a source position. May also be passed null line/column\n   * values to insert a mapping to nothing.\n   */\n\n  mark(\n    generated: { line: number; column: number },\n    line: number,\n    column: number,\n    identifierName?: string | null,\n    filename?: string | null,\n  ) {\n    this._rawMappings = undefined;\n\n    maybeAddMapping(this._map, {\n      name: identifierName,\n      generated,\n      source:\n        line == null\n          ? undefined\n          : filename?.replace(/\\\\/g, \"/\") || this._sourceFileName,\n      original:\n        line == null\n          ? undefined\n          : {\n              line: line,\n              column: column,\n            },\n    });\n  }\n}\n", "import type SourceMap from \"./source-map\";\nimport * as charcodes from \"charcodes\";\n\nexport type Pos = {\n  line: number;\n  column: number;\n};\nexport type Loc = {\n  start?: Pos;\n  end?: Pos;\n  identifierName?: string;\n  filename?: string;\n};\ntype SourcePos = {\n  identifierName: string | undefined;\n  line: number | undefined;\n  column: number | undefined;\n  filename: string | undefined;\n};\n\ntype QueueItem = {\n  char: number;\n  repeat: number;\n  line: number | undefined;\n  column: number | undefined;\n  identifierName: string | undefined;\n  filename: string | undefined;\n};\n\nexport default class Buffer {\n  constructor(map?: SourceMap | null) {\n    this._map = map;\n\n    this._allocQueue();\n  }\n\n  _map: SourceMap = null;\n  _buf = \"\";\n  _str = \"\";\n  _appendCount = 0;\n  _last = 0;\n  _queue: QueueItem[] = [];\n  _queueCursor = 0;\n\n  _position = {\n    line: 1,\n    column: 0,\n  };\n  _sourcePosition: SourcePos = {\n    identifierName: undefined,\n    line: undefined,\n    column: undefined,\n    filename: undefined,\n  };\n\n  _allocQueue() {\n    const queue = this._queue;\n\n    for (let i = 0; i < 16; i++) {\n      queue.push({\n        char: 0,\n        repeat: 1,\n        line: undefined,\n        column: undefined,\n        identifierName: undefined,\n        filename: \"\",\n      });\n    }\n  }\n\n  _pushQueue(\n    char: number,\n    repeat: number,\n    line: number | undefined,\n    column: number | undefined,\n    identifierName: string | undefined,\n    filename: string | undefined,\n  ) {\n    const cursor = this._queueCursor;\n    if (cursor === this._queue.length) {\n      this._allocQueue();\n    }\n    const item = this._queue[cursor];\n    item.char = char;\n    item.repeat = repeat;\n    item.line = line;\n    item.column = column;\n    item.identifierName = identifierName;\n    item.filename = filename;\n\n    this._queueCursor++;\n  }\n\n  _popQueue(): QueueItem {\n    if (this._queueCursor === 0) {\n      throw new Error(\"Cannot pop from empty queue\");\n    }\n    return this._queue[--this._queueCursor];\n  }\n\n  /**\n   * Get the final string output from the buffer, along with the sourcemap if one exists.\n   */\n\n  get() {\n    this._flush();\n\n    const map = this._map;\n    const result = {\n      // Whatever trim is used here should not execute a regex against the\n      // source string since it may be arbitrarily large after all transformations\n      code: (this._buf + this._str).trimRight(),\n      // Decoded sourcemap is free to generate.\n      decodedMap: map?.getDecoded(),\n\n      // Encoding the sourcemap is moderately CPU expensive.\n      get map() {\n        const resultMap = map ? map.get() : null;\n        result.map = resultMap;\n        return resultMap;\n      },\n      set map(value) {\n        Object.defineProperty(result, \"map\", { value, writable: true });\n      },\n      // Retrieving the raw mappings is very memory intensive.\n      get rawMappings() {\n        const mappings = map?.getRawMappings();\n        result.rawMappings = mappings;\n        return mappings;\n      },\n      set rawMappings(value) {\n        Object.defineProperty(result, \"rawMappings\", { value, writable: true });\n      },\n    };\n\n    return result;\n  }\n\n  /**\n   * Add a string to the buffer that cannot be reverted.\n   */\n\n  append(str: string, maybeNewline: boolean): void {\n    this._flush();\n\n    this._append(str, this._sourcePosition, maybeNewline);\n  }\n\n  appendChar(char: number): void {\n    this._flush();\n    this._appendChar(char, 1, this._sourcePosition);\n  }\n\n  /**\n   * Add a string to the buffer than can be reverted.\n   */\n  queue(char: number): void {\n    // Drop trailing spaces when a newline is inserted.\n    if (char === charcodes.lineFeed) {\n      while (this._queueCursor !== 0) {\n        const char = this._queue[this._queueCursor - 1].char;\n        if (char !== charcodes.space && char !== charcodes.tab) {\n          break;\n        }\n\n        this._queueCursor--;\n      }\n    }\n\n    const sourcePosition = this._sourcePosition;\n    this._pushQueue(\n      char,\n      1,\n      sourcePosition.line,\n      sourcePosition.column,\n      sourcePosition.identifierName,\n      sourcePosition.filename,\n    );\n  }\n\n  /**\n   * Same as queue, but this indentation will never have a sourcmap marker.\n   */\n  queueIndentation(char: number, repeat: number): void {\n    this._pushQueue(char, repeat, undefined, undefined, undefined, undefined);\n  }\n\n  _flush(): void {\n    const queueCursor = this._queueCursor;\n    const queue = this._queue;\n    for (let i = 0; i < queueCursor; i++) {\n      const item: QueueItem = queue[i];\n      this._appendChar(item.char, item.repeat, item);\n    }\n    this._queueCursor = 0;\n  }\n\n  _appendChar(char: number, repeat: number, sourcePos: SourcePos): void {\n    this._last = char;\n\n    this._str +=\n      repeat > 1\n        ? String.fromCharCode(char).repeat(repeat)\n        : String.fromCharCode(char);\n\n    if (char !== charcodes.lineFeed) {\n      this._mark(\n        sourcePos.line,\n        sourcePos.column,\n        sourcePos.identifierName,\n        sourcePos.filename,\n      );\n      this._position.column += repeat;\n    } else {\n      this._position.line++;\n      this._position.column = 0;\n    }\n  }\n\n  _append(str: string, sourcePos: SourcePos, maybeNewline: boolean): void {\n    const len = str.length;\n    const position = this._position;\n\n    this._last = str.charCodeAt(len - 1);\n\n    if (++this._appendCount > 4096) {\n      +this._str; // Unexplainable huge performance boost. Ref: https://github.com/davidmarkclements/flatstr License: MIT\n      this._buf += this._str;\n      this._str = str;\n      this._appendCount = 0;\n    } else {\n      this._str += str;\n    }\n\n    if (!maybeNewline && !this._map) {\n      position.column += len;\n      return;\n    }\n\n    const { column, identifierName, filename } = sourcePos;\n    let line = sourcePos.line;\n\n    // Search for newline chars. We search only for `\\n`, since both `\\r` and\n    // `\\r\\n` are normalized to `\\n` during parse. We exclude `\\u2028` and\n    // `\\u2029` for performance reasons, they're so uncommon that it's probably\n    // ok. It's also unclear how other sourcemap utilities handle them...\n    let i = str.indexOf(\"\\n\");\n    let last = 0;\n\n    // If the string starts with a newline char, then adding a mark is redundant.\n    // This catches both \"no newlines\" and \"newline after several chars\".\n    if (i !== 0) {\n      this._mark(line, column, identifierName, filename);\n    }\n\n    // Now, find each reamining newline char in the string.\n    while (i !== -1) {\n      position.line++;\n      position.column = 0;\n      last = i + 1;\n\n      // We mark the start of each line, which happens directly after this newline char\n      // unless this is the last char.\n      // When manually adding multi-line content (such as a comment), `line` will be `undefined`.\n      if (last < len && line !== undefined) {\n        this._mark(++line, 0, identifierName, filename);\n      }\n      i = str.indexOf(\"\\n\", last);\n    }\n    position.column += len - last;\n  }\n\n  _mark(\n    line: number | undefined,\n    column: number | undefined,\n    identifierName: string | undefined,\n    filename: string | undefined,\n  ): void {\n    this._map?.mark(this._position, line, column, identifierName, filename);\n  }\n\n  removeTrailingNewline(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.lineFeed\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  removeLastSemicolon(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.semicolon\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  getLastChar(): number {\n    const queueCursor = this._queueCursor;\n    return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;\n  }\n\n  /**\n   * This will only detect at most 1 newline after a call to `flush()`,\n   * but this has not been found so far, and an accurate count can be achieved if needed later.\n   */\n  getNewlineCount(): number {\n    const queueCursor = this._queueCursor;\n    let count = 0;\n    if (queueCursor === 0) return this._last === charcodes.lineFeed ? 1 : 0;\n    for (let i = queueCursor - 1; i >= 0; i--) {\n      if (this._queue[i].char !== charcodes.lineFeed) {\n        break;\n      }\n      count++;\n    }\n    return count === queueCursor && this._last === charcodes.lineFeed\n      ? count + 1\n      : count;\n  }\n\n  /**\n   * check if current _last + queue ends with newline, return the character before newline\n   *\n   * @param {*} ch\n   * @memberof Buffer\n   */\n  endsWithCharAndNewline(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0) {\n      // every element in queue is one-length whitespace string\n      const lastCp = queue[queueCursor - 1].char;\n      if (lastCp !== charcodes.lineFeed) return;\n      if (queueCursor > 1) {\n        return queue[queueCursor - 2].char;\n      } else {\n        return this._last;\n      }\n    }\n    // We assume that everything being matched is at most a single token plus some whitespace,\n    // which everything currently is, but otherwise we'd have to expand _last or check _buf.\n  }\n\n  hasContent(): boolean {\n    return this._queueCursor !== 0 || !!this._last;\n  }\n\n  /**\n   * Certain sourcemap usecases expect mappings to be more accurate than\n   * Babel's generic sourcemap handling allows. For now, we special-case\n   * identifiers to allow for the primary cases to work.\n   * The goal of this line is to ensure that the map output from Babel will\n   * have an exact range on identifiers in the output code. Without this\n   * line, Babel would potentially include some number of trailing tokens\n   * that are printed after the identifier, but before another location has\n   * been assigned.\n   * This allows tooling like Rollup and Webpack to more accurately perform\n   * their own transformations. Most importantly, this allows the import/export\n   * transformations performed by those tools to loose less information when\n   * applying their own transformations on top of the code and map results\n   * generated by Babel itself.\n   *\n   * The primary example of this is the snippet:\n   *\n   *   import mod from \"mod\";\n   *   mod();\n   *\n   * With this line, there will be one mapping range over \"mod\" and another\n   * over \"();\", where previously it would have been a single mapping.\n   */\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    if (!this._map) return cb();\n\n    this.source(\"start\", loc);\n\n    cb();\n\n    this.source(\"end\", loc);\n  }\n\n  /**\n   * Sets a given position as the current source location so generated code after this call\n   * will be given this position in the sourcemap.\n   */\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    if (!this._map) return;\n\n    // Since this is called extremely often, we re-use the same _sourcePosition\n    // object for the whole lifetime of the buffer.\n    this._normalizePosition(prop, loc, 0, 0);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    lineOffset: number,\n    columnOffset: number,\n  ): void {\n    if (!this._map) return;\n\n    this._normalizePosition(prop, loc, lineOffset, columnOffset);\n  }\n\n  /**\n   * Call a callback with a specific source location\n   */\n\n  withSource(prop: \"start\" | \"end\", loc: Loc, cb: () => void): void {\n    if (!this._map) return cb();\n\n    this.source(prop, loc);\n\n    cb();\n  }\n\n  _normalizePosition(\n    prop: \"start\" | \"end\",\n    loc: Loc,\n    lineOffset: number,\n    columnOffset: number,\n  ) {\n    const pos = loc[prop];\n    const target = this._sourcePosition;\n\n    target.identifierName =\n      (prop === \"start\" && loc.identifierName) || undefined;\n    if (pos) {\n      target.line = pos.line + lineOffset;\n      target.column = pos.column + columnOffset;\n      target.filename = loc.filename;\n    }\n  }\n\n  getCurrentColumn(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n\n    let lastIndex = -1;\n    let len = 0;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      if (item.char === charcodes.lineFeed) {\n        lastIndex = len;\n      }\n      len += item.repeat;\n    }\n\n    return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;\n  }\n\n  getCurrentLine(): number {\n    let count = 0;\n\n    const queue = this._queue;\n    for (let i = 0; i < this._queueCursor; i++) {\n      if (queue[i].char === charcodes.lineFeed) {\n        count++;\n      }\n    }\n\n    return this._position.line + count;\n  }\n}\n", "import {\n  FLIPPED_ALIAS_KEYS,\n  isArrayExpression,\n  isAssignmentExpression,\n  isBinary,\n  isBlockStatement,\n  isCallExpression,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isMemberExpression,\n  isObjectExpression,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isStringLiteral,\n} from \"@babel/types\";\nimport * as charCodes from \"charcodes\";\n\nimport type { NodeHandlers } from \"./index\";\n\nimport type * as t from \"@babel/types\";\n\nconst enum WhitespaceFlag {\n  before = 1 << 0,\n  after = 1 << 1,\n}\n\nexport type { WhitespaceFlag };\n\nfunction crawlInternal(\n  node: t.Node,\n  state: { hasCall: boolean; hasFunction: boolean; hasHelper: boolean },\n) {\n  if (!node) return state;\n\n  if (isMemberExpression(node) || isOptionalMemberExpression(node)) {\n    crawlInternal(node.object, state);\n    if (node.computed) crawlInternal(node.property, state);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    crawlInternal(node.left, state);\n    crawlInternal(node.right, state);\n  } else if (isCallExpression(node) || isOptionalCallExpression(node)) {\n    state.hasCall = true;\n    crawlInternal(node.callee, state);\n  } else if (isFunction(node)) {\n    state.hasFunction = true;\n  } else if (isIdentifier(node)) {\n    state.hasHelper =\n      // @ts-expect-error todo(flow->ts): node.callee is not really expected here…\n      state.hasHelper || (node.callee && isHelper(node.callee));\n  }\n\n  return state;\n}\n\n/**\n * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.\n *\n * @example\n * crawl(node)\n * // { hasCall: false, hasFunction: true, hasHelper: false }\n */\n\nfunction crawl(node: t.Node) {\n  return crawlInternal(node, {\n    hasCall: false,\n    hasFunction: false,\n    hasHelper: false,\n  });\n}\n\n/**\n * Test if a node is or has a helper.\n */\n\nfunction isHelper(node: t.Node): boolean {\n  if (!node) return false;\n\n  if (isMemberExpression(node)) {\n    return isHelper(node.object) || isHelper(node.property);\n  } else if (isIdentifier(node)) {\n    return (\n      node.name === \"require\" ||\n      node.name.charCodeAt(0) === charCodes.underscore\n    );\n  } else if (isCallExpression(node)) {\n    return isHelper(node.callee);\n  } else if (isBinary(node) || isAssignmentExpression(node)) {\n    return (\n      (isIdentifier(node.left) && isHelper(node.left)) || isHelper(node.right)\n    );\n  } else {\n    return false;\n  }\n}\n\nfunction isType(node: t.Node) {\n  return (\n    isLiteral(node) ||\n    isObjectExpression(node) ||\n    isArrayExpression(node) ||\n    isIdentifier(node) ||\n    isMemberExpression(node)\n  );\n}\n\n/**\n * Tests for node types that need whitespace.\n */\n\nexport const nodes: NodeHandlers<WhitespaceFlag> = {\n  /**\n   * Test if AssignmentExpression needs whitespace.\n   */\n\n  AssignmentExpression(node: t.AssignmentExpression): WhitespaceFlag {\n    const state = crawl(node.right);\n    if ((state.hasCall && state.hasHelper) || state.hasFunction) {\n      return state.hasFunction\n        ? WhitespaceFlag.before | WhitespaceFlag.after\n        : WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if SwitchCase needs whitespace.\n   */\n\n  SwitchCase(node: t.SwitchCase, parent: t.SwitchStatement): WhitespaceFlag {\n    return (\n      (!!node.consequent.length || parent.cases[0] === node\n        ? WhitespaceFlag.before\n        : 0) |\n      (!node.consequent.length && parent.cases[parent.cases.length - 1] === node\n        ? WhitespaceFlag.after\n        : 0)\n    );\n  },\n\n  /**\n   * Test if LogicalExpression needs whitespace.\n   */\n\n  LogicalExpression(node: t.LogicalExpression): WhitespaceFlag {\n    if (isFunction(node.left) || isFunction(node.right)) {\n      return WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if Literal needs whitespace.\n   */\n\n  Literal(node: t.Literal): WhitespaceFlag {\n    if (isStringLiteral(node) && node.value === \"use strict\") {\n      return WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if CallExpressionish needs whitespace.\n   */\n\n  CallExpression(node: t.CallExpression): WhitespaceFlag {\n    if (isFunction(node.callee) || isHelper(node)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n\n  OptionalCallExpression(node: t.OptionalCallExpression): WhitespaceFlag {\n    if (isFunction(node.callee)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n\n  /**\n   * Test if VariableDeclaration needs whitespace.\n   */\n\n  VariableDeclaration(node: t.VariableDeclaration): WhitespaceFlag {\n    for (let i = 0; i < node.declarations.length; i++) {\n      const declar = node.declarations[i];\n\n      let enabled = isHelper(declar.id) && !isType(declar.init);\n      if (!enabled && declar.init) {\n        const state = crawl(declar.init);\n        enabled = (isHelper(declar.init) && state.hasCall) || state.hasFunction;\n      }\n\n      if (enabled) {\n        return WhitespaceFlag.before | WhitespaceFlag.after;\n      }\n    }\n  },\n\n  /**\n   * Test if IfStatement needs whitespace.\n   */\n\n  IfStatement(node: t.IfStatement): WhitespaceFlag {\n    if (isBlockStatement(node.consequent)) {\n      return WhitespaceFlag.before | WhitespaceFlag.after;\n    }\n  },\n};\n\n/**\n * Test if Property needs whitespace.\n */\n\nnodes.ObjectProperty =\n  nodes.ObjectTypeProperty =\n  nodes.ObjectMethod =\n    function (\n      node: t.ObjectProperty | t.ObjectTypeProperty | t.ObjectMethod,\n      parent: t.ObjectExpression,\n    ): WhitespaceFlag {\n      if (parent.properties[0] === node) {\n        return WhitespaceFlag.before;\n      }\n    };\n\nnodes.ObjectTypeCallProperty = function (\n  node: t.ObjectTypeCallProperty,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (parent.callProperties[0] === node && !parent.properties?.length) {\n    return WhitespaceFlag.before;\n  }\n};\n\nnodes.ObjectTypeIndexer = function (\n  node: t.ObjectTypeIndexer,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (\n    parent.indexers[0] === node &&\n    !parent.properties?.length &&\n    !parent.callProperties?.length\n  ) {\n    return WhitespaceFlag.before;\n  }\n};\n\nnodes.ObjectTypeInternalSlot = function (\n  node: t.ObjectTypeInternalSlot,\n  parent: t.ObjectTypeAnnotation,\n): WhitespaceFlag {\n  if (\n    parent.internalSlots[0] === node &&\n    !parent.properties?.length &&\n    !parent.callProperties?.length &&\n    !parent.indexers?.length\n  ) {\n    return WhitespaceFlag.before;\n  }\n};\n\n/**\n * Add whitespace tests for nodes and their aliases.\n */\n\n(\n  [\n    [\"Function\", true],\n    [\"Class\", true],\n    [\"Loop\", true],\n    [\"LabeledStatement\", true],\n    [\"SwitchStatement\", true],\n    [\"TryStatement\", true],\n  ] as const\n).forEach(function ([type, amounts]) {\n  [type as string]\n    .concat(FLIPPED_ALIAS_KEYS[type] || [])\n    .forEach(function (type) {\n      const ret = amounts ? WhitespaceFlag.before | WhitespaceFlag.after : 0;\n      nodes[type] = () => ret;\n    });\n});\n", "import {\n  isArrayTypeAnnotation,\n  isArrowFunctionExpression,\n  isAssignmentExpression,\n  isAwaitExpression,\n  isBinary,\n  isBinaryExpression,\n  isUpdateExpression,\n  isCallExpression,\n  isClass,\n  isClassExpression,\n  isConditional,\n  isConditionalExpression,\n  isExportDeclaration,\n  isExportDefaultDeclaration,\n  isExpressionStatement,\n  isFor,\n  isForInStatement,\n  isForOfStatement,\n  isForStatement,\n  isFunctionExpression,\n  isIfStatement,\n  isIndexedAccessType,\n  isIntersectionTypeAnnotation,\n  isLogicalExpression,\n  isMemberExpression,\n  isNewExpression,\n  isNullableTypeAnnotation,\n  isObjectPattern,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isReturnStatement,\n  isSequenceExpression,\n  isSwitchStatement,\n  isTSArrayType,\n  isTSAsExpression,\n  isTSInstantiationExpression,\n  isTSIntersectionType,\n  isTSNonNullExpression,\n  isTSOptionalType,\n  isTSRestType,\n  isTSTypeAssertion,\n  isTSUnionType,\n  isTaggedTemplateExpression,\n  isThrowStatement,\n  isTypeAnnotation,\n  isUnaryLike,\n  isUnionTypeAnnotation,\n  isVariableDeclarator,\n  isWhileStatement,\n  isYieldExpression,\n  isTSSatisfiesExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nconst PRECEDENCE = {\n  \"||\": 0,\n  \"??\": 0,\n  \"|>\": 0,\n  \"&&\": 1,\n  \"|\": 2,\n  \"^\": 3,\n  \"&\": 4,\n  \"==\": 5,\n  \"===\": 5,\n  \"!=\": 5,\n  \"!==\": 5,\n  \"<\": 6,\n  \">\": 6,\n  \"<=\": 6,\n  \">=\": 6,\n  in: 6,\n  instanceof: 6,\n  \">>\": 7,\n  \"<<\": 7,\n  \">>>\": 7,\n  \"+\": 8,\n  \"-\": 8,\n  \"*\": 9,\n  \"/\": 9,\n  \"%\": 9,\n  \"**\": 10,\n};\n\nconst enum CheckParam {\n  expressionStatement = 1 << 0,\n  arrowBody = 1 << 1,\n  exportDefault = 1 << 2,\n  forHead = 1 << 3,\n  forInHead = 1 << 4,\n  forOfHead = 1 << 5,\n}\n\nfunction isTSTypeExpression(node: t.Node) {\n  return (\n    isTSAsExpression(node) ||\n    isTSSatisfiesExpression(node) ||\n    isTSTypeAssertion(node)\n  );\n}\n\nconst isClassExtendsClause = (\n  node: t.Node,\n  parent: t.Node,\n): parent is t.Class => isClass(parent, { superClass: node });\n\nconst hasPostfixPart = (node: t.Node, parent: t.Node) =>\n  ((isMemberExpression(parent) || isOptionalMemberExpression(parent)) &&\n    parent.object === node) ||\n  ((isCallExpression(parent) ||\n    isOptionalCallExpression(parent) ||\n    isNewExpression(parent)) &&\n    parent.callee === node) ||\n  (isTaggedTemplateExpression(parent) && parent.tag === node) ||\n  isTSNonNullExpression(parent);\n\nexport function NullableTypeAnnotation(\n  node: t.NullableTypeAnnotation,\n  parent: t.Node,\n): boolean {\n  return isArrayTypeAnnotation(parent);\n}\n\nexport function FunctionTypeAnnotation(\n  node: t.FunctionTypeAnnotation,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  if (printStack.length < 3) return;\n\n  return (\n    // (() => A) | (() => B)\n    isUnionTypeAnnotation(parent) ||\n    // (() => A) & (() => B)\n    isIntersectionTypeAnnotation(parent) ||\n    // (() => A)[]\n    isArrayTypeAnnotation(parent) ||\n    // <T>(A: T): (T => T[]) => B => [A, B]\n    (isTypeAnnotation(parent) &&\n      // Check grandparent\n      isArrowFunctionExpression(printStack[printStack.length - 3]))\n  );\n}\n\nexport function UpdateExpression(\n  node: t.UpdateExpression,\n  parent: t.Node,\n): boolean {\n  return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);\n}\n\nexport function ObjectExpression(\n  node: t.ObjectExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  return isFirstInContext(\n    printStack,\n    CheckParam.expressionStatement | CheckParam.arrowBody,\n  );\n}\n\nexport function DoExpression(\n  node: t.DoExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  // `async do` can start an expression statement\n  return (\n    !node.async && isFirstInContext(printStack, CheckParam.expressionStatement)\n  );\n}\n\nexport function Binary(node: t.BinaryExpression, parent: t.Node): boolean {\n  if (\n    node.operator === \"**\" &&\n    isBinaryExpression(parent, { operator: \"**\" })\n  ) {\n    return parent.left === node;\n  }\n\n  if (isClassExtendsClause(node, parent)) {\n    return true;\n  }\n\n  if (\n    hasPostfixPart(node, parent) ||\n    isUnaryLike(parent) ||\n    isAwaitExpression(parent)\n  ) {\n    return true;\n  }\n\n  if (isBinary(parent)) {\n    const parentOp = parent.operator;\n    const parentPos = PRECEDENCE[parentOp];\n\n    const nodeOp = node.operator;\n    const nodePos = PRECEDENCE[nodeOp];\n\n    if (\n      // Logical expressions with the same precedence don't need parens.\n      (parentPos === nodePos &&\n        parent.right === node &&\n        !isLogicalExpression(parent)) ||\n      parentPos > nodePos\n    ) {\n      return true;\n    }\n  }\n}\n\nexport function UnionTypeAnnotation(\n  node: t.UnionTypeAnnotation,\n  parent: t.Node,\n): boolean {\n  return (\n    isArrayTypeAnnotation(parent) ||\n    isNullableTypeAnnotation(parent) ||\n    isIntersectionTypeAnnotation(parent) ||\n    isUnionTypeAnnotation(parent)\n  );\n}\n\nexport { UnionTypeAnnotation as IntersectionTypeAnnotation };\n\nexport function OptionalIndexedAccessType(\n  node: t.OptionalIndexedAccessType,\n  parent: t.Node,\n): boolean {\n  return isIndexedAccessType(parent, { objectType: node });\n}\n\nexport function TSAsExpression() {\n  return true;\n}\n\nexport {\n  TSAsExpression as TSSatisfiesExpression,\n  TSAsExpression as TSTypeAssertion,\n};\n\nexport function TSUnionType(node: t.TSUnionType, parent: t.Node): boolean {\n  return (\n    isTSArrayType(parent) ||\n    isTSOptionalType(parent) ||\n    isTSIntersectionType(parent) ||\n    isTSUnionType(parent) ||\n    isTSRestType(parent)\n  );\n}\n\nexport { TSUnionType as TSIntersectionType };\n\nexport function TSInferType(node: t.TSInferType, parent: t.Node): boolean {\n  return isTSArrayType(parent) || isTSOptionalType(parent);\n}\n\nexport function TSInstantiationExpression(\n  node: t.TSInstantiationExpression,\n  parent: t.Node,\n) {\n  return (\n    (isCallExpression(parent) ||\n      isOptionalCallExpression(parent) ||\n      isNewExpression(parent) ||\n      isTSInstantiationExpression(parent)) &&\n    !!parent.typeParameters\n  );\n}\n\nexport function BinaryExpression(\n  node: t.BinaryExpression,\n  parent: t.Node,\n): boolean {\n  // let i = (1 in []);\n  // for ((1 in []);;);\n  return (\n    node.operator === \"in\" && (isVariableDeclarator(parent) || isFor(parent))\n  );\n}\n\nexport function SequenceExpression(\n  node: t.SequenceExpression,\n  parent: t.Node,\n): boolean {\n  if (\n    // Although parentheses wouldn\"t hurt around sequence\n    // expressions in the head of for loops, traditional style\n    // dictates that e.g. i++, j++ should not be wrapped with\n    // parentheses.\n    isForStatement(parent) ||\n    isThrowStatement(parent) ||\n    isReturnStatement(parent) ||\n    (isIfStatement(parent) && parent.test === node) ||\n    (isWhileStatement(parent) && parent.test === node) ||\n    (isForInStatement(parent) && parent.right === node) ||\n    (isSwitchStatement(parent) && parent.discriminant === node) ||\n    (isExpressionStatement(parent) && parent.expression === node)\n  ) {\n    return false;\n  }\n\n  // Otherwise err on the side of overparenthesization, adding\n  // explicit exceptions above if this proves overzealous.\n  return true;\n}\n\nexport function YieldExpression(\n  node: t.YieldExpression,\n  parent: t.Node,\n): boolean {\n  return (\n    isBinary(parent) ||\n    isUnaryLike(parent) ||\n    hasPostfixPart(node, parent) ||\n    (isAwaitExpression(parent) && isYieldExpression(node)) ||\n    (isConditionalExpression(parent) && node === parent.test) ||\n    isClassExtendsClause(node, parent)\n  );\n}\n\nexport { YieldExpression as AwaitExpression };\n\nexport function ClassExpression(\n  node: t.ClassExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  return isFirstInContext(\n    printStack,\n    CheckParam.expressionStatement | CheckParam.exportDefault,\n  );\n}\n\nexport function UnaryLike(\n  node:\n    | t.UnaryLike\n    | t.ArrowFunctionExpression\n    | t.ConditionalExpression\n    | t.AssignmentExpression,\n  parent: t.Node,\n): boolean {\n  return (\n    hasPostfixPart(node, parent) ||\n    isBinaryExpression(parent, { operator: \"**\", left: node }) ||\n    isClassExtendsClause(node, parent)\n  );\n}\n\nexport function FunctionExpression(\n  node: t.FunctionExpression,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  return isFirstInContext(\n    printStack,\n    CheckParam.expressionStatement | CheckParam.exportDefault,\n  );\n}\n\nexport function ArrowFunctionExpression(\n  node: t.ArrowFunctionExpression,\n  parent: t.Node,\n): boolean {\n  return isExportDeclaration(parent) || ConditionalExpression(node, parent);\n}\n\nexport function ConditionalExpression(\n  node:\n    | t.ConditionalExpression\n    | t.ArrowFunctionExpression\n    | t.AssignmentExpression,\n  parent?: t.Node,\n): boolean {\n  if (\n    isUnaryLike(parent) ||\n    isBinary(parent) ||\n    isConditionalExpression(parent, { test: node }) ||\n    isAwaitExpression(parent) ||\n    isTSTypeExpression(parent)\n  ) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nexport function OptionalMemberExpression(\n  node: t.OptionalMemberExpression,\n  parent: t.Node,\n): boolean {\n  return (\n    isCallExpression(parent, { callee: node }) ||\n    isMemberExpression(parent, { object: node })\n  );\n}\n\nexport { OptionalMemberExpression as OptionalCallExpression };\n\nexport function AssignmentExpression(\n  node: t.AssignmentExpression,\n  parent: t.Node,\n): boolean {\n  if (isObjectPattern(node.left)) {\n    return true;\n  } else {\n    return ConditionalExpression(node, parent);\n  }\n}\n\nexport function LogicalExpression(\n  node: t.LogicalExpression,\n  parent: t.Node,\n): boolean {\n  if (isTSTypeExpression(parent)) return true;\n  switch (node.operator) {\n    case \"||\":\n      if (!isLogicalExpression(parent)) return false;\n      return parent.operator === \"??\" || parent.operator === \"&&\";\n    case \"&&\":\n      return isLogicalExpression(parent, { operator: \"??\" });\n    case \"??\":\n      return isLogicalExpression(parent) && parent.operator !== \"??\";\n  }\n}\n\nexport function Identifier(\n  node: t.Identifier,\n  parent: t.Node,\n  printStack: Array<t.Node>,\n): boolean {\n  // 13.15.2 AssignmentExpression RS: Evaluation\n  // (fn) = function () {};\n  if (\n    node.extra?.parenthesized &&\n    isAssignmentExpression(parent, { left: node }) &&\n    (isFunctionExpression(parent.right) || isClassExpression(parent.right)) &&\n    parent.right.id == null\n  ) {\n    return true;\n  }\n  // Non-strict code allows the identifier `let`, but it cannot occur as-is in\n  // certain contexts to avoid ambiguity with contextual keyword `let`.\n  if (node.name === \"let\") {\n    // Some contexts only forbid `let [`, so check if the next token would\n    // be the left bracket of a computed member expression.\n    const isFollowedByBracket =\n      isMemberExpression(parent, {\n        object: node,\n        computed: true,\n      }) ||\n      isOptionalMemberExpression(parent, {\n        object: node,\n        computed: true,\n        optional: false,\n      });\n    return isFirstInContext(\n      printStack,\n      isFollowedByBracket\n        ? CheckParam.expressionStatement |\n            CheckParam.forHead |\n            CheckParam.forInHead |\n            CheckParam.forOfHead\n        : CheckParam.forOfHead,\n    );\n  }\n\n  // ECMAScript specifically forbids a for-of loop from starting with the\n  // token sequence `for (async of`, because it would be ambiguous with\n  // `for (async of => {};;)`, so we need to add extra parentheses.\n  //\n  // If the parent is a for-await-of loop (i.e. parent.await === true), the\n  // parentheses aren't strictly needed, but we add them anyway because\n  // some tools (including earlier Babel versions) can't parse\n  // `for await (async of [])` without them.\n  return (\n    node.name === \"async\" && isForOfStatement(parent) && node === parent.left\n  );\n}\n\n// Walk up the print stack to determine if our node can come first\n// in a particular context.\nfunction isFirstInContext(\n  printStack: Array<t.Node>,\n  checkParam: CheckParam,\n): boolean {\n  const expressionStatement = checkParam & CheckParam.expressionStatement;\n  const arrowBody = checkParam & CheckParam.arrowBody;\n  const exportDefault = checkParam & CheckParam.exportDefault;\n  const forHead = checkParam & CheckParam.forHead;\n  const forInHead = checkParam & CheckParam.forInHead;\n  const forOfHead = checkParam & CheckParam.forOfHead;\n\n  let i = printStack.length - 1;\n  if (i <= 0) return;\n  let node = printStack[i];\n  i--;\n  let parent = printStack[i];\n  while (i >= 0) {\n    if (\n      (expressionStatement &&\n        isExpressionStatement(parent, { expression: node })) ||\n      (exportDefault &&\n        isExportDefaultDeclaration(parent, { declaration: node })) ||\n      (arrowBody && isArrowFunctionExpression(parent, { body: node })) ||\n      (forHead && isForStatement(parent, { init: node })) ||\n      (forInHead && isForInStatement(parent, { left: node })) ||\n      (forOfHead && isForOfStatement(parent, { left: node }))\n    ) {\n      return true;\n    }\n\n    if (\n      i > 0 &&\n      ((hasPostfixPart(node, parent) && !isNewExpression(parent)) ||\n        (isSequenceExpression(parent) && parent.expressions[0] === node) ||\n        (isUpdateExpression(parent) && !parent.prefix) ||\n        isConditional(parent, { test: node }) ||\n        isBinary(parent, { left: node }) ||\n        isAssignmentExpression(parent, { left: node }))\n    ) {\n      node = parent;\n      i--;\n      parent = printStack[i];\n    } else {\n      return false;\n    }\n  }\n\n  return false;\n}\n", "import * as whitespace from \"./whitespace\";\nimport * as parens from \"./parentheses\";\nimport {\n  FLIPPED_ALIAS_KEYS,\n  isCallExpression,\n  isExpressionStatement,\n  isMemberExpression,\n  isNewExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nimport type { WhitespaceFlag } from \"./whitespace\";\n\nexport type NodeHandlers<R> = {\n  [K in string]?: (\n    node: K extends t.Node[\"type\"] ? Extract<t.Node, { type: K }> : t.Node,\n    // todo:\n    // node: K extends keyof typeof t\n    //   ? Extract<typeof t[K], { type: \"string\" }>\n    //   : t.Node,\n    parent: t.Node,\n    stack: t.Node[],\n  ) => R;\n};\n\nfunction expandAliases<R>(obj: NodeHandlers<R>) {\n  const newObj: NodeHandlers<R> = {};\n\n  function add(\n    type: string,\n    func: (node: t.Node, parent: t.Node, stack: t.Node[]) => R,\n  ) {\n    const fn = newObj[type];\n    newObj[type] = fn\n      ? function (node, parent, stack) {\n          const result = fn(node, parent, stack);\n\n          return result == null ? func(node, parent, stack) : result;\n        }\n      : func;\n  }\n\n  for (const type of Object.keys(obj)) {\n    const aliases = FLIPPED_ALIAS_KEYS[type];\n    if (aliases) {\n      for (const alias of aliases) {\n        add(alias, obj[type]);\n      }\n    } else {\n      add(type, obj[type]);\n    }\n  }\n\n  return newObj;\n}\n\n// Rather than using `t.is` on each object property, we pre-expand any type aliases\n// into concrete types so that the 'find' call below can be as fast as possible.\nconst expandedParens = expandAliases(parens);\nconst expandedWhitespaceNodes = expandAliases(whitespace.nodes);\n\nfunction find<R>(\n  obj: NodeHandlers<R>,\n  node: t.Node,\n  parent: t.Node,\n  printStack?: t.Node[],\n): R | null {\n  const fn = obj[node.type];\n  return fn ? fn(node, parent, printStack) : null;\n}\n\nfunction isOrHasCallExpression(node: t.Node): boolean {\n  if (isCallExpression(node)) {\n    return true;\n  }\n\n  return isMemberExpression(node) && isOrHasCallExpression(node.object);\n}\n\nexport function needsWhitespace(\n  node: t.Node,\n  parent: t.Node,\n  type: WhitespaceFlag,\n): boolean {\n  if (!node) return false;\n\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  const flag = find(expandedWhitespaceNodes, node, parent);\n\n  if (typeof flag === \"number\") {\n    return (flag & type) !== 0;\n  }\n\n  return false;\n}\n\nexport function needsWhitespaceBefore(node: t.Node, parent: t.Node) {\n  return needsWhitespace(node, parent, 1);\n}\n\nexport function needsWhitespaceAfter(node: t.Node, parent: t.Node) {\n  return needsWhitespace(node, parent, 2);\n}\n\nexport function needsParens(\n  node: t.Node,\n  parent: t.Node,\n  printStack?: t.Node[],\n) {\n  if (!parent) return false;\n\n  if (isNewExpression(parent) && parent.callee === node) {\n    if (isOrHasCallExpression(node)) return true;\n  }\n\n  return find(expandedParens, node, parent, printStack);\n}\n", "import type Printer from \"../printer\";\nimport type * as t from \"@babel/types\";\n\nexport function TaggedTemplateExpression(\n  this: Printer,\n  node: t.TaggedTemplateExpression,\n) {\n  this.print(node.tag, node);\n  this.print(node.typeParameters, node); // TS\n  this.print(node.quasi, node);\n}\n\nexport function TemplateElement(\n  this: Printer,\n  node: t.TemplateElement,\n  parent: t.TemplateLiteral,\n) {\n  const isFirst = parent.quasis[0] === node;\n  const isLast = parent.quasis[parent.quasis.length - 1] === node;\n\n  const value = (isFirst ? \"`\" : \"}\") + node.value.raw + (isLast ? \"`\" : \"${\");\n\n  this.token(value, true);\n}\n\nexport function TemplateLiteral(this: Printer, node: t.TemplateLiteral) {\n  const quasis = node.quasis;\n\n  for (let i = 0; i < quasis.length; i++) {\n    this.print(quasis[i], node);\n\n    if (i + 1 < quasis.length) {\n      this.print(node.expressions[i], node);\n    }\n  }\n}\n", "import type Printer from \"../printer\";\nimport {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as n from \"../node\";\n\nexport function UnaryExpression(this: Printer, node: t.UnaryExpression) {\n  if (\n    node.operator === \"void\" ||\n    node.operator === \"delete\" ||\n    node.operator === \"typeof\" ||\n    // throwExpressions\n    node.operator === \"throw\"\n  ) {\n    this.word(node.operator);\n    this.space();\n  } else {\n    this.token(node.operator);\n  }\n\n  this.print(node.argument, node);\n}\n\nexport function DoExpression(this: Printer, node: t.DoExpression) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ParenthesizedExpression(\n  this: Printer,\n  node: t.ParenthesizedExpression,\n) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nexport function UpdateExpression(this: Printer, node: t.UpdateExpression) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument, node);\n  } else {\n    this.printTerminatorless(node.argument, node, true);\n    this.token(node.operator);\n  }\n}\n\nexport function ConditionalExpression(\n  this: Printer,\n  node: t.ConditionalExpression,\n) {\n  this.print(node.test, node);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.consequent, node);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.alternate, node);\n}\n\nexport function NewExpression(\n  this: Printer,\n  node: t.NewExpression,\n  parent: t.Node,\n) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee, node);\n  if (\n    this.format.minified &&\n    node.arguments.length === 0 &&\n    !node.optional &&\n    !isCallExpression(parent, { callee: node }) &&\n    !isMemberExpression(parent) &&\n    !isNewExpression(parent)\n  ) {\n    return;\n  }\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    // TODO: This can never happen\n    this.token(\"?.\");\n  }\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.token(\")\");\n}\n\nexport function SequenceExpression(this: Printer, node: t.SequenceExpression) {\n  this.printList(node.expressions, node);\n}\n\nexport function ThisExpression(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function Super(this: Printer) {\n  this.word(\"super\");\n}\n\nfunction isDecoratorMemberExpression(\n  node: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n): boolean {\n  switch (node.type) {\n    case \"Identifier\":\n      return true;\n    case \"MemberExpression\":\n      return (\n        !node.computed &&\n        node.property.type === \"Identifier\" &&\n        isDecoratorMemberExpression(node.object)\n      );\n    default:\n      return false;\n  }\n}\nfunction shouldParenthesizeDecoratorExpression(\n  node: t.Expression | t.Super | t.V8IntrinsicIdentifier,\n) {\n  if (node.type === \"ParenthesizedExpression\") {\n    // We didn't check extra?.parenthesized here because we don't track decorators in needsParen\n    return false;\n  }\n  return !isDecoratorMemberExpression(\n    node.type === \"CallExpression\" ? node.callee : node,\n  );\n}\n\nexport function Decorator(this: Printer, node: t.Decorator) {\n  this.token(\"@\");\n  const { expression } = node;\n  if (shouldParenthesizeDecoratorExpression(expression)) {\n    this.token(\"(\");\n    this.print(expression, node);\n    this.token(\")\");\n  } else {\n    this.print(expression, node);\n  }\n  this.newline();\n}\n\nexport function OptionalMemberExpression(\n  this: Printer,\n  node: t.OptionalMemberExpression,\n) {\n  this.print(node.object, node);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n  // @ts-expect-error todo(flow->ts) maybe instead of typeof check specific literal types?\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n  } else {\n    if (!node.optional) {\n      this.token(\".\");\n    }\n    this.print(node.property, node);\n  }\n}\n\nexport function OptionalCallExpression(\n  this: Printer,\n  node: t.OptionalCallExpression,\n) {\n  this.print(node.callee, node);\n\n  this.print(node.typeParameters, node); // TS\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.print(node.typeArguments, node); // Flow\n\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.token(\")\");\n}\n\nexport function CallExpression(this: Printer, node: t.CallExpression) {\n  this.print(node.callee, node);\n\n  this.print(node.typeArguments, node); // Flow\n  this.print(node.typeParameters, node); // TS\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.token(\")\");\n}\n\nexport function Import(this: Printer) {\n  this.word(\"import\");\n}\n\nexport function AwaitExpression(this: Printer, node: t.AwaitExpression) {\n  this.word(\"await\");\n\n  if (node.argument) {\n    this.space();\n    this.printTerminatorless(node.argument, node, false);\n  }\n}\n\nexport function YieldExpression(this: Printer, node: t.YieldExpression) {\n  this.word(\"yield\", true);\n\n  if (node.delegate) {\n    this.token(\"*\");\n    if (node.argument) {\n      this.space();\n      // line terminators are allowed after yield*\n      this.print(node.argument, node);\n    }\n  } else {\n    if (node.argument) {\n      this.space();\n      this.printTerminatorless(node.argument, node, false);\n    }\n  }\n}\n\nexport function EmptyStatement(this: Printer) {\n  this.semicolon(true /* force */);\n}\n\nexport function ExpressionStatement(\n  this: Printer,\n  node: t.ExpressionStatement,\n) {\n  this.print(node.expression, node);\n  this.semicolon();\n}\n\nexport function AssignmentPattern(this: Printer, node: t.AssignmentPattern) {\n  this.print(node.left, node);\n  // @ts-expect-error todo(flow->ts) property present on some of the types in union but not all\n  if (node.left.optional) this.token(\"?\");\n  // @ts-expect-error todo(flow->ts) property present on some of the types in union but not all\n  this.print(node.left.typeAnnotation, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n}\n\nexport function AssignmentExpression(\n  this: Printer,\n  node: t.AssignmentExpression,\n  parent: t.Node,\n) {\n  // Somewhere inside a for statement `init` node but doesn't usually\n  // needs a paren except for `in` expressions: `for (a in b ? a : b;;)`\n  const parens =\n    this.inForStatementInitCounter &&\n    node.operator === \"in\" &&\n    !n.needsParens(node, parent);\n\n  if (parens) {\n    this.token(\"(\");\n  }\n\n  this.print(node.left, node);\n\n  this.space();\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n  }\n  this.space();\n\n  this.print(node.right, node);\n\n  if (parens) {\n    this.token(\")\");\n  }\n}\n\nexport function BindExpression(this: Printer, node: t.BindExpression) {\n  this.print(node.object, node);\n  this.token(\"::\");\n  this.print(node.callee, node);\n}\n\nexport {\n  AssignmentExpression as BinaryExpression,\n  AssignmentExpression as LogicalExpression,\n};\n\nexport function MemberExpression(this: Printer, node: t.MemberExpression) {\n  this.print(node.object, node);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n  // @ts-expect-error todo(flow->ts) maybe use specific literal types\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n  } else {\n    this.token(\".\");\n    this.print(node.property, node);\n  }\n}\n\nexport function MetaProperty(this: Printer, node: t.MetaProperty) {\n  this.print(node.meta, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nexport function PrivateName(this: Printer, node: t.PrivateName) {\n  this.token(\"#\");\n  this.print(node.id, node);\n}\n\nexport function V8IntrinsicIdentifier(\n  this: Printer,\n  node: t.V8IntrinsicIdentifier,\n) {\n  this.token(\"%\");\n  this.word(node.name);\n}\n\nexport function ModuleExpression(this: Printer, node: t.ModuleExpression) {\n  this.word(\"module\", true);\n  this.space();\n  this.token(\"{\");\n  this.indent();\n  const { body } = node;\n  if (body.body.length || body.directives.length) {\n    this.newline();\n  }\n  this.print(body, node);\n  this.dedent();\n  this.sourceWithOffset(\"end\", node.loc, 0, -1);\n  this.rightBrace();\n}\n", "import type Printer from \"../printer\";\nimport {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as charCodes from \"charcodes\";\n\nexport function WithStatement(this: Printer, node: t.WithStatement) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport function IfStatement(this: Printer, node: t.IfStatement) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n\n  const needsBlock =\n    node.alternate && isIfStatement(getLastStatement(node.consequent));\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(charCodes.rightCurlyBrace)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\n// Recursively get the last statement.\nfunction getLastStatement(statement: t.Statement): t.Statement {\n  // @ts-expect-error: If statement.body is empty or not a Node, isStatement will return false\n  const { body } = statement;\n  if (isStatement(body) === false) {\n    return statement;\n  }\n\n  return getLastStatement(body);\n}\n\nexport function ForStatement(this: Printer, node: t.ForStatement) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport function WhileStatement(this: Printer, node: t.WhileStatement) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction ForXStatement(this: Printer, node: t.ForXStatement) {\n  this.word(\"for\");\n  this.space();\n  const isForOf = node.type === \"ForOfStatement\";\n  if (isForOf && node.await) {\n    this.word(\"await\");\n    this.space();\n  }\n  this.noIndentInnerCommentsHere();\n  this.token(\"(\");\n  this.print(node.left, node);\n  this.space();\n  this.word(isForOf ? \"of\" : \"in\");\n  this.space();\n  this.print(node.right, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nexport const ForInStatement = ForXStatement;\nexport const ForOfStatement = ForXStatement;\n\nexport function DoWhileStatement(this: Printer, node: t.DoWhileStatement) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction printStatementAfterKeyword(\n  printer: Printer,\n  node: t.Node,\n  parent: t.Node,\n  isLabel: boolean,\n) {\n  if (node) {\n    printer.space();\n    printer.printTerminatorless(node, parent, isLabel);\n  }\n\n  printer.semicolon();\n}\n\nexport function BreakStatement(this: Printer, node: t.ContinueStatement) {\n  this.word(\"break\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nexport function ContinueStatement(this: Printer, node: t.ContinueStatement) {\n  this.word(\"continue\");\n  printStatementAfterKeyword(this, node.label, node, true);\n}\n\nexport function ReturnStatement(this: Printer, node: t.ReturnStatement) {\n  this.word(\"return\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nexport function ThrowStatement(this: Printer, node: t.ThrowStatement) {\n  this.word(\"throw\");\n  printStatementAfterKeyword(this, node.argument, node, false);\n}\n\nexport function LabeledStatement(this: Printer, node: t.LabeledStatement) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function TryStatement(this: Printer, node: t.TryStatement) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  // Esprima bug puts the catch clause in a `handlers` array.\n  // see https://code.google.com/p/esprima/issues/detail?id=433\n  // We run into this from regenerator generated ast.\n  // @ts-expect-error todo(flow->ts) should ast node type be updated to support this?\n  if (node.handlers) {\n    // @ts-expect-error todo(flow->ts) should ast node type be updated to support this?\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nexport function CatchClause(this: Printer, node: t.CatchClause) {\n  this.word(\"catch\");\n  this.space();\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n  this.print(node.body, node);\n}\n\nexport function SwitchStatement(this: Printer, node: t.SwitchStatement) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n\n  this.printSequence(node.cases, node, {\n    indent: true,\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    },\n  });\n\n  this.token(\"}\");\n}\n\nexport function SwitchCase(this: Printer, node: t.SwitchCase) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, { indent: true });\n  }\n}\n\nexport function DebuggerStatement(this: Printer) {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nexport function VariableDeclaration(\n  this: Printer,\n  node: t.VariableDeclaration,\n  parent: t.Node,\n) {\n  if (node.declare) {\n    // TS\n    this.word(\"declare\");\n    this.space();\n  }\n\n  const { kind } = node;\n  this.word(kind, kind === \"using\");\n  this.space();\n\n  let hasInits = false;\n  // don't add whitespace to loop heads\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        // has an init so let's split it up over multiple lines\n        hasInits = true;\n      }\n    }\n  }\n\n  //\n  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on\n  // this will format declarations like:\n  //\n  //   let foo = \"bar\", bar = \"foo\";\n  //\n  // into\n  //\n  //   let foo = \"bar\",\n  //       bar = \"foo\";\n  //\n\n  this.printList(node.declarations, node, {\n    separator: hasInits\n      ? function (this: Printer) {\n          this.token(\",\");\n          this.newline();\n        }\n      : undefined,\n    indent: node.declarations.length > 1 ? true : false,\n  });\n\n  if (isFor(parent)) {\n    // don't give semicolons to these nodes since they'll be inserted in the parent generator\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nexport function VariableDeclarator(this: Printer, node: t.VariableDeclarator) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\"); // TS\n  // @ts-expect-error todo(flow-ts) Property 'typeAnnotation' does not exist on type 'MemberExpression'.\n  this.print(node.id.typeAnnotation, node);\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}\n", "import type Printer from \"../printer\";\nimport {\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as charCodes from \"charcodes\";\n\nexport function ClassDeclaration(\n  this: Printer,\n  node: t.ClassDeclaration,\n  parent: t.Node,\n) {\n  if (process.env.BABEL_8_BREAKING) {\n    this.printJoin(node.decorators, node);\n  } else {\n    if (\n      !this.format.decoratorsBeforeExport ||\n      (!isExportDefaultDeclaration(parent) && !isExportNamedDeclaration(parent))\n    ) {\n      this.printJoin(node.decorators, node);\n    }\n  }\n\n  if (node.declare) {\n    // TS\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    // TS\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"class\");\n\n  if (node.id) {\n    this.space();\n    this.print(node.id, node);\n  }\n\n  this.print(node.typeParameters, node);\n\n  if (node.superClass) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.superClass, node);\n    this.print(node.superTypeParameters, node);\n  }\n\n  if (node.implements) {\n    this.space();\n    this.word(\"implements\");\n    this.space();\n    this.printList(node.implements, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nexport { ClassDeclaration as ClassExpression };\n\nexport function ClassBody(this: Printer, node: t.ClassBody) {\n  this.token(\"{\");\n  if (node.body.length === 0) {\n    this.token(\"}\");\n  } else {\n    this.newline();\n\n    this.indent();\n    this.printSequence(node.body, node);\n    this.dedent();\n\n    if (!this.endsWith(charCodes.lineFeed)) this.newline();\n\n    this.sourceWithOffset(\"end\", node.loc, 0, -1);\n\n    this.rightBrace();\n  }\n}\n\nexport function ClassProperty(this: Printer, node: t.ClassProperty) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to property key, avoid line break\n  // between member modifiers and the property key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  this.tsPrintClassMemberModifiers(node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    this._variance(node);\n    this.print(node.key, node);\n  }\n\n  // TS\n  if (node.optional) {\n    this.token(\"?\");\n  }\n  if (node.definite) {\n    this.token(\"!\");\n  }\n\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassAccessorProperty(\n  this: Printer,\n  node: t.ClassAccessorProperty,\n) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to property key, avoid line break\n  // between member modifiers and the property key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  // TS does not support class accessor property yet\n  this.tsPrintClassMemberModifiers(node);\n\n  this.word(\"accessor\", true);\n  this.space();\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    // Todo: Flow does not support class accessor property yet.\n    this._variance(node);\n    this.print(node.key, node);\n  }\n\n  // TS\n  if (node.optional) {\n    this.token(\"?\");\n  }\n  if (node.definite) {\n    this.token(\"!\");\n  }\n\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassPrivateProperty(\n  this: Printer,\n  node: t.ClassPrivateProperty,\n) {\n  this.printJoin(node.decorators, node);\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.print(node.key, node);\n  this.print(node.typeAnnotation, node);\n  if (node.value) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.value, node);\n  }\n  this.semicolon();\n}\n\nexport function ClassMethod(this: Printer, node: t.ClassMethod) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ClassPrivateMethod(this: Printer, node: t.ClassPrivateMethod) {\n  this._classMethodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function _classMethodHead(\n  this: Printer,\n  node: t.ClassMethod | t.ClassPrivateMethod | t.TSDeclareMethod,\n) {\n  this.printJoin(node.decorators, node);\n\n  // catch up to method key, avoid line break\n  // between member modifiers/method heads and the method key.\n  const endLine = node.key.loc?.end?.line;\n  if (endLine) this.catchUp(endLine);\n\n  this.tsPrintClassMemberModifiers(node);\n  this._methodHead(node);\n}\n\nexport function StaticBlock(this: Printer, node: t.StaticBlock) {\n  this.word(\"static\");\n  this.space();\n  this.token(\"{\");\n  if (node.body.length === 0) {\n    this.token(\"}\");\n  } else {\n    this.newline();\n    this.printSequence(node.body, node, {\n      indent: true,\n    });\n\n    this.sourceWithOffset(\"end\", node.loc, 0, -1);\n\n    this.rightBrace();\n  }\n}\n", "import type Printer from \"../printer\";\nimport { isIdentifier } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport function _params(\n  this: Printer,\n  node: t.Function | t.TSDeclareMethod | t.TSDeclareFunction,\n) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n  this._parameters(node.params, node);\n  this.token(\")\");\n\n  const noLineTerminator = node.type === \"ArrowFunctionExpression\";\n  this.print(node.returnType, node, noLineTerminator);\n\n  this._noLineTerminator = noLineTerminator;\n}\n\nexport function _parameters(\n  this: Printer,\n  parameters: t.Function[\"params\"],\n  parent:\n    | t.Function\n    | t.TSIndexSignature\n    | t.TSDeclareMethod\n    | t.TSDeclareFunction\n    | t.TSFunctionType\n    | t.TSConstructorType,\n) {\n  const paramLength = parameters.length;\n  for (let i = 0; i < paramLength; i++) {\n    this._param(parameters[i], parent);\n\n    if (i < parameters.length - 1) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n}\n\nexport function _param(\n  this: Printer,\n  parameter: t.Identifier | t.RestElement | t.Pattern | t.TSParameterProperty,\n  parent?:\n    | t.Function\n    | t.TSIndexSignature\n    | t.TSDeclareMethod\n    | t.TSDeclareFunction\n    | t.TSFunctionType\n    | t.TSConstructorType,\n) {\n  this.printJoin(parameter.decorators, parameter);\n  this.print(parameter, parent);\n  if (\n    // @ts-expect-error optional is not in TSParameterProperty\n    parameter.optional\n  ) {\n    this.token(\"?\"); // TS / flow\n  }\n\n  this.print(\n    // @ts-expect-error typeAnnotation is not in TSParameterProperty\n    parameter.typeAnnotation,\n    parameter,\n  ); // TS / flow\n}\n\nexport function _methodHead(this: Printer, node: t.Method | t.TSDeclareMethod) {\n  const kind = node.kind;\n  const key = node.key;\n\n  if (kind === \"get\" || kind === \"set\") {\n    this.word(kind);\n    this.space();\n  }\n\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n\n  if (\n    kind === \"method\" ||\n    // @ts-expect-error Fixme: kind: \"init\" is not defined\n    kind === \"init\"\n  ) {\n    if (node.generator) {\n      this.token(\"*\");\n    }\n  }\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(key, node);\n    this.token(\"]\");\n  } else {\n    this.print(key, node);\n  }\n\n  if (\n    // @ts-expect-error optional is not in ObjectMethod\n    node.optional\n  ) {\n    // TS\n    this.token(\"?\");\n  }\n\n  this._params(node);\n}\n\nexport function _predicate(\n  this: Printer,\n  node:\n    | t.FunctionDeclaration\n    | t.FunctionExpression\n    | t.ArrowFunctionExpression,\n  noLineTerminatorAfter?: boolean,\n) {\n  if (node.predicate) {\n    if (!node.returnType) {\n      this.token(\":\");\n    }\n    this.space();\n    this.print(node.predicate, node, noLineTerminatorAfter);\n  }\n}\n\nexport function _functionHead(\n  this: Printer,\n  node: t.FunctionDeclaration | t.FunctionExpression | t.TSDeclareFunction,\n) {\n  if (node.async) {\n    this.word(\"async\");\n    // We prevent inner comments from being printed here,\n    // so that they are always consistently printed in the\n    // same place regardless of the function type.\n    this._endsWithInnerRaw = false;\n    this.space();\n  }\n  this.word(\"function\");\n  if (node.generator) {\n    // We prevent inner comments from being printed here,\n    // so that they are always consistently printed in the\n    // same place regardless of the function type.\n    this._endsWithInnerRaw = false;\n    this.token(\"*\");\n  }\n\n  this.space();\n  if (node.id) {\n    this.print(node.id, node);\n  }\n\n  this._params(node);\n  if (node.type !== \"TSDeclareFunction\") {\n    this._predicate(node);\n  }\n}\n\nexport function FunctionExpression(this: Printer, node: t.FunctionExpression) {\n  this._functionHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport { FunctionExpression as FunctionDeclaration };\n\nexport function ArrowFunctionExpression(\n  this: Printer,\n  node: t.ArrowFunctionExpression,\n) {\n  if (node.async) {\n    this.word(\"async\", true);\n    this.space();\n  }\n\n  // Try to avoid printing parens in simple cases, but only if we're pretty\n  // sure that they aren't needed by type annotations or potential newlines.\n  let firstParam;\n  if (\n    !this.format.retainLines &&\n    node.params.length === 1 &&\n    isIdentifier((firstParam = node.params[0])) &&\n    !hasTypesOrComments(node, firstParam)\n  ) {\n    this.print(firstParam, node, true);\n  } else {\n    this._params(node);\n  }\n\n  this._predicate(node, true);\n  this.space();\n  // When printing (x)/*1*/=>{}, we remove the parentheses\n  // and thus there aren't two contiguous inner tokens.\n  // We forcefully print inner comments here.\n  this.printInnerComments();\n  this.token(\"=>\");\n\n  this.space();\n\n  this.print(node.body, node);\n}\n\nfunction hasTypesOrComments(\n  node: t.ArrowFunctionExpression,\n  param: t.Identifier,\n): boolean {\n  return !!(\n    node.typeParameters ||\n    node.returnType ||\n    node.predicate ||\n    param.typeAnnotation ||\n    param.optional ||\n    // Flow does not support `foo /*: string*/ => {};`\n    param.leadingComments?.length ||\n    param.trailingComments?.length\n  );\n}\n", "import type Printer from \"../printer\";\nimport {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport function ImportSpecifier(this: Printer, node: t.ImportSpecifier) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n  // @ts-expect-error todo(flow-ts) maybe check node type instead of relying on name to be undefined on t.StringLiteral\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nexport function ImportDefaultSpecifier(\n  this: Printer,\n  node: t.ImportDefaultSpecifier,\n) {\n  this.print(node.local, node);\n}\n\nexport function ExportDefaultSpecifier(\n  this: Printer,\n  node: t.ExportDefaultSpecifier,\n) {\n  this.print(node.exported, node);\n}\n\nexport function ExportSpecifier(this: Printer, node: t.ExportSpecifier) {\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.print(node.local, node);\n  // @ts-expect-error todo(flow-ts) maybe check node type instead of relying on name to be undefined on t.StringLiteral\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nexport function ExportNamespaceSpecifier(\n  this: Printer,\n  node: t.ExportNamespaceSpecifier,\n) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nexport function _printAssertions(\n  this: Printer,\n  node: Extract<t.Node, { assertions?: t.ImportAttribute[] }>,\n) {\n  this.word(\"assert\");\n  this.space();\n  this.token(\"{\");\n  this.space();\n  this.printList(node.assertions, node);\n  this.space();\n  this.token(\"}\");\n}\n\nexport function ExportAllDeclaration(\n  this: Printer,\n  node: t.ExportAllDeclaration | t.DeclareExportAllDeclaration,\n) {\n  this.word(\"export\");\n  this.space();\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  // @ts-expect-error Fixme: assertions is not defined in DeclareExportAllDeclaration\n  if (node.assertions?.length) {\n    this.print(node.source, node, true);\n    this.space();\n    // @ts-expect-error Fixme: assertions is not defined in DeclareExportAllDeclaration\n    this._printAssertions(node);\n  } else {\n    this.print(node.source, node);\n  }\n\n  this.semicolon();\n}\n\nexport function ExportNamedDeclaration(\n  this: Printer,\n  node: t.ExportNamedDeclaration,\n) {\n  if (!process.env.BABEL_8_BREAKING) {\n    if (\n      this.format.decoratorsBeforeExport &&\n      isClassDeclaration(node.declaration)\n    ) {\n      this.printJoin(node.declaration.decorators, node);\n    }\n  }\n\n  this.word(\"export\");\n  this.space();\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n\n    // print \"special\" specifiers first\n    let hasSpecial = false;\n    for (;;) {\n      const first = specifiers[0];\n      if (\n        isExportDefaultSpecifier(first) ||\n        isExportNamespaceSpecifier(first)\n      ) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || (!specifiers.length && !hasSpecial)) {\n      this.token(\"{\");\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      if (node.assertions?.length) {\n        this.print(node.source, node, true);\n        this.space();\n        this._printAssertions(node);\n      } else {\n        this.print(node.source, node);\n      }\n    }\n\n    this.semicolon();\n  }\n}\n\nexport function ExportDefaultDeclaration(\n  this: Printer,\n  node: t.ExportDefaultDeclaration,\n) {\n  if (!process.env.BABEL_8_BREAKING) {\n    if (\n      this.format.decoratorsBeforeExport &&\n      isClassDeclaration(node.declaration)\n    ) {\n      this.printJoin(node.declaration.decorators, node);\n    }\n  }\n\n  this.word(\"export\");\n  this.noIndentInnerCommentsHere();\n  this.space();\n  this.word(\"default\");\n  this.space();\n  const declar = node.declaration;\n  this.print(declar, node);\n  if (!isStatement(declar)) this.semicolon();\n}\n\nexport function ImportDeclaration(this: Printer, node: t.ImportDeclaration) {\n  this.word(\"import\");\n  this.space();\n\n  const isTypeKind = node.importKind === \"type\" || node.importKind === \"typeof\";\n  if (isTypeKind) {\n    this.noIndentInnerCommentsHere();\n    this.word(node.importKind);\n    this.space();\n  } else if (node.module) {\n    this.noIndentInnerCommentsHere();\n    this.word(\"module\");\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n  const hasSpecifiers = !!specifiers.length;\n  // print \"special\" specifiers first. The loop condition is constant,\n  // but there is a \"break\" in the body.\n  while (hasSpecifiers) {\n    const first = specifiers[0];\n    if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n      this.print(specifiers.shift(), node);\n      if (specifiers.length) {\n        this.token(\",\");\n        this.space();\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (specifiers.length) {\n    this.token(\"{\");\n    this.space();\n    this.printList(specifiers, node);\n    this.space();\n    this.token(\"}\");\n  } else if (isTypeKind && !hasSpecifiers) {\n    this.token(\"{\");\n    this.token(\"}\");\n  }\n\n  if (hasSpecifiers || isTypeKind) {\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  if (node.assertions?.length) {\n    this.print(node.source, node, true);\n    this.space();\n    this._printAssertions(node);\n  } else {\n    this.print(node.source, node);\n  }\n  if (!process.env.BABEL_8_BREAKING) {\n    // @ts-ignore(Babel 7 vs Babel 8) Babel 7 supports module attributes\n    if (node.attributes?.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      // @ts-ignore(Babel 7 vs Babel 8) Babel 7 supports module attributes\n      this.printList(node.attributes, node);\n    }\n  }\n\n  this.semicolon();\n}\n\nexport function ImportAttribute(this: Printer, node: t.ImportAttribute) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nexport function ImportNamespaceSpecifier(\n  this: Printer,\n  node: t.ImportNamespaceSpecifier,\n) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}\n", "'use strict';\n\nconst object = {};\nconst hasOwnProperty = object.hasOwnProperty;\nconst forOwn = (object, callback) => {\n\tfor (const key in object) {\n\t\tif (hasOwnProperty.call(object, key)) {\n\t\t\tcallback(key, object[key]);\n\t\t}\n\t}\n};\n\nconst extend = (destination, source) => {\n\tif (!source) {\n\t\treturn destination;\n\t}\n\tforOwn(source, (key, value) => {\n\t\tdestination[key] = value;\n\t});\n\treturn destination;\n};\n\nconst forEach = (array, callback) => {\n\tconst length = array.length;\n\tlet index = -1;\n\twhile (++index < length) {\n\t\tcallback(array[index]);\n\t}\n};\n\nconst toString = object.toString;\nconst isArray = Array.isArray;\nconst isBuffer = Buffer.isBuffer;\nconst isObject = (value) => {\n\t// This is a very simple check, but it’s good enough for what we need.\n\treturn toString.call(value) == '[object Object]';\n};\nconst isString = (value) => {\n\treturn typeof value == 'string' ||\n\t\ttoString.call(value) == '[object String]';\n};\nconst isNumber = (value) => {\n\treturn typeof value == 'number' ||\n\t\ttoString.call(value) == '[object Number]';\n};\nconst isFunction = (value) => {\n\treturn typeof value == 'function';\n};\nconst isMap = (value) => {\n\treturn toString.call(value) == '[object Map]';\n};\nconst isSet = (value) => {\n\treturn toString.call(value) == '[object Set]';\n};\n\n/*--------------------------------------------------------------------------*/\n\n// https://mathiasbynens.be/notes/javascript-escapes#single\nconst singleEscapes = {\n\t'\"': '\\\\\"',\n\t'\\'': '\\\\\\'',\n\t'\\\\': '\\\\\\\\',\n\t'\\b': '\\\\b',\n\t'\\f': '\\\\f',\n\t'\\n': '\\\\n',\n\t'\\r': '\\\\r',\n\t'\\t': '\\\\t'\n\t// `\\v` is omitted intentionally, because in IE < 9, '\\v' == 'v'.\n\t// '\\v': '\\\\x0B'\n};\nconst regexSingleEscape = /[\"'\\\\\\b\\f\\n\\r\\t]/;\n\nconst regexDigit = /[0-9]/;\nconst regexWhitelist = /[ !#-&\\(-\\[\\]-_a-~]/;\n\nconst jsesc = (argument, options) => {\n\tconst increaseIndentation = () => {\n\t\toldIndent = indent;\n\t\t++options.indentLevel;\n\t\tindent = options.indent.repeat(options.indentLevel)\n\t};\n\t// Handle options\n\tconst defaults = {\n\t\t'escapeEverything': false,\n\t\t'minimal': false,\n\t\t'isScriptContext': false,\n\t\t'quotes': 'single',\n\t\t'wrap': false,\n\t\t'es6': false,\n\t\t'json': false,\n\t\t'compact': true,\n\t\t'lowercaseHex': false,\n\t\t'numbers': 'decimal',\n\t\t'indent': '\\t',\n\t\t'indentLevel': 0,\n\t\t'__inline1__': false,\n\t\t'__inline2__': false\n\t};\n\tconst json = options && options.json;\n\tif (json) {\n\t\tdefaults.quotes = 'double';\n\t\tdefaults.wrap = true;\n\t}\n\toptions = extend(defaults, options);\n\tif (\n\t\toptions.quotes != 'single' &&\n\t\toptions.quotes != 'double' &&\n\t\toptions.quotes != 'backtick'\n\t) {\n\t\toptions.quotes = 'single';\n\t}\n\tconst quote = options.quotes == 'double' ?\n\t\t'\"' :\n\t\t(options.quotes == 'backtick' ?\n\t\t\t'`' :\n\t\t\t'\\''\n\t\t);\n\tconst compact = options.compact;\n\tconst lowercaseHex = options.lowercaseHex;\n\tlet indent = options.indent.repeat(options.indentLevel);\n\tlet oldIndent = '';\n\tconst inline1 = options.__inline1__;\n\tconst inline2 = options.__inline2__;\n\tconst newLine = compact ? '' : '\\n';\n\tlet result;\n\tlet isEmpty = true;\n\tconst useBinNumbers = options.numbers == 'binary';\n\tconst useOctNumbers = options.numbers == 'octal';\n\tconst useDecNumbers = options.numbers == 'decimal';\n\tconst useHexNumbers = options.numbers == 'hexadecimal';\n\n\tif (json && argument && isFunction(argument.toJSON)) {\n\t\targument = argument.toJSON();\n\t}\n\n\tif (!isString(argument)) {\n\t\tif (isMap(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Map()';\n\t\t\t}\n\t\t\tif (!compact) {\n\t\t\t\toptions.__inline1__ = true;\n\t\t\t\toptions.__inline2__ = false;\n\t\t\t}\n\t\t\treturn 'new Map(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isSet(argument)) {\n\t\t\tif (argument.size == 0) {\n\t\t\t\treturn 'new Set()';\n\t\t\t}\n\t\t\treturn 'new Set(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isBuffer(argument)) {\n\t\t\tif (argument.length == 0) {\n\t\t\t\treturn 'Buffer.from([])';\n\t\t\t}\n\t\t\treturn 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';\n\t\t}\n\t\tif (isArray(argument)) {\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tif (inline1) {\n\t\t\t\toptions.__inline1__ = false;\n\t\t\t\toptions.__inline2__ = true;\n\t\t\t}\n\t\t\tif (!inline2) {\n\t\t\t\tincreaseIndentation();\n\t\t\t}\n\t\t\tforEach(argument, (value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tif (inline2) {\n\t\t\t\t\toptions.__inline2__ = false;\n\t\t\t\t}\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact || inline2 ? '' : indent) +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '[]';\n\t\t\t}\n\t\t\tif (inline2) {\n\t\t\t\treturn '[' + result.join(', ') + ']';\n\t\t\t}\n\t\t\treturn '[' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + ']';\n\t\t} else if (isNumber(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// Some number values (e.g. `Infinity`) cannot be represented in JSON.\n\t\t\t\treturn JSON.stringify(argument);\n\t\t\t}\n\t\t\tif (useDecNumbers) {\n\t\t\t\treturn String(argument);\n\t\t\t}\n\t\t\tif (useHexNumbers) {\n\t\t\t\tlet hexadecimal = argument.toString(16);\n\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t}\n\t\t\t\treturn '0x' + hexadecimal;\n\t\t\t}\n\t\t\tif (useBinNumbers) {\n\t\t\t\treturn '0b' + argument.toString(2);\n\t\t\t}\n\t\t\tif (useOctNumbers) {\n\t\t\t\treturn '0o' + argument.toString(8);\n\t\t\t}\n\t\t} else if (!isObject(argument)) {\n\t\t\tif (json) {\n\t\t\t\t// For some values (e.g. `undefined`, `function` objects),\n\t\t\t\t// `JSON.stringify(value)` returns `undefined` (which isn’t valid\n\t\t\t\t// JSON) instead of `'null'`.\n\t\t\t\treturn JSON.stringify(argument) || 'null';\n\t\t\t}\n\t\t\treturn String(argument);\n\t\t} else { // it’s an object\n\t\t\tresult = [];\n\t\t\toptions.wrap = true;\n\t\t\tincreaseIndentation();\n\t\t\tforOwn(argument, (key, value) => {\n\t\t\t\tisEmpty = false;\n\t\t\t\tresult.push(\n\t\t\t\t\t(compact ? '' : indent) +\n\t\t\t\t\tjsesc(key, options) + ':' +\n\t\t\t\t\t(compact ? '' : ' ') +\n\t\t\t\t\tjsesc(value, options)\n\t\t\t\t);\n\t\t\t});\n\t\t\tif (isEmpty) {\n\t\t\t\treturn '{}';\n\t\t\t}\n\t\t\treturn '{' + newLine + result.join(',' + newLine) + newLine +\n\t\t\t\t(compact ? '' : oldIndent) + '}';\n\t\t}\n\t}\n\n\tconst string = argument;\n\t// Loop over each code unit in the string and escape it\n\tlet index = -1;\n\tconst length = string.length;\n\tresult = '';\n\twhile (++index < length) {\n\t\tconst character = string.charAt(index);\n\t\tif (options.es6) {\n\t\t\tconst first = string.charCodeAt(index);\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tlength > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tconst second = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tconst codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t\tlet hexadecimal = codePoint.toString(16);\n\t\t\t\t\tif (!lowercaseHex) {\n\t\t\t\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t\t\t\t}\n\t\t\t\t\tresult += '\\\\u{' + hexadecimal + '}';\n\t\t\t\t\t++index;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!options.escapeEverything) {\n\t\t\tif (regexWhitelist.test(character)) {\n\t\t\t\t// It’s a printable ASCII character that is not `\"`, `'` or `\\`,\n\t\t\t\t// so don’t escape it.\n\t\t\t\tresult += character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '\"') {\n\t\t\t\tresult += quote == character ? '\\\\\"' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '`') {\n\t\t\t\tresult += quote == character ? '\\\\`' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (character == '\\'') {\n\t\t\t\tresult += quote == character ? '\\\\\\'' : character;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\tcharacter == '\\0' &&\n\t\t\t!json &&\n\t\t\t!regexDigit.test(string.charAt(index + 1))\n\t\t) {\n\t\t\tresult += '\\\\0';\n\t\t\tcontinue;\n\t\t}\n\t\tif (regexSingleEscape.test(character)) {\n\t\t\t// no need for a `hasOwnProperty` check here\n\t\t\tresult += singleEscapes[character];\n\t\t\tcontinue;\n\t\t}\n\t\tconst charCode = character.charCodeAt(0);\n\t\tif (options.minimal && charCode != 0x2028 && charCode != 0x2029) {\n\t\t\tresult += character;\n\t\t\tcontinue;\n\t\t}\n\t\tlet hexadecimal = charCode.toString(16);\n\t\tif (!lowercaseHex) {\n\t\t\thexadecimal = hexadecimal.toUpperCase();\n\t\t}\n\t\tconst longhand = hexadecimal.length > 2 || json;\n\t\tconst escaped = '\\\\' + (longhand ? 'u' : 'x') +\n\t\t\t('0000' + hexadecimal).slice(longhand ? -4 : -2);\n\t\tresult += escaped;\n\t\tcontinue;\n\t}\n\tif (options.wrap) {\n\t\tresult = quote + result + quote;\n\t}\n\tif (quote == '`') {\n\t\tresult = result.replace(/\\$\\{/g, '\\\\\\$\\{');\n\t}\n\tif (options.isScriptContext) {\n\t\t// https://mathiasbynens.be/notes/etago\n\t\treturn result\n\t\t\t.replace(/<\\/(script|style)/gi, '<\\\\/$1')\n\t\t\t.replace(/<!--/g, json ? '\\\\u003C!--' : '\\\\x3C!--');\n\t}\n\treturn result;\n};\n\njsesc.version = '2.5.2';\n\nmodule.exports = jsesc;\n", "import type Printer from \"../printer\";\nimport { isAssignmentPattern, isIdentifier } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport jsesc from \"jsesc\";\n\nexport function Identifier(this: Printer, node: t.Identifier) {\n  this.word(node.name);\n}\n\nexport function ArgumentPlaceholder(this: Printer) {\n  this.token(\"?\");\n}\n\nexport function RestElement(this: Printer, node: t.RestElement) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nexport { RestElement as SpreadElement };\n\nexport function ObjectExpression(this: Printer, node: t.ObjectExpression) {\n  const props = node.properties;\n\n  this.token(\"{\");\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, { indent: true, statement: true });\n    this.space();\n  }\n\n  this.sourceWithOffset(\"end\", node.loc, 0, -1);\n\n  this.token(\"}\");\n}\n\nexport { ObjectExpression as ObjectPattern };\n\nexport function ObjectMethod(this: Printer, node: t.ObjectMethod) {\n  this.printJoin(node.decorators, node);\n  this._methodHead(node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function ObjectProperty(this: Printer, node: t.ObjectProperty) {\n  this.printJoin(node.decorators, node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`\n    if (\n      isAssignmentPattern(node.value) &&\n      isIdentifier(node.key) &&\n      // @ts-expect-error todo(flow->ts) `.name` does not exist on some types in union\n      node.key.name === node.value.left.name\n    ) {\n      this.print(node.value, node);\n      return;\n    }\n\n    this.print(node.key, node);\n\n    // shorthand!\n    if (\n      node.shorthand &&\n      isIdentifier(node.key) &&\n      isIdentifier(node.value) &&\n      node.key.name === node.value.name\n    ) {\n      return;\n    }\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nexport function ArrayExpression(this: Printer, node: t.ArrayExpression) {\n  const elems = node.elements;\n  const len = elems.length;\n\n  this.token(\"[\");\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    } else {\n      // If the array expression ends with a hole, that hole\n      // will be ignored by the interpreter, but if it ends with\n      // two (or more) holes, we need to write out two (or more)\n      // commas so that the resulting code is interpreted with\n      // both (all) of the holes.\n      this.token(\",\");\n    }\n  }\n\n  this.token(\"]\");\n}\n\nexport { ArrayExpression as ArrayPattern };\n\nexport function RecordExpression(this: Printer, node: t.RecordExpression) {\n  const props = node.properties;\n\n  let startToken;\n  let endToken;\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"{|\";\n    endToken = \"|}\";\n  } else if (\n    this.format.recordAndTupleSyntaxType !== \"hash\" &&\n    this.format.recordAndTupleSyntaxType != null\n  ) {\n    throw new Error(\n      `The \"recordAndTupleSyntaxType\" generator option must be \"bar\" or \"hash\" (${JSON.stringify(\n        this.format.recordAndTupleSyntaxType,\n      )} received).`,\n    );\n  } else {\n    startToken = \"#{\";\n    endToken = \"}\";\n  }\n\n  this.token(startToken);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, { indent: true, statement: true });\n    this.space();\n  }\n  this.token(endToken);\n}\n\nexport function TupleExpression(this: Printer, node: t.TupleExpression) {\n  const elems = node.elements;\n  const len = elems.length;\n\n  let startToken;\n  let endToken;\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"[|\";\n    endToken = \"|]\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#[\";\n    endToken = \"]\";\n  } else {\n    throw new Error(\n      `${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`,\n    );\n  }\n\n  this.token(startToken);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    }\n  }\n\n  this.token(endToken);\n}\n\nexport function RegExpLiteral(this: Printer, node: t.RegExpLiteral) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\n\nexport function BooleanLiteral(this: Printer, node: t.BooleanLiteral) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nexport function NullLiteral(this: Printer) {\n  this.word(\"null\");\n}\n\nexport function NumericLiteral(this: Printer, node: t.NumericLiteral) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value + \"\";\n  if (opts.numbers) {\n    this.number(jsesc(node.value, opts));\n  } else if (raw == null) {\n    this.number(value); // normalize\n  } else if (this.format.minified) {\n    this.number(raw.length < value.length ? raw : value);\n  } else {\n    this.number(raw);\n  }\n}\n\nexport function StringLiteral(this: Printer, node: t.StringLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const val = jsesc(\n    node.value,\n    process.env.BABEL_8_BREAKING\n      ? this.format.jsescOption\n      : Object.assign(\n          this.format.jsescOption,\n          this.format.jsonCompatibleStrings && { json: true },\n        ),\n  );\n\n  return this.token(val);\n}\n\nexport function BigIntLiteral(this: Printer, node: t.BigIntLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + \"n\");\n}\n\nexport function DecimalLiteral(this: Printer, node: t.DecimalLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.word(raw);\n    return;\n  }\n  this.word(node.value + \"m\");\n}\n\n// Hack pipe operator\nconst validTopicTokenSet = new Set([\"^^\", \"@@\", \"^\", \"%\", \"#\"]);\nexport function TopicReference(this: Printer) {\n  const { topicToken } = this.format;\n\n  if (validTopicTokenSet.has(topicToken)) {\n    this.token(topicToken);\n  } else {\n    const givenTopicTokenJSON = JSON.stringify(topicToken);\n    const validTopics = Array.from(validTopicTokenSet, v => JSON.stringify(v));\n    throw new Error(\n      `The \"topicToken\" generator option must be one of ` +\n        `${validTopics.join(\", \")} (${givenTopicTokenJSON} received instead).`,\n    );\n  }\n}\n\n// Smart-mix pipe operator\nexport function PipelineTopicExpression(\n  this: Printer,\n  node: t.PipelineTopicExpression,\n) {\n  this.print(node.expression, node);\n}\n\nexport function PipelineBareFunction(\n  this: Printer,\n  node: t.PipelineBareFunction,\n) {\n  this.print(node.callee, node);\n}\n\nexport function PipelinePrimaryTopicReference(this: Printer) {\n  this.token(\"#\");\n}\n", "import type Printer from \"../printer\";\nimport { isDeclareExportDeclaration, isStatement } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { ExportAllDeclaration } from \"./modules\";\n\nexport function AnyTypeAnnotation(this: Printer) {\n  this.word(\"any\");\n}\n\nexport function ArrayTypeAnnotation(\n  this: Printer,\n  node: t.ArrayTypeAnnotation,\n) {\n  this.print(node.elementType, node, true);\n  this.token(\"[\");\n  this.token(\"]\");\n}\n\nexport function BooleanTypeAnnotation(this: Printer) {\n  this.word(\"boolean\");\n}\n\nexport function BooleanLiteralTypeAnnotation(\n  this: Printer,\n  node: t.BooleanLiteralTypeAnnotation,\n) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nexport function NullLiteralTypeAnnotation(this: Printer) {\n  this.word(\"null\");\n}\n\nexport function DeclareClass(\n  this: Printer,\n  node: t.DeclareClass,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"class\");\n  this.space();\n  this._interfaceish(node);\n}\n\nexport function DeclareFunction(\n  this: Printer,\n  node: t.DeclareFunction,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"function\");\n  this.space();\n  this.print(node.id, node);\n  // @ts-ignore(Babel 7 vs Babel 8) TODO(Babel 8) Remove this comment, since we'll remove the Noop node\n  this.print(node.id.typeAnnotation.typeAnnotation, node);\n\n  if (node.predicate) {\n    this.space();\n    this.print(node.predicate, node);\n  }\n\n  this.semicolon();\n}\n\nexport function InferredPredicate(this: Printer) {\n  this.token(\"%\");\n  this.word(\"checks\");\n}\n\nexport function DeclaredPredicate(this: Printer, node: t.DeclaredPredicate) {\n  this.token(\"%\");\n  this.word(\"checks\");\n  this.token(\"(\");\n  this.print(node.value, node);\n  this.token(\")\");\n}\n\nexport function DeclareInterface(this: Printer, node: t.DeclareInterface) {\n  this.word(\"declare\");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\n\nexport function DeclareModule(this: Printer, node: t.DeclareModule) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.space();\n  this.print(node.id, node);\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function DeclareModuleExports(\n  this: Printer,\n  node: t.DeclareModuleExports,\n) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.token(\".\");\n  this.word(\"exports\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function DeclareTypeAlias(this: Printer, node: t.DeclareTypeAlias) {\n  this.word(\"declare\");\n  this.space();\n  this.TypeAlias(node);\n}\n\nexport function DeclareOpaqueType(\n  this: Printer,\n  node: t.DeclareOpaqueType,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.OpaqueType(node);\n}\n\nexport function DeclareVariable(\n  this: Printer,\n  node: t.DeclareVariable,\n  parent: t.Node,\n) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"var\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  this.semicolon();\n}\n\nexport function DeclareExportDeclaration(\n  this: Printer,\n  node: t.DeclareExportDeclaration,\n) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"export\");\n  this.space();\n  if (node.default) {\n    this.word(\"default\");\n    this.space();\n  }\n\n  FlowExportDeclaration.call(this, node);\n}\n\nexport function DeclareExportAllDeclaration(\n  this: Printer,\n  node: t.DeclareExportAllDeclaration,\n) {\n  this.word(\"declare\");\n  this.space();\n  ExportAllDeclaration.call(this, node);\n}\n\nexport function EnumDeclaration(this: Printer, node: t.EnumDeclaration) {\n  const { id, body } = node;\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.print(body, node);\n}\n\nfunction enumExplicitType(\n  context: Printer,\n  name: string,\n  hasExplicitType: boolean,\n) {\n  if (hasExplicitType) {\n    context.space();\n    context.word(\"of\");\n    context.space();\n    context.word(name);\n  }\n  context.space();\n}\n\nfunction enumBody(context: Printer, node: t.EnumBody) {\n  const { members } = node;\n  context.token(\"{\");\n  context.indent();\n  context.newline();\n  for (const member of members) {\n    context.print(member, node);\n    context.newline();\n  }\n  if (node.hasUnknownMembers) {\n    context.token(\"...\");\n    context.newline();\n  }\n  context.dedent();\n  context.token(\"}\");\n}\n\nexport function EnumBooleanBody(this: Printer, node: t.EnumBooleanBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"boolean\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumNumberBody(this: Printer, node: t.EnumNumberBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"number\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumStringBody(this: Printer, node: t.EnumStringBody) {\n  const { explicitType } = node;\n  enumExplicitType(this, \"string\", explicitType);\n  enumBody(this, node);\n}\n\nexport function EnumSymbolBody(this: Printer, node: t.EnumSymbolBody) {\n  enumExplicitType(this, \"symbol\", true);\n  enumBody(this, node);\n}\n\nexport function EnumDefaultedMember(\n  this: Printer,\n  node: t.EnumDefaultedMember,\n) {\n  const { id } = node;\n  this.print(id, node);\n  this.token(\",\");\n}\n\nfunction enumInitializedMember(\n  context: Printer,\n  node: t.EnumBooleanMember | t.EnumNumberMember | t.EnumStringMember,\n) {\n  const { id, init } = node;\n  context.print(id, node);\n  context.space();\n  context.token(\"=\");\n  context.space();\n  context.print(init, node);\n  context.token(\",\");\n}\n\nexport function EnumBooleanMember(this: Printer, node: t.EnumBooleanMember) {\n  enumInitializedMember(this, node);\n}\n\nexport function EnumNumberMember(this: Printer, node: t.EnumNumberMember) {\n  enumInitializedMember(this, node);\n}\n\nexport function EnumStringMember(this: Printer, node: t.EnumStringMember) {\n  enumInitializedMember(this, node);\n}\n\nfunction FlowExportDeclaration(\n  this: Printer,\n  node: t.DeclareExportDeclaration,\n) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    this.token(\"{\");\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers, node);\n      this.space();\n    }\n    this.token(\"}\");\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n    }\n\n    this.semicolon();\n  }\n}\n\nexport function ExistsTypeAnnotation(this: Printer) {\n  this.token(\"*\");\n}\n\nexport function FunctionTypeAnnotation(\n  this: Printer,\n  node: t.FunctionTypeAnnotation,\n  parent: t.Node | void,\n) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n\n  if (node.this) {\n    this.word(\"this\");\n    this.token(\":\");\n    this.space();\n    this.print(node.this.typeAnnotation, node);\n    if (node.params.length || node.rest) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n\n  this.printList(node.params, node);\n\n  if (node.rest) {\n    if (node.params.length) {\n      this.token(\",\");\n      this.space();\n    }\n    this.token(\"...\");\n    this.print(node.rest, node);\n  }\n\n  this.token(\")\");\n\n  // this node type is overloaded, not sure why but it makes it EXTREMELY annoying\n  if (\n    parent &&\n    (parent.type === \"ObjectTypeCallProperty\" ||\n      parent.type === \"ObjectTypeInternalSlot\" ||\n      parent.type === \"DeclareFunction\" ||\n      (parent.type === \"ObjectTypeProperty\" && parent.method))\n  ) {\n    this.token(\":\");\n  } else {\n    this.space();\n    this.token(\"=>\");\n  }\n\n  this.space();\n  this.print(node.returnType, node);\n}\n\nexport function FunctionTypeParam(this: Printer, node: t.FunctionTypeParam) {\n  this.print(node.name, node);\n  if (node.optional) this.token(\"?\");\n  if (node.name) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.typeAnnotation, node);\n}\n\nexport function InterfaceExtends(this: Printer, node: t.InterfaceExtends) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node, true);\n}\n\nexport {\n  InterfaceExtends as ClassImplements,\n  InterfaceExtends as GenericTypeAnnotation,\n};\n\nexport function _interfaceish(\n  this: Printer,\n  node: t.InterfaceDeclaration | t.DeclareInterface | t.DeclareClass,\n) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.extends?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n  if (node.mixins && node.mixins.length) {\n    this.space();\n    this.word(\"mixins\");\n    this.space();\n    this.printList(node.mixins, node);\n  }\n  if (node.implements && node.implements.length) {\n    this.space();\n    this.word(\"implements\");\n    this.space();\n    this.printList(node.implements, node);\n  }\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function _variance(\n  this: Printer,\n  node:\n    | t.TypeParameter\n    | t.ObjectTypeIndexer\n    | t.ObjectTypeProperty\n    | t.ClassProperty\n    | t.ClassPrivateProperty\n    | t.ClassAccessorProperty,\n) {\n  if (node.variance) {\n    if (node.variance.kind === \"plus\") {\n      this.token(\"+\");\n    } else if (node.variance.kind === \"minus\") {\n      this.token(\"-\");\n    }\n  }\n}\n\nexport function InterfaceDeclaration(\n  this: Printer,\n  node: t.InterfaceDeclaration | t.DeclareInterface,\n) {\n  this.word(\"interface\");\n  this.space();\n  this._interfaceish(node);\n}\n\nfunction andSeparator(this: Printer) {\n  this.space();\n  this.token(\"&\");\n  this.space();\n}\n\nexport function InterfaceTypeAnnotation(\n  this: Printer,\n  node: t.InterfaceTypeAnnotation,\n) {\n  this.word(\"interface\");\n  if (node.extends && node.extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n  this.space();\n  this.print(node.body, node);\n}\n\nexport function IntersectionTypeAnnotation(\n  this: Printer,\n  node: t.IntersectionTypeAnnotation,\n) {\n  this.printJoin(node.types, node, { separator: andSeparator });\n}\n\nexport function MixedTypeAnnotation(this: Printer) {\n  this.word(\"mixed\");\n}\n\nexport function EmptyTypeAnnotation(this: Printer) {\n  this.word(\"empty\");\n}\n\nexport function NullableTypeAnnotation(\n  this: Printer,\n  node: t.NullableTypeAnnotation,\n) {\n  this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport {\n  NumericLiteral as NumberLiteralTypeAnnotation,\n  StringLiteral as StringLiteralTypeAnnotation,\n} from \"./types\";\n\nexport function NumberTypeAnnotation(this: Printer) {\n  this.word(\"number\");\n}\n\nexport function StringTypeAnnotation(this: Printer) {\n  this.word(\"string\");\n}\n\nexport function ThisTypeAnnotation(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function TupleTypeAnnotation(\n  this: Printer,\n  node: t.TupleTypeAnnotation,\n) {\n  this.token(\"[\");\n  this.printList(node.types, node);\n  this.token(\"]\");\n}\n\nexport function TypeofTypeAnnotation(\n  this: Printer,\n  node: t.TypeofTypeAnnotation,\n) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.argument, node);\n}\n\nexport function TypeAlias(\n  this: Printer,\n  node: t.TypeAlias | t.DeclareTypeAlias,\n) {\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n  this.semicolon();\n}\n\nexport function TypeAnnotation(this: Printer, node: t.TypeAnnotation) {\n  this.token(\":\");\n  this.space();\n  // @ts-expect-error todo(flow->ts) can this be removed? `.optional` looks to be not existing property\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TypeParameterInstantiation(\n  this: Printer,\n  node: t.TypeParameterInstantiation,\n): void {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nexport { TypeParameterInstantiation as TypeParameterDeclaration };\n\nexport function TypeParameter(this: Printer, node: t.TypeParameter) {\n  this._variance(node);\n\n  this.word(node.name);\n\n  if (node.bound) {\n    this.print(node.bound, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nexport function OpaqueType(\n  this: Printer,\n  node: t.OpaqueType | t.DeclareOpaqueType,\n) {\n  this.word(\"opaque\");\n  this.space();\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  if (node.supertype) {\n    this.token(\":\");\n    this.space();\n    this.print(node.supertype, node);\n  }\n\n  if (node.impltype) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.impltype, node);\n  }\n  this.semicolon();\n}\n\nexport function ObjectTypeAnnotation(\n  this: Printer,\n  node: t.ObjectTypeAnnotation,\n) {\n  if (node.exact) {\n    this.token(\"{|\");\n  } else {\n    this.token(\"{\");\n  }\n\n  // TODO: remove the array fallbacks and instead enforce the types to require an array\n  const props = [\n    ...node.properties,\n    ...(node.callProperties || []),\n    ...(node.indexers || []),\n    ...(node.internalSlots || []),\n  ];\n\n  if (props.length) {\n    this.newline();\n\n    this.space();\n\n    this.printJoin(props, node, {\n      addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n      indent: true,\n      statement: true,\n      iterator: () => {\n        if (props.length !== 1 || node.inexact) {\n          this.token(\",\");\n          this.space();\n        }\n      },\n    });\n\n    this.space();\n  }\n\n  if (node.inexact) {\n    this.indent();\n    this.token(\"...\");\n    if (props.length) {\n      this.newline();\n    }\n    this.dedent();\n  }\n\n  if (node.exact) {\n    this.token(\"|}\");\n  } else {\n    this.token(\"}\");\n  }\n}\n\nexport function ObjectTypeInternalSlot(\n  this: Printer,\n  node: t.ObjectTypeInternalSlot,\n) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.token(\"[\");\n  this.token(\"[\");\n  this.print(node.id, node);\n  this.token(\"]\");\n  this.token(\"]\");\n  if (node.optional) this.token(\"?\");\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeCallProperty(\n  this: Printer,\n  node: t.ObjectTypeCallProperty,\n) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeIndexer(this: Printer, node: t.ObjectTypeIndexer) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  this._variance(node);\n  this.token(\"[\");\n  if (node.id) {\n    this.print(node.id, node);\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.key, node);\n  this.token(\"]\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeProperty(this: Printer, node: t.ObjectTypeProperty) {\n  if (node.proto) {\n    this.word(\"proto\");\n    this.space();\n  }\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (node.kind === \"get\" || node.kind === \"set\") {\n    this.word(node.kind);\n    this.space();\n  }\n  this._variance(node);\n  this.print(node.key, node);\n  if (node.optional) this.token(\"?\");\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n  this.print(node.value, node);\n}\n\nexport function ObjectTypeSpreadProperty(\n  this: Printer,\n  node: t.ObjectTypeSpreadProperty,\n) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nexport function QualifiedTypeIdentifier(\n  this: Printer,\n  node: t.QualifiedTypeIdentifier,\n) {\n  this.print(node.qualification, node);\n  this.token(\".\");\n  this.print(node.id, node);\n}\n\nexport function SymbolTypeAnnotation(this: Printer) {\n  this.word(\"symbol\");\n}\n\nfunction orSeparator(this: Printer) {\n  this.space();\n  this.token(\"|\");\n  this.space();\n}\n\nexport function UnionTypeAnnotation(\n  this: Printer,\n  node: t.UnionTypeAnnotation,\n) {\n  this.printJoin(node.types, node, { separator: orSeparator });\n}\n\nexport function TypeCastExpression(this: Printer, node: t.TypeCastExpression) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nexport function Variance(this: Printer, node: t.Variance) {\n  if (node.kind === \"plus\") {\n    this.token(\"+\");\n  } else {\n    this.token(\"-\");\n  }\n}\n\nexport function VoidTypeAnnotation(this: Printer) {\n  this.word(\"void\");\n}\n\nexport function IndexedAccessType(this: Printer, node: t.IndexedAccessType) {\n  this.print(node.objectType, node, true);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nexport function OptionalIndexedAccessType(\n  this: Printer,\n  node: t.OptionalIndexedAccessType,\n) {\n  this.print(node.objectType, node);\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n", "import type Printer from \"../printer\";\nimport type * as t from \"@babel/types\";\n\nexport function File(this: Printer, node: t.File) {\n  if (node.program) {\n    // Print this here to ensure that Program node 'leadingComments' still\n    // get printed after the hashbang.\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nexport function Program(this: Printer, node: t.Program) {\n  // An empty Program doesn't have any inner tokens, so\n  // we must explicitly print its inner comments.\n  this.noIndentInnerCommentsHere();\n  this.printInnerComments();\n\n  const directivesLen = node.directives?.length;\n  if (directivesLen) {\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, node, {\n      trailingCommentsLineOffset: newline,\n    });\n    if (!node.directives[directivesLen - 1].trailingComments?.length) {\n      this.newline(newline);\n    }\n  }\n\n  this.printSequence(node.body, node);\n}\n\nexport function BlockStatement(this: Printer, node: t.BlockStatement) {\n  this.token(\"{\");\n\n  const directivesLen = node.directives?.length;\n  if (directivesLen) {\n    const newline = node.body.length ? 2 : 1;\n    this.printSequence(node.directives, node, {\n      indent: true,\n      trailingCommentsLineOffset: newline,\n    });\n    if (!node.directives[directivesLen - 1].trailingComments?.length) {\n      this.newline(newline);\n    }\n  }\n\n  this.printSequence(node.body, node, { indent: true });\n\n  this.sourceWithOffset(\"end\", node.loc, 0, -1);\n\n  this.rightBrace();\n}\n\nexport function Directive(this: Printer, node: t.Directive) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\n// These regexes match an even number of \\ followed by a quote\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nexport function DirectiveLiteral(this: Printer, node: t.DirectiveLiteral) {\n  const raw = this.getPossibleRaw(node);\n  if (!this.format.minified && raw !== undefined) {\n    this.token(raw);\n    return;\n  }\n\n  const { value } = node;\n\n  // NOTE: In directives we can't change escapings,\n  // because they change the behavior.\n  // e.g. \"us\\x65 strict\" (\\x65 is e) is not a \"use strict\" directive.\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\n      \"Malformed AST: it is not possible to print a directive containing\" +\n        \" both unescaped single and double quotes.\",\n    );\n  }\n}\n\nexport function InterpreterDirective(\n  this: Printer,\n  node: t.InterpreterDirective,\n) {\n  this.token(`#!${node.value}`);\n  this.newline(1, true);\n}\n\nexport function Placeholder(this: Printer, node: t.Placeholder) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}\n", "import type Printer from \"../printer\";\nimport type * as t from \"@babel/types\";\n\nexport function JSXAttribute(this: Printer, node: t.JSXAttribute) {\n  this.print(node.name, node);\n  if (node.value) {\n    this.token(\"=\");\n    this.print(node.value, node);\n  }\n}\n\nexport function JSXIdentifier(this: Printer, node: t.JSXIdentifier) {\n  this.word(node.name);\n}\n\nexport function JSXNamespacedName(this: Printer, node: t.JSXNamespacedName) {\n  this.print(node.namespace, node);\n  this.token(\":\");\n  this.print(node.name, node);\n}\n\nexport function JSXMemberExpression(\n  this: Printer,\n  node: t.JSXMemberExpression,\n) {\n  this.print(node.object, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nexport function JSXSpreadAttribute(this: Printer, node: t.JSXSpreadAttribute) {\n  this.token(\"{\");\n  this.token(\"...\");\n  this.print(node.argument, node);\n  this.token(\"}\");\n}\n\nexport function JSXExpressionContainer(\n  this: Printer,\n  node: t.JSXExpressionContainer,\n) {\n  this.token(\"{\");\n  this.print(node.expression, node);\n  this.token(\"}\");\n}\n\nexport function JSXSpreadChild(this: Printer, node: t.JSXSpreadChild) {\n  this.token(\"{\");\n  this.token(\"...\");\n  this.print(node.expression, node);\n  this.token(\"}\");\n}\n\nexport function JSXText(this: Printer, node: t.JSXText) {\n  const raw = this.getPossibleRaw(node);\n\n  if (raw !== undefined) {\n    this.token(raw, true);\n  } else {\n    this.token(node.value, true);\n  }\n}\n\nexport function JSXElement(this: Printer, node: t.JSXElement) {\n  const open = node.openingElement;\n  this.print(open, node);\n  if (open.selfClosing) return;\n\n  this.indent();\n  for (const child of node.children) {\n    this.print(child, node);\n  }\n  this.dedent();\n\n  this.print(node.closingElement, node);\n}\n\nfunction spaceSeparator(this: Printer) {\n  this.space();\n}\n\nexport function JSXOpeningElement(this: Printer, node: t.JSXOpeningElement) {\n  this.token(\"<\");\n  this.print(node.name, node);\n  this.print(node.typeParameters, node); // TS\n  if (node.attributes.length > 0) {\n    this.space();\n    this.printJoin(node.attributes, node, { separator: spaceSeparator });\n  }\n  if (node.selfClosing) {\n    this.space();\n    this.token(\"/>\");\n  } else {\n    this.token(\">\");\n  }\n}\n\nexport function JSXClosingElement(this: Printer, node: t.JSXClosingElement) {\n  this.token(\"</\");\n  this.print(node.name, node);\n  this.token(\">\");\n}\n\nexport function JSXEmptyExpression(this: Printer) {\n  // This node is empty, so forcefully print its inner comments.\n  this.printInnerComments();\n}\n\nexport function JSXFragment(this: Printer, node: t.JSXFragment) {\n  this.print(node.openingFragment, node);\n\n  this.indent();\n  for (const child of node.children) {\n    this.print(child, node);\n  }\n  this.dedent();\n\n  this.print(node.closingFragment, node);\n}\n\nexport function JSXOpeningFragment(this: Printer) {\n  this.token(\"<\");\n  this.token(\">\");\n}\n\nexport function JSXClosingFragment(this: Printer) {\n  this.token(\"</\");\n  this.token(\">\");\n}\n", "import type Printer from \"../printer\";\nimport type * as t from \"@babel/types\";\n\nexport function TSTypeAnnotation(this: Printer, node: t.TSTypeAnnotation) {\n  this.token(\":\");\n  this.space();\n  // @ts-expect-error todo(flow->ts) can this be removed? `.optional` looks to be not existing property\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSTypeParameterInstantiation(\n  this: Printer,\n  node: t.TSTypeParameterInstantiation,\n  parent: t.Node,\n): void {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  if (parent.type === \"ArrowFunctionExpression\" && node.params.length === 1) {\n    this.token(\",\");\n  }\n  this.token(\">\");\n}\n\nexport { TSTypeParameterInstantiation as TSTypeParameterDeclaration };\n\nexport function TSTypeParameter(this: Printer, node: t.TSTypeParameter) {\n  if (node.in) {\n    this.word(\"in\");\n    this.space();\n  }\n\n  if (node.out) {\n    this.word(\"out\");\n    this.space();\n  }\n\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (node.name as unknown as string)\n      : (node.name as unknown as t.Identifier).name,\n  );\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nexport function TSParameterProperty(\n  this: Printer,\n  node: t.TSParameterProperty,\n) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nexport function TSDeclareFunction(this: Printer, node: t.TSDeclareFunction) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this._functionHead(node);\n  this.token(\";\");\n}\n\nexport function TSDeclareMethod(this: Printer, node: t.TSDeclareMethod) {\n  this._classMethodHead(node);\n  this.token(\";\");\n}\n\nexport function TSQualifiedName(this: Printer, node: t.TSQualifiedName) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nexport function TSCallSignatureDeclaration(\n  this: Printer,\n  node: t.TSCallSignatureDeclaration,\n) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSConstructSignatureDeclaration(\n  this: Printer,\n  node: t.TSConstructSignatureDeclaration,\n) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSPropertySignature(\n  this: Printer,\n  node: t.TSPropertySignature,\n) {\n  const { readonly, initializer } = node;\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n  this.token(\";\");\n}\n\nexport function tsPrintPropertyOrMethodName(\n  this: Printer,\n  node: t.TSPropertySignature | t.TSMethodSignature,\n) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n  this.print(node.key, node);\n  if (node.computed) {\n    this.token(\"]\");\n  }\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nexport function TSMethodSignature(this: Printer, node: t.TSMethodSignature) {\n  const { kind } = node;\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nexport function TSIndexSignature(this: Printer, node: t.TSIndexSignature) {\n  const { readonly, static: isStatic } = node;\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n  this.token(\"[\");\n  this._parameters(node.parameters, node);\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nexport function TSAnyKeyword(this: Printer) {\n  this.word(\"any\");\n}\nexport function TSBigIntKeyword(this: Printer) {\n  this.word(\"bigint\");\n}\nexport function TSUnknownKeyword(this: Printer) {\n  this.word(\"unknown\");\n}\nexport function TSNumberKeyword(this: Printer) {\n  this.word(\"number\");\n}\nexport function TSObjectKeyword(this: Printer) {\n  this.word(\"object\");\n}\nexport function TSBooleanKeyword(this: Printer) {\n  this.word(\"boolean\");\n}\nexport function TSStringKeyword(this: Printer) {\n  this.word(\"string\");\n}\nexport function TSSymbolKeyword(this: Printer) {\n  this.word(\"symbol\");\n}\nexport function TSVoidKeyword(this: Printer) {\n  this.word(\"void\");\n}\nexport function TSUndefinedKeyword(this: Printer) {\n  this.word(\"undefined\");\n}\nexport function TSNullKeyword(this: Printer) {\n  this.word(\"null\");\n}\nexport function TSNeverKeyword(this: Printer) {\n  this.word(\"never\");\n}\nexport function TSIntrinsicKeyword(this: Printer) {\n  this.word(\"intrinsic\");\n}\n\nexport function TSThisType(this: Printer) {\n  this.word(\"this\");\n}\n\nexport function TSFunctionType(this: Printer, node: t.TSFunctionType) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function TSConstructorType(this: Printer, node: t.TSConstructorType) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nexport function tsPrintFunctionOrConstructorType(\n  this: Printer,\n  node: t.TSFunctionType | t.TSConstructorType,\n) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.params\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  const returnType = process.env.BABEL_8_BREAKING\n    ? // @ts-ignore(Babel 7 vs Babel 8) Babel 8 AST shape\n      node.returnType\n    : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST shape\n      node.typeAnnotation;\n  this.print(returnType.typeAnnotation, node);\n}\n\nexport function TSTypeReference(this: Printer, node: t.TSTypeReference) {\n  this.print(node.typeName, node, true);\n  this.print(node.typeParameters, node, true);\n}\n\nexport function TSTypePredicate(this: Printer, node: t.TSTypePredicate) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n  this.print(node.parameterName);\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nexport function TSTypeQuery(this: Printer, node: t.TSTypeQuery) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n\n  if (node.typeParameters) {\n    this.print(node.typeParameters, node);\n  }\n}\n\nexport function TSTypeLiteral(this: Printer, node: t.TSTypeLiteral) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nexport function tsPrintTypeLiteralOrInterfaceBody(\n  this: Printer,\n  members: t.TSTypeElement[],\n  node: t.TSType | t.TSInterfaceBody,\n) {\n  tsPrintBraced(this, members, node);\n}\n\nfunction tsPrintBraced(printer: Printer, members: t.Node[], node: t.Node) {\n  printer.token(\"{\");\n  if (members.length) {\n    printer.indent();\n    printer.newline();\n    for (const member of members) {\n      printer.print(member, node);\n      //this.token(sep);\n      printer.newline();\n    }\n    printer.dedent();\n  }\n\n  printer.sourceWithOffset(\"end\", node.loc, 0, -1);\n\n  printer.rightBrace();\n}\n\nexport function TSArrayType(this: Printer, node: t.TSArrayType) {\n  this.print(node.elementType, node, true);\n\n  this.token(\"[]\");\n}\n\nexport function TSTupleType(this: Printer, node: t.TSTupleType) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nexport function TSOptionalType(this: Printer, node: t.TSOptionalType) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nexport function TSRestType(this: Printer, node: t.TSRestType) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSNamedTupleMember(this: Printer, node: t.TSNamedTupleMember) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nexport function TSUnionType(this: Printer, node: t.TSUnionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"|\");\n}\n\nexport function TSIntersectionType(this: Printer, node: t.TSIntersectionType) {\n  tsPrintUnionOrIntersectionType(this, node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(\n  printer: Printer,\n  node: t.TSUnionType | t.TSIntersectionType,\n  sep: \"|\" | \"&\",\n) {\n  printer.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    },\n  });\n}\n\nexport function TSConditionalType(this: Printer, node: t.TSConditionalType) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nexport function TSInferType(this: Printer, node: t.TSInferType) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nexport function TSParenthesizedType(\n  this: Printer,\n  node: t.TSParenthesizedType,\n) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nexport function TSTypeOperator(this: Printer, node: t.TSTypeOperator) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nexport function TSIndexedAccessType(\n  this: Printer,\n  node: t.TSIndexedAccessType,\n) {\n  this.print(node.objectType, node, true);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nexport function TSMappedType(this: Printer, node: t.TSMappedType) {\n  const { nameType, optional, readonly, typeParameter } = node;\n  this.token(\"{\");\n  this.space();\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(\n    !process.env.BABEL_8_BREAKING\n      ? (typeParameter.name as unknown as string)\n      : (typeParameter.name as unknown as t.Identifier).name,\n  );\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self: Printer, tok: true | \"+\" | \"-\") {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nexport function TSLiteralType(this: Printer, node: t.TSLiteralType) {\n  this.print(node.literal, node);\n}\n\nexport function TSExpressionWithTypeArguments(\n  this: Printer,\n  node: t.TSExpressionWithTypeArguments,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSInterfaceDeclaration(\n  this: Printer,\n  node: t.TSInterfaceDeclaration,\n) {\n  const { declare, id, typeParameters, extends: extendz, body } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  if (extendz?.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSInterfaceBody(this: Printer, node: t.TSInterfaceBody) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nexport function TSTypeAliasDeclaration(\n  this: Printer,\n  node: t.TSTypeAliasDeclaration,\n) {\n  const { declare, id, typeParameters, typeAnnotation } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSTypeExpression(\n  this: Printer,\n  node: t.TSAsExpression | t.TSSatisfiesExpression,\n) {\n  const { type, expression, typeAnnotation } = node;\n  const forceParens = !!expression.trailingComments?.length;\n  this.print(expression, node, true, undefined, forceParens);\n  this.space();\n  this.word(type === \"TSAsExpression\" ? \"as\" : \"satisfies\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nexport {\n  TSTypeExpression as TSAsExpression,\n  TSTypeExpression as TSSatisfiesExpression,\n};\n\nexport function TSTypeAssertion(this: Printer, node: t.TSTypeAssertion) {\n  const { typeAnnotation, expression } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nexport function TSInstantiationExpression(\n  this: Printer,\n  node: t.TSInstantiationExpression,\n) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nexport function TSEnumDeclaration(this: Printer, node: t.TSEnumDeclaration) {\n  const { declare, const: isConst, id, members } = node;\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  tsPrintBraced(this, members, node);\n}\n\nexport function TSEnumMember(this: Printer, node: t.TSEnumMember) {\n  const { id, initializer } = node;\n  this.print(id, node);\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n  this.token(\",\");\n}\n\nexport function TSModuleDeclaration(\n  this: Printer,\n  node: t.TSModuleDeclaration,\n) {\n  const { declare, id } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nexport function TSModuleBlock(this: Printer, node: t.TSModuleBlock) {\n  tsPrintBraced(this, node.body, node);\n}\n\nexport function TSImportType(this: Printer, node: t.TSImportType) {\n  const { argument, qualifier, typeParameters } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nexport function TSImportEqualsDeclaration(\n  this: Printer,\n  node: t.TSImportEqualsDeclaration,\n) {\n  const { isExport, id, moduleReference } = node;\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nexport function TSExternalModuleReference(\n  this: Printer,\n  node: t.TSExternalModuleReference,\n) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nexport function TSNonNullExpression(\n  this: Printer,\n  node: t.TSNonNullExpression,\n) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nexport function TSExportAssignment(this: Printer, node: t.TSExportAssignment) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nexport function TSNamespaceExportDeclaration(\n  this: Printer,\n  node: t.TSNamespaceExportDeclaration,\n) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nexport function tsPrintSignatureDeclarationBase(this: Printer, node: any) {\n  const { typeParameters } = node;\n  const parameters = process.env.BABEL_8_BREAKING\n    ? node.params\n    : node.parameters;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n  this._parameters(parameters, node);\n  this.token(\")\");\n  const returnType = process.env.BABEL_8_BREAKING\n    ? node.returnType\n    : node.typeAnnotation;\n  this.print(returnType, node);\n}\n\nexport function tsPrintClassMemberModifiers(\n  this: Printer,\n  node:\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.ClassMethod\n    | t.ClassPrivateMethod\n    | t.TSDeclareMethod,\n) {\n  const isField =\n    node.type === \"ClassAccessorProperty\" || node.type === \"ClassProperty\";\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}\n", "export * from \"./template-literals\";\nexport * from \"./expressions\";\nexport * from \"./statements\";\nexport * from \"./classes\";\nexport * from \"./methods\";\nexport * from \"./modules\";\nexport * from \"./types\";\nexport * from \"./flow\";\nexport * from \"./base\";\nexport * from \"./jsx\";\nexport * from \"./typescript\";\n", "import Buffer from \"./buffer\";\nimport type { Loc } from \"./buffer\";\nimport * as n from \"./node\";\nimport type * as t from \"@babel/types\";\nimport {\n  isFunction,\n  isStatement,\n  isClassBody,\n  isTSInterfaceBody,\n  isTSEnumDeclaration,\n} from \"@babel/types\";\nimport type {\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"@babel/parser\";\nimport type { Opts as jsescOptions } from \"jsesc\";\n\nimport * as generatorFunctions from \"./generators\";\nimport type SourceMap from \"./source-map\";\nimport * as charCodes from \"charcodes\";\n\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst NON_DECIMAL_LITERAL = /^0[box]/;\nconst PURE_ANNOTATION_RE = /^\\s*[@#]__PURE__\\s*$/;\nconst HAS_NEWLINE = /[\\n\\r\\u2028\\u2029]/;\nconst HAS_BlOCK_COMMENT_END = /\\*\\//;\n\nconst { needsParens } = n;\n\nconst enum COMMENT_TYPE {\n  LEADING,\n  INNER,\n  TRAILING,\n}\n\nconst enum COMMENT_SKIP_NEWLINE {\n  DEFAULT,\n  ALL,\n  LEADING,\n  TRAILING,\n}\n\nconst enum PRINT_COMMENT_HINT {\n  SKIP,\n  ALLOW,\n  DEFER,\n}\n\nexport type Format = {\n  shouldPrintComment: (comment: string) => boolean;\n  retainLines: boolean;\n  retainFunctionParens: boolean;\n  comments: boolean;\n  auxiliaryCommentBefore: string;\n  auxiliaryCommentAfter: string;\n  compact: boolean | \"auto\";\n  minified: boolean;\n  concise: boolean;\n  indent: {\n    adjustMultilineComment: boolean;\n    style: string;\n  };\n  recordAndTupleSyntaxType: RecordAndTuplePluginOptions[\"syntaxType\"];\n  jsescOption: jsescOptions;\n  jsonCompatibleStrings?: boolean;\n  /**\n   * For use with the Hack-style pipe operator.\n   * Changes what token is used for pipe bodies’ topic references.\n   */\n  topicToken?: PipelineOperatorPluginOptions[\"topicToken\"];\n  /**\n   * @deprecated Removed in Babel 8\n   */\n  decoratorsBeforeExport?: boolean;\n};\n\ninterface AddNewlinesOptions {\n  addNewlines(leading: boolean, node: t.Node): number;\n  nextNodeStartLine: number;\n}\n\ninterface PrintSequenceOptions extends Partial<AddNewlinesOptions> {\n  statement?: boolean;\n  indent?: boolean;\n  trailingCommentsLineOffset?: number;\n}\n\ninterface PrintListOptions {\n  separator?: (this: Printer) => void;\n  iterator?: (node: t.Node, index: number) => void;\n  statement?: boolean;\n  indent?: boolean;\n}\n\nexport type PrintJoinOptions = PrintListOptions & PrintSequenceOptions;\nclass Printer {\n  constructor(format: Format, map: SourceMap) {\n    this.format = format;\n    this._buf = new Buffer(map);\n\n    this._indentChar = format.indent.style.charCodeAt(0);\n    this._indentRepeat = format.indent.style.length;\n  }\n\n  declare format: Format;\n  inForStatementInitCounter: number = 0;\n\n  declare _buf: Buffer;\n  _printStack: Array<t.Node> = [];\n  _indent: number = 0;\n  _indentChar: number = 0;\n  _indentRepeat: number = 0;\n  _insideAux: boolean = false;\n  _parenPushNewlineState: { printed: boolean } | null = null;\n  _noLineTerminator: boolean = false;\n  _printAuxAfterOnNextUserNode: boolean = false;\n  _printedComments = new Set<t.Comment>();\n  _endsWithInteger = false;\n  _endsWithWord = false;\n  _lastCommentLine = 0;\n  _endsWithInnerRaw: boolean = false;\n  _indentInnerComments: boolean = true;\n\n  generate(ast: t.Node) {\n    this.print(ast);\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  /**\n   * Increment indent size.\n   */\n\n  indent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent++;\n  }\n\n  /**\n   * Decrement indent size.\n   */\n\n  dedent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent--;\n  }\n\n  /**\n   * Add a semicolon to the buffer.\n   */\n\n  semicolon(force: boolean = false): void {\n    this._maybeAddAuxComment();\n    if (force) {\n      this._appendChar(charCodes.semicolon);\n    } else {\n      this._queue(charCodes.semicolon);\n    }\n    this._noLineTerminator = false;\n  }\n\n  /**\n   * Add a right brace to the buffer.\n   */\n\n  rightBrace(): void {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n    this.token(\"}\");\n  }\n\n  /**\n   * Add a space to the buffer unless it is compact.\n   */\n\n  space(force: boolean = false): void {\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n      if (lastCp !== charCodes.space && lastCp !== charCodes.lineFeed) {\n        this._space();\n      }\n    }\n  }\n\n  /**\n   * Writes a token that can't be safely parsed without taking whitespace into account.\n   */\n\n  word(str: string, noLineTerminatorAfter: boolean = false): void {\n    this._maybePrintInnerComments();\n\n    // prevent concatenating words and creating // comment out of division and regex\n    if (\n      this._endsWithWord ||\n      (str.charCodeAt(0) === charCodes.slash && this.endsWith(charCodes.slash))\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, false);\n\n    this._endsWithWord = true;\n    this._noLineTerminator = noLineTerminatorAfter;\n  }\n\n  /**\n   * Writes a number token so that we can validate if it is an integer.\n   */\n\n  number(str: string): void {\n    this.word(str);\n\n    // Integer tokens need special handling because they cannot have '.'s inserted\n    // immediately after them.\n    this._endsWithInteger =\n      Number.isInteger(+str) &&\n      !NON_DECIMAL_LITERAL.test(str) &&\n      !SCIENTIFIC_NOTATION.test(str) &&\n      !ZERO_DECIMAL_INTEGER.test(str) &&\n      str.charCodeAt(str.length - 1) !== charCodes.dot;\n  }\n\n  /**\n   * Writes a simple token.\n   */\n\n  token(str: string, maybeNewline = false): void {\n    this._maybePrintInnerComments();\n\n    // space is mandatory to avoid outputting <!--\n    // http://javascript.spec.whatwg.org/#comment-syntax\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n    if (\n      (lastChar === charCodes.exclamationMark && str === \"--\") ||\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (strFirst === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (strFirst === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (strFirst === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, maybeNewline);\n    this._noLineTerminator = false;\n  }\n\n  tokenChar(char: number): void {\n    this._maybePrintInnerComments();\n\n    // space is mandatory to avoid outputting <!--\n    // http://javascript.spec.whatwg.org/#comment-syntax\n    const lastChar = this.getLastChar();\n    if (\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (char === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (char === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (char === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._appendChar(char);\n    this._noLineTerminator = false;\n  }\n\n  /**\n   * Add a newline (or many newlines), maintaining formatting.\n   * This function checks the number of newlines in the queue and subtracts them.\n   * It currently has some limitations.\n   * @see {Buffer#getNewlineCount}\n   */\n  newline(i: number = 1, force?: boolean): void {\n    if (i <= 0) return;\n\n    if (!force) {\n      if (this.format.retainLines || this.format.compact) return;\n\n      if (this.format.concise) {\n        this.space();\n        return;\n      }\n    }\n\n    if (i > 2) i = 2; // Max two lines\n\n    i -= this._buf.getNewlineCount();\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n\n    return;\n  }\n\n  endsWith(char: number): boolean {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar(): number {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline(): number {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline(): void {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    if (!loc) return cb();\n\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    if (!loc) return;\n\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    lineOffset: number,\n    columnOffset: number,\n  ): void {\n    if (!loc) return;\n\n    this._catchUp(prop, loc);\n\n    this._buf.sourceWithOffset(prop, loc, lineOffset, columnOffset);\n  }\n\n  withSource(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    cb: () => void,\n  ): void {\n    if (!loc) return cb();\n\n    this._catchUp(prop, loc);\n\n    this._buf.withSource(prop, loc, cb);\n  }\n\n  _space(): void {\n    this._queue(charCodes.space);\n  }\n\n  _newline(): void {\n    this._queue(charCodes.lineFeed);\n  }\n\n  _append(str: string, maybeNewline: boolean): void {\n    this._maybeAddParen(str);\n    this._maybeIndent(str.charCodeAt(0));\n\n    this._buf.append(str, maybeNewline);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _appendChar(char: number): void {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.appendChar(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _queue(char: number) {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.queue(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(firstChar: number): void {\n    // we've got a newline before us so prepend on the indentation\n    if (\n      this._indent &&\n      firstChar !== charCodes.lineFeed &&\n      this.endsWith(charCodes.lineFeed)\n    ) {\n      this._buf.queueIndentation(this._indentChar, this._getIndent());\n    }\n  }\n\n  _shouldIndent(firstChar: number) {\n    // we've got a newline before us so prepend on the indentation\n    if (\n      this._indent &&\n      firstChar !== charCodes.lineFeed &&\n      this.endsWith(charCodes.lineFeed)\n    ) {\n      return true;\n    }\n  }\n\n  _maybeAddParenChar(char: number): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    if (char === charCodes.space) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    if (char !== charCodes.lineFeed) {\n      this._parenPushNewlineState = null;\n      return;\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _maybeAddParen(str: string): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    const len = str.length;\n\n    let i;\n    for (i = 0; i < len && str.charCodeAt(i) === charCodes.space; i++) continue;\n    if (i === len) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    const cha = str.charCodeAt(i);\n    if (cha !== charCodes.lineFeed) {\n      if (\n        // This is not a comment (it doesn't start with /)\n        cha !== charCodes.slash ||\n        // This is not a comment (it's a / operator)\n        i + 1 === len\n      ) {\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str.charCodeAt(i + 1);\n\n      if (chaPost === charCodes.asterisk) {\n        // This is a block comment\n\n        if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2))) {\n          // We avoid printing newlines after #__PURE__ comments (we treat\n          // then as unary operators), but we must keep the old\n          // parenPushNewlineState because, if a newline was forbidden, it is\n          // still forbidden after the comment.\n          return;\n        }\n\n        // NOTE: code flow continues from here to after these if/elses\n      } else if (chaPost !== charCodes.slash) {\n        // This is neither a block comment, nor a line comment.\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  catchUp(line: number) {\n    if (!this.format.retainLines) return;\n\n    // catch up to this nodes newline if we're behind\n    const count = line - this._buf.getCurrentLine();\n\n    for (let i = 0; i < count; i++) {\n      this._newline();\n    }\n  }\n\n  _catchUp(prop: \"start\" | \"end\", loc?: Loc) {\n    if (!this.format.retainLines) return;\n\n    // catch up to this nodes newline if we're behind\n    const pos = loc ? loc[prop] : null;\n    if (pos?.line != null) {\n      const count = pos.line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  /**\n   * Get the current indent.\n   */\n\n  _getIndent(): number {\n    return this._indentRepeat * this._indent;\n  }\n\n  printTerminatorless(node: t.Node, parent: t.Node, isLabel: boolean) {\n    /**\n     * Set some state that will be modified if a newline has been inserted before any\n     * non-space characters.\n     *\n     * This is to prevent breaking semantics for terminatorless separator nodes. eg:\n     *\n     *   return foo;\n     *\n     * returns `foo`. But if we do:\n     *\n     *   return\n     *   foo;\n     *\n     *  `undefined` will be returned and not `foo` due to the terminator.\n     */\n    if (isLabel) {\n      this._noLineTerminator = true;\n      this.print(node, parent);\n    } else {\n      const terminatorState = {\n        printed: false,\n      };\n      this._parenPushNewlineState = terminatorState;\n      this.print(node, parent);\n      /**\n       * Print an ending parentheses if a starting one has been printed.\n       */\n      if (terminatorState.printed) {\n        this.dedent();\n        this.newline();\n        this.token(\")\");\n      }\n    }\n  }\n\n  print(\n    node: t.Node | null,\n    parent?: t.Node,\n    noLineTerminatorAfter?: boolean,\n    // trailingCommentsLineOffset also used to check if called from printJoin\n    // it will be ignored if `noLineTerminatorAfter||this._noLineTerminator`\n    trailingCommentsLineOffset?: number,\n    forceParens?: boolean,\n  ) {\n    if (!node) return;\n\n    this._endsWithInnerRaw = false;\n\n    const nodeType = node.type;\n    const format = this.format;\n\n    const oldConcise = format.concise;\n    if (\n      // @ts-expect-error document _compact AST properties\n      node._compact\n    ) {\n      format.concise = true;\n    }\n\n    const printMethod =\n      this[\n        nodeType as Exclude<\n          t.Node[\"type\"],\n          // removed\n          | \"Noop\"\n          // renamed\n          | t.DeprecatedAliases[\"type\"]\n        >\n      ];\n    if (printMethod === undefined) {\n      throw new ReferenceError(\n        `unknown node of type ${JSON.stringify(\n          nodeType,\n        )} with constructor ${JSON.stringify(node.constructor.name)}`,\n      );\n    }\n\n    this._printStack.push(node);\n\n    const oldInAux = this._insideAux;\n    this._insideAux = node.loc == undefined;\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    let shouldPrintParens = false;\n    if (forceParens) {\n      shouldPrintParens = true;\n    } else if (\n      format.retainFunctionParens &&\n      nodeType === \"FunctionExpression\" &&\n      node.extra &&\n      node.extra.parenthesized\n    ) {\n      shouldPrintParens = true;\n    } else {\n      shouldPrintParens = needsParens(node, parent, this._printStack);\n    }\n    if (shouldPrintParens) {\n      this.token(\"(\");\n      this._endsWithInnerRaw = false;\n    }\n\n    this._lastCommentLine = 0;\n\n    this._printLeadingComments(node, parent);\n\n    const loc = nodeType === \"Program\" || nodeType === \"File\" ? null : node.loc;\n\n    this.exactSource(loc, printMethod.bind(this, node, parent));\n\n    if (shouldPrintParens) {\n      this._printTrailingComments(node, parent);\n      this.token(\")\");\n      this._noLineTerminator = noLineTerminatorAfter;\n    } else if (noLineTerminatorAfter && !this._noLineTerminator) {\n      this._noLineTerminator = true;\n      this._printTrailingComments(node, parent);\n    } else {\n      this._printTrailingComments(node, parent, trailingCommentsLineOffset);\n    }\n\n    // end\n    this._printStack.pop();\n\n    format.concise = oldConcise;\n    this._insideAux = oldInAux;\n\n    this._endsWithInnerRaw = false;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode?: boolean) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n\n    const comment = this.format.auxiliaryCommentBefore;\n    if (comment) {\n      this._printComment(\n        {\n          type: \"CommentBlock\",\n          value: comment,\n        },\n        COMMENT_SKIP_NEWLINE.DEFAULT,\n      );\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n\n    const comment = this.format.auxiliaryCommentAfter;\n    if (comment) {\n      this._printComment(\n        {\n          type: \"CommentBlock\",\n          value: comment,\n        },\n        COMMENT_SKIP_NEWLINE.DEFAULT,\n      );\n    }\n  }\n\n  getPossibleRaw(\n    node:\n      | t.StringLiteral\n      | t.NumericLiteral\n      | t.BigIntLiteral\n      | t.DecimalLiteral\n      | t.DirectiveLiteral\n      | t.JSXText,\n  ): string | undefined {\n    const extra = node.extra;\n    if (\n      extra &&\n      extra.raw != null &&\n      extra.rawValue != null &&\n      node.value === extra.rawValue\n    ) {\n      // @ts-expect-error: The extra.raw of these AST node types must be a string\n      return extra.raw;\n    }\n  }\n\n  printJoin(\n    nodes: Array<t.Node> | undefined | null,\n    parent: t.Node,\n    opts: PrintJoinOptions = {},\n  ) {\n    if (!nodes?.length) return;\n\n    if (opts.indent) this.indent();\n\n    const newlineOpts: AddNewlinesOptions = {\n      addNewlines: opts.addNewlines,\n      nextNodeStartLine: 0,\n    };\n\n    const separator = opts.separator ? opts.separator.bind(this) : null;\n\n    const len = nodes.length;\n    for (let i = 0; i < len; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n\n      if (opts.statement) this._printNewline(i === 0, newlineOpts);\n\n      this.print(node, parent, undefined, opts.trailingCommentsLineOffset || 0);\n\n      opts.iterator?.(node, i);\n\n      if (i < len - 1) separator?.();\n\n      if (opts.statement) {\n        if (i + 1 === len) {\n          this.newline(1);\n        } else {\n          const nextNode = nodes[i + 1];\n          newlineOpts.nextNodeStartLine = nextNode.loc?.start.line || 0;\n\n          this._printNewline(true, newlineOpts);\n        }\n      }\n    }\n\n    if (opts.indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node: t.Node, parent: t.Node) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent: Extract<t.Node, { body: t.Statement }>) {\n    const node = parent.body;\n\n    if (node.type !== \"EmptyStatement\") {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node: t.Node, parent?: t.Node, lineOffset?: number) {\n    const { innerComments, trailingComments } = node;\n    // We print inner comments here, so that if for some reason they couldn't\n    // be printed in earlier locations they are still printed *somehwere*,\n    // even if at the end of the node.\n    if (innerComments?.length) {\n      this._printComments(\n        COMMENT_TYPE.TRAILING,\n        innerComments,\n        node,\n        parent,\n        lineOffset,\n      );\n    }\n    if (trailingComments?.length) {\n      this._printComments(\n        COMMENT_TYPE.TRAILING,\n        trailingComments,\n        node,\n        parent,\n        lineOffset,\n      );\n    }\n  }\n\n  _printLeadingComments(node: t.Node, parent: t.Node) {\n    const comments = node.leadingComments;\n    if (!comments?.length) return;\n    this._printComments(COMMENT_TYPE.LEADING, comments, node, parent);\n  }\n\n  _maybePrintInnerComments() {\n    if (this._endsWithInnerRaw) this.printInnerComments();\n    this._endsWithInnerRaw = true;\n    this._indentInnerComments = true;\n  }\n\n  printInnerComments() {\n    const node = this._printStack[this._printStack.length - 1];\n    const comments = node.innerComments;\n    if (!comments?.length) return;\n\n    const hasSpace = this.endsWith(charCodes.space);\n    const indent = this._indentInnerComments;\n    const printedCommentsCount = this._printedComments.size;\n    if (indent) this.indent();\n    this._printComments(COMMENT_TYPE.INNER, comments, node);\n    if (hasSpace && printedCommentsCount !== this._printedComments.size) {\n      this.space();\n    }\n    if (indent) this.dedent();\n  }\n\n  noIndentInnerCommentsHere() {\n    this._indentInnerComments = false;\n  }\n\n  printSequence(\n    nodes: t.Node[],\n    parent: t.Node,\n    opts: PrintSequenceOptions = {},\n  ) {\n    opts.statement = true;\n    return this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items: t.Node[], parent: t.Node, opts: PrintListOptions = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    return this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(newLine: boolean, opts: AddNewlinesOptions) {\n    // Fast path since 'this.newline' does nothing when not tracking lines.\n    if (this.format.retainLines || this.format.compact) return;\n\n    // Fast path for concise since 'this.newline' just inserts a space when\n    // concise formatting is in use.\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    if (!newLine) {\n      return;\n    }\n\n    const startLine = opts.nextNodeStartLine;\n    const lastCommentLine = this._lastCommentLine;\n    if (startLine > 0 && lastCommentLine > 0) {\n      const offset = startLine - lastCommentLine;\n      if (offset >= 0) {\n        this.newline(offset || 1);\n        return;\n      }\n    }\n\n    // don't add newlines at the beginning of the file\n    if (this._buf.hasContent()) {\n      // Here is the logic of the original line wrapping according to the node layout, we are not using it now.\n      // We currently add at most one newline to each node in the list, ignoring `opts.addNewlines`.\n\n      // let lines = 0;\n      // if (!leading) lines++; // always include at least a single line after\n      // if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n\n      // const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      // if (needs(node, parent)) lines++;\n\n      // this.newline(Math.min(2, lines));\n\n      this.newline(1);\n    }\n  }\n\n  // Returns `PRINT_COMMENT_HINT.DEFER` if the comment cannot be printed in this position due to\n  // line terminators, signaling that the print comments loop can stop and\n  // resume printing comments at the next possible position. This happens when\n  // printing inner comments, since if we have an inner comment with a multiline\n  // there is at least one inner position where line terminators are allowed.\n  _shouldPrintComment(comment: t.Comment): PRINT_COMMENT_HINT {\n    // Some plugins (such as flow-strip-types) use this to mark comments as removed using the AST-root 'comments' property,\n    // where they can't manually mutate the AST node comment lists.\n    if (comment.ignore) return PRINT_COMMENT_HINT.SKIP;\n\n    if (this._printedComments.has(comment)) return PRINT_COMMENT_HINT.SKIP;\n\n    if (\n      this._noLineTerminator &&\n      (HAS_NEWLINE.test(comment.value) ||\n        HAS_BlOCK_COMMENT_END.test(comment.value))\n    ) {\n      return PRINT_COMMENT_HINT.DEFER;\n    }\n\n    this._printedComments.add(comment);\n\n    if (!this.format.shouldPrintComment(comment.value)) {\n      return PRINT_COMMENT_HINT.SKIP;\n    }\n\n    return PRINT_COMMENT_HINT.ALLOW;\n  }\n\n  _printComment(comment: t.Comment, skipNewLines: COMMENT_SKIP_NEWLINE) {\n    const noLineTerminator = this._noLineTerminator;\n    const isBlockComment = comment.type === \"CommentBlock\";\n\n    // Add a newline before and after a block comment, unless explicitly\n    // disallowed\n    const printNewLines =\n      isBlockComment &&\n      skipNewLines !== COMMENT_SKIP_NEWLINE.ALL &&\n      !this._noLineTerminator;\n\n    if (\n      printNewLines &&\n      this._buf.hasContent() &&\n      skipNewLines !== COMMENT_SKIP_NEWLINE.LEADING\n    ) {\n      this.newline(1);\n    }\n\n    const lastCharCode = this.getLastChar();\n    if (\n      lastCharCode !== charCodes.leftSquareBracket &&\n      lastCharCode !== charCodes.leftCurlyBrace\n    ) {\n      this.space();\n    }\n\n    let val;\n    if (isBlockComment) {\n      val = `/*${comment.value}*/`;\n      if (this.format.indent.adjustMultilineComment) {\n        const offset = comment.loc?.start.column;\n        if (offset) {\n          const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n          val = val.replace(newlineRegex, \"\\n\");\n        }\n\n        let indentSize = this.format.retainLines\n          ? 0\n          : this._buf.getCurrentColumn();\n\n        if (this._shouldIndent(charCodes.slash) || this.format.retainLines) {\n          indentSize += this._getIndent();\n        }\n\n        val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n      }\n    } else if (!noLineTerminator) {\n      val = `//${comment.value}`;\n    } else {\n      // It was a single-line comment, so it's guaranteed to not\n      // contain newlines and it can be safely printed as a block\n      // comment.\n      val = `/*${comment.value}*/`;\n    }\n\n    // Avoid creating //* comments\n    if (this.endsWith(charCodes.slash)) this._space();\n\n    this.source(\"start\", comment.loc);\n    this._append(val, isBlockComment);\n\n    if (!isBlockComment && !noLineTerminator) {\n      this.newline(1, true);\n    }\n\n    if (printNewLines && skipNewLines !== COMMENT_SKIP_NEWLINE.TRAILING) {\n      this.newline(1);\n    }\n  }\n\n  _printComments(\n    type: COMMENT_TYPE,\n    comments: readonly t.Comment[],\n    node: t.Node,\n    parent?: t.Node,\n    lineOffset: number = 0,\n  ) {\n    const nodeLoc = node.loc;\n    const len = comments.length;\n    let hasLoc = !!nodeLoc;\n    const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;\n    const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;\n    let lastLine = 0;\n    let leadingCommentNewline = 0;\n\n    const maybeNewline = this._noLineTerminator\n      ? function () {}\n      : this.newline.bind(this);\n\n    for (let i = 0; i < len; i++) {\n      const comment = comments[i];\n\n      const shouldPrint = this._shouldPrintComment(comment);\n      if (shouldPrint === PRINT_COMMENT_HINT.DEFER) {\n        hasLoc = false;\n        break;\n      }\n      if (hasLoc && comment.loc && shouldPrint === PRINT_COMMENT_HINT.ALLOW) {\n        const commentStartLine = comment.loc.start.line;\n        const commentEndLine = comment.loc.end.line;\n        if (type === COMMENT_TYPE.LEADING) {\n          let offset = 0;\n          if (i === 0) {\n            // Because currently we cannot handle blank lines before leading comments,\n            // we always wrap before and after multi-line comments.\n            if (\n              this._buf.hasContent() &&\n              (comment.type === \"CommentLine\" ||\n                commentStartLine != commentEndLine)\n            ) {\n              offset = leadingCommentNewline = 1;\n            }\n          } else {\n            offset = commentStartLine - lastLine;\n          }\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n\n          if (i + 1 === len) {\n            maybeNewline(\n              Math.max(nodeStartLine - lastLine, leadingCommentNewline),\n            );\n            lastLine = nodeStartLine;\n          }\n        } else if (type === COMMENT_TYPE.INNER) {\n          const offset =\n            commentStartLine - (i === 0 ? nodeStartLine : lastLine);\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n\n          if (i + 1 === len) {\n            maybeNewline(Math.min(1, nodeEndLine - lastLine)); // TODO: Improve here when inner comments processing is stronger\n            lastLine = nodeEndLine;\n          }\n        } else {\n          const offset =\n            commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);\n          lastLine = commentEndLine;\n\n          maybeNewline(offset);\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n        }\n      } else {\n        hasLoc = false;\n        if (shouldPrint !== PRINT_COMMENT_HINT.ALLOW) {\n          continue;\n        }\n\n        if (len === 1) {\n          const singleLine = comment.loc\n            ? comment.loc.start.line === comment.loc.end.line\n            : !HAS_NEWLINE.test(comment.value);\n\n          const shouldSkipNewline =\n            singleLine &&\n            !isStatement(node) &&\n            !isClassBody(parent) &&\n            !isTSInterfaceBody(parent) &&\n            !isTSEnumDeclaration(parent);\n\n          if (type === COMMENT_TYPE.LEADING) {\n            this._printComment(\n              comment,\n              (shouldSkipNewline && node.type !== \"ObjectExpression\") ||\n                (singleLine && isFunction(parent, { body: node }))\n                ? COMMENT_SKIP_NEWLINE.ALL\n                : COMMENT_SKIP_NEWLINE.DEFAULT,\n            );\n          } else if (shouldSkipNewline && type === COMMENT_TYPE.TRAILING) {\n            this._printComment(comment, COMMENT_SKIP_NEWLINE.ALL);\n          } else {\n            this._printComment(comment, COMMENT_SKIP_NEWLINE.DEFAULT);\n          }\n        } else if (\n          type === COMMENT_TYPE.INNER &&\n          !(node.type === \"ObjectExpression\" && node.properties.length > 1) &&\n          node.type !== \"ClassBody\" &&\n          node.type !== \"TSInterfaceBody\"\n        ) {\n          // class X {\n          //   /*:: a: number*/\n          //   /*:: b: ?string*/\n          // }\n\n          this._printComment(\n            comment,\n            i === 0\n              ? COMMENT_SKIP_NEWLINE.LEADING\n              : i === len - 1\n              ? COMMENT_SKIP_NEWLINE.TRAILING\n              : COMMENT_SKIP_NEWLINE.DEFAULT,\n          );\n        } else {\n          this._printComment(comment, COMMENT_SKIP_NEWLINE.DEFAULT);\n        }\n      }\n    }\n\n    if (type === COMMENT_TYPE.TRAILING && hasLoc && lastLine) {\n      this._lastCommentLine = lastLine;\n    }\n  }\n}\n\n// Expose the node type functions and helpers on the prototype for easy usage.\nObject.assign(Printer.prototype, generatorFunctions);\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-ignore(Babel 7 vs Babel 8) Babel 7 has Noop print method\n  Printer.prototype.Noop = function Noop(this: Printer) {};\n}\n\ntype GeneratorFunctions = typeof generatorFunctions;\ninterface Printer extends GeneratorFunctions {}\nexport default Printer;\n\nfunction commaSeparator(this: Printer) {\n  this.token(\",\");\n  this.space();\n}\n", "import SourceMap from \"./source-map\";\nimport Printer from \"./printer\";\nimport type * as t from \"@babel/types\";\nimport type { Opts as jsescOptions } from \"jsesc\";\nimport type { Format } from \"./printer\";\nimport type {\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"@babel/parser\";\nimport type { DecodedSourceMap, Mapping } from \"@jridgewell/gen-mapping\";\n\n/**\n * Babel's code generator, turns an ast into code, maintaining sourcemaps,\n * user preferences, and valid output.\n */\n\nclass Generator extends Printer {\n  constructor(\n    ast: t.Node,\n    opts: GeneratorOptions = {},\n    code: string | { [filename: string]: string },\n  ) {\n    const format = normalizeOptions(code, opts);\n    const map = opts.sourceMaps ? new SourceMap(opts, code) : null;\n    super(format, map);\n\n    this.ast = ast;\n  }\n\n  ast: t.Node;\n\n  /**\n   * Generate code and sourcemap from ast.\n   *\n   * Appends comments that weren't attached to any node to the end of the generated output.\n   */\n\n  generate() {\n    return super.generate(this.ast);\n  }\n}\n\n/**\n * Normalize generator options, setting defaults.\n *\n * - Detects code indentation.\n * - If `opts.compact = \"auto\"` and the code is over 500KB, `compact` will be set to `true`.\n */\n\nfunction normalizeOptions(\n  code: string | { [filename: string]: string },\n  opts: GeneratorOptions,\n): Format {\n  const format: Format = {\n    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n    shouldPrintComment: opts.shouldPrintComment,\n    retainLines: opts.retainLines,\n    retainFunctionParens: opts.retainFunctionParens,\n    comments: opts.comments == null || opts.comments,\n    compact: opts.compact,\n    minified: opts.minified,\n    concise: opts.concise,\n    indent: {\n      adjustMultilineComment: true,\n      style: \"  \",\n    },\n    jsescOption: {\n      quotes: \"double\",\n      wrap: true,\n      minimal: process.env.BABEL_8_BREAKING ? true : false,\n      ...opts.jsescOption,\n    },\n    recordAndTupleSyntaxType: opts.recordAndTupleSyntaxType,\n    topicToken: opts.topicToken,\n  };\n\n  if (!process.env.BABEL_8_BREAKING) {\n    format.decoratorsBeforeExport = !!opts.decoratorsBeforeExport;\n    format.jsonCompatibleStrings = opts.jsonCompatibleStrings;\n  }\n\n  if (format.minified) {\n    format.compact = true;\n\n    format.shouldPrintComment =\n      format.shouldPrintComment || (() => format.comments);\n  } else {\n    format.shouldPrintComment =\n      format.shouldPrintComment ||\n      (value =>\n        format.comments ||\n        value.includes(\"@license\") ||\n        value.includes(\"@preserve\"));\n  }\n\n  if (format.compact === \"auto\") {\n    format.compact = code.length > 500_000; // 500KB\n\n    if (format.compact) {\n      console.error(\n        \"[BABEL] Note: The code generator has deoptimised the styling of \" +\n          `${opts.filename} as it exceeds the max of ${\"500KB\"}.`,\n      );\n    }\n  }\n\n  if (format.compact) {\n    format.indent.adjustMultilineComment = false;\n  }\n\n  const { auxiliaryCommentBefore, auxiliaryCommentAfter, shouldPrintComment } =\n    format;\n\n  if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {\n    format.auxiliaryCommentBefore = undefined;\n  }\n  if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {\n    format.auxiliaryCommentAfter = undefined;\n  }\n\n  return format;\n}\n\nexport interface GeneratorOptions {\n  /**\n   * Optional string to add as a block comment at the start of the output file.\n   */\n  auxiliaryCommentBefore?: string;\n\n  /**\n   * Optional string to add as a block comment at the end of the output file.\n   */\n  auxiliaryCommentAfter?: string;\n\n  /**\n   * Function that takes a comment (as a string) and returns true if the comment should be included in the output.\n   * By default, comments are included if `opts.comments` is `true` or if `opts.minifed` is `false` and the comment\n   * contains `@preserve` or `@license`.\n   */\n  shouldPrintComment?(comment: string): boolean;\n\n  /**\n   * Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces).\n   * Defaults to `false`.\n   */\n  retainLines?: boolean;\n\n  /**\n   * Retain parens around function expressions (could be used to change engine parsing behavior)\n   * Defaults to `false`.\n   */\n  retainFunctionParens?: boolean;\n\n  /**\n   * Should comments be included in output? Defaults to `true`.\n   */\n  comments?: boolean;\n\n  /**\n   * Set to true to avoid adding whitespace for formatting. Defaults to the value of `opts.minified`.\n   */\n  compact?: boolean | \"auto\";\n\n  /**\n   * Should the output be minified. Defaults to `false`.\n   */\n  minified?: boolean;\n\n  /**\n   * Set to true to reduce whitespace (but not as much as opts.compact). Defaults to `false`.\n   */\n  concise?: boolean;\n\n  /**\n   * Used in warning messages\n   */\n  filename?: string;\n\n  /**\n   * Enable generating source maps. Defaults to `false`.\n   */\n  sourceMaps?: boolean;\n\n  /**\n   * A root for all relative URLs in the source map.\n   */\n  sourceRoot?: string;\n\n  /**\n   * The filename for the source code (i.e. the code in the `code` argument).\n   * This will only be used if `code` is a string.\n   */\n  sourceFileName?: string;\n\n  /**\n   * Set to true to run jsesc with \"json\": true to print \"\\u00A9\" vs. \"©\";\n   * @deprecated use `jsescOptions: { json: true }` instead\n   */\n  jsonCompatibleStrings?: boolean;\n\n  /**\n   * Set to true to enable support for experimental decorators syntax before module exports.\n   * Defaults to `false`.\n   * @deprecated Removed in Babel 8\n   */\n  decoratorsBeforeExport?: boolean;\n\n  /**\n   * Options for outputting jsesc representation.\n   */\n  jsescOption?: jsescOptions;\n\n  /**\n   * For use with the recordAndTuple token.\n   */\n  recordAndTupleSyntaxType?: RecordAndTuplePluginOptions[\"syntaxType\"];\n  /**\n   * For use with the Hack-style pipe operator.\n   * Changes what token is used for pipe bodies’ topic references.\n   */\n  topicToken?: PipelineOperatorPluginOptions[\"topicToken\"];\n}\n\nexport interface GeneratorResult {\n  code: string;\n  map: {\n    version: number;\n    sources: readonly string[];\n    names: readonly string[];\n    sourceRoot?: string;\n    sourcesContent?: readonly string[];\n    mappings: string;\n    file?: string;\n  } | null;\n  decodedMap: DecodedSourceMap | undefined;\n  rawMappings: Mapping[] | undefined;\n}\n\n/**\n * We originally exported the Generator class above, but to make it extra clear that it is a private API,\n * we have moved that to an internal class instance and simplified the interface to the two public methods\n * that we wish to support.\n */\n\nexport class CodeGenerator {\n  private _generator: Generator;\n  constructor(ast: t.Node, opts?: GeneratorOptions, code?: string) {\n    this._generator = new Generator(ast, opts, code);\n  }\n  generate(): GeneratorResult {\n    return this._generator.generate();\n  }\n}\n\n/**\n * Turns an AST into code, maintaining sourcemaps, user preferences, and valid output.\n * @param ast - the abstract syntax tree from which to generate output code.\n * @param opts - used for specifying options for code generation.\n * @param code - the original source code, used for source maps.\n * @returns - an object containing the output code and source map.\n */\nexport default function generate(\n  ast: t.Node,\n  opts?: GeneratorOptions,\n  code?: string | { [filename: string]: string },\n) {\n  const gen = new Generator(ast, opts, code);\n  return gen.generate();\n}\n", "// This file contains that retrieve or validate anything related to the current paths ancestry.\n\nimport { VISITOR_KEYS } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type NodePath from \"./index\";\n\n/**\n * Starting at the parent path of the current `NodePath` and going up the\n * tree, return the first `NodePath` that causes the provided `callback`\n * to return a truthy value, or `null` if the `callback` never returns a\n * truthy value.\n */\n\nexport function findParent(\n  this: NodePath,\n  callback: (path: NodePath) => boolean,\n): NodePath | null {\n  let path = this;\n  while ((path = path.parentPath)) {\n    if (callback(path)) return path;\n  }\n  return null;\n}\n\n/**\n * Starting at current `NodePath` and going up the tree, return the first\n * `NodePath` that causes the provided `callback` to return a truthy value,\n * or `null` if the `callback` never returns a truthy value.\n */\n\nexport function find(\n  this: NodePath,\n  callback: (path: NodePath) => boolean,\n): NodePath | null {\n  let path = this;\n  do {\n    if (callback(path)) return path;\n  } while ((path = path.parentPath));\n  return null;\n}\n\n/**\n * Get the parent function of the current path.\n */\n\nexport function getFunctionParent(this: NodePath): NodePath<t.Function> | null {\n  return this.findParent(p => p.isFunction()) as NodePath<t.Function> | null;\n}\n\n/**\n * Walk up the tree until we hit a parent node path in a list.\n */\n\nexport function getStatementParent(this: NodePath): NodePath<t.Statement> {\n  let path = this;\n\n  do {\n    if (\n      !path.parentPath ||\n      (Array.isArray(path.container) && path.isStatement())\n    ) {\n      break;\n    } else {\n      path = path.parentPath;\n    }\n  } while (path);\n\n  if (path && (path.isProgram() || path.isFile())) {\n    throw new Error(\n      \"File/Program node, we can't possibly find a statement parent to this\",\n    );\n  }\n\n  return path as NodePath<t.Statement>;\n}\n\n/**\n * Get the deepest common ancestor and then from it, get the earliest relationship path\n * to that ancestor.\n *\n * Earliest is defined as being \"before\" all the other nodes in terms of list container\n * position and visiting key.\n */\n\nexport function getEarliestCommonAncestorFrom(\n  this: NodePath,\n  paths: Array<NodePath>,\n): NodePath {\n  return this.getDeepestCommonAncestorFrom(\n    paths,\n    function (deepest, i, ancestries) {\n      let earliest;\n      const keys = VISITOR_KEYS[deepest.type];\n\n      for (const ancestry of ancestries) {\n        const path = ancestry[i + 1];\n\n        // first path\n        if (!earliest) {\n          earliest = path;\n          continue;\n        }\n\n        // handle containers\n        if (path.listKey && earliest.listKey === path.listKey) {\n          // we're in the same container so check if we're earlier\n          if (path.key < earliest.key) {\n            earliest = path;\n            continue;\n          }\n        }\n\n        // handle keys\n        const earliestKeyIndex = keys.indexOf(earliest.parentKey);\n        const currentKeyIndex = keys.indexOf(path.parentKey as string);\n        if (earliestKeyIndex > currentKeyIndex) {\n          // key appears before so it's earlier\n          earliest = path;\n        }\n      }\n\n      return earliest;\n    },\n  );\n}\n\n/**\n * Get the earliest path in the tree where the provided `paths` intersect.\n *\n * TODO: Possible optimisation target.\n */\n\nexport function getDeepestCommonAncestorFrom(\n  this: NodePath,\n  paths: Array<NodePath>,\n  filter?: (deepest: NodePath, i: number, ancestries: NodePath[][]) => NodePath,\n): NodePath {\n  if (!paths.length) {\n    return this;\n  }\n\n  if (paths.length === 1) {\n    return paths[0];\n  }\n\n  // minimum depth of the tree so we know the highest node\n  let minDepth = Infinity;\n\n  // last common ancestor\n  let lastCommonIndex, lastCommon;\n\n  // get the ancestors of the path, breaking when the parent exceeds ourselves\n  const ancestries = paths.map(path => {\n    const ancestry: NodePath[] = [];\n\n    do {\n      ancestry.unshift(path);\n    } while ((path = path.parentPath) && path !== this);\n\n    // save min depth to avoid going too far in\n    if (ancestry.length < minDepth) {\n      minDepth = ancestry.length;\n    }\n\n    return ancestry;\n  });\n\n  // get the first ancestry so we have a seed to assess all other ancestries with\n  const first = ancestries[0];\n\n  // check ancestor equality\n  depthLoop: for (let i = 0; i < minDepth; i++) {\n    const shouldMatch = first[i];\n\n    for (const ancestry of ancestries) {\n      if (ancestry[i] !== shouldMatch) {\n        // we've hit a snag\n        break depthLoop;\n      }\n    }\n\n    // next iteration may break so store these so they can be returned\n    lastCommonIndex = i;\n    lastCommon = shouldMatch;\n  }\n\n  if (lastCommon) {\n    if (filter) {\n      return filter(lastCommon, lastCommonIndex, ancestries);\n    } else {\n      return lastCommon;\n    }\n  } else {\n    throw new Error(\"Couldn't find intersection\");\n  }\n}\n\n/**\n * Build an array of node paths containing the entire ancestry of the current node path.\n *\n * NOTE: The current node path is included in this.\n */\n\nexport function getAncestry(this: NodePath): Array<NodePath> {\n  let path = this;\n  const paths = [];\n  do {\n    paths.push(path);\n  } while ((path = path.parentPath));\n  return paths;\n}\n\n/**\n * A helper to find if `this` path is an ancestor of @param maybeDescendant\n */\nexport function isAncestor(this: NodePath, maybeDescendant: NodePath): boolean {\n  return maybeDescendant.isDescendant(this);\n}\n\n/**\n * A helper to find if `this` path is a descendant of @param maybeAncestor\n */\nexport function isDescendant(this: NodePath, maybeAncestor: NodePath): boolean {\n  return !!this.findParent(parent => parent === maybeAncestor);\n}\n\nexport function inType(this: NodePath, ...candidateTypes: string[]): boolean {\n  let path = this;\n  while (path) {\n    for (const type of candidateTypes) {\n      if (path.node.type === type) return true;\n    }\n    path = path.parentPath;\n  }\n\n  return false;\n}\n", "import {\n  createFlowUnionType,\n  createTSUnionType,\n  createUnionTypeAnnotation,\n  isFlowType,\n  isTSType,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport function createUnionType(\n  types: Array<t.FlowType | t.TSType>,\n): t.FlowType | t.TSType {\n  if (process.env.BABEL_8_BREAKING) {\n    if (isFlowType(types[0])) {\n      return createFlowUnionType(types as t.FlowType[]);\n    }\n    if (isTSType(types[0])) {\n      return createTSUnionType(types as t.TSType[]);\n    }\n  } else {\n    if (isFlowType(types[0])) {\n      if (createFlowUnionType) {\n        return createFlowUnionType(types as t.FlowType[]);\n      }\n\n      return createUnionTypeAnnotation(types as t.FlowType[]);\n    } else {\n      if (createTSUnionType) {\n        return createTSUnionType(types as t.TSType[]);\n      }\n    }\n  }\n}\n", "import type NodePath from \"../index\";\nimport {\n  BOOLEAN_NUMBER_BINARY_OPERATORS,\n  createTypeAnnotationBasedOnTypeof,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Binding from \"../../scope/binding\";\n\nimport { createUnionType } from \"./util\";\n\nexport default function (this: NodePath<t.Identifier>, node: t.Identifier) {\n  if (!this.isReferenced()) return;\n\n  // check if a binding exists of this value and if so then return a union type of all\n  // possible types that the binding could be\n  const binding = this.scope.getBinding(node.name);\n  if (binding) {\n    if (binding.identifier.typeAnnotation) {\n      return binding.identifier.typeAnnotation;\n    } else {\n      return getTypeAnnotationBindingConstantViolations(\n        binding,\n        this,\n        node.name,\n      );\n    }\n  }\n\n  // built-in values\n  if (node.name === \"undefined\") {\n    return voidTypeAnnotation();\n  } else if (node.name === \"NaN\" || node.name === \"Infinity\") {\n    return numberTypeAnnotation();\n  } else if (node.name === \"arguments\") {\n    // todo\n  }\n}\n\nfunction getTypeAnnotationBindingConstantViolations(\n  binding: Binding,\n  path: NodePath<t.Identifier>,\n  name: string,\n) {\n  const types = [];\n\n  const functionConstantViolations: NodePath[] = [];\n  let constantViolations = getConstantViolationsBefore(\n    binding,\n    path,\n    functionConstantViolations,\n  );\n\n  const testType = getConditionalAnnotation(binding, path, name);\n  if (testType) {\n    const testConstantViolations = getConstantViolationsBefore(\n      binding,\n      testType.ifStatement,\n    );\n\n    // remove constant violations observed before the IfStatement\n    constantViolations = constantViolations.filter(\n      path => testConstantViolations.indexOf(path) < 0,\n    );\n\n    // clear current types and add in observed test type\n    types.push(testType.typeAnnotation);\n  }\n\n  if (constantViolations.length) {\n    // pick one constant from each scope which will represent the last possible\n    // control flow path that it could've taken/been\n    /* This code is broken for the following problems:\n     * It thinks that assignments can only happen in scopes.\n     * What about conditionals, if statements without block,\n     * or guarded assignments.\n     * It also checks to see if one of the assignments is in the\n     * same scope and uses that as the only \"violation\". However,\n     * the binding is returned by `getConstantViolationsBefore` so we for\n     * sure always going to return that as the only \"violation\".\n    let rawConstantViolations = constantViolations.reverse();\n    let visitedScopes = [];\n    constantViolations = [];\n    for (let violation of (rawConstantViolations: Array<NodePath>)) {\n      let violationScope = violation.scope;\n      if (visitedScopes.indexOf(violationScope) >= 0) continue;\n\n      visitedScopes.push(violationScope);\n      constantViolations.push(violation);\n\n      if (violationScope === path.scope) {\n        constantViolations = [violation];\n        break;\n      }\n    }*/\n\n    // add back on function constant violations since we can't track calls\n    constantViolations.push(...functionConstantViolations);\n\n    // push on inferred types of violated paths\n    for (const violation of constantViolations) {\n      types.push(violation.getTypeAnnotation());\n    }\n  }\n\n  if (!types.length) {\n    return;\n  }\n\n  return createUnionType(types);\n}\n\nfunction getConstantViolationsBefore(\n  binding: Binding,\n  path: NodePath,\n  functions?: NodePath[],\n) {\n  const violations = binding.constantViolations.slice();\n  violations.unshift(binding.path);\n  return violations.filter(violation => {\n    violation = violation.resolve();\n    const status = violation._guessExecutionStatusRelativeTo(path);\n    if (functions && status === \"unknown\") functions.push(violation);\n    return status === \"before\";\n  });\n}\n\nfunction inferAnnotationFromBinaryExpression(\n  name: string,\n  path: NodePath<t.BinaryExpression>,\n) {\n  const operator = path.node.operator;\n\n  const right = path.get(\"right\").resolve();\n  const left = path.get(\"left\").resolve();\n\n  let target;\n  if (left.isIdentifier({ name })) {\n    target = right;\n  } else if (right.isIdentifier({ name })) {\n    target = left;\n  }\n\n  if (target) {\n    if (operator === \"===\") {\n      return target.getTypeAnnotation();\n    }\n    if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n      return numberTypeAnnotation();\n    }\n\n    return;\n  }\n\n  if (operator !== \"===\" && operator !== \"==\") return;\n\n  //\n  let typeofPath: NodePath<t.UnaryExpression>;\n  let typePath: NodePath<t.Expression>;\n  if (left.isUnaryExpression({ operator: \"typeof\" })) {\n    typeofPath = left;\n    typePath = right as NodePath<t.Expression>;\n  } else if (right.isUnaryExpression({ operator: \"typeof\" })) {\n    typeofPath = right;\n    typePath = left as NodePath<t.Expression>;\n  }\n\n  if (!typeofPath) return;\n  // and that the argument of the typeof path references us!\n  if (!typeofPath.get(\"argument\").isIdentifier({ name })) return;\n\n  // ensure that the type path is a Literal\n  typePath = typePath.resolve() as NodePath<t.Expression>;\n  if (!typePath.isLiteral()) return;\n\n  // and that it's a string so we can infer it\n  // @ts-expect-error todo(flow->ts): value is not defined for NullLiteral and some other\n  const typeValue = typePath.node.value;\n  if (typeof typeValue !== \"string\") return;\n\n  // turn type value into a type annotation\n  // @ts-expect-error todo(flow->ts): move validation from helper or relax type constraint to just a string\n  return createTypeAnnotationBasedOnTypeof(typeValue);\n}\n\nfunction getParentConditionalPath(\n  binding: Binding,\n  path: NodePath,\n  name: string,\n) {\n  let parentPath;\n  while ((parentPath = path.parentPath)) {\n    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {\n      if (path.key === \"test\") {\n        return;\n      }\n\n      return parentPath as NodePath<t.IfStatement | t.ConditionalExpression>;\n    }\n    if (parentPath.isFunction()) {\n      if (parentPath.parentPath.scope.getBinding(name) !== binding) return;\n    }\n\n    path = parentPath;\n  }\n}\n\nfunction getConditionalAnnotation<T extends t.Node>(\n  binding: Binding,\n  path: NodePath<T>,\n  name?: string,\n): {\n  typeAnnotation: t.FlowType | t.TSType;\n  ifStatement: NodePath<t.IfStatement | t.ConditionalExpression>;\n} {\n  const ifStatement = getParentConditionalPath(binding, path, name);\n  if (!ifStatement) return;\n\n  const test = ifStatement.get(\"test\");\n  const paths = [test];\n  const types = [];\n\n  for (let i = 0; i < paths.length; i++) {\n    const path = paths[i];\n\n    if (path.isLogicalExpression()) {\n      if (path.node.operator === \"&&\") {\n        paths.push(path.get(\"left\"));\n        paths.push(path.get(\"right\"));\n      }\n    } else if (path.isBinaryExpression()) {\n      const type = inferAnnotationFromBinaryExpression(name, path);\n      if (type) types.push(type);\n    }\n  }\n\n  if (types.length) {\n    return {\n      typeAnnotation: createUnionType(types),\n      ifStatement,\n    };\n  }\n\n  return getConditionalAnnotation(binding, ifStatement, name);\n}\n", "import {\n  BOOLEAN_BINARY_OPERATORS,\n  BOOLEAN_UNARY_OPERATORS,\n  NUMBER_BINARY_OPERATORS,\n  NUMBER_UNARY_OPERATORS,\n  STRING_UNARY_OPERATORS,\n  anyTypeAnnotation,\n  arrayTypeAnnotation,\n  booleanTypeAnnotation,\n  buildMatchMemberExpression,\n  genericTypeAnnotation,\n  identifier,\n  nullLiteralTypeAnnotation,\n  numberTypeAnnotation,\n  stringTypeAnnotation,\n  tupleTypeAnnotation,\n  unionTypeAnnotation,\n  voidTypeAnnotation,\n  isIdentifier,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport { default as Identifier } from \"./inferer-reference\";\n\nimport { createUnionType } from \"./util\";\nimport type NodePath from \"..\";\n\nexport function VariableDeclarator(this: NodePath<t.VariableDeclarator>) {\n  if (!this.get(\"id\").isIdentifier()) return;\n  return this.get(\"init\").getTypeAnnotation();\n}\n\nexport function TypeCastExpression(node: t.TypeCastExpression) {\n  return node.typeAnnotation;\n}\n\nTypeCastExpression.validParent = true;\n\nexport function TSAsExpression(node: t.TSAsExpression) {\n  return node.typeAnnotation;\n}\n\nTSAsExpression.validParent = true;\n\nexport function TSNonNullExpression(this: NodePath<t.TSNonNullExpression>) {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nexport function NewExpression(\n  this: NodePath<t.NewExpression>,\n  node: t.NewExpression,\n) {\n  if (node.callee.type === \"Identifier\") {\n    // only resolve identifier callee\n    return genericTypeAnnotation(node.callee);\n  }\n}\n\nexport function TemplateLiteral() {\n  return stringTypeAnnotation();\n}\n\nexport function UnaryExpression(node: t.UnaryExpression) {\n  const operator = node.operator;\n\n  if (operator === \"void\") {\n    return voidTypeAnnotation();\n  } else if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return numberTypeAnnotation();\n  } else if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return stringTypeAnnotation();\n  } else if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {\n    return booleanTypeAnnotation();\n  }\n}\n\nexport function BinaryExpression(\n  this: NodePath<t.BinaryExpression>,\n  node: t.BinaryExpression,\n) {\n  const operator = node.operator;\n\n  if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return numberTypeAnnotation();\n  } else if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {\n    return booleanTypeAnnotation();\n  } else if (operator === \"+\") {\n    const right = this.get(\"right\");\n    const left = this.get(\"left\");\n\n    if (left.isBaseType(\"number\") && right.isBaseType(\"number\")) {\n      // both numbers so this will be a number\n      return numberTypeAnnotation();\n    } else if (left.isBaseType(\"string\") || right.isBaseType(\"string\")) {\n      // one is a string so the result will be a string\n      return stringTypeAnnotation();\n    }\n\n    // unsure if left and right are strings or numbers so stay on the safe side\n    return unionTypeAnnotation([\n      stringTypeAnnotation(),\n      numberTypeAnnotation(),\n    ]);\n  }\n}\n\nexport function LogicalExpression(this: NodePath<t.LogicalExpression>) {\n  const argumentTypes = [\n    this.get(\"left\").getTypeAnnotation(),\n    this.get(\"right\").getTypeAnnotation(),\n  ];\n\n  return createUnionType(argumentTypes);\n}\n\nexport function ConditionalExpression(this: NodePath<t.ConditionalExpression>) {\n  const argumentTypes = [\n    this.get(\"consequent\").getTypeAnnotation(),\n    this.get(\"alternate\").getTypeAnnotation(),\n  ];\n\n  return createUnionType(argumentTypes);\n}\n\nexport function SequenceExpression(this: NodePath<t.SequenceExpression>) {\n  return this.get(\"expressions\").pop().getTypeAnnotation();\n}\n\nexport function ParenthesizedExpression(\n  this: NodePath<t.ParenthesizedExpression>,\n) {\n  return this.get(\"expression\").getTypeAnnotation();\n}\n\nexport function AssignmentExpression(this: NodePath<t.AssignmentExpression>) {\n  return this.get(\"right\").getTypeAnnotation();\n}\n\nexport function UpdateExpression(\n  this: NodePath<t.UpdateExpression>,\n  node: t.UpdateExpression,\n) {\n  const operator = node.operator;\n  if (operator === \"++\" || operator === \"--\") {\n    return numberTypeAnnotation();\n  }\n}\n\nexport function StringLiteral() {\n  return stringTypeAnnotation();\n}\n\nexport function NumericLiteral() {\n  return numberTypeAnnotation();\n}\n\nexport function BooleanLiteral() {\n  return booleanTypeAnnotation();\n}\n\nexport function NullLiteral() {\n  return nullLiteralTypeAnnotation();\n}\n\nexport function RegExpLiteral() {\n  return genericTypeAnnotation(identifier(\"RegExp\"));\n}\n\nexport function ObjectExpression() {\n  return genericTypeAnnotation(identifier(\"Object\"));\n}\n\nexport function ArrayExpression() {\n  return genericTypeAnnotation(identifier(\"Array\"));\n}\n\nexport function RestElement() {\n  return ArrayExpression();\n}\n\nRestElement.validParent = true;\n\nfunction Func() {\n  return genericTypeAnnotation(identifier(\"Function\"));\n}\n\nexport {\n  Func as FunctionExpression,\n  Func as ArrowFunctionExpression,\n  Func as FunctionDeclaration,\n  Func as ClassExpression,\n  Func as ClassDeclaration,\n};\n\nconst isArrayFrom = buildMatchMemberExpression(\"Array.from\");\nconst isObjectKeys = buildMatchMemberExpression(\"Object.keys\");\nconst isObjectValues = buildMatchMemberExpression(\"Object.values\");\nconst isObjectEntries = buildMatchMemberExpression(\"Object.entries\");\nexport function CallExpression(this: NodePath<t.CallExpression>) {\n  const { callee } = this.node;\n  if (isObjectKeys(callee)) {\n    return arrayTypeAnnotation(stringTypeAnnotation());\n  } else if (\n    isArrayFrom(callee) ||\n    isObjectValues(callee) ||\n    // Detect \"var foo = Array()\" calls so we can optimize for arrays vs iterables.\n    isIdentifier(callee, { name: \"Array\" })\n  ) {\n    return arrayTypeAnnotation(anyTypeAnnotation());\n  } else if (isObjectEntries(callee)) {\n    return arrayTypeAnnotation(\n      tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]),\n    );\n  }\n\n  return resolveCall(this.get(\"callee\"));\n}\n\nexport function TaggedTemplateExpression(\n  this: NodePath<t.TaggedTemplateExpression>,\n) {\n  return resolveCall(this.get(\"tag\"));\n}\n\nfunction resolveCall(callee: NodePath) {\n  callee = callee.resolve();\n\n  if (callee.isFunction()) {\n    const { node } = callee;\n    if (node.async) {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier(\"AsyncIterator\"));\n      } else {\n        return genericTypeAnnotation(identifier(\"Promise\"));\n      }\n    } else {\n      if (node.generator) {\n        return genericTypeAnnotation(identifier(\"Iterator\"));\n      } else if (callee.node.returnType) {\n        return callee.node.returnType;\n      } else {\n        // todo: get union type of all return arguments\n      }\n    }\n  }\n}\n", "import type NodePath from \"../index\";\nimport * as inferers from \"./inferers\";\nimport {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n/**\n * Infer the type of the current `NodePath`.\n */\n\nexport function getTypeAnnotation(this: NodePath): t.FlowType | t.TSType {\n  let type = this.getData(\"typeAnnotation\");\n  if (type != null) {\n    return type;\n  }\n  type = this._getTypeAnnotation() || anyTypeAnnotation();\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\n\n// Used to avoid infinite recursion in cases like\n//   var b, c; if (0) { c = 1; b = c; } c = b;\n// It also works with indirect recursion.\nconst typeAnnotationInferringNodes = new WeakSet();\n\n/**\n * todo: split up this method\n */\n\nexport function _getTypeAnnotation(this: NodePath): any {\n  const node = this.node;\n\n  if (!node) {\n    // handle initializerless variables, add in checks for loop initializers too\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      // for (let NODE in bar) {}\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      // for (let NODE of bar) {}\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  // @ts-expect-error typeAnnotation may not index node\n  if (node.typeAnnotation) {\n    // @ts-expect-error typeAnnotation may not index node\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    // Bail out from type inference to avoid infinite loops\n    return;\n  }\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    let inferer =\n      // @ts-expect-error inferers do not cover all AST types\n      inferers[node.type];\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    // @ts-expect-error inferers do not cover all AST types\n    inferer = inferers[this.parentPath.type];\n    if (inferer?.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nexport function isBaseType(\n  this: NodePath,\n  baseName: string,\n  soft?: boolean,\n): boolean {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(\n  baseName: string,\n  type?: t.FlowType | t.TSType,\n  soft?: boolean,\n): boolean {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nexport function couldBeBaseType(this: NodePath, name: string): boolean {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nexport function baseTypeStrictlyMatches(\n  this: NodePath,\n  rightArg: NodePath,\n): boolean {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n  return false;\n}\n\nexport function isGenericType(this: NodePath, genericName: string): boolean {\n  const type = this.getTypeAnnotation();\n  if (genericName === \"Array\") {\n    // T[]\n    if (\n      isTSArrayType(type) ||\n      isArrayTypeAnnotation(type) ||\n      isTupleTypeAnnotation(type)\n    ) {\n      return true;\n    }\n  }\n  return (\n    (isGenericTypeAnnotation(type) &&\n      isIdentifier(type.id, {\n        name: genericName,\n      })) ||\n    (isTSTypeReference(type) &&\n      isIdentifier(type.typeName, {\n        name: genericName,\n      }))\n  );\n}\n", "// Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell\n// License: MIT. (See LICENSE.)\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n})\n\n// This regex comes from regex.coffee, and is inserted here by generate-index.js\n// (run `npm run build`).\nexports.default = /((['\"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\'\"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g\n\nexports.matchToToken = function(match) {\n  var token = {type: \"invalid\", value: match[0], closed: undefined}\n       if (match[ 1]) token.type = \"string\" , token.closed = !!(match[3] || match[4])\n  else if (match[ 5]) token.type = \"comment\"\n  else if (match[ 6]) token.type = \"comment\", token.closed = !!match[7]\n  else if (match[ 8]) token.type = \"regex\"\n  else if (match[ 9]) token.type = \"number\"\n  else if (match[10]) token.type = \"name\"\n  else if (match[11]) token.type = \"punctuator\"\n  else if (match[12]) token.type = \"whitespace\"\n  return token\n}\n", "'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n\tif (typeof str !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\treturn str.replace(matchOperatorsRe, '\\\\$&');\n};\n", "'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n", "/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n", "var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n", "var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n", "'use strict';\nconst colorConvert = require('color-convert');\n\nconst wrapAnsi16 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => function () {\n\tconst code = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => function () {\n\tconst rgb = fn.apply(colorConvert, arguments);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\t\t\tgray: [90, 39],\n\n\t\t\t// Bright color\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Fix humans\n\tstyles.color.grey = styles.color.gray;\n\n\tfor (const groupName of Object.keys(styles)) {\n\t\tconst group = styles[groupName];\n\n\t\tfor (const styleName of Object.keys(group)) {\n\t\t\tconst style = group[styleName];\n\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\n\t\tObject.defineProperty(styles, 'codes', {\n\t\t\tvalue: codes,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tconst ansi2ansi = n => n;\n\tconst rgb2rgb = (r, g, b) => [r, g, b];\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 0)\n\t};\n\tstyles.color.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 0)\n\t};\n\n\tstyles.bgColor.ansi = {\n\t\tansi: wrapAnsi16(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi256 = {\n\t\tansi256: wrapAnsi256(ansi2ansi, 10)\n\t};\n\tstyles.bgColor.ansi16m = {\n\t\trgb: wrapAnsi16m(rgb2rgb, 10)\n\t};\n\n\tfor (let key of Object.keys(colorConvert)) {\n\t\tif (typeof colorConvert[key] !== 'object') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst suite = colorConvert[key];\n\n\t\tif (key === 'ansi16') {\n\t\t\tkey = 'ansi';\n\t\t}\n\n\t\tif ('ansi16' in suite) {\n\t\t\tstyles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);\n\t\t\tstyles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);\n\t\t}\n\n\t\tif ('ansi256' in suite) {\n\t\t\tstyles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);\n\t\t\tstyles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);\n\t\t}\n\n\t\tif ('rgb' in suite) {\n\t\t\tstyles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);\n\t\t\tstyles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);\n\t\t}\n\t}\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n", "'use strict';\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n", "'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tif ((c[0] === 'u' && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, args) {\n\tconst results = [];\n\tconst chunks = args.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tif (!isNaN(chunk)) {\n\t\t\tresults.push(Number(chunk));\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const styleName of Object.keys(enabled)) {\n\t\tif (Array.isArray(enabled[styleName])) {\n\t\t\tif (!(styleName in current)) {\n\t\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t\t}\n\n\t\t\tif (enabled[styleName].length > 0) {\n\t\t\t\tcurrent = current[styleName].apply(current, enabled[styleName]);\n\t\t\t} else {\n\t\t\t\tcurrent = current[styleName];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, tmp) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {\n\t\tif (escapeChar) {\n\t\t\tchunk.push(unescape(escapeChar));\n\t\t} else if (style) {\n\t\t\tconst str = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(chr);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n", "'use strict';\nconst escapeStringRegexp = require('escape-string-regexp');\nconst ansiStyles = require('ansi-styles');\nconst stdoutColor = require('supports-color').stdout;\n\nconst template = require('./templates.js');\n\nconst isSimpleWindowsTerm = process.platform === 'win32' && !(process.env.TERM || '').toLowerCase().startsWith('xterm');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\n\n// `color-convert` models to exclude from the Chalk API due to conflicts and such\nconst skipModels = new Set(['gray']);\n\nconst styles = Object.create(null);\n\nfunction applyOptions(obj, options) {\n\toptions = options || {};\n\n\t// Detect level if not set manually\n\tconst scLevel = stdoutColor ? stdoutColor.level : 0;\n\tobj.level = options.level === undefined ? scLevel : options.level;\n\tobj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;\n}\n\nfunction Chalk(options) {\n\t// We check for this.template here since calling `chalk.constructor()`\n\t// by itself will have a `this` of a previously constructed chalk object\n\tif (!this || !(this instanceof Chalk) || this.template) {\n\t\tconst chalk = {};\n\t\tapplyOptions(chalk, options);\n\n\t\tchalk.template = function () {\n\t\t\tconst args = [].slice.call(arguments);\n\t\t\treturn chalkTag.apply(null, [chalk.template].concat(args));\n\t\t};\n\n\t\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\t\tObject.setPrototypeOf(chalk.template, chalk);\n\n\t\tchalk.template.constructor = Chalk;\n\n\t\treturn chalk.template;\n\t}\n\n\tapplyOptions(this, options);\n}\n\n// Use bright blue on Windows as the normal blue color is illegible\nif (isSimpleWindowsTerm) {\n\tansiStyles.blue.open = '\\u001B[94m';\n}\n\nfor (const key of Object.keys(ansiStyles)) {\n\tansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n\n\tstyles[key] = {\n\t\tget() {\n\t\t\tconst codes = ansiStyles[key];\n\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\treturn build.call(this, this._styles || [], true, 'visible');\n\t}\n};\n\nansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');\nfor (const model of Object.keys(ansiStyles.color.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.color.close,\n\t\t\t\t\tcloseRe: ansiStyles.color.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');\nfor (const model of Object.keys(ansiStyles.bgColor.ansi)) {\n\tif (skipModels.has(model)) {\n\t\tcontinue;\n\t}\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst level = this.level;\n\t\t\treturn function () {\n\t\t\t\tconst open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);\n\t\t\t\tconst codes = {\n\t\t\t\t\topen,\n\t\t\t\t\tclose: ansiStyles.bgColor.close,\n\t\t\t\t\tcloseRe: ansiStyles.bgColor.closeRe\n\t\t\t\t};\n\t\t\t\treturn build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, styles);\n\nfunction build(_styles, _empty, key) {\n\tconst builder = function () {\n\t\treturn applyStyle.apply(builder, arguments);\n\t};\n\n\tbuilder._styles = _styles;\n\tbuilder._empty = _empty;\n\n\tconst self = this;\n\n\tObject.defineProperty(builder, 'level', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.level;\n\t\t},\n\t\tset(level) {\n\t\t\tself.level = level;\n\t\t}\n\t});\n\n\tObject.defineProperty(builder, 'enabled', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn self.enabled;\n\t\t},\n\t\tset(enabled) {\n\t\t\tself.enabled = enabled;\n\t\t}\n\t});\n\n\t// See below for fix regarding invisible grey/dim combination on Windows\n\tbuilder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey';\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\treturn builder;\n}\n\nfunction applyStyle() {\n\t// Support varags, but simply cast to string in case there's only one arg\n\tconst args = arguments;\n\tconst argsLen = args.length;\n\tlet str = String(arguments[0]);\n\n\tif (argsLen === 0) {\n\t\treturn '';\n\t}\n\n\tif (argsLen > 1) {\n\t\t// Don't slice `arguments`, it prevents V8 optimizations\n\t\tfor (let a = 1; a < argsLen; a++) {\n\t\t\tstr += ' ' + args[a];\n\t\t}\n\t}\n\n\tif (!this.enabled || this.level <= 0 || !str) {\n\t\treturn this._empty ? '' : str;\n\t}\n\n\t// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,\n\t// see https://github.com/chalk/chalk/issues/58\n\t// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.\n\tconst originalDim = ansiStyles.dim.open;\n\tif (isSimpleWindowsTerm && this.hasGrey) {\n\t\tansiStyles.dim.open = '';\n\t}\n\n\tfor (const code of this._styles.slice().reverse()) {\n\t\t// Replace any instances already present with a re-opening code\n\t\t// otherwise only the part of the string until said closing code\n\t\t// will be colored, and the rest will simply be 'plain'.\n\t\tstr = code.open + str.replace(code.closeRe, code.open) + code.close;\n\n\t\t// Close the styling before a linebreak and reopen\n\t\t// after next line to fix a bleed issue on macOS\n\t\t// https://github.com/chalk/chalk/pull/92\n\t\tstr = str.replace(/\\r?\\n/g, `${code.close}$&${code.open}`);\n\t}\n\n\t// Reset the original `dim` if we changed it to work around the Windows dimmed gray issue\n\tansiStyles.dim.open = originalDim;\n\n\treturn str;\n}\n\nfunction chalkTag(chalk, strings) {\n\tif (!Array.isArray(strings)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn [].slice.call(arguments, 1).join(' ');\n\t}\n\n\tconst args = [].slice.call(arguments, 2);\n\tconst parts = [strings.raw[0]];\n\n\tfor (let i = 1; i < strings.length; i++) {\n\t\tparts.push(String(args[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'));\n\t\tparts.push(String(strings.raw[i]));\n\t}\n\n\treturn template(chalk, parts.join(''));\n}\n\nObject.defineProperties(Chalk.prototype, styles);\n\nmodule.exports = Chalk(); // eslint-disable-line new-cap\nmodule.exports.supportsColor = stdoutColor;\nmodule.exports.default = module.exports; // For TypeScript\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = highlight;\nexports.getChalk = getChalk;\nexports.shouldHighlight = shouldHighlight;\n\nvar _jsTokens = require(\"js-tokens\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nvar _chalk = require(\"chalk\");\n\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\nfunction getDefs(chalk) {\n  return {\n    keyword: chalk.cyan,\n    capitalized: chalk.yellow,\n    jsxIdentifier: chalk.yellow,\n    punctuator: chalk.yellow,\n    number: chalk.magenta,\n    string: chalk.green,\n    regex: chalk.magenta,\n    comment: chalk.grey,\n    invalid: chalk.white.bgRed.bold\n  };\n}\n\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nconst BRACKET = /^[()[\\]{}]$/;\nlet tokenize;\n{\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  const getTokenType = function (token, offset, text) {\n    if (token.type === \"name\") {\n      if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {\n        return \"keyword\";\n      }\n\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.slice(offset - 2, offset) == \"</\")) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = function* (text) {\n    let match;\n\n    while (match = _jsTokens.default.exec(text)) {\n      const token = _jsTokens.matchToToken(match);\n\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value\n      };\n    }\n  };\n}\n\nfunction highlightTokens(defs, text) {\n  let highlighted = \"\";\n\n  for (const {\n    type,\n    value\n  } of tokenize(text)) {\n    const colorize = defs[type];\n\n    if (colorize) {\n      highlighted += value.split(NEWLINE).map(str => colorize(str)).join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n\n  return highlighted;\n}\n\nfunction shouldHighlight(options) {\n  return !!_chalk.supportsColor || options.forceColor;\n}\n\nfunction getChalk(options) {\n  return options.forceColor ? new _chalk.constructor({\n    enabled: true,\n    level: 1\n  }) : _chalk;\n}\n\nfunction highlight(code, options = {}) {\n  if (code !== \"\" && shouldHighlight(options)) {\n    const chalk = getChalk(options);\n    const defs = getDefs(chalk);\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeFrameColumns = codeFrameColumns;\nexports.default = _default;\n\nvar _highlight = require(\"@babel/highlight\");\n\nlet deprecationWarningShown = false;\n\nfunction getDefs(chalk) {\n  return {\n    gutter: chalk.grey,\n    marker: chalk.red.bold,\n    message: chalk.red.bold\n  };\n}\n\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\n\nfunction getMarkerLines(loc, source, opts) {\n  const startLoc = Object.assign({\n    column: 0,\n    line: -1\n  }, loc.start);\n  const endLoc = Object.assign({}, startLoc, loc.end);\n  const {\n    linesAbove = 2,\n    linesBelow = 3\n  } = opts || {};\n  const startLine = startLoc.line;\n  const startColumn = startLoc.column;\n  const endLine = endLoc.line;\n  const endColumn = endLoc.column;\n  let start = Math.max(startLine - (linesAbove + 1), 0);\n  let end = Math.min(source.length, endLine + linesBelow);\n\n  if (startLine === -1) {\n    start = 0;\n  }\n\n  if (endLine === -1) {\n    end = source.length;\n  }\n\n  const lineDiff = endLine - startLine;\n  const markerLines = {};\n\n  if (lineDiff) {\n    for (let i = 0; i <= lineDiff; i++) {\n      const lineNumber = i + startLine;\n\n      if (!startColumn) {\n        markerLines[lineNumber] = true;\n      } else if (i === 0) {\n        const sourceLength = source[lineNumber - 1].length;\n        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];\n      } else if (i === lineDiff) {\n        markerLines[lineNumber] = [0, endColumn];\n      } else {\n        const sourceLength = source[lineNumber - i].length;\n        markerLines[lineNumber] = [0, sourceLength];\n      }\n    }\n  } else {\n    if (startColumn === endColumn) {\n      if (startColumn) {\n        markerLines[startLine] = [startColumn, 0];\n      } else {\n        markerLines[startLine] = true;\n      }\n    } else {\n      markerLines[startLine] = [startColumn, endColumn - startColumn];\n    }\n  }\n\n  return {\n    start,\n    end,\n    markerLines\n  };\n}\n\nfunction codeFrameColumns(rawLines, loc, opts = {}) {\n  const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);\n  const chalk = (0, _highlight.getChalk)(opts);\n  const defs = getDefs(chalk);\n\n  const maybeHighlight = (chalkFn, string) => {\n    return highlighted ? chalkFn(string) : string;\n  };\n\n  const lines = rawLines.split(NEWLINE);\n  const {\n    start,\n    end,\n    markerLines\n  } = getMarkerLines(loc, lines, opts);\n  const hasColumns = loc.start && typeof loc.start.column === \"number\";\n  const numberMaxWidth = String(end).length;\n  const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;\n  let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {\n    const number = start + 1 + index;\n    const paddedNumber = ` ${number}`.slice(-numberMaxWidth);\n    const gutter = ` ${paddedNumber} |`;\n    const hasMarker = markerLines[number];\n    const lastMarkerLine = !markerLines[number + 1];\n\n    if (hasMarker) {\n      let markerLine = \"\";\n\n      if (Array.isArray(hasMarker)) {\n        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\\t]/g, \" \");\n        const numberOfMarkers = hasMarker[1] || 1;\n        markerLine = [\"\\n \", maybeHighlight(defs.gutter, gutter.replace(/\\d/g, \" \")), \" \", markerSpacing, maybeHighlight(defs.marker, \"^\").repeat(numberOfMarkers)].join(\"\");\n\n        if (lastMarkerLine && opts.message) {\n          markerLine += \" \" + maybeHighlight(defs.message, opts.message);\n        }\n      }\n\n      return [maybeHighlight(defs.marker, \">\"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : \"\", markerLine].join(\"\");\n    } else {\n      return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : \"\"}`;\n    }\n  }).join(\"\\n\");\n\n  if (opts.message && !hasColumns) {\n    frame = `${\" \".repeat(numberMaxWidth + 1)}${opts.message}\\n${frame}`;\n  }\n\n  if (highlighted) {\n    return chalk.reset(frame);\n  } else {\n    return frame;\n  }\n}\n\nfunction _default(rawLines, lineNumber, colNumber, opts = {}) {\n  if (!deprecationWarningShown) {\n    deprecationWarningShown = true;\n    const message = \"Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.\";\n\n    if (process.emitWarning) {\n      process.emitWarning(message, \"DeprecationWarning\");\n    } else {\n      const deprecationError = new Error(message);\n      deprecationError.name = \"DeprecationWarning\";\n      console.warn(new Error(message));\n    }\n  }\n\n  colNumber = Math.max(colNumber, 0);\n  const location = {\n    start: {\n      column: colNumber,\n      line: lineNumber\n    }\n  };\n  return codeFrameColumns(rawLines, location, opts);\n}", "export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n", "export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n", "import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n", "const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n", "import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n", "export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n", "import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n", "import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n", "import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n", "// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n", "import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n", "import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n", "const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n", "/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n", "// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n", "import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n", "import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n", "import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n", "/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n", "import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n", "import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n", "import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n", "/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n", "import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n", "import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n", "export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n", "import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n", "import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n", "const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n", "import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n", "import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n", "/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* isHangingDeclaration */ false,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n            /* decorators */ null,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, { at: node });\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initiailized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  } else {\n    return (\n      expression.type === \"NumericLiteral\" ||\n      expression.type === \"BigIntLiteral\"\n    );\n  }\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression as N.UnaryExpression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n", "import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrFunctionDeclaration(false);\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n", "import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n", "import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n", "import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n", "import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.allowingSloppyLetBinding\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n", "// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n", "import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const lookahead = this.lookahead();\n    if (lookahead.type === tt._of && !lookahead.containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  parseStatementOrFunctionDeclaration(\n    this: Parser,\n    disallowLabeledFunction: boolean,\n  ) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowFunctionDeclaration |\n        (disallowLabeledFunction ? 0 : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowDeclaration) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (!allowFunctionDeclaration) {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.hasFollowingLineBreak() ||\n          this.state.containsEsc ||\n          !this.hasFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      !!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      classNode.decorators = maybeDecorators;\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing =\n      this.isContextual(tt._using) && !this.hasFollowingLineBreak();\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingBindingAtom()) ||\n      (startsWithUsing &&\n        this.hasFollowingBindingIdentifier() &&\n        this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrFunctionDeclaration(\n      // https://tc39.es/ecma262/#sec-if-statement-static-semantics-early-errors\n      true,\n    );\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrFunctionDeclaration(true)\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrFunctionDeclaration(false)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== tt.comma) {\n        // import module { x } ...\n        // import module \"foo\"\n        // They are invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries AssertEntries}\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n", "import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n", "import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hoistVariables;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  assignmentExpression,\n  expressionStatement,\n  identifier\n} = _t;\nconst visitor = {\n  Scope(path, state) {\n    if (state.kind === \"let\") path.skip();\n  },\n\n  FunctionParent(path) {\n    path.skip();\n  },\n\n  VariableDeclaration(path, state) {\n    if (state.kind && path.node.kind !== state.kind) return;\n    const nodes = [];\n    const declarations = path.get(\"declarations\");\n    let firstId;\n\n    for (const declar of declarations) {\n      firstId = declar.node.id;\n\n      if (declar.node.init) {\n        nodes.push(expressionStatement(assignmentExpression(\"=\", declar.node.id, declar.node.init)));\n      }\n\n      for (const name of Object.keys(declar.getBindingIdentifiers())) {\n        state.emit(identifier(name), name, declar.node.init !== null);\n      }\n    }\n\n    if (path.parentPath.isFor({\n      left: path.node\n    })) {\n      path.replaceWith(firstId);\n    } else {\n      path.replaceWithMultiple(nodes);\n    }\n  }\n\n};\n\nfunction hoistVariables(path, emit, kind = \"var\") {\n  path.traverse(visitor, {\n    kind,\n    emit\n  });\n}", "// This file contains methods responsible for replacing a node with another.\n\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport traverse from \"../index\";\nimport NodePath from \"./index\";\nimport { path as pathCache } from \"../cache\";\nimport { parse } from \"@babel/parser\";\nimport {\n  FUNCTION_TYPES,\n  arrowFunctionExpression,\n  assignmentExpression,\n  awaitExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  inheritLeadingComments,\n  inheritTrailingComments,\n  inheritsComments,\n  isExpression,\n  isProgram,\n  isStatement,\n  removeComments,\n  returnStatement,\n  toSequenceExpression,\n  validate,\n  yieldExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport hoistVariables from \"@babel/helper-hoist-variables\";\n\n/**\n * Replace a node with an array of multiple. This method performs the following steps:\n *\n *  - Inherit the comments of first provided node with that of the current node.\n *  - Insert the provided nodes after the current node.\n *  - Remove the current node.\n */\n\nexport function replaceWithMultiple(\n  this: NodePath,\n  nodes: t.Node | t.Node[],\n): NodePath[] {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  inheritLeadingComments(nodes[0], this.node);\n  inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  pathCache.get(this.parent)?.delete(this.node);\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n  return paths;\n}\n\n/**\n * Parse a string as an expression and replace the current node with the result.\n *\n * NOTE: This is typically not a good idea to use. Building source strings when\n * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\n * easier to use, your transforms will be extremely brittle.\n */\n\nexport function replaceWithSourceString(this: NodePath, replacement: string) {\n  this.resync();\n  let ast: t.File;\n\n  try {\n    replacement = `(${replacement})`;\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = parse(replacement);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message +=\n        \" - make sure this is an expression.\\n\" +\n        codeFrameColumns(replacement, {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n    throw err;\n  }\n\n  const expressionAST = (ast.program.body[0] as t.ExpressionStatement)\n    .expression;\n  traverse.removeProperties(expressionAST);\n  return this.replaceWith(expressionAST);\n}\n\n/**\n * Replace the current node with another.\n */\n\nexport function replaceWith<R extends t.Node>(\n  this: NodePath,\n  replacementPath: R | NodePath<R>,\n): [NodePath<R>] {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  let replacement: t.Node =\n    replacementPath instanceof NodePath\n      ? replacementPath.node\n      : replacementPath;\n\n  if (!replacement) {\n    throw new Error(\n      \"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\",\n    );\n  }\n\n  if (this.node === replacement) {\n    return [this as NodePath<R>];\n  }\n\n  if (this.isProgram() && !isProgram(replacement)) {\n    throw new Error(\n      \"You can only replace a Program root node with another Program node\",\n    );\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\",\n    );\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\",\n    );\n  }\n\n  let nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && isExpression(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement) &&\n      !this.parentPath.isExportDefaultDeclaration()\n    ) {\n      // replacing a statement with an expression so wrap it in an expression statement\n      replacement = expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && isStatement(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement)\n    ) {\n      // replacing an expression with a statement so let's explode it\n      return this.replaceExpressionWithStatements([replacement]) as [\n        NodePath<R>,\n      ];\n    }\n  }\n\n  const oldNode = this.node;\n  if (oldNode) {\n    inheritsComments(replacement, oldNode);\n    removeComments(oldNode);\n  }\n\n  // replace the node\n  this._replaceWith(replacement);\n  this.type = replacement.type;\n\n  // potentially create new scope\n  this.setScope();\n\n  // requeue for visiting\n  this.requeue();\n\n  return [\n    nodePath ? (this.get(nodePath) as NodePath<R>) : (this as NodePath<R>),\n  ];\n}\n\n/**\n * Description\n */\n\nexport function _replaceWith(this: NodePath, node: t.Node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    // @ts-expect-error todo(flow->ts): check if validate accepts a numeric key\n    validate(this.parent, this.key, [node]);\n  } else {\n    validate(this.parent, this.key as string, node);\n  }\n\n  this.debug(`Replace with ${node?.type}`);\n  pathCache.get(this.parent)?.set(node, this).delete(this.node);\n\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = node;\n}\n\n/**\n * This method takes an array of statements nodes and then explodes it\n * into expressions. This method retains completion records which is\n * extremely important to retain original semantics.\n */\n\nexport function replaceExpressionWithStatements(\n  this: NodePath,\n  nodes: Array<t.Statement>,\n) {\n  this.resync();\n\n  const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);\n\n  if (nodesAsSequenceExpression) {\n    return this.replaceWith(nodesAsSequenceExpression)[0].get(\"expressions\");\n  }\n\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent?.is(\"async\");\n  const isParentGenerator = functionParent?.is(\"generator\");\n\n  const container = arrowFunctionExpression([], blockStatement(nodes));\n\n  this.replaceWith(callExpression(container, []));\n  // replaceWith changes the type of \"this\", but it isn't trackable by TS\n  type ThisType = NodePath<\n    t.CallExpression & {\n      callee: t.ArrowFunctionExpression & { body: t.BlockStatement };\n    }\n  >;\n\n  // hoist variable declaration in do block\n  // `(do { var x = 1; x;})` -> `var x; (() => { x = 1; return x; })()`\n  const callee = (this as ThisType).get(\"callee\");\n  hoistVariables(\n    callee.get(\"body\"),\n    (id: t.Identifier) => {\n      this.scope.push({ id });\n    },\n    \"var\",\n  );\n\n  // add implicit returns to all ending expression statements\n  const completionRecords: Array<NodePath> = (this as ThisType)\n    .get(\"callee\")\n    .getCompletionRecords();\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n\n    const loop = path.findParent(path => path.isLoop());\n    if (loop) {\n      let uid = loop.getData(\"expressionReplacementReturnUid\");\n\n      if (!uid) {\n        uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee\n          .get(\"body\")\n          .pushContainer(\"body\", returnStatement(cloneNode(uid)));\n        loop.setData(\"expressionReplacementReturnUid\", uid);\n      } else {\n        uid = identifier(uid.name);\n      }\n\n      path\n        .get(\"expression\")\n        .replaceWith(\n          assignmentExpression(\"=\", cloneNode(uid), path.node.expression),\n        );\n    } else {\n      path.replaceWith(returnStatement(path.node.expression));\n    }\n  }\n\n  // This is an IIFE, so we don't need to worry about the noNewArrows assumption\n  callee.arrowFunctionToExpression();\n  // Fixme: we can not `assert this is NodePath<t.FunctionExpression>` in `arrowFunctionToExpression`\n  // because it is not a class method known at compile time.\n  const newCallee = callee as unknown as NodePath<t.FunctionExpression>;\n\n  // (() => await xxx)() -> await (async () => await xxx)();\n  const needToAwaitFunction =\n    isParentAsync &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"AwaitExpression\",\n      FUNCTION_TYPES,\n    );\n  const needToYieldFunction =\n    isParentGenerator &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"YieldExpression\",\n      FUNCTION_TYPES,\n    );\n  if (needToAwaitFunction) {\n    newCallee.set(\"async\", true);\n    // yield* will await the generator return result\n    if (!needToYieldFunction) {\n      this.replaceWith(awaitExpression((this as ThisType).node));\n    }\n  }\n  if (needToYieldFunction) {\n    newCallee.set(\"generator\", true);\n    this.replaceWith(yieldExpression((this as ThisType).node, true));\n  }\n\n  return newCallee.get(\"body.body\");\n}\n\nexport function replaceInline(this: NodePath, nodes: t.Node | Array<t.Node>) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      const paths = this._containerInsertAfter(nodes);\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}\n", "import type NodePath from \"./index\";\nimport type * as t from \"@babel/types\";\n\n// This file contains Babels metainterpreter that can evaluate static code.\n\nconst VALID_CALLEES = [\"String\", \"Number\", \"Math\"] as const;\nconst INVALID_METHODS = [\"random\"] as const;\n\nfunction isValidCallee(val: string): val is typeof VALID_CALLEES[number] {\n  return VALID_CALLEES.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\nfunction isInvalidMethod(val: string): val is typeof INVALID_METHODS[number] {\n  return INVALID_METHODS.includes(\n    // @ts-expect-error val is a string\n    val,\n  );\n}\n\n/**\n * Walk the input `node` and statically evaluate if it's truthy.\n *\n * Returning `true` when we're sure that the expression will evaluate to a\n * truthy value, `false` if we're sure that it will evaluate to a falsy\n * value and `undefined` if we aren't sure. Because of this please do not\n * rely on coercion when using this method and check with === if it's false.\n *\n * For example do:\n *\n *   if (t.evaluateTruthy(node) === false) falsyLogic();\n *\n * **AND NOT**\n *\n *   if (!t.evaluateTruthy(node)) falsyLogic();\n *\n */\n\nexport function evaluateTruthy(this: NodePath): boolean {\n  const res = this.evaluate();\n  if (res.confident) return !!res.value;\n}\n\ntype State = {\n  confident: boolean;\n  deoptPath: NodePath | null;\n  seen: Map<t.Node, Result>;\n};\n\ntype Result = {\n  resolved: boolean;\n  value?: any;\n};\n/**\n * Deopts the evaluation\n */\nfunction deopt(path: NodePath, state: State) {\n  if (!state.confident) return;\n  state.deoptPath = path;\n  state.confident = false;\n}\n\n/**\n * We wrap the _evaluate method so we can track `seen` nodes, we push an item\n * to the map before we actually evaluate it so we can deopt on self recursive\n * nodes such as:\n *\n *   var g = a ? 1 : 2,\n *       a = g * this.foo\n */\nfunction evaluateCached(path: NodePath, state: State): any {\n  const { node } = path;\n  const { seen } = state;\n\n  if (seen.has(node)) {\n    const existing = seen.get(node);\n    if (existing.resolved) {\n      return existing.value;\n    } else {\n      deopt(path, state);\n      return;\n    }\n  } else {\n    const item: Result = { resolved: false };\n    seen.set(node, item);\n\n    const val = _evaluate(path, state);\n    if (state.confident) {\n      item.resolved = true;\n      item.value = val;\n    }\n    return val;\n  }\n}\n\nfunction _evaluate(path: NodePath, state: State): any {\n  if (!state.confident) return;\n\n  if (path.isSequenceExpression()) {\n    const exprs = path.get(\"expressions\");\n    return evaluateCached(exprs[exprs.length - 1], state);\n  }\n\n  if (\n    path.isStringLiteral() ||\n    path.isNumericLiteral() ||\n    path.isBooleanLiteral()\n  ) {\n    return path.node.value;\n  }\n\n  if (path.isNullLiteral()) {\n    return null;\n  }\n\n  if (path.isTemplateLiteral()) {\n    return evaluateQuasis(path, path.node.quasis, state);\n  }\n\n  if (\n    path.isTaggedTemplateExpression() &&\n    path.get(\"tag\").isMemberExpression()\n  ) {\n    const object = path.get(\"tag.object\") as NodePath;\n    const {\n      // @ts-expect-error todo(flow->ts): possible bug, object is can be any expression and so name might be undefined\n      node: { name },\n    } = object;\n    const property = path.get(\"tag.property\") as NodePath;\n\n    if (\n      object.isIdentifier() &&\n      name === \"String\" &&\n      // todo(flow->ts): was changed from getBinding(name, true)\n      //  should this be hasBinding(name, true) as the binding is never used later?\n      !path.scope.getBinding(name) &&\n      property.isIdentifier() &&\n      property.node.name === \"raw\"\n    ) {\n      return evaluateQuasis(path, path.node.quasi.quasis, state, true);\n    }\n  }\n\n  if (path.isConditionalExpression()) {\n    const testResult = evaluateCached(path.get(\"test\"), state);\n    if (!state.confident) return;\n    if (testResult) {\n      return evaluateCached(path.get(\"consequent\"), state);\n    } else {\n      return evaluateCached(path.get(\"alternate\"), state);\n    }\n  }\n\n  if (path.isExpressionWrapper()) {\n    // TypeCastExpression, ExpressionStatement etc\n    return evaluateCached(path.get(\"expression\"), state);\n  }\n\n  // \"foo\".length, \"foo\"[0]\n  if (\n    path.isMemberExpression() &&\n    !path.parentPath.isCallExpression({ callee: path.node })\n  ) {\n    const property = path.get(\"property\");\n    const object = path.get(\"object\");\n\n    if (object.isLiteral()) {\n      // @ts-expect-error todo(flow->ts): instead of typeof - would it be better to check type of ast node?\n      const value = object.node.value;\n      const type = typeof value;\n\n      let key = null;\n      if (path.node.computed) {\n        key = evaluateCached(property, state);\n        if (!state.confident) return;\n      } else if (property.isIdentifier()) {\n        key = property.node.name;\n      }\n      if (\n        (type === \"number\" || type === \"string\") &&\n        key != null &&\n        (typeof key === \"number\" || typeof key === \"string\")\n      ) {\n        return value[key];\n      }\n    }\n  }\n\n  if (path.isReferencedIdentifier()) {\n    const binding = path.scope.getBinding(path.node.name);\n\n    if (binding && binding.constantViolations.length > 0) {\n      return deopt(binding.path, state);\n    }\n\n    if (binding && path.node.start < binding.path.node.end) {\n      return deopt(binding.path, state);\n    }\n\n    if (binding?.hasValue) {\n      return binding.value;\n    } else {\n      if (path.node.name === \"undefined\") {\n        return binding ? deopt(binding.path, state) : undefined;\n      } else if (path.node.name === \"Infinity\") {\n        return binding ? deopt(binding.path, state) : Infinity;\n      } else if (path.node.name === \"NaN\") {\n        return binding ? deopt(binding.path, state) : NaN;\n      }\n\n      const resolved = path.resolve();\n      if (resolved === path) {\n        return deopt(path, state);\n      } else {\n        return evaluateCached(resolved, state);\n      }\n    }\n  }\n\n  if (path.isUnaryExpression({ prefix: true })) {\n    if (path.node.operator === \"void\") {\n      // we don't need to evaluate the argument to know what this will return\n      return undefined;\n    }\n\n    const argument = path.get(\"argument\");\n    if (\n      path.node.operator === \"typeof\" &&\n      (argument.isFunction() || argument.isClass())\n    ) {\n      return \"function\";\n    }\n\n    const arg = evaluateCached(argument, state);\n    if (!state.confident) return;\n    switch (path.node.operator) {\n      case \"!\":\n        return !arg;\n      case \"+\":\n        return +arg;\n      case \"-\":\n        return -arg;\n      case \"~\":\n        return ~arg;\n      case \"typeof\":\n        return typeof arg;\n    }\n  }\n\n  if (path.isArrayExpression()) {\n    const arr = [];\n    const elems: Array<NodePath> = path.get(\"elements\");\n    for (const elem of elems) {\n      const elemValue = elem.evaluate();\n\n      if (elemValue.confident) {\n        arr.push(elemValue.value);\n      } else {\n        return deopt(elemValue.deopt, state);\n      }\n    }\n    return arr;\n  }\n\n  if (path.isObjectExpression()) {\n    const obj = {};\n    const props = path.get(\"properties\");\n    for (const prop of props) {\n      if (prop.isObjectMethod() || prop.isSpreadElement()) {\n        return deopt(prop, state);\n      }\n      const keyPath = (prop as NodePath<t.ObjectProperty>).get(\"key\");\n      let key;\n      // @ts-expect-error todo(flow->ts): type refinement issues ObjectMethod and SpreadElement somehow not excluded\n      if (prop.node.computed) {\n        key = keyPath.evaluate();\n        if (!key.confident) {\n          return deopt(key.deopt, state);\n        }\n        key = key.value;\n      } else if (keyPath.isIdentifier()) {\n        key = keyPath.node.name;\n      } else {\n        key = (\n          keyPath.node as t.StringLiteral | t.NumericLiteral | t.BigIntLiteral\n        ).value;\n      }\n      const valuePath = (prop as NodePath<t.ObjectProperty>).get(\"value\");\n      let value = valuePath.evaluate();\n      if (!value.confident) {\n        return deopt(value.deopt, state);\n      }\n      value = value.value;\n      // @ts-expect-error key is any type\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  if (path.isLogicalExpression()) {\n    // If we are confident that the left side of an && is false, or the left\n    // side of an || is true, we can be confident about the entire expression\n    const wasConfident = state.confident;\n    const left = evaluateCached(path.get(\"left\"), state);\n    const leftConfident = state.confident;\n    state.confident = wasConfident;\n    const right = evaluateCached(path.get(\"right\"), state);\n    const rightConfident = state.confident;\n\n    switch (path.node.operator) {\n      case \"||\":\n        // TODO consider having a \"truthy type\" that doesn't bail on\n        // left uncertainty but can still evaluate to truthy.\n        state.confident = leftConfident && (!!left || rightConfident);\n        if (!state.confident) return;\n\n        return left || right;\n      case \"&&\":\n        state.confident = leftConfident && (!left || rightConfident);\n        if (!state.confident) return;\n\n        return left && right;\n      case \"??\":\n        state.confident = leftConfident && (left != null || rightConfident);\n        if (!state.confident) return;\n\n        return left ?? right;\n    }\n  }\n\n  if (path.isBinaryExpression()) {\n    const left = evaluateCached(path.get(\"left\"), state);\n    if (!state.confident) return;\n    const right = evaluateCached(path.get(\"right\"), state);\n    if (!state.confident) return;\n\n    switch (path.node.operator) {\n      case \"-\":\n        return left - right;\n      case \"+\":\n        return left + right;\n      case \"/\":\n        return left / right;\n      case \"*\":\n        return left * right;\n      case \"%\":\n        return left % right;\n      case \"**\":\n        return left ** right;\n      case \"<\":\n        return left < right;\n      case \">\":\n        return left > right;\n      case \"<=\":\n        return left <= right;\n      case \">=\":\n        return left >= right;\n      case \"==\":\n        return left == right; // eslint-disable-line eqeqeq\n      case \"!=\":\n        return left != right;\n      case \"===\":\n        return left === right;\n      case \"!==\":\n        return left !== right;\n      case \"|\":\n        return left | right;\n      case \"&\":\n        return left & right;\n      case \"^\":\n        return left ^ right;\n      case \"<<\":\n        return left << right;\n      case \">>\":\n        return left >> right;\n      case \">>>\":\n        return left >>> right;\n    }\n  }\n\n  if (path.isCallExpression()) {\n    const callee = path.get(\"callee\");\n    let context;\n    let func;\n\n    // Number(1);\n    if (\n      callee.isIdentifier() &&\n      !path.scope.getBinding(callee.node.name) &&\n      isValidCallee(callee.node.name)\n    ) {\n      func = global[callee.node.name];\n    }\n\n    if (callee.isMemberExpression()) {\n      const object = callee.get(\"object\");\n      const property = callee.get(\"property\");\n\n      // Math.min(1, 2)\n      if (\n        object.isIdentifier() &&\n        property.isIdentifier() &&\n        isValidCallee(object.node.name) &&\n        !isInvalidMethod(property.node.name)\n      ) {\n        context = global[object.node.name];\n        // @ts-expect-error property may not exist in context object\n        func = context[property.node.name];\n      }\n\n      // \"abc\".charCodeAt(4)\n      if (object.isLiteral() && property.isIdentifier()) {\n        // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type (StringLiteral and NumberLiteral)\n        const type = typeof object.node.value;\n        if (type === \"string\" || type === \"number\") {\n          // @ts-expect-error todo(flow->ts): consider checking ast node type instead of value type\n          context = object.node.value;\n          func = context[property.node.name];\n        }\n      }\n    }\n\n    if (func) {\n      const args = path.get(\"arguments\").map(arg => evaluateCached(arg, state));\n      if (!state.confident) return;\n\n      return func.apply(context, args);\n    }\n  }\n\n  deopt(path, state);\n}\n\nfunction evaluateQuasis(\n  path: NodePath<t.TaggedTemplateExpression | t.TemplateLiteral>,\n  quasis: Array<any>,\n  state: State,\n  raw = false,\n) {\n  let str = \"\";\n\n  let i = 0;\n  const exprs: Array<NodePath<t.Node>> = path.isTemplateLiteral()\n    ? path.get(\"expressions\")\n    : path.get(\"quasi.expressions\");\n\n  for (const elem of quasis) {\n    // not confident, evaluated an expression we don't like\n    if (!state.confident) break;\n\n    // add on element\n    str += raw ? elem.value.raw : elem.value.cooked;\n\n    // add on interpolated expression if it's present\n    const expr = exprs[i++];\n    if (expr) str += String(evaluateCached(expr, state));\n  }\n\n  if (!state.confident) return;\n  return str;\n}\n\n/**\n * Walk the input `node` and statically evaluate it.\n *\n * Returns an object in the form `{ confident, value, deopt }`. `confident`\n * indicates whether or not we had to drop out of evaluating the expression\n * because of hitting an unknown node that we couldn't confidently find the\n * value of, in which case `deopt` is the path of said node.\n *\n * Example:\n *\n *   t.evaluate(parse(\"5 + 5\")) // { confident: true, value: 10 }\n *   t.evaluate(parse(\"!true\")) // { confident: true, value: false }\n *   t.evaluate(parse(\"foo + foo\")) // { confident: false, value: undefined, deopt: NodePath }\n *\n */\n\nexport function evaluate(this: NodePath): {\n  confident: boolean;\n  value: any;\n  deopt?: NodePath;\n} {\n  const state: State = {\n    confident: true,\n    deoptPath: null,\n    seen: new Map(),\n  };\n  let value = evaluateCached(this, state);\n  if (!state.confident) value = undefined;\n\n  return {\n    confident: state.confident,\n    deopt: state.deoptPath,\n    value: value,\n  };\n}\n", "import { assertExpressionStatement } from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nexport type Formatter<T> = {\n  code: (source: string) => string;\n  validate: (ast: t.File) => void;\n  unwrap: (ast: t.File) => T;\n};\n\nfunction makeStatementFormatter<T>(\n  fn: (statements: Array<t.Statement>) => T,\n): Formatter<T> {\n  return {\n    // We need to prepend a \";\" to force statement parsing so that\n    // ExpressionStatement strings won't be parsed as directives.\n    // Alongside that, we also prepend a comment so that when a syntax error\n    // is encountered, the user will be less likely to get confused about\n    // where the random semicolon came from.\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: (ast: t.File): T => {\n      return fn(ast.program.body.slice(1));\n    },\n  };\n}\n\nexport const smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\n\nexport const statements = makeStatementFormatter(body => body);\n\nexport const statement = makeStatementFormatter(body => {\n  // We do this validation when unwrapping since the replacement process\n  // could have added or removed statements.\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\n\nexport const expression: Formatter<t.Expression> = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({ program }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  },\n};\n\nexport const program: Formatter<t.Program> = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program,\n};\n", "import type { ParserOptions as ParserOpts } from \"@babel/parser\";\n\nexport type { ParserOpts };\n\n/**\n * These are the options that 'babel-template' actually accepts and typechecks\n * when called. All other options are passed through to the parser.\n */\nexport type PublicOpts = {\n  /**\n   * A set of placeholder names to automatically accept, ignoring the given\n   * pattern entirely.\n   *\n   * This option can be used when using %%foo%% style placeholders.\n   */\n  placeholderWhitelist?: Set<string>;\n  /**\n   * A pattern to search for when looking for Identifier and StringLiteral\n   * nodes that can be replaced.\n   *\n   * 'false' will disable placeholder searching entirely, leaving only the\n   * 'placeholderWhitelist' value to find replacements.\n   *\n   * Defaults to /^[_$A-Z0-9]+$/.\n   *\n   * This option can be used when using %%foo%% style placeholders.\n   */\n  placeholderPattern?: RegExp | false;\n  /**\n   * 'true' to pass through comments from the template into the resulting AST,\n   * or 'false' to automatically discard comments. Defaults to 'false'.\n   */\n  preserveComments?: boolean;\n  /**\n   * 'true' to use %%foo%% style placeholders, 'false' to use legacy placeholders\n   * described by placeholderPattern or placeholderWhitelist.\n   * When it is not set, it behaves as 'true' if there are syntactic placeholders,\n   * otherwise as 'false'.\n   */\n  syntacticPlaceholders?: boolean | null;\n};\n\nexport type TemplateOpts = {\n  parser: ParserOpts;\n  placeholderWhitelist?: Set<string>;\n  placeholderPattern?: RegExp | false;\n  preserveComments?: boolean;\n  syntacticPlaceholders?: boolean;\n};\n\nexport function merge(a: TemplateOpts, b: TemplateOpts): TemplateOpts {\n  const {\n    placeholderWhitelist = a.placeholderWhitelist,\n    placeholderPattern = a.placeholderPattern,\n    preserveComments = a.preserveComments,\n    syntacticPlaceholders = a.syntacticPlaceholders,\n  } = b;\n\n  return {\n    parser: {\n      ...a.parser,\n      ...b.parser,\n    },\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n  };\n}\n\nexport function validate(opts: unknown): TemplateOpts {\n  if (opts != null && typeof opts !== \"object\") {\n    throw new Error(\"Unknown template options.\");\n  }\n\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n    ...parser\n  } = opts || ({} as any);\n\n  if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {\n    throw new Error(\n      \"'.placeholderWhitelist' must be a Set, null, or undefined\",\n    );\n  }\n\n  if (\n    placeholderPattern != null &&\n    !(placeholderPattern instanceof RegExp) &&\n    placeholderPattern !== false\n  ) {\n    throw new Error(\n      \"'.placeholderPattern' must be a RegExp, false, null, or undefined\",\n    );\n  }\n\n  if (preserveComments != null && typeof preserveComments !== \"boolean\") {\n    throw new Error(\n      \"'.preserveComments' must be a boolean, null, or undefined\",\n    );\n  }\n\n  if (\n    syntacticPlaceholders != null &&\n    typeof syntacticPlaceholders !== \"boolean\"\n  ) {\n    throw new Error(\n      \"'.syntacticPlaceholders' must be a boolean, null, or undefined\",\n    );\n  }\n  if (\n    syntacticPlaceholders === true &&\n    (placeholderWhitelist != null || placeholderPattern != null)\n  ) {\n    throw new Error(\n      \"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" +\n        \" with '.syntacticPlaceholders: true'\",\n    );\n  }\n\n  return {\n    parser,\n    placeholderWhitelist: placeholderWhitelist || undefined,\n    placeholderPattern:\n      placeholderPattern == null ? undefined : placeholderPattern,\n    preserveComments: preserveComments == null ? undefined : preserveComments,\n    syntacticPlaceholders:\n      syntacticPlaceholders == null ? undefined : syntacticPlaceholders,\n  };\n}\n\nexport type PublicReplacements = { [x: string]: unknown } | Array<unknown>;\nexport type TemplateReplacements = { [x: string]: unknown } | void;\n\nexport function normalizeReplacements(\n  replacements: unknown,\n): TemplateReplacements {\n  if (Array.isArray(replacements)) {\n    return replacements.reduce((acc, replacement, i) => {\n      acc[\"$\" + i] = replacement;\n      return acc;\n    }, {});\n  } else if (typeof replacements === \"object\" || replacements == null) {\n    return (replacements as any) || undefined;\n  }\n\n  throw new Error(\n    \"Template replacements must be an array, object, null, or undefined\",\n  );\n}\n", "import {\n  isCallExpression,\n  isExpressionStatement,\n  isFunction,\n  isIdentifier,\n  isJSXIdentifier,\n  isNewExpression,\n  isPlaceholder,\n  isStatement,\n  isStringLiteral,\n  removePropertiesDeep,\n  traverse,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { TraversalAncestors, TraversalHandler } from \"@babel/types\";\nimport { parse } from \"@babel/parser\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport type { TemplateOpts, ParserOpts } from \"./options\";\nimport type { Formatter } from \"./formatters\";\n\nexport type Metadata = {\n  ast: t.File;\n  placeholders: Array<Placeholder>;\n  placeholderNames: Set<string>;\n};\n\ntype PlaceholderType = \"string\" | \"param\" | \"statement\" | \"other\";\nexport type Placeholder = {\n  name: string;\n  resolve: (a: t.File) => { parent: t.Node; key: string; index?: number };\n  type: PlaceholderType;\n  isDuplicate: boolean;\n};\n\nconst PATTERN = /^[_$A-Z0-9]+$/;\n\nexport default function parseAndBuildMetadata<T>(\n  formatter: Formatter<T>,\n  code: string,\n  opts: TemplateOpts,\n): Metadata {\n  const {\n    placeholderWhitelist,\n    placeholderPattern,\n    preserveComments,\n    syntacticPlaceholders,\n  } = opts;\n\n  const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);\n\n  removePropertiesDeep(ast, {\n    preserveComments,\n  });\n\n  formatter.validate(ast);\n\n  const syntactic: MetadataState[\"syntactic\"] = {\n    placeholders: [],\n    placeholderNames: new Set(),\n  };\n  const legacy: MetadataState[\"legacy\"] = {\n    placeholders: [],\n    placeholderNames: new Set(),\n  };\n  const isLegacyRef: MetadataState[\"isLegacyRef\"] = { value: undefined };\n\n  traverse(ast, placeholderVisitorHandler as TraversalHandler<any>, {\n    syntactic,\n    legacy,\n    isLegacyRef,\n    placeholderWhitelist,\n    placeholderPattern,\n    syntacticPlaceholders,\n  });\n\n  return {\n    ast,\n    ...(isLegacyRef.value ? legacy : syntactic),\n  };\n}\n\nfunction placeholderVisitorHandler(\n  node: t.Node,\n  ancestors: TraversalAncestors,\n  state: MetadataState,\n) {\n  let name: string;\n\n  if (isPlaceholder(node)) {\n    if (state.syntacticPlaceholders === false) {\n      throw new Error(\n        \"%%foo%%-style placeholders can't be used when \" +\n          \"'.syntacticPlaceholders' is false.\",\n      );\n    } else {\n      name = node.name.name;\n      state.isLegacyRef.value = false;\n    }\n  } else if (state.isLegacyRef.value === false || state.syntacticPlaceholders) {\n    return;\n  } else if (isIdentifier(node) || isJSXIdentifier(node)) {\n    name = node.name;\n    state.isLegacyRef.value = true;\n  } else if (isStringLiteral(node)) {\n    name = node.value;\n    state.isLegacyRef.value = true;\n  } else {\n    return;\n  }\n\n  if (\n    !state.isLegacyRef.value &&\n    (state.placeholderPattern != null || state.placeholderWhitelist != null)\n  ) {\n    // This check is also in options.js. We need it there to handle the default\n    // .syntacticPlaceholders behavior.\n    throw new Error(\n      \"'.placeholderWhitelist' and '.placeholderPattern' aren't compatible\" +\n        \" with '.syntacticPlaceholders: true'\",\n    );\n  }\n\n  if (\n    state.isLegacyRef.value &&\n    (state.placeholderPattern === false ||\n      !(state.placeholderPattern || PATTERN).test(name)) &&\n    !state.placeholderWhitelist?.has(name)\n  ) {\n    return;\n  }\n\n  // Keep our own copy of the ancestors so we can use it in .resolve().\n  ancestors = ancestors.slice();\n\n  const { node: parent, key } = ancestors[ancestors.length - 1];\n\n  let type: PlaceholderType;\n  if (\n    isStringLiteral(node) ||\n    isPlaceholder(node, { expectedNode: \"StringLiteral\" })\n  ) {\n    type = \"string\";\n  } else if (\n    (isNewExpression(parent) && key === \"arguments\") ||\n    (isCallExpression(parent) && key === \"arguments\") ||\n    (isFunction(parent) && key === \"params\")\n  ) {\n    type = \"param\";\n  } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {\n    type = \"statement\";\n    ancestors = ancestors.slice(0, -1);\n  } else if (isStatement(node) && isPlaceholder(node)) {\n    type = \"statement\";\n  } else {\n    type = \"other\";\n  }\n\n  const { placeholders, placeholderNames } = state.isLegacyRef.value\n    ? state.legacy\n    : state.syntactic;\n\n  placeholders.push({\n    name,\n    type,\n    resolve: ast => resolveAncestors(ast, ancestors),\n    isDuplicate: placeholderNames.has(name),\n  });\n  placeholderNames.add(name);\n}\n\nfunction resolveAncestors(ast: t.File, ancestors: TraversalAncestors) {\n  let parent: t.Node = ast;\n  for (let i = 0; i < ancestors.length - 1; i++) {\n    const { key, index } = ancestors[i];\n\n    if (index === undefined) {\n      parent = (parent as any)[key];\n    } else {\n      parent = (parent as any)[key][index];\n    }\n  }\n\n  const { key, index } = ancestors[ancestors.length - 1];\n\n  return { parent, key, index };\n}\n\ntype MetadataState = {\n  syntactic: {\n    placeholders: Array<Placeholder>;\n    placeholderNames: Set<string>;\n  };\n  legacy: {\n    placeholders: Array<Placeholder>;\n    placeholderNames: Set<string>;\n  };\n  isLegacyRef: {\n    value?: boolean;\n  };\n  placeholderWhitelist?: Set<string>;\n  placeholderPattern?: RegExp | false;\n  syntacticPlaceholders?: boolean;\n};\n\nfunction parseWithCodeFrame(\n  code: string,\n  parserOpts: ParserOpts,\n  syntacticPlaceholders?: boolean,\n): t.File {\n  const plugins = (parserOpts.plugins || []).slice();\n  if (syntacticPlaceholders !== false) {\n    plugins.push(\"placeholders\");\n  }\n\n  parserOpts = {\n    allowReturnOutsideFunction: true,\n    allowSuperOutsideMethod: true,\n    sourceType: \"module\",\n    ...parserOpts,\n    plugins,\n  };\n\n  try {\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    return parse(code, parserOpts);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message += \"\\n\" + codeFrameColumns(code, { start: loc });\n      err.code = \"BABEL_TEMPLATE_PARSE_ERROR\";\n    }\n    throw err;\n  }\n}\n", "import {\n  blockStatement,\n  cloneNode,\n  emptyStatement,\n  expressionStatement,\n  identifier,\n  isStatement,\n  isStringLiteral,\n  stringLiteral,\n  validate,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nimport type { TemplateReplacements } from \"./options\";\nimport type { Metadata, Placeholder } from \"./parse\";\n\nexport default function populatePlaceholders(\n  metadata: Metadata,\n  replacements: TemplateReplacements,\n): t.File {\n  const ast = cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(placeholder => {\n      if (\n        !Object.prototype.hasOwnProperty.call(replacements, placeholder.name)\n      ) {\n        const placeholderName = placeholder.name;\n\n        throw new Error(\n          `Error: No substitution given for \"${placeholderName}\". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`,\n        );\n      }\n    });\n    Object.keys(replacements).forEach(key => {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(`Unknown substitution \"${key}\" given`);\n      }\n    });\n  }\n\n  // Process in reverse order so AST mutation doesn't change indices that\n  // will be needed for later calls to `placeholder.resolve()`.\n  metadata.placeholders\n    .slice()\n    .reverse()\n    .forEach(placeholder => {\n      try {\n        applyReplacement(\n          placeholder,\n          ast,\n          (replacements && replacements[placeholder.name]) || null,\n        );\n      } catch (e) {\n        e.message = `@babel/template placeholder \"${placeholder.name}\": ${e.message}`;\n        throw e;\n      }\n    });\n\n  return ast;\n}\n\nfunction applyReplacement(\n  placeholder: Placeholder,\n  ast: t.File,\n  replacement: any,\n) {\n  // Track inserted nodes and clone them if they are inserted more than\n  // once to avoid injecting the same node multiple times.\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(node => cloneNode(node));\n    } else if (typeof replacement === \"object\") {\n      replacement = cloneNode(replacement);\n    }\n  }\n\n  const { parent, key, index } = placeholder.resolve(ast);\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = stringLiteral(replacement);\n    }\n    if (!replacement || !isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = expressionStatement(identifier(replacement));\n      } else if (!isStatement(replacement)) {\n        replacement = expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = identifier(replacement);\n        }\n        if (!isStatement(replacement)) {\n          replacement = expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = identifier(replacement);\n    }\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  if (index === undefined) {\n    validate(parent, key, replacement);\n\n    (parent as any)[key] = replacement;\n  } else {\n    const items: Array<t.Node> = (parent as any)[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice(index, 1, ...replacement);\n      } else {\n        items[index] = replacement;\n      }\n    } else {\n      items[index] = replacement;\n    }\n\n    validate(parent, key, items);\n    (parent as any)[key] = items;\n  }\n}\n", "import type { Formatter } from \"./formatters\";\nimport type { TemplateOpts } from \"./options\";\nimport type { Metadata } from \"./parse\";\nimport { normalizeReplacements } from \"./options\";\nimport parseAndBuildMetadata from \"./parse\";\nimport populatePlaceholders from \"./populate\";\n\nexport default function stringTemplate<T>(\n  formatter: Formatter<T>,\n  code: string,\n  opts: TemplateOpts,\n): (arg?: unknown) => T {\n  code = formatter.code(code);\n\n  let metadata: Metadata;\n\n  return (arg?: unknown) => {\n    const replacements = normalizeReplacements(arg);\n\n    if (!metadata) metadata = parseAndBuildMetadata(formatter, code, opts);\n\n    return formatter.unwrap(populatePlaceholders(metadata, replacements));\n  };\n}\n", "import type { Formatter } from \"./formatters\";\nimport type { TemplateReplacements, TemplateOpts } from \"./options\";\nimport { normalizeReplacements } from \"./options\";\nimport parseAndBuildMetadata from \"./parse\";\nimport populatePlaceholders from \"./populate\";\n\nexport default function literalTemplate<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n): (_: Array<unknown>) => (_: unknown) => T {\n  const { metadata, names } = buildLiteralData(formatter, tpl, opts);\n\n  return arg => {\n    const defaultReplacements: TemplateReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n\n    return (arg: unknown) => {\n      const replacements = normalizeReplacements(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap(\n        populatePlaceholders(\n          metadata,\n          replacements\n            ? Object.assign(replacements, defaultReplacements)\n            : defaultReplacements,\n        ),\n      );\n    };\n  };\n}\n\nfunction buildLiteralData<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n) {\n  let names;\n  let nameSet: Set<string>;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    // If there are cases where the template already contains $0 or any other\n    // matching pattern, we keep adding \"$\" characters until a unique prefix\n    // is found.\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = parseAndBuildMetadata(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n\n      // Explicitly include our generated names in the whitelist so users never\n      // have to think about whether their placeholder pattern will match.\n      placeholderWhitelist: new Set(\n        result.names.concat(\n          opts.placeholderWhitelist\n            ? Array.from(opts.placeholderWhitelist)\n            : [],\n        ),\n      ),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders,\n    });\n  } while (\n    metadata.placeholders.some(\n      placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name),\n    )\n  );\n\n  return { metadata, names };\n}\n\nfunction buildTemplateCode(\n  tpl: Array<string>,\n  prefix: string,\n): { names: Array<string>; code: string } {\n  const names = [];\n\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n\n    code += value + tpl[i];\n  }\n\n  return { names, code };\n}\n", "import { merge, validate } from \"./options\";\nimport type { TemplateOpts, PublicOpts, PublicReplacements } from \"./options\";\nimport type { Formatter } from \"./formatters\";\n\nimport stringTemplate from \"./string\";\nimport literalTemplate from \"./literal\";\n\nexport type TemplateBuilder<T> = {\n  // Build a new builder, merging the given options with the previous ones.\n  (opts: PublicOpts): TemplateBuilder<T>;\n\n  // Building from a string produces an AST builder function by default.\n  (tpl: string, opts?: PublicOpts): (replacements?: PublicReplacements) => T;\n\n  // Building from a template literal produces an AST builder function by default.\n  (tpl: TemplateStringsArray, ...args: Array<unknown>): (\n    replacements?: PublicReplacements,\n  ) => T;\n\n  // Allow users to explicitly create templates that produce ASTs, skipping\n  // the need for an intermediate function.\n  ast: {\n    (tpl: string, opts?: PublicOpts): T;\n    (tpl: TemplateStringsArray, ...args: Array<unknown>): T;\n  };\n};\n\n// Prebuild the options that will be used when parsing a `.ast` template.\n// These do not use a pattern because there is no way for users to pass in\n// replacement patterns to begin with, and disabling pattern matching means\n// users have more flexibility in what type of content they have in their\n// template JS.\nconst NO_PLACEHOLDER: TemplateOpts = validate({\n  placeholderPattern: false,\n});\n\nexport default function createTemplateBuilder<T>(\n  formatter: Formatter<T>,\n  defaultOpts?: TemplateOpts,\n): TemplateBuilder<T> {\n  const templateFnCache = new WeakMap();\n  const templateAstCache = new WeakMap();\n  const cachedOpts = defaultOpts || validate(null);\n\n  return Object.assign(\n    ((tpl, ...args) => {\n      if (typeof tpl === \"string\") {\n        if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n        return extendedTrace(\n          stringTemplate(formatter, tpl, merge(cachedOpts, validate(args[0]))),\n        );\n      } else if (Array.isArray(tpl)) {\n        let builder = templateFnCache.get(tpl);\n        if (!builder) {\n          builder = literalTemplate(formatter, tpl, cachedOpts);\n          templateFnCache.set(tpl, builder);\n        }\n        return extendedTrace(builder(args));\n      } else if (typeof tpl === \"object\" && tpl) {\n        if (args.length > 0) throw new Error(\"Unexpected extra params.\");\n        return createTemplateBuilder(\n          formatter,\n          merge(cachedOpts, validate(tpl)),\n        );\n      }\n      throw new Error(`Unexpected template param ${typeof tpl}`);\n    }) as TemplateBuilder<T>,\n    {\n      ast: (tpl: string | Array<string>, ...args: Array<unknown>) => {\n        if (typeof tpl === \"string\") {\n          if (args.length > 1) throw new Error(\"Unexpected extra params.\");\n          return stringTemplate(\n            formatter,\n            tpl,\n            merge(merge(cachedOpts, validate(args[0])), NO_PLACEHOLDER),\n          )();\n        } else if (Array.isArray(tpl)) {\n          let builder = templateAstCache.get(tpl);\n          if (!builder) {\n            builder = literalTemplate(\n              formatter,\n              tpl,\n              merge(cachedOpts, NO_PLACEHOLDER),\n            );\n            templateAstCache.set(tpl, builder);\n          }\n          return builder(args)();\n        }\n\n        throw new Error(`Unexpected template param ${typeof tpl}`);\n      },\n    },\n  );\n}\n\nfunction extendedTrace<Arg, Result>(\n  fn: (_: Arg) => Result,\n): (_: Arg) => Result {\n  // Since we lazy parse the template, we get the current stack so we have the\n  // original stack to append if it errors when parsing\n  let rootStack = \"\";\n  try {\n    // error stack gets populated in IE only on throw\n    // (https://msdn.microsoft.com/en-us/library/hh699850(v=vs.94).aspx)\n    throw new Error();\n  } catch (error) {\n    if (error.stack) {\n      // error.stack does not exists in IE <= 9\n      // We slice off the top 3 items in the stack to remove the call to\n      // 'extendedTrace', and the anonymous builder function, with the final\n      // stripped line being the error message itself since we threw it\n      // in the first place and it doesn't matter.\n      rootStack = error.stack.split(\"\\n\").slice(3).join(\"\\n\");\n    }\n  }\n\n  return (arg: Arg) => {\n    try {\n      return fn(arg);\n    } catch (err) {\n      err.stack += `\\n    =============\\n${rootStack}`;\n      throw err;\n    }\n  };\n}\n", "import * as formatters from \"./formatters\";\nimport createTemplateBuilder from \"./builder\";\n\nexport const smart = createTemplateBuilder(formatters.smart);\nexport const statement = createTemplateBuilder(formatters.statement);\nexport const statements = createTemplateBuilder(formatters.statements);\nexport const expression = createTemplateBuilder(formatters.expression);\nexport const program = createTemplateBuilder(formatters.program);\n\ntype DefaultTemplateBuilder = typeof smart & {\n  smart: typeof smart;\n  statement: typeof statement;\n  statements: typeof statements;\n  expression: typeof expression;\n  program: typeof program;\n};\n\nexport default Object.assign(smart.bind(undefined) as DefaultTemplateBuilder, {\n  smart,\n  statement,\n  statements,\n  expression,\n  program,\n  ast: smart.ast,\n});\n", "import template from \"@babel/template\";\nimport {\n  NOT_LOCAL_BINDING,\n  cloneNode,\n  identifier,\n  isAssignmentExpression,\n  isAssignmentPattern,\n  isFunction,\n  isIdentifier,\n  isLiteral,\n  isNullLiteral,\n  isObjectMethod,\n  isObjectProperty,\n  isRegExpLiteral,\n  isRestElement,\n  isTemplateLiteral,\n  isVariableDeclarator,\n  toBindingIdentifierName,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type { NodePath, Scope, Visitor } from \"@babel/traverse\";\n\nfunction getFunctionArity(node: t.Function): number {\n  const count = node.params.findIndex(\n    param => isAssignmentPattern(param) || isRestElement(param),\n  );\n  return count === -1 ? node.params.length : count;\n}\n\nconst buildPropertyMethodAssignmentWrapper = template.statement(`\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n`);\n\nconst buildGeneratorPropertyMethodAssignmentWrapper = template.statement(`\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n`);\n\ntype State = {\n  name: string;\n  outerDeclar: t.Identifier;\n  selfAssignment: boolean;\n  selfReference: boolean;\n};\n\nconst visitor: Visitor<State> = {\n  \"ReferencedIdentifier|BindingIdentifier\"(\n    path: NodePath<t.Identifier>,\n    state,\n  ) {\n    // check if this node matches our function id\n    if (path.node.name !== state.name) return;\n\n    // check that we don't have a local variable declared as that removes the need\n    // for the wrapper\n    const localDeclar = path.scope.getBindingIdentifier(state.name);\n    if (localDeclar !== state.outerDeclar) return;\n\n    state.selfReference = true;\n    path.stop();\n  },\n};\n\nfunction getNameFromLiteralId(id: t.Literal) {\n  if (isNullLiteral(id)) {\n    return \"null\";\n  }\n\n  if (isRegExpLiteral(id)) {\n    return `_${id.pattern}_${id.flags}`;\n  }\n\n  if (isTemplateLiteral(id)) {\n    return id.quasis.map(quasi => quasi.value.raw).join(\"\");\n  }\n\n  if (id.value !== undefined) {\n    return id.value + \"\";\n  }\n\n  return \"\";\n}\n\nfunction wrap(\n  state: State,\n  method: t.FunctionExpression | t.Class,\n  id: t.Identifier,\n  scope: Scope,\n) {\n  if (state.selfReference) {\n    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {\n      // we can just munge the local binding\n      scope.rename(id.name);\n    } else {\n      // we don't currently support wrapping class expressions\n      if (!isFunction(method)) return;\n\n      // need to add a wrapper since we can't change the references\n      let build = buildPropertyMethodAssignmentWrapper;\n      if (method.generator) {\n        build = buildGeneratorPropertyMethodAssignmentWrapper;\n      }\n\n      const template = (\n        build({\n          FUNCTION: method,\n          FUNCTION_ID: id,\n          FUNCTION_KEY: scope.generateUidIdentifier(id.name),\n        }) as t.ExpressionStatement\n      ).expression as t.CallExpression;\n\n      // shim in dummy params to retain function arity, if you try to read the\n      // source then you'll get the original since it's proxied so it's all good\n      const params = (\n        (template.callee as t.FunctionExpression).body\n          .body[0] as any as t.FunctionExpression\n      ).params;\n\n      for (let i = 0, len = getFunctionArity(method); i < len; i++) {\n        params.push(scope.generateUidIdentifier(\"x\"));\n      }\n\n      return template;\n    }\n  }\n\n  method.id = id;\n  scope.getProgramParent().references[id.name] = true;\n}\n\nfunction visit(\n  node: t.FunctionExpression | t.Class,\n  name: string,\n  scope: Scope,\n) {\n  const state: State = {\n    selfAssignment: false,\n    selfReference: false,\n    outerDeclar: scope.getBindingIdentifier(name),\n    name: name,\n  };\n\n  // check to see if we have a local binding of the id we're setting inside of\n  // the function, this is important as there are caveats associated\n\n  const binding = scope.getOwnBinding(name);\n\n  if (binding) {\n    if (binding.kind === \"param\") {\n      // safari will blow up in strict mode with code like:\n      //\n      //   let t = function t(t) {};\n      //\n      // with the error:\n      //\n      //   Cannot declare a parameter named 't' as it shadows the name of a\n      //   strict mode function.\n      //\n      // this isn't to the spec and they've invented this behaviour which is\n      // **extremely** annoying so we avoid setting the name if it has a param\n      // with the same id\n      state.selfReference = true;\n    } else {\n      // otherwise it's defined somewhere in scope like:\n      //\n      //   let t = function () {\n      //     let t = 2;\n      //   };\n      //\n      // so we can safely just set the id and move along as it shadows the\n      // bound function id\n    }\n  } else if (state.outerDeclar || scope.hasGlobal(name)) {\n    scope.traverse(node, visitor, state);\n  }\n\n  return state;\n}\n\n/**\n * Add id to function/class expression inferred from the AST\n *\n * @export\n * @template N The unamed expression type\n * @param {Object} nodePathLike The NodePath-like input\n * @param {N} nodePathLike.node an AST node\n * @param {NodePath<N>[\"parent\"]} [nodePathLike.parent] The parent of the AST node\n * @param {Scope} nodePathLike.scope The scope associated to the AST node\n * @param {t.LVal | t.StringLiteral | t.NumericLiteral | t.BigIntLiteral} [nodePathLike.id] the fallback naming source when the helper\n * can not infer the function name from the AST\n * @param {boolean} [localBinding=false] whether a name could shadow a self-reference (e.g. converting arrow function)\n * @param {boolean} [supportUnicodeId=false] whether the compilation target supports unicodeId (non-BMP characters) or not\n * @returns {(N | t.CallExpression | void)}\n * - modified node when name can be inferred,\n * - an IIFE when `node` contains a binding shadowing the inferred function name (e.g. `let f = function (f) {}`),\n * - `void` when `node` has `id` property or the helper can not inferred the name or the inferred name contains non-BMP characters that is not supported by current target\n */\nexport default function <N extends t.FunctionExpression | t.Class>(\n  {\n    node,\n    parent,\n    scope,\n    id,\n  }: {\n    node: N;\n    parent?: NodePath<N>[\"parent\"];\n    scope: Scope;\n    id?: t.LVal | t.StringLiteral | t.NumericLiteral | t.BigIntLiteral;\n  },\n  localBinding = false,\n  supportUnicodeId = false,\n): N | t.CallExpression | void {\n  // has an `id` so we don't need to infer one\n  if (node.id) return;\n\n  if (\n    (isObjectProperty(parent) || isObjectMethod(parent, { kind: \"method\" })) &&\n    (!parent.computed || isLiteral(parent.key))\n  ) {\n    // { foo() {} };\n    id = parent.key as\n      | t.Identifier\n      | t.StringLiteral\n      | t.NumericLiteral\n      | t.BigIntLiteral;\n  } else if (isVariableDeclarator(parent)) {\n    // let foo = function () {};\n    id = parent.id;\n\n    // but not \"let foo = () => {};\" being converted to function expression\n    if (isIdentifier(id) && !localBinding) {\n      const binding = scope.parent.getBinding(id.name);\n      if (\n        binding &&\n        binding.constant &&\n        scope.getBinding(id.name) === binding\n      ) {\n        // always going to reference this method\n        node.id = cloneNode(id);\n        // @ts-expect-error Fixme: avoid mutating AST nodes\n        node.id[NOT_LOCAL_BINDING] = true;\n        return;\n      }\n    }\n  } else if (isAssignmentExpression(parent, { operator: \"=\" })) {\n    // foo = function () {};\n    id = parent.left;\n  } else if (!id) {\n    return;\n  }\n\n  let name;\n  if (id && isLiteral(id)) {\n    name = getNameFromLiteralId(id);\n  } else if (id && isIdentifier(id)) {\n    name = id.name;\n  }\n\n  if (name === undefined) {\n    return;\n  }\n\n  if (!supportUnicodeId && isFunction(node) && /[\\uD800-\\uDFFF]/.test(name)) {\n    return;\n  }\n\n  name = toBindingIdentifierName(name);\n  const newId = identifier(name);\n\n  // The id shouldn't be considered a local binding to the function because\n  // we are simply trying to set the function name and not actually create\n  // a local binding.\n  // @ts-expect-error Fixme: avoid mutating AST nodes\n  newId[NOT_LOCAL_BINDING] = true;\n\n  const state = visit(node, name, scope);\n  return wrap(state, node, newId, scope) || node;\n}\n", "// This file contains methods that convert the path node into another node or some other type of data.\n\nimport {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  logicalExpression,\n  LOGICAL_OPERATORS,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super as _super,\n  thisExpression,\n  toExpression,\n  unaryExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\nimport nameFunction from \"@babel/helper-function-name\";\nimport { merge as mergeVisitors } from \"../visitors\";\nimport type NodePath from \"./index\";\n\nexport function toComputedKey(this: NodePath) {\n  let key;\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  // @ts-expect-error todo(flow->ts) computed does not exist in ClassPrivateProperty\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nexport function ensureBlock(\n  this: NodePath<\n    t.Loop | t.WithStatement | t.Function | t.LabeledStatement | t.CatchClause\n  >,\n) {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements: Array<t.Statement> = [];\n\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(returnStatement(body.node as t.Expression));\n    } else {\n      key = \"expression\";\n      statements.push(expressionStatement(body.node as t.Expression));\n    }\n  }\n\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath) as NodePath;\n  body.setup(\n    parentPath,\n    listKey\n      ? // @ts-expect-error listKey must present in parent path\n        parentPath.node[listKey]\n      : parentPath.node,\n    listKey,\n    key,\n  );\n\n  return this.node;\n}\n\n/**\n * Keeping this for backward-compatibility. You should use arrowFunctionToExpression() for >=7.x.\n */\n// TODO(Babel 8): Remove this\nexport function arrowFunctionToShadowed(this: NodePath) {\n  if (!this.isArrowFunctionExpression()) return;\n\n  this.arrowFunctionToExpression();\n}\n\n/**\n * Given an arbitrary function, process its content as if it were an arrow function, moving references\n * to \"this\", \"arguments\", \"super\", and such into the function's parent scope. This method is useful if\n * you have wrapped some set of items in an IIFE or other function, but want \"this\", \"arguments\", and super\"\n * to continue behaving as expected.\n */\nexport function unwrapFunctionEnvironment(this: NodePath) {\n  if (\n    !this.isArrowFunctionExpression() &&\n    !this.isFunctionExpression() &&\n    !this.isFunctionDeclaration()\n  ) {\n    throw this.buildCodeFrameError(\n      \"Can only unwrap the environment of a function.\",\n    );\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction setType<N extends t.Node, T extends N[\"type\"]>(\n  path: NodePath<N>,\n  type: T,\n): asserts path is NodePath<Extract<N, { type: T }>> {\n  path.node.type = type;\n}\n\n/**\n * Convert a given arrow function into a normal ES5 function expression.\n */\nexport function arrowFunctionToExpression(\n  this: NodePath<t.ArrowFunctionExpression>,\n  {\n    allowInsertArrow = true,\n    allowInsertArrowWithRest = allowInsertArrow,\n    /** @deprecated Use `noNewArrows` instead */\n    specCompliant = false,\n    // TODO(Babel 8): Consider defaulting to `false` for spec compliancy\n    noNewArrows = !specCompliant,\n  }: {\n    allowInsertArrow?: boolean | void;\n    allowInsertArrowWithRest?: boolean | void;\n    specCompliant?: boolean | void;\n    noNewArrows?: boolean;\n  } = {},\n): NodePath<\n  Exclude<t.Function, t.Method | t.ArrowFunctionExpression> | t.CallExpression\n> {\n  if (!this.isArrowFunctionExpression()) {\n    throw (this as NodePath).buildCodeFrameError(\n      \"Cannot convert non-arrow function to a function expression.\",\n    );\n  }\n\n  const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(\n    this,\n    noNewArrows,\n    allowInsertArrow,\n    allowInsertArrowWithRest,\n  );\n\n  // @ts-expect-error TS requires explicit fn type annotation\n  fn.ensureBlock();\n  setType(fn, \"FunctionExpression\");\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding\n      ? null\n      : fn.scope.generateUidIdentifier(\"arrowCheckId\");\n    if (checkBinding) {\n      fn.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([]),\n      });\n    }\n\n    fn.get(\"body\").unshiftContainer(\n      \"body\",\n      expressionStatement(\n        callExpression(this.hub.addHelper(\"newArrowCheck\"), [\n          thisExpression(),\n          checkBinding\n            ? identifier(checkBinding.name)\n            : identifier(thisBinding),\n        ]),\n      ),\n    );\n\n    fn.replaceWith(\n      callExpression(\n        memberExpression(\n          // @ts-expect-error TS can't infer nameFunction returns CallExpression | ArrowFunctionExpression here\n          nameFunction(this, true) || fn.node,\n          identifier(\"bind\"),\n        ),\n        [checkBinding ? identifier(checkBinding.name) : thisExpression()],\n      ),\n    );\n\n    return fn.get(\"callee.object\");\n  }\n\n  return fn;\n}\n\nconst getSuperCallsVisitor = mergeVisitors<{\n  allSuperCalls: NodePath<t.CallExpression>[];\n}>([\n  {\n    CallExpression(child, { allSuperCalls }) {\n      if (!child.get(\"callee\").isSuper()) return;\n      allSuperCalls.push(child);\n    },\n  },\n  environmentVisitor,\n]);\n\n/**\n * Given a function, traverse its contents, and if there are references to \"this\", \"arguments\", \"super\",\n * or \"new.target\", ensure that these references reference the parent environment around this function.\n *\n * @returns `thisBinding`: the name of the injected reference to `this`; for example \"_this\"\n * @returns `fnPath`: the new path to the function node. This is different from the fnPath\n *                    parameter when the function node is wrapped in another node.\n */\nfunction hoistFunctionEnvironment(\n  fnPath: NodePath<t.Function>,\n  // TODO(Babel 8): Consider defaulting to `false` for spec compliancy\n  noNewArrows: boolean | void = true,\n  allowInsertArrow: boolean | void = true,\n  allowInsertArrowWithRest: boolean | void = true,\n): { thisBinding: string; fnPath: NodePath<t.Function> } {\n  let arrowParent;\n  let thisEnvFn: NodePath<t.Function> = fnPath.findParent(p => {\n    if (p.isArrowFunctionExpression()) {\n      arrowParent ??= p;\n      return false;\n    }\n    return (\n      p.isFunction() ||\n      p.isProgram() ||\n      p.isClassProperty({ static: false }) ||\n      p.isClassPrivateProperty({ static: false })\n    );\n  }) as NodePath<t.Function>;\n  const inConstructor = thisEnvFn.isClassMethod({ kind: \"constructor\" });\n\n  if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {\n    if (arrowParent) {\n      thisEnvFn = arrowParent;\n    } else if (allowInsertArrow) {\n      // It's safe to wrap this function in another and not hoist to the\n      // top level because the 'this' binding is constant in class\n      // properties (since 'super()' has already been called), so we don't\n      // need to capture/reassign it at the top level.\n      fnPath.replaceWith(\n        callExpression(\n          arrowFunctionExpression([], toExpression(fnPath.node)),\n          [],\n        ),\n      );\n      thisEnvFn = fnPath.get(\"callee\") as NodePath<t.ArrowFunctionExpression>;\n      fnPath = thisEnvFn.get(\"body\") as NodePath<t.FunctionExpression>;\n    } else {\n      throw fnPath.buildCodeFrameError(\n        \"Unable to transform arrow inside class property\",\n      );\n    }\n  }\n\n  const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } =\n    getScopeInformation(fnPath);\n\n  // Convert all super() calls in the constructor, if super is used in an arrow.\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-arrow-functions', \" +\n          \"it's not possible to compile `super()` in an arrow function without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n    if (!allowInsertArrowWithRest) {\n      // preset-env with target `since 2017` enables `transform-parameters` without `transform-classes`.\n      throw superCalls[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-parameters', \" +\n          \"it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n    const allSuperCalls: NodePath<t.CallExpression>[] = [];\n    thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  // Convert all \"arguments\" references in the arrow to point at the alias.\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => identifier(\"arguments\");\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(\n          binaryExpression(\n            \"===\",\n            unaryExpression(\"typeof\", args()),\n            stringLiteral(\"undefined\"),\n          ),\n          thisEnvFn.scope.buildUndefinedNode(),\n          args(),\n        );\n      } else {\n        return args();\n      }\n    });\n\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  // Convert all \"new.target\" references in the arrow to point at the alias.\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () =>\n      metaProperty(identifier(\"new\"), identifier(\"target\")),\n    );\n\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  // Convert all \"super.prop\" references to point at aliases.\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\n        \"When using '@babel/plugin-transform-arrow-functions', \" +\n          \"it's not possible to compile `super.prop` in an arrow function without compiling classes.\\n\" +\n          \"Please add '@babel/plugin-transform-classes' to your Babel configuration.\",\n      );\n    }\n\n    const flatSuperProps: NodePath<t.MemberExpression>[] = superProps.reduce(\n      (acc, superProp) => acc.concat(standardizeSuperProperty(superProp)),\n      [],\n    );\n\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed\n        ? \"\"\n        : // @ts-expect-error super property must not contain private name\n          superProp.get(\"property\").node.name;\n\n      const superParentPath = superProp.parentPath;\n\n      const isAssignment = superParentPath.isAssignmentExpression({\n        left: superProp.node,\n      });\n      const isCall = superParentPath.isCallExpression({\n        callee: superProp.node,\n      });\n      const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({\n        tag: superProp.node,\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n\n      const args: t.Expression[] = [];\n      if (superProp.node.computed) {\n        // SuperProperty must not be a private name\n        args.push(superProp.get(\"property\").node as t.Expression);\n      }\n\n      if (isAssignment) {\n        const value = superParentPath.node.right;\n        args.push(value);\n      }\n\n      const call = callExpression(identifier(superBinding), args);\n\n      if (isCall) {\n        superParentPath.unshiftContainer(\"arguments\", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier(\"call\")));\n\n        thisPaths.push(\n          superParentPath.get(\"arguments.0\") as NodePath<t.ThisExpression>,\n        );\n      } else if (isAssignment) {\n        // Replace not only the super.prop, but the whole assignment\n        superParentPath.replaceWith(call);\n      } else if (isTaggedTemplate) {\n        superProp.replaceWith(\n          callExpression(memberExpression(call, identifier(\"bind\"), false), [\n            thisExpression(),\n          ]),\n        );\n\n        thisPaths.push(\n          superProp.get(\"arguments.0\") as NodePath<t.ThisExpression>,\n        );\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  // Convert all \"this\" references in the arrow to point at the alias.\n  let thisBinding: string | null;\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (\n      noNewArrows ||\n      // In subclass constructors, still need to rewrite because \"this\" can't be bound in spec mode\n      // because it might not have been initialized yet.\n      (inConstructor && hasSuperClass(thisEnvFn))\n    ) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX()\n          ? jsxIdentifier(thisBinding)\n          : identifier(thisBinding);\n\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return { thisBinding, fnPath };\n}\n\ntype LogicalOp = Parameters<typeof logicalExpression>[0];\ntype BinaryOp = Parameters<typeof binaryExpression>[0];\n\nfunction isLogicalOp(op: string): op is LogicalOp {\n  return LOGICAL_OPERATORS.includes(op);\n}\n\nfunction standardizeSuperProperty(\n  superProp: NodePath<t.MemberExpression>,\n):\n  | [NodePath<t.MemberExpression>]\n  | [NodePath<t.MemberExpression>, NodePath<t.MemberExpression>] {\n  if (\n    superProp.parentPath.isAssignmentExpression() &&\n    superProp.parentPath.node.operator !== \"=\"\n  ) {\n    const assignmentPath = superProp.parentPath;\n\n    const op = assignmentPath.node.operator.slice(0, -1) as\n      | LogicalOp\n      | BinaryOp;\n\n    const value = assignmentPath.node.right;\n\n    const isLogicalAssignment = isLogicalOp(op);\n\n    if (superProp.node.computed) {\n      // from: super[foo] **= 4;\n      // to:   super[tmp = foo] = super[tmp] ** 4;\n\n      // from: super[foo] ??= 4;\n      // to:   super[tmp = foo] ?? super[tmp] = 4;\n\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n\n      const object = superProp.node.object;\n      const property = superProp.node.property as t.Expression;\n\n      assignmentPath\n        .get(\"left\")\n        .replaceWith(\n          memberExpression(\n            object,\n            assignmentExpression(\"=\", tmp, property),\n            true /* computed */,\n          ),\n        );\n\n      assignmentPath\n        .get(\"right\")\n        .replaceWith(\n          rightExpression(\n            isLogicalAssignment ? \"=\" : op,\n            memberExpression(object, identifier(tmp.name), true /* computed */),\n            value,\n          ),\n        );\n    } else {\n      // from: super.foo **= 4;\n      // to:   super.foo = super.foo ** 4;\n\n      // from: super.foo ??= 4;\n      // to:   super.foo ?? super.foo = 4;\n\n      const object = superProp.node.object;\n      const property = superProp.node.property as t.Identifier;\n\n      assignmentPath\n        .get(\"left\")\n        .replaceWith(memberExpression(object, property));\n\n      assignmentPath\n        .get(\"right\")\n        .replaceWith(\n          rightExpression(\n            isLogicalAssignment ? \"=\" : op,\n            memberExpression(object, identifier(property.name)),\n            value,\n          ),\n        );\n    }\n\n    if (isLogicalAssignment) {\n      assignmentPath.replaceWith(\n        logicalExpression(\n          op,\n          assignmentPath.node.left as t.MemberExpression,\n          assignmentPath.node.right,\n        ),\n      );\n    } else {\n      assignmentPath.node.operator = \"=\";\n    }\n\n    return [\n      assignmentPath.get(\"left\") as NodePath<t.MemberExpression>,\n      assignmentPath.get(\"right\").get(\"left\"),\n    ];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed\n      ? superProp.scope.generateDeclaredUidIdentifier(\"prop\")\n      : null;\n\n    const parts: t.Expression[] = [\n      assignmentExpression(\n        \"=\",\n        tmp,\n        memberExpression(\n          superProp.node.object,\n          computedKey\n            ? assignmentExpression(\n                \"=\",\n                computedKey,\n                superProp.node.property as t.Expression,\n              )\n            : superProp.node.property,\n          superProp.node.computed,\n        ),\n      ),\n      assignmentExpression(\n        \"=\",\n        memberExpression(\n          superProp.node.object,\n          computedKey ? identifier(computedKey.name) : superProp.node.property,\n          superProp.node.computed,\n        ),\n        binaryExpression(\n          // map `++` to `+`, and `--` to `-`\n          superProp.parentPath.node.operator[0] as \"+\" | \"-\",\n          identifier(tmp.name),\n          numericLiteral(1),\n        ),\n      ),\n    ];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(sequenceExpression(parts));\n\n    const left = updateExpr.get(\n      \"expressions.0.right\",\n    ) as NodePath<t.MemberExpression>;\n    const right = updateExpr.get(\n      \"expressions.1.left\",\n    ) as NodePath<t.MemberExpression>;\n    return [left, right];\n  }\n\n  return [superProp];\n\n  function rightExpression(\n    op: BinaryOp | \"=\",\n    left: t.MemberExpression,\n    right: t.Expression,\n  ) {\n    if (op === \"=\") {\n      return assignmentExpression(\"=\", left, right);\n    } else {\n      return binaryExpression(op, left, right);\n    }\n  }\n}\n\nfunction hasSuperClass(thisEnvFn: NodePath<t.Function>) {\n  return (\n    thisEnvFn.isClassMethod() &&\n    !!(thisEnvFn.parentPath.parentPath.node as t.Class).superClass\n  );\n}\n\nconst assignSuperThisVisitor = mergeVisitors<{\n  supers: WeakSet<t.CallExpression>;\n  thisBinding: string;\n}>([\n  {\n    CallExpression(child, { supers, thisBinding }) {\n      if (!child.get(\"callee\").isSuper()) return;\n      if (supers.has(child.node)) return;\n      supers.add(child.node);\n\n      child.replaceWithMultiple([\n        child.node,\n        assignmentExpression(\"=\", identifier(thisBinding), identifier(\"this\")),\n      ]);\n    },\n  },\n  environmentVisitor,\n]);\n\n// Create a binding that evaluates to the \"this\" of the given function.\nfunction getThisBinding(\n  thisEnvFn: NodePath<t.Function>,\n  inConstructor: boolean,\n) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n\n    thisEnvFn.traverse(assignSuperThisVisitor, {\n      supers: new WeakSet(),\n      thisBinding,\n    });\n  });\n}\n\n// Create a binding for a function that will call \"super()\" with arguments passed through.\nfunction getSuperBinding(thisEnvFn: NodePath<t.Function>) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return arrowFunctionExpression(\n      [restElement(argsBinding)],\n      callExpression(_super(), [spreadElement(identifier(argsBinding.name))]),\n    );\n  });\n}\n\n// Create a binding for a function that will call \"super.foo\" or \"super[foo]\".\nfunction getSuperPropBinding(\n  thisEnvFn: NodePath<t.Function>,\n  isAssignment: boolean,\n  propName: string,\n) {\n  const op = isAssignment ? \"set\" : \"get\";\n\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n\n    let fnBody;\n    if (propName) {\n      // () => super.foo\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      // (method) => super[method]\n      argsList.unshift(method);\n      fnBody = memberExpression(\n        _super(),\n        identifier(method.name),\n        true /* computed */,\n      );\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n\n      fnBody = assignmentExpression(\"=\", fnBody, identifier(valueIdent.name));\n    }\n\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(\n  thisEnvFn: NodePath,\n  key: string,\n  init: (name: string) => t.Expression,\n) {\n  const cacheKey = \"binding:\" + key;\n  let data: string | undefined = thisEnvFn.getData(cacheKey);\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data),\n    });\n  }\n\n  return data;\n}\n\ntype ScopeInfo = {\n  thisPaths: NodePath<t.ThisExpression | t.JSXIdentifier>[];\n  superCalls: NodePath<t.CallExpression>[];\n  superProps: NodePath<t.MemberExpression>[];\n  argumentsPaths: NodePath<t.Identifier | t.JSXIdentifier>[];\n  newTargetPaths: NodePath<t.MetaProperty>[];\n};\n\nconst getScopeInformationVisitor = mergeVisitors<ScopeInfo>([\n  {\n    ThisExpression(child, { thisPaths }) {\n      thisPaths.push(child);\n    },\n    JSXIdentifier(child, { thisPaths }) {\n      if (child.node.name !== \"this\") return;\n      if (\n        !child.parentPath.isJSXMemberExpression({ object: child.node }) &&\n        !child.parentPath.isJSXOpeningElement({ name: child.node })\n      ) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n    CallExpression(child, { superCalls }) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n    MemberExpression(child, { superProps }) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n    Identifier(child, { argumentsPaths }) {\n      if (!child.isReferencedIdentifier({ name: \"arguments\" })) return;\n\n      let curr = child.scope;\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while ((curr = curr.parent));\n\n      argumentsPaths.push(child);\n    },\n    MetaProperty(child, { newTargetPaths }) {\n      if (!child.get(\"meta\").isIdentifier({ name: \"new\" })) return;\n      if (!child.get(\"property\").isIdentifier({ name: \"target\" })) return;\n\n      newTargetPaths.push(child);\n    },\n  },\n  environmentVisitor,\n]);\n\nfunction getScopeInformation(fnPath: NodePath) {\n  const thisPaths: ScopeInfo[\"thisPaths\"] = [];\n  const argumentsPaths: ScopeInfo[\"argumentsPaths\"] = [];\n  const newTargetPaths: ScopeInfo[\"newTargetPaths\"] = [];\n  const superProps: ScopeInfo[\"superProps\"] = [];\n  const superCalls: ScopeInfo[\"superCalls\"] = [];\n\n  fnPath.traverse(getScopeInformationVisitor, {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls,\n  });\n\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls,\n  };\n}\n", "// This file contains methods responsible for introspecting the current path for certain values.\n\nimport type NodePath from \"./index\";\nimport {\n  STATEMENT_OR_BLOCK_KEYS,\n  VISITOR_KEYS,\n  isBlockStatement,\n  isExpression,\n  isIdentifier,\n  isLiteral,\n  isStringLiteral,\n  isType,\n  matchesPattern as _matchesPattern,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\n/**\n * Match the current node if it matches the provided `pattern`.\n *\n * For example, given the match `React.createClass` it would match the\n * parsed nodes of `React.createClass` and `React[\"createClass\"]`.\n */\n\nexport function matchesPattern(\n  this: NodePath,\n  pattern: string,\n  allowPartial?: boolean,\n): boolean {\n  return _matchesPattern(this.node, pattern, allowPartial);\n}\n\n/**\n * Check whether we have the input `key`. If the `key` references an array then we check\n * if the array has any items, otherwise we just check if it's falsy.\n */\n\nexport function has<N extends t.Node>(\n  this: NodePath<N>,\n  key: keyof N,\n): boolean {\n  const val = this.node && this.node[key];\n  if (val && Array.isArray(val)) {\n    return !!val.length;\n  } else {\n    return !!val;\n  }\n}\n\n/**\n * Description\n */\n\nexport function isStatic(this: NodePath): boolean {\n  return this.scope.isStatic(this.node);\n}\n\n/**\n * Alias of `has`.\n */\n\nexport const is = has;\n\n/**\n * Opposite of `has`.\n */\n\nexport function isnt<N extends t.Node>(\n  this: NodePath<N>,\n  key: keyof N,\n): boolean {\n  return !this.has(key);\n}\n\n/**\n * Check whether the path node `key` strict equals `value`.\n */\n\nexport function equals<N extends t.Node>(\n  this: NodePath<N>,\n  key: keyof N,\n  value: any,\n): boolean {\n  return this.node[key] === value;\n}\n\n/**\n * Check the type against our stored internal type of the node. This is handy when a node has\n * been removed yet we still internally know the type and need it to calculate node replacement.\n */\n\nexport function isNodeType(this: NodePath, type: string): boolean {\n  return isType(this.type, type);\n}\n\n/**\n * This checks whether or not we're in one of the following positions:\n *\n *   for (KEY in right);\n *   for (KEY;;);\n *\n * This is because these spots allow VariableDeclarations AND normal expressions so we need\n * to tell the path replacement that it's ok to replace this with an expression.\n */\n\nexport function canHaveVariableDeclarationOrExpression(this: NodePath) {\n  return (\n    (this.key === \"init\" || this.key === \"left\") && this.parentPath.isFor()\n  );\n}\n\n/**\n * This checks whether we are swapping an arrow function's body between an\n * expression and a block statement (or vice versa).\n *\n * This is because arrow functions may implicitly return an expression, which\n * is the same as containing a block statement.\n */\n\nexport function canSwapBetweenExpressionAndStatement(\n  this: NodePath,\n  replacement: t.Node,\n): boolean {\n  if (this.key !== \"body\" || !this.parentPath.isArrowFunctionExpression()) {\n    return false;\n  }\n\n  if (this.isExpression()) {\n    return isBlockStatement(replacement);\n  } else if (this.isBlockStatement()) {\n    return isExpression(replacement);\n  }\n\n  return false;\n}\n\n/**\n * Check whether the current path references a completion record\n */\n\nexport function isCompletionRecord(\n  this: NodePath,\n  allowInsideFunction?: boolean,\n): boolean {\n  let path = this;\n  let first = true;\n\n  do {\n    const { type, container } = path;\n\n    // we're in a function so can't be a completion record\n    if (!first && (path.isFunction() || type === \"StaticBlock\")) {\n      return !!allowInsideFunction;\n    }\n\n    first = false;\n\n    // check to see if we're the last item in the container and if we are\n    // we're a completion record!\n    if (Array.isArray(container) && path.key !== container.length - 1) {\n      return false;\n    }\n  } while (\n    (path = path.parentPath) &&\n    !path.isProgram() &&\n    !path.isDoExpression()\n  );\n\n  return true;\n}\n\n/**\n * Check whether or not the current `key` allows either a single statement or block statement\n * so we can explode it if necessary.\n */\n\nexport function isStatementOrBlock(this: NodePath): boolean {\n  if (\n    this.parentPath.isLabeledStatement() ||\n    isBlockStatement(this.container)\n  ) {\n    return false;\n  } else {\n    return STATEMENT_OR_BLOCK_KEYS.includes(this.key as string);\n  }\n}\n\n/**\n * Check if the currently assigned path references the `importName` of `moduleSource`.\n */\n\nexport function referencesImport(\n  this: NodePath,\n  moduleSource: string,\n  importName: string,\n): boolean {\n  if (!this.isReferencedIdentifier()) {\n    if (\n      (this.isJSXMemberExpression() &&\n        this.node.property.name === importName) ||\n      ((this.isMemberExpression() || this.isOptionalMemberExpression()) &&\n        (this.node.computed\n          ? isStringLiteral(this.node.property, { value: importName })\n          : (this.node.property as t.Identifier).name === importName))\n    ) {\n      const object = (\n        this as NodePath<t.MemberExpression | t.OptionalMemberExpression>\n      ).get(\"object\");\n      return (\n        object.isReferencedIdentifier() &&\n        object.referencesImport(moduleSource, \"*\")\n      );\n    }\n\n    return false;\n  }\n\n  const binding = this.scope.getBinding((this.node as t.Identifier).name);\n  if (!binding || binding.kind !== \"module\") return false;\n\n  const path = binding.path;\n  const parent = path.parentPath;\n  if (!parent.isImportDeclaration()) return false;\n\n  // check moduleSource\n  if (parent.node.source.value === moduleSource) {\n    if (!importName) return true;\n  } else {\n    return false;\n  }\n\n  if (path.isImportDefaultSpecifier() && importName === \"default\") {\n    return true;\n  }\n\n  if (path.isImportNamespaceSpecifier() && importName === \"*\") {\n    return true;\n  }\n\n  if (\n    path.isImportSpecifier() &&\n    isIdentifier(path.node.imported, { name: importName })\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Get the source code associated with this node.\n */\n\nexport function getSource(this: NodePath): string {\n  const node = this.node;\n  if (node.end) {\n    const code = this.hub.getCode();\n    if (code) return code.slice(node.start, node.end);\n  }\n  return \"\";\n}\n\nexport function willIMaybeExecuteBefore(\n  this: NodePath,\n  target: NodePath,\n): boolean {\n  return this._guessExecutionStatusRelativeTo(target) !== \"after\";\n}\n\nfunction getOuterFunction(path: NodePath) {\n  return path.isProgram()\n    ? path\n    : (\n        path.parentPath.scope.getFunctionParent() ||\n        path.parentPath.scope.getProgramParent()\n      ).path;\n}\n\nfunction isExecutionUncertain(type: t.Node[\"type\"], key: string) {\n  switch (type) {\n    // a && FOO\n    // a || FOO\n    case \"LogicalExpression\":\n      return key === \"right\";\n\n    // a ? FOO : FOO\n    // if (a) FOO; else FOO;\n    case \"ConditionalExpression\":\n    case \"IfStatement\":\n      return key === \"consequent\" || key === \"alternate\";\n\n    // while (a) FOO;\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n    case \"ForInStatement\":\n    case \"ForOfStatement\":\n      return key === \"body\";\n\n    // for (a; b; FOO) FOO;\n    case \"ForStatement\":\n      return key === \"body\" || key === \"update\";\n\n    // switch (a) { FOO }\n    case \"SwitchStatement\":\n      return key === \"cases\";\n\n    // try { a } catch FOO finally { b }\n    case \"TryStatement\":\n      return key === \"handler\";\n\n    // var [ x = FOO ]\n    case \"AssignmentPattern\":\n      return key === \"right\";\n\n    // a?.[FOO]\n    case \"OptionalMemberExpression\":\n      return key === \"property\";\n\n    // a?.(FOO)\n    case \"OptionalCallExpression\":\n      return key === \"arguments\";\n\n    default:\n      return false;\n  }\n}\n\nfunction isExecutionUncertainInList(paths: NodePath[], maxIndex: number) {\n  for (let i = 0; i < maxIndex; i++) {\n    const path = paths[i];\n    if (isExecutionUncertain(path.parent.type, path.parentKey)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// TODO (Babel 8)\n// This can be { before: boolean, after: boolean, unknown: boolean }.\n// This allows transforms like the tdz one to treat cases when the status\n// is both before and unknown/after like if it were before.\ntype RelativeExecutionStatus = \"before\" | \"after\" | \"unknown\";\n\n// Used to avoid infinite recursion in cases like\n//   function f() { if (false) f(); }\n//   f();\n// It also works with indirect recursion.\nconst SYMBOL_CHECKING = Symbol();\n\ntype ExecutionStatusCache = Map<\n  t.Node,\n  Map<t.Node, RelativeExecutionStatus | typeof SYMBOL_CHECKING>\n>;\n\n/**\n * Given a `target` check the execution status of it relative to the current path.\n *\n * \"Execution status\" simply refers to where or not we **think** this will execute\n * before or after the input `target` element.\n */\n\nexport function _guessExecutionStatusRelativeTo(\n  this: NodePath,\n  target: NodePath,\n): RelativeExecutionStatus {\n  return _guessExecutionStatusRelativeToCached(this, target, new Map());\n}\n\nfunction _guessExecutionStatusRelativeToCached(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  // check if the two paths are in different functions, we can't track execution of these\n  const funcParent = {\n    this: getOuterFunction(base),\n    target: getOuterFunction(target),\n  };\n\n  // here we check the `node` equality as sometimes we may have different paths for the\n  // same node due to path thrashing\n  if (funcParent.target.node !== funcParent.this.node) {\n    return _guessExecutionStatusRelativeToDifferentFunctionsCached(\n      base,\n      funcParent.target,\n      cache,\n    );\n  }\n\n  const paths = {\n    target: target.getAncestry(),\n    this: base.getAncestry(),\n  };\n\n  // If this is an ancestor of the target path,\n  // e.g. f(g); where this is f and target is g.\n  if (paths.target.indexOf(base) >= 0) return \"after\";\n  if (paths.this.indexOf(target) >= 0) return \"before\";\n\n  // get ancestor where the branches intersect\n  let commonPath;\n  const commonIndex = { target: 0, this: 0 };\n\n  while (!commonPath && commonIndex.this < paths.this.length) {\n    const path = paths.this[commonIndex.this];\n    commonIndex.target = paths.target.indexOf(path);\n    if (commonIndex.target >= 0) {\n      commonPath = path;\n    } else {\n      commonIndex.this++;\n    }\n  }\n\n  if (!commonPath) {\n    throw new Error(\n      \"Internal Babel error - The two compared nodes\" +\n        \" don't appear to belong to the same program.\",\n    );\n  }\n\n  if (\n    isExecutionUncertainInList(paths.this, commonIndex.this - 1) ||\n    isExecutionUncertainInList(paths.target, commonIndex.target - 1)\n  ) {\n    return \"unknown\";\n  }\n\n  const divergence = {\n    this: paths.this[commonIndex.this - 1],\n    target: paths.target[commonIndex.target - 1],\n  };\n\n  // container list so let's see which one is after the other\n  // e.g. [ THIS, TARGET ]\n  if (\n    divergence.target.listKey &&\n    divergence.this.listKey &&\n    divergence.target.container === divergence.this.container\n  ) {\n    return divergence.target.key > divergence.this.key ? \"before\" : \"after\";\n  }\n\n  // otherwise we're associated by a parent node, check which key comes before the other\n  const keys = VISITOR_KEYS[commonPath.type];\n  const keyPosition = {\n    this: keys.indexOf(divergence.this.parentKey),\n    target: keys.indexOf(divergence.target.parentKey),\n  };\n  return keyPosition.target > keyPosition.this ? \"before\" : \"after\";\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsInternal(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  if (!target.isFunctionDeclaration()) {\n    if (\n      _guessExecutionStatusRelativeToCached(base, target, cache) === \"before\"\n    ) {\n      return \"before\";\n    }\n    return \"unknown\";\n  } else if (target.parentPath.isExportDeclaration()) {\n    return \"unknown\";\n  }\n\n  // so we're in a completely different function, if this is a function declaration\n  // then we can be a bit smarter and handle cases where the function is either\n  // a. not called at all (part of an export)\n  // b. called directly\n  const binding = target.scope.getBinding(target.node.id.name);\n\n  // no references!\n  if (!binding.references) return \"before\";\n\n  const referencePaths: Array<NodePath> = binding.referencePaths;\n\n  let allStatus;\n\n  // verify that all the calls have the same execution status\n  for (const path of referencePaths) {\n    // if a reference is a child of the function we're checking against then we can\n    // safely ignore it\n    const childOfFunction = !!path.find(path => path.node === target.node);\n    if (childOfFunction) continue;\n\n    if (path.key !== \"callee\" || !path.parentPath.isCallExpression()) {\n      // This function is passed as a reference, so we don't\n      // know when it will be called.\n      return \"unknown\";\n    }\n\n    const status = _guessExecutionStatusRelativeToCached(base, path, cache);\n\n    if (allStatus && allStatus !== status) {\n      return \"unknown\";\n    } else {\n      allStatus = status;\n    }\n  }\n\n  return allStatus;\n}\n\nfunction _guessExecutionStatusRelativeToDifferentFunctionsCached(\n  base: NodePath,\n  target: NodePath,\n  cache: ExecutionStatusCache,\n): RelativeExecutionStatus {\n  let nodeMap = cache.get(base.node);\n  let cached;\n\n  if (!nodeMap) {\n    cache.set(base.node, (nodeMap = new Map()));\n  } else if ((cached = nodeMap.get(target.node))) {\n    if (cached === SYMBOL_CHECKING) {\n      return \"unknown\";\n    }\n    return cached;\n  }\n\n  nodeMap.set(target.node, SYMBOL_CHECKING);\n\n  const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(\n    base,\n    target,\n    cache,\n  );\n\n  nodeMap.set(target.node, result);\n  return result;\n}\n\n/**\n * Resolve a \"pointer\" `NodePath` to it's absolute path.\n */\nexport function resolve(\n  this: NodePath,\n  dangerous?: boolean,\n  resolved?: NodePath[],\n) {\n  return this._resolve(dangerous, resolved) || this;\n}\n\nexport function _resolve(\n  this: NodePath,\n  dangerous?: boolean,\n  resolved?: NodePath[],\n): NodePath | undefined | null {\n  // detect infinite recursion\n  // todo: possibly have a max length on this just to be safe\n  if (resolved && resolved.indexOf(this) >= 0) return;\n\n  // we store all the paths we've \"resolved\" in this array to prevent infinite recursion\n  resolved = resolved || [];\n  resolved.push(this);\n\n  if (this.isVariableDeclarator()) {\n    if (this.get(\"id\").isIdentifier()) {\n      return this.get(\"init\").resolve(dangerous, resolved);\n    } else {\n      // otherwise it's a request for a pattern and that's a bit more tricky\n    }\n  } else if (this.isReferencedIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return;\n\n    // reassigned so we can't really resolve it\n    if (!binding.constant) return;\n\n    // todo - lookup module in dependency graph\n    if (binding.kind === \"module\") return;\n\n    if (binding.path !== this) {\n      const ret = binding.path.resolve(dangerous, resolved);\n      // If the identifier resolves to parent node then we can't really resolve it.\n      if (this.find(parent => parent.node === ret.node)) return;\n      return ret;\n    }\n  } else if (this.isTypeCastExpression()) {\n    // @ ts-ignore todo: babel-types\n    return this.get(\"expression\").resolve(dangerous, resolved);\n  } else if (dangerous && this.isMemberExpression()) {\n    // this is dangerous, as non-direct target assignments will mutate it's state\n    // making this resolution inaccurate\n\n    const targetKey = this.toComputedKey();\n    if (!isLiteral(targetKey)) return;\n\n    // @ts-expect-error todo(flow->ts): NullLiteral\n    const targetName = targetKey.value;\n\n    const target = this.get(\"object\").resolve(dangerous, resolved);\n\n    if (target.isObjectExpression()) {\n      const props = target.get(\"properties\");\n      for (const prop of props as any[]) {\n        if (!prop.isProperty()) continue;\n\n        const key = prop.get(\"key\");\n\n        // { foo: obj }\n        let match =\n          prop.isnt(\"computed\") && key.isIdentifier({ name: targetName });\n\n        // { \"foo\": \"obj\" } or { [\"foo\"]: \"obj\" }\n        match = match || key.isLiteral({ value: targetName });\n\n        if (match) return prop.get(\"value\").resolve(dangerous, resolved);\n      }\n    } else if (target.isArrayExpression() && !isNaN(+targetName)) {\n      const elems = target.get(\"elements\");\n      const elem = elems[targetName];\n      if (elem) return elem.resolve(dangerous, resolved);\n    }\n  }\n}\n\nexport function isConstantExpression(this: NodePath): boolean {\n  if (this.isIdentifier()) {\n    const binding = this.scope.getBinding(this.node.name);\n    if (!binding) return false;\n    return binding.constant;\n  }\n\n  if (this.isLiteral()) {\n    if (this.isRegExpLiteral()) {\n      return false;\n    }\n\n    if (this.isTemplateLiteral()) {\n      return this.get(\"expressions\").every(expression =>\n        expression.isConstantExpression(),\n      );\n    }\n\n    return true;\n  }\n\n  if (this.isUnaryExpression()) {\n    if (this.node.operator !== \"void\") {\n      return false;\n    }\n\n    return this.get(\"argument\").isConstantExpression();\n  }\n\n  if (this.isBinaryExpression()) {\n    const { operator } = this.node;\n    return (\n      operator !== \"in\" &&\n      operator !== \"instanceof\" &&\n      this.get(\"left\").isConstantExpression() &&\n      this.get(\"right\").isConstantExpression()\n    );\n  }\n\n  return false;\n}\n\nexport function isInStrictMode(this: NodePath) {\n  const start = this.isProgram() ? this : this.parentPath;\n\n  const strictParent = start.find(path => {\n    if (path.isProgram({ sourceType: \"module\" })) return true;\n\n    if (path.isClass()) return true;\n\n    if (\n      path.isArrowFunctionExpression() &&\n      !path.get(\"body\").isBlockStatement()\n    ) {\n      return false;\n    }\n\n    let body: t.BlockStatement | t.Program;\n    if (path.isFunction()) {\n      body = path.node.body as t.BlockStatement;\n    } else if (path.isProgram()) {\n      body = path.node;\n    } else {\n      return false;\n    }\n\n    for (const directive of body.directives) {\n      if (directive.value.value === \"use strict\") {\n        return true;\n      }\n    }\n  });\n\n  return !!strictParent;\n}\n", "// This file contains methods responsible for maintaining a TraversalContext.\n\nimport { traverseNode } from \"../traverse-node\";\nimport { SHOULD_SKIP, SHOULD_STOP } from \"./index\";\nimport type TraversalContext from \"../context\";\nimport type NodePath from \"./index\";\nimport type * as t from \"@babel/types\";\n\nexport function call(this: NodePath, key: string): boolean {\n  const opts = this.opts;\n\n  this.debug(key);\n\n  if (this.node) {\n    if (this._call(opts[key])) return true;\n  }\n\n  if (this.node) {\n    return this._call(opts[this.node.type] && opts[this.node.type][key]);\n  }\n\n  return false;\n}\n\nexport function _call(this: NodePath, fns?: Array<Function>): boolean {\n  if (!fns) return false;\n\n  for (const fn of fns) {\n    if (!fn) continue;\n\n    const node = this.node;\n    if (!node) return true;\n\n    const ret = fn.call(this.state, this, this.state);\n    if (ret && typeof ret === \"object\" && typeof ret.then === \"function\") {\n      throw new Error(\n        `You appear to be using a plugin with an async traversal visitor, ` +\n          `which your current version of Babel does not support. ` +\n          `If you're using a published plugin, you may need to upgrade ` +\n          `your @babel/core version.`,\n      );\n    }\n    if (ret) {\n      throw new Error(`Unexpected return value from visitor method ${fn}`);\n    }\n\n    // node has been replaced, it will have been requeued\n    if (this.node !== node) return true;\n\n    // this.shouldSkip || this.shouldStop || this.removed\n    if (this._traverseFlags > 0) return true;\n  }\n\n  return false;\n}\n\nexport function isDenylisted(this: NodePath): boolean {\n  const denylist = this.opts.denylist ?? this.opts.blacklist;\n  return denylist && denylist.indexOf(this.node.type) > -1;\n}\n\n// TODO: Remove in Babel 8\nexport { isDenylisted as isBlacklisted };\n\nfunction restoreContext(path: NodePath, context: TraversalContext) {\n  if (path.context !== context) {\n    path.context = context;\n    path.state = context.state;\n    path.opts = context.opts;\n  }\n}\n\nexport function visit(this: NodePath): boolean {\n  if (!this.node) {\n    return false;\n  }\n\n  if (this.isDenylisted()) {\n    return false;\n  }\n\n  if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {\n    return false;\n  }\n\n  const currentContext = this.context;\n  // Note: We need to check \"this.shouldSkip\" first because\n  // another visitor can set it to true. Usually .shouldSkip is false\n  // before calling the enter visitor, but it can be true in case of\n  // a requeued node (e.g. by .replaceWith()) that is then marked\n  // with .skip().\n  if (this.shouldSkip || this.call(\"enter\")) {\n    this.debug(\"Skip...\");\n    return this.shouldStop;\n  }\n  restoreContext(this, currentContext);\n\n  this.debug(\"Recursing into...\");\n  this.shouldStop = traverseNode(\n    this.node,\n    this.opts,\n    this.scope,\n    this.state,\n    this,\n    this.skipKeys,\n  );\n\n  restoreContext(this, currentContext);\n\n  this.call(\"exit\");\n\n  return this.shouldStop;\n}\n\nexport function skip(this: NodePath) {\n  this.shouldSkip = true;\n}\n\nexport function skipKey(this: NodePath, key: string) {\n  if (this.skipKeys == null) {\n    this.skipKeys = {};\n  }\n  this.skipKeys[key] = true;\n}\n\nexport function stop(this: NodePath) {\n  // this.shouldSkip = true; this.shouldStop = true;\n  this._traverseFlags |= SHOULD_SKIP | SHOULD_STOP;\n}\n\nexport function setScope(this: NodePath) {\n  if (this.opts && this.opts.noScope) return;\n\n  let path = this.parentPath;\n\n  if (\n    // Skip method scope if is computed method key or decorator expression\n    ((this.key === \"key\" || this.listKey === \"decorators\") &&\n      path.isMethod()) ||\n    // Skip switch scope if for discriminant (`x` in `switch (x) {}`).\n    (this.key === \"discriminant\" && path.isSwitchStatement())\n  ) {\n    path = path.parentPath;\n  }\n\n  let target;\n  while (path && !target) {\n    if (path.opts && path.opts.noScope) return;\n\n    target = path.scope;\n    path = path.parentPath;\n  }\n\n  this.scope = this.getScope(target);\n  if (this.scope) this.scope.init();\n}\n\nexport function setContext<S = unknown>(\n  this: NodePath,\n  context?: TraversalContext<S>,\n) {\n  if (this.skipKeys != null) {\n    this.skipKeys = {};\n  }\n  // this.shouldSkip = false; this.shouldStop = false; this.removed = false;\n  this._traverseFlags = 0;\n\n  if (context) {\n    this.context = context;\n    this.state = context.state;\n    this.opts = context.opts;\n  }\n\n  this.setScope();\n\n  return this;\n}\n\n/**\n * Here we resync the node paths `key` and `container`. If they've changed according\n * to what we have stored internally then we attempt to resync by crawling and looking\n * for the new values.\n */\n\nexport function resync(this: NodePath) {\n  if (this.removed) return;\n\n  this._resyncParent();\n  this._resyncList();\n  this._resyncKey();\n  //this._resyncRemoved();\n}\n\nexport function _resyncParent(this: NodePath) {\n  if (this.parentPath) {\n    this.parent = this.parentPath.node;\n  }\n}\n\nexport function _resyncKey(this: NodePath) {\n  if (!this.container) return;\n\n  if (\n    this.node ===\n    // @ts-expect-error this.key should present in this.container\n    this.container[this.key]\n  ) {\n    return;\n  }\n\n  // grrr, path key is out of sync. this is likely due to a modification to the AST\n  // not done through our path APIs\n\n  if (Array.isArray(this.container)) {\n    for (let i = 0; i < this.container.length; i++) {\n      if (this.container[i] === this.node) {\n        return this.setKey(i);\n      }\n    }\n  } else {\n    for (const key of Object.keys(this.container)) {\n      // @ts-expect-error this.key should present in this.container\n      if (this.container[key] === this.node) {\n        return this.setKey(key);\n      }\n    }\n  }\n\n  // ¯\\_(ツ)_/¯ who knows where it's gone lol\n  this.key = null;\n}\n\nexport function _resyncList(this: NodePath) {\n  if (!this.parent || !this.inList) return;\n\n  const newContainer =\n    // @ts-expect-error this.listKey should present in this.parent\n    this.parent[this.listKey];\n  if (this.container === newContainer) return;\n\n  // container is out of sync. this is likely the result of it being reassigned\n  this.container = newContainer || null;\n}\n\nexport function _resyncRemoved(this: NodePath) {\n  if (\n    this.key == null ||\n    !this.container ||\n    // @ts-expect-error this.key should present in this.container\n    this.container[this.key] !== this.node\n  ) {\n    this._markRemoved();\n  }\n}\n\nexport function popContext(this: NodePath) {\n  this.contexts.pop();\n  if (this.contexts.length > 0) {\n    this.setContext(this.contexts[this.contexts.length - 1]);\n  } else {\n    this.setContext(undefined);\n  }\n}\n\nexport function pushContext(this: NodePath, context: TraversalContext) {\n  this.contexts.push(context);\n  this.setContext(context);\n}\n\nexport function setup(\n  this: NodePath,\n  parentPath: NodePath | undefined,\n  container: t.Node,\n  listKey: string,\n  key: string | number,\n) {\n  this.listKey = listKey;\n  this.container = container;\n\n  this.parentPath = parentPath || this.parentPath;\n  this.setKey(key);\n}\n\nexport function setKey(this: NodePath, key: string | number) {\n  this.key = key;\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key];\n  this.type = this.node?.type;\n}\n\nexport function requeue(this: NodePath, pathToQueue = this) {\n  if (pathToQueue.removed) return;\n\n  // If a path is skipped, and then replaced with a\n  // new one, the new one shouldn't probably be skipped.\n  if (process.env.BABEL_8_BREAKING) {\n    pathToQueue.shouldSkip = false;\n  }\n\n  // TODO(loganfsmyth): This should be switched back to queue in parent contexts\n  // automatically once #2892 and #4135 have been resolved. See #4140.\n  // let contexts = this._getQueueContexts();\n  const contexts = this.contexts;\n\n  for (const context of contexts) {\n    context.maybeQueue(pathToQueue);\n  }\n}\n\nexport function _getQueueContexts(this: NodePath) {\n  let path = this;\n  let contexts = this.contexts;\n  while (!contexts.length) {\n    path = path.parentPath;\n    if (!path) break;\n    contexts = path.contexts;\n  }\n  return contexts;\n}\n", "// this file contains hooks that handle ancestry cleanup of parent nodes when removing children\n\nimport type NodePath from \"..\";\nimport type * as t from \"@babel/types\";\n/**\n * Pre hooks should be used for either rejecting removal or delegating removal\n */\n\nexport const hooks = [\n  function (self: NodePath, parent: NodePath) {\n    const removeParent =\n      // while (NODE);\n      // removing the test of a while/switch, we can either just remove it entirely *or* turn the\n      // `test` into `true` unlikely that the latter will ever be what's wanted so we just remove\n      // the loop to avoid infinite recursion\n      (self.key === \"test\" && (parent.isWhile() || parent.isSwitchCase())) ||\n      // export NODE;\n      // just remove a declaration for an export as this is no longer valid\n      (self.key === \"declaration\" && parent.isExportDeclaration()) ||\n      // label: NODE\n      // stray labeled statement with no body\n      (self.key === \"body\" && parent.isLabeledStatement()) ||\n      // let NODE;\n      // remove an entire declaration if there are no declarators left\n      (self.listKey === \"declarations\" &&\n        parent.isVariableDeclaration() &&\n        parent.node.declarations.length === 1) ||\n      // NODE;\n      // remove the entire expression statement if there's no expression\n      (self.key === \"expression\" && parent.isExpressionStatement());\n\n    if (removeParent) {\n      parent.remove();\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {\n      // (node, NODE);\n      // we've just removed the second element of a sequence expression so let's turn that sequence\n      // expression into a regular expression\n      parent.replaceWith(parent.node.expressions[0]);\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (parent.isBinary()) {\n      // left + NODE;\n      // NODE + right;\n      // we're in a binary expression, better remove it and replace it with the last expression\n      if (self.key === \"left\") {\n        parent.replaceWith(parent.node.right);\n      } else {\n        // key === \"right\"\n        parent.replaceWith(parent.node.left);\n      }\n      return true;\n    }\n  },\n\n  function (self: NodePath, parent: NodePath) {\n    if (\n      (parent.isIfStatement() && self.key === \"consequent\") ||\n      (self.key === \"body\" &&\n        (parent.isLoop() || parent.isArrowFunctionExpression()))\n    ) {\n      self.replaceWith({\n        type: \"BlockStatement\",\n        body: [],\n      } as t.BlockStatement);\n      return true;\n    }\n  },\n];\n", "// This file contains methods responsible for removing a node.\n\nimport { hooks } from \"./lib/removal-hooks\";\nimport { path as pathCache } from \"../cache\";\nimport type NodePath from \"./index\";\nimport { REMOVED, SHOULD_SKIP } from \"./index\";\n\nexport function remove(this: NodePath) {\n  this._assertUnremoved();\n\n  this.resync();\n  if (!this.opts?.noScope) {\n    this._removeFromScope();\n  }\n\n  if (this._callRemovalHooks()) {\n    this._markRemoved();\n    return;\n  }\n\n  this.shareCommentsWithSiblings();\n  this._remove();\n  this._markRemoved();\n}\n\nexport function _removeFromScope(this: NodePath) {\n  const bindings = this.getBindingIdentifiers();\n  Object.keys(bindings).forEach(name => this.scope.removeBinding(name));\n}\n\nexport function _callRemovalHooks(this: NodePath) {\n  for (const fn of hooks) {\n    if (fn(this, this.parentPath)) return true;\n  }\n}\n\nexport function _remove(this: NodePath) {\n  if (Array.isArray(this.container)) {\n    this.container.splice(this.key as number, 1);\n    this.updateSiblingKeys(this.key as number, -1);\n  } else {\n    this._replaceWith(null);\n  }\n}\n\nexport function _markRemoved(this: NodePath) {\n  // this.shouldSkip = true; this.removed = true;\n  this._traverseFlags |= SHOULD_SKIP | REMOVED;\n  if (this.parent) pathCache.get(this.parent).delete(this.node);\n  this.node = null;\n}\n\nexport function _assertUnremoved(this: NodePath) {\n  if (this.removed) {\n    throw this.buildCodeFrameError(\n      \"NodePath has been removed so is read-only.\",\n    );\n  }\n}\n", "import { react } from \"@babel/types\";\nimport {\n  cloneNode,\n  jsxExpressionContainer,\n  variableDeclaration,\n  variableDeclarator,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"../../scope\";\nimport type NodePath from \"../index\";\nimport type Binding from \"../../scope/binding\";\nimport type { Visitor } from \"../../types\";\n\nconst referenceVisitor: Visitor<PathHoister> = {\n  // This visitor looks for bindings to establish a topmost scope for hoisting.\n  ReferencedIdentifier(path, state) {\n    // Don't hoist regular JSX identifiers ('div', 'span', etc).\n    // We do have to consider member expressions for hoisting (e.g. `this.component`)\n    if (\n      path.isJSXIdentifier() &&\n      react.isCompatTag(path.node.name) &&\n      !path.parentPath.isJSXMemberExpression()\n    ) {\n      return;\n    }\n\n    // If the identifier refers to `this`, we need to break on the closest non-arrow scope.\n    if (path.node.name === \"this\") {\n      let scope = path.scope;\n      do {\n        if (\n          scope.path.isFunction() &&\n          !scope.path.isArrowFunctionExpression()\n        ) {\n          break;\n        }\n      } while ((scope = scope.parent));\n      if (scope) state.breakOnScopePaths.push(scope.path);\n    }\n\n    // direct references that we need to track to hoist this to the highest scope we can\n    const binding = path.scope.getBinding(path.node.name);\n    if (!binding) return;\n\n    // we can handle reassignments only if they happen in the same scope as the declaration\n    for (const violation of binding.constantViolations) {\n      if (violation.scope !== binding.path.scope) {\n        state.mutableBinding = true;\n        path.stop();\n        return;\n      }\n    }\n\n    // this binding isn't accessible from the parent scope so we can safely ignore it\n    // eg. it's in a closure etc\n    if (binding !== state.scope.getBinding(path.node.name)) return;\n\n    state.bindings[path.node.name] = binding;\n  },\n};\n\nexport default class PathHoister<T extends t.Node = t.Node> {\n  breakOnScopePaths: NodePath[];\n  bindings: { [k: string]: Binding };\n  mutableBinding: boolean;\n  private scopes: Scope[];\n  scope: Scope;\n  private path: NodePath<T>;\n  private attachAfter: boolean;\n\n  constructor(path: NodePath<T>, scope: Scope) {\n    // Storage for scopes we can't hoist above.\n    this.breakOnScopePaths = [];\n    // Storage for bindings that may affect what path we can hoist to.\n    this.bindings = {};\n    // \"true\" if the current path contains a reference to a binding whose\n    // value can change and thus can't be safely hoisted.\n    this.mutableBinding = false;\n    // Storage for eligible scopes.\n    this.scopes = [];\n    // Our original scope and path.\n    this.scope = scope;\n    this.path = path;\n    // By default, we attach as far up as we can; but if we're trying\n    // to avoid referencing a binding, we may have to go after.\n    this.attachAfter = false;\n  }\n\n  // A scope is compatible if all required bindings are reachable.\n  isCompatibleScope(scope: Scope) {\n    for (const key of Object.keys(this.bindings)) {\n      const binding = this.bindings[key];\n      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Look through all scopes and push compatible ones.\n  getCompatibleScopes() {\n    let scope = this.path.scope;\n    do {\n      if (this.isCompatibleScope(scope)) {\n        this.scopes.push(scope);\n      } else {\n        break;\n      }\n\n      // deopt: These scopes are set in the visitor on const violations\n      if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {\n        break;\n      }\n    } while ((scope = scope.parent));\n  }\n\n  getAttachmentPath() {\n    let path = this._getAttachmentPath();\n    if (!path) return;\n\n    let targetScope = path.scope;\n\n    // don't allow paths that have their own lexical environments to pollute\n    if (targetScope.path === path) {\n      targetScope = path.scope.parent;\n    }\n\n    // avoid hoisting to a scope that contains bindings that are executed after our attachment path\n    if (targetScope.path.isProgram() || targetScope.path.isFunction()) {\n      for (const name of Object.keys(this.bindings)) {\n        // check binding is a direct child of this paths scope\n        if (!targetScope.hasOwnBinding(name)) continue;\n\n        const binding = this.bindings[name];\n\n        // allow parameter references and expressions in params (like destructuring rest)\n        if (binding.kind === \"param\" || binding.path.parentKey === \"params\") {\n          continue;\n        }\n\n        // For each binding, get its attachment parent. This gives us an idea of where we might\n        // introduce conflicts.\n        const bindingParentPath = this.getAttachmentParentForPath(binding.path);\n\n        // If the binding's attachment appears at or after our attachment point, then we move after it.\n        if (bindingParentPath.key >= path.key) {\n          this.attachAfter = true;\n          path = binding.path;\n\n          // We also move past any constant violations.\n          for (const violationPath of binding.constantViolations) {\n            if (this.getAttachmentParentForPath(violationPath).key > path.key) {\n              path = violationPath;\n            }\n          }\n        }\n      }\n    }\n\n    return path;\n  }\n\n  _getAttachmentPath() {\n    const scopes = this.scopes;\n\n    const scope = scopes.pop();\n    // deopt: no compatible scopes\n    if (!scope) return;\n\n    if (scope.path.isFunction()) {\n      if (this.hasOwnParamBindings(scope)) {\n        // deopt: should ignore this scope since it's ourselves\n        if (this.scope === scope) return;\n\n        // needs to be attached to the body\n        const bodies = scope.path.get(\"body\").get(\"body\") as NodePath[];\n        for (let i = 0; i < bodies.length; i++) {\n          // Don't attach to something that's going to get hoisted,\n          // like a default parameter\n          // @ts-expect-error todo(flow->ts): avoid mutating the node, introducing new fields\n          if (bodies[i].node._blockHoist) continue;\n          return bodies[i];\n        }\n        // deopt: If here, no attachment path found\n      } else {\n        // doesn't need to be be attached to this scope\n        return this.getNextScopeAttachmentParent();\n      }\n    } else if (scope.path.isProgram()) {\n      return this.getNextScopeAttachmentParent();\n    }\n  }\n\n  getNextScopeAttachmentParent() {\n    const scope = this.scopes.pop();\n    if (scope) return this.getAttachmentParentForPath(scope.path);\n  }\n\n  // Find an attachment for this path.\n  getAttachmentParentForPath(path: NodePath) {\n    do {\n      if (\n        // Beginning of the scope\n        !path.parentPath ||\n        // Has siblings and is a statement\n        (Array.isArray(path.container) && path.isStatement())\n      ) {\n        return path;\n      }\n    } while ((path = path.parentPath));\n  }\n\n  // Returns true if a scope has param bindings.\n  hasOwnParamBindings(scope: Scope) {\n    for (const name of Object.keys(this.bindings)) {\n      if (!scope.hasOwnBinding(name)) continue;\n\n      const binding = this.bindings[name];\n      // Ensure constant; without it we could place behind a reassignment\n      if (binding.kind === \"param\" && binding.constant) return true;\n    }\n    return false;\n  }\n\n  run() {\n    this.path.traverse(referenceVisitor, this);\n\n    if (this.mutableBinding) return;\n\n    this.getCompatibleScopes();\n\n    const attachTo = this.getAttachmentPath();\n    if (!attachTo) return;\n\n    // don't bother hoisting to the same function as this will cause multiple branches to be\n    // evaluated more than once leading to a bad optimisation\n    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;\n\n    // generate declaration and insert it to our point\n    let uid: t.Identifier | t.JSXExpressionContainer =\n      attachTo.scope.generateUidIdentifier(\"ref\");\n\n    // @ts-expect-error todo(flow->ts): more specific type for this.path\n    const declarator = variableDeclarator(uid, this.path.node);\n\n    const insertFn = this.attachAfter ? \"insertAfter\" : \"insertBefore\";\n    const [attached] = attachTo[insertFn]([\n      attachTo.isVariableDeclarator()\n        ? declarator\n        : variableDeclaration(\"var\", [declarator]),\n    ]);\n\n    const parent = this.path.parentPath;\n    if (parent.isJSXElement() && this.path.container === parent.node.children) {\n      // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with\n      // an expression container\n      uid = jsxExpressionContainer(uid);\n    }\n\n    this.path.replaceWith(cloneNode(uid));\n\n    return attachTo.isVariableDeclarator()\n      ? attached.get(\"init\")\n      : attached.get(\"declarations.0.init\");\n  }\n}\n", "// This file contains methods that modify the path/node in some ways.\n\nimport { path as pathCache } from \"../cache\";\nimport PathHoister from \"./lib/hoister\";\nimport NodePath from \"./index\";\nimport {\n  arrowFunctionExpression,\n  assertExpression,\n  assignmentExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  isAssignmentExpression,\n  isCallExpression,\n  isExportNamedDeclaration,\n  isExpression,\n  isIdentifier,\n  isSequenceExpression,\n  isSuper,\n  thisExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"../scope\";\n\n/**\n * Insert the provided nodes before the current one.\n */\n\nexport function insertBefore(\n  this: NodePath,\n  nodes_: t.Node | t.Node[],\n): NodePath[] {\n  this._assertUnremoved();\n\n  const nodes = this._verifyNodeList(nodes_);\n\n  const { parentPath, parent } = this;\n\n  if (\n    parentPath.isExpressionStatement() ||\n    parentPath.isLabeledStatement() ||\n    // https://github.com/babel/babel/issues/15293\n    // When Babel transforms `export class String { field }`, the class properties plugin will inject the defineProperty\n    // helper, which depends on the builtins e.g. String, Number, Symbol, etc. To prevent them from being shadowed by local\n    // exports, the helper injector replaces the named export into `class _String { field }; export { _String as String }`,\n    // with `parentPath` here changed to the moved ClassDeclaration, causing rare inconsistency between `parent` and `parentPath`.\n    // Here we retrieve the parent type from the `parent` property. This is a temporary fix and we should revisit when\n    // helpers should get injected.\n    isExportNamedDeclaration(parent) ||\n    (parentPath.isExportDefaultDeclaration() && this.isDeclaration())\n  ) {\n    return parentPath.insertBefore(nodes);\n  } else if (\n    (this.isNodeType(\"Expression\") && !this.isJSXElement()) ||\n    (parentPath.isForStatement() && this.key === \"init\")\n  ) {\n    if (this.node) nodes.push(this.node);\n    // @ts-expect-error todo(flow->ts): check that nodes is an array of statements\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return this._containerInsertBefore(nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node as t.Statement;\n    const shouldInsertCurrentNode =\n      node &&\n      (!this.isExpressionStatement() ||\n        (node as t.ExpressionStatement).expression != null);\n\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    return (this as NodePath<t.BlockStatement>).unshiftContainer(\n      \"body\",\n      // @ts-expect-error Fixme: refine nodes to t.BlockStatement[\"body\"] when this is a BlockStatement path\n      nodes,\n    );\n  } else {\n    throw new Error(\n      \"We don't know what to do with this node type. \" +\n        \"We were previously a Statement but we can't fit in here?\",\n    );\n  }\n}\n\nexport function _containerInsert<N extends t.Node>(\n  this: NodePath,\n  from: number,\n  nodes: N[],\n): NodePath<N>[] {\n  this.updateSiblingKeys(from, nodes.length);\n\n  const paths: NodePath<N>[] = [];\n\n  // @ts-expect-error todo(flow->ts): this.container could be a NodePath\n  this.container.splice(from, 0, ...nodes);\n  for (let i = 0; i < nodes.length; i++) {\n    const to = from + i;\n    const path = this.getSibling(to) as NodePath<N>;\n    paths.push(path);\n\n    if (this.context && this.context.queue) {\n      path.pushContext(this.context);\n    }\n  }\n\n  const contexts = this._getQueueContexts();\n\n  for (const path of paths) {\n    path.setScope();\n    path.debug(\"Inserted.\");\n\n    for (const context of contexts) {\n      context.maybeQueue(path, true);\n    }\n  }\n\n  return paths;\n}\n\nexport function _containerInsertBefore<N extends t.Node>(\n  this: NodePath,\n  nodes: N[],\n) {\n  return this._containerInsert(this.key as number, nodes);\n}\n\nexport function _containerInsertAfter<N extends t.Node>(\n  this: NodePath,\n  nodes: N[],\n) {\n  return this._containerInsert((this.key as number) + 1, nodes);\n}\n\nconst last = <T>(arr: T[]) => arr[arr.length - 1];\n\nfunction isHiddenInSequenceExpression(path: NodePath): boolean {\n  return (\n    isSequenceExpression(path.parent) &&\n    (last(path.parent.expressions) !== path.node ||\n      isHiddenInSequenceExpression(path.parentPath))\n  );\n}\n\nfunction isAlmostConstantAssignment(\n  node: t.Node,\n  scope: Scope,\n): node is t.AssignmentExpression & { left: t.Identifier } {\n  if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {\n    return false;\n  }\n\n  // Not every scope can contain variables. For example, we might be in\n  // a ClassScope either in the ClassHeritage or in a computed key.\n  const blockScope = scope.getBlockParent();\n\n  // If the variable is defined in the current scope and only assigned here,\n  // we can be sure that its value won't change.\n  return (\n    blockScope.hasOwnBinding(node.left.name) &&\n    blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1\n  );\n}\n\n/**\n * Insert the provided nodes after the current one. When inserting nodes after an\n * expression, ensure that the completion record is correct by pushing the current node.\n */\n\nexport function insertAfter(\n  this: NodePath,\n  nodes_: t.Node | t.Node[],\n): NodePath[] {\n  this._assertUnremoved();\n\n  if (this.isSequenceExpression()) {\n    return last(this.get(\"expressions\")).insertAfter(nodes_);\n  }\n\n  const nodes = this._verifyNodeList(nodes_);\n\n  const { parentPath, parent } = this;\n  if (\n    parentPath.isExpressionStatement() ||\n    parentPath.isLabeledStatement() ||\n    // see insertBefore\n    isExportNamedDeclaration(parent) ||\n    (parentPath.isExportDefaultDeclaration() && this.isDeclaration())\n  ) {\n    return parentPath.insertAfter(\n      nodes.map(node => {\n        // Usually after an expression we can safely insert another expression:\n        //   A.insertAfter(B)\n        //     foo = A;  -> foo = (A, B);\n        // If A is an expression statement, it isn't safe anymore so we need to\n        // convert B to an expression statement\n        //     A;        -> A; B // No semicolon! It could break if followed by [!\n        return isExpression(node) ? expressionStatement(node) : node;\n      }),\n    );\n  } else if (\n    (this.isNodeType(\"Expression\") &&\n      !this.isJSXElement() &&\n      !parentPath.isJSXElement()) ||\n    (parentPath.isForStatement() && this.key === \"init\")\n  ) {\n    if (this.node) {\n      const node = this.node as t.Expression | t.VariableDeclaration;\n      let { scope } = this;\n\n      if (scope.path.isPattern()) {\n        assertExpression(node);\n\n        this.replaceWith(callExpression(arrowFunctionExpression([], node), []));\n        (this.get(\"callee.body\") as NodePath<t.Expression>).insertAfter(nodes);\n        return [this];\n      }\n\n      if (isHiddenInSequenceExpression(this)) {\n        nodes.unshift(node);\n      }\n      // We need to preserve the value of this expression.\n      else if (isCallExpression(node) && isSuper(node.callee)) {\n        nodes.unshift(node);\n        // `super(...)` always evaluates to `this`.\n        nodes.push(thisExpression());\n      } else if (isAlmostConstantAssignment(node, scope)) {\n        nodes.unshift(node);\n        nodes.push(cloneNode(node.left));\n      } else if (scope.isPure(node, true)) {\n        // Insert the nodes before rather than after; it's not observable.\n        nodes.push(node);\n      } else {\n        // Inserting after the computed key of a method should insert the\n        // temporary binding in the method's parent's scope.\n        if (parentPath.isMethod({ computed: true, key: node })) {\n          scope = scope.parent;\n        }\n        const temp = scope.generateDeclaredUidIdentifier();\n        nodes.unshift(\n          expressionStatement(\n            // @ts-expect-error todo(flow->ts): This can be a variable\n            // declaraion in the \"init\" of a for statement, but that's\n            // invalid here.\n            assignmentExpression(\"=\", cloneNode(temp), node),\n          ),\n        );\n        nodes.push(expressionStatement(cloneNode(temp)));\n      }\n    }\n    // @ts-expect-error todo(flow->ts): check that nodes is an array of statements\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return this._containerInsertAfter(nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node as t.Statement;\n    const shouldInsertCurrentNode =\n      node &&\n      (!this.isExpressionStatement() ||\n        (node as t.ExpressionStatement).expression != null);\n\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    // @ts-expect-error Fixme: refine nodes to t.BlockStatement[\"body\"] when this is a BlockStatement path\n    return this.pushContainer(\"body\", nodes);\n  } else {\n    throw new Error(\n      \"We don't know what to do with this node type. \" +\n        \"We were previously a Statement but we can't fit in here?\",\n    );\n  }\n}\n\n/**\n * Update all sibling node paths after `fromIndex` by `incrementBy`.\n */\n\nexport function updateSiblingKeys(\n  this: NodePath,\n  fromIndex: number,\n  incrementBy: number,\n) {\n  if (!this.parent) return;\n\n  const paths = pathCache.get(this.parent);\n  for (const [, path] of paths) {\n    if (path.key >= fromIndex) {\n      path.key += incrementBy;\n    }\n  }\n}\n\nexport function _verifyNodeList<N extends t.Node>(\n  this: NodePath,\n  nodes: N | N[],\n): N[] {\n  if (!nodes) {\n    return [];\n  }\n\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let msg;\n\n    if (!node) {\n      msg = \"has falsy node\";\n    } else if (typeof node !== \"object\") {\n      msg = \"contains a non-object node\";\n    } else if (!node.type) {\n      msg = \"without a type\";\n    } else if (node instanceof NodePath) {\n      msg = \"has a NodePath when it expected a raw object\";\n    }\n\n    if (msg) {\n      const type = Array.isArray(node) ? \"array\" : typeof node;\n      throw new Error(\n        `Node list ${msg} with the index of ${i} and type of ${type}`,\n      );\n    }\n  }\n\n  return nodes;\n}\n\nexport function unshiftContainer<N extends t.Node, K extends keyof N & string>(\n  this: NodePath<N>,\n  listKey: K,\n  nodes: N[K] extends (infer E)[]\n    ? E | E[]\n    : // todo: refine to t.Node[]\n      //  ? E extends t.Node\n      //    ? E | E[]\n      //    : never\n      never,\n) {\n  // todo: NodePaths<Nodes>\n  this._assertUnremoved();\n\n  // @ts-expect-error fixme\n  nodes = this._verifyNodeList(nodes);\n\n  // get the first path and insert our nodes before it, if it doesn't exist then it\n  // doesn't matter, our nodes will be inserted anyway\n  const path = NodePath.get({\n    parentPath: this,\n    parent: this.node,\n    container: this.node[listKey] as unknown as t.Node | t.Node[],\n    listKey,\n    key: 0,\n  }).setContext(this.context);\n\n  return path._containerInsertBefore(\n    // @ts-expect-error typings needed to narrow down nodes as t.Node[]\n    nodes,\n  );\n}\n\nexport function pushContainer<N extends t.Node, K extends keyof N & string>(\n  this: NodePath<N>,\n  listKey: K,\n  nodes: N[K] extends (infer E)[]\n    ? E | E[]\n    : // todo: refine to t.Node[]\n      //  ? E extends t.Node\n      //    ? E | E[]\n      //    : never\n      never,\n) {\n  this._assertUnremoved();\n\n  const verifiedNodes = this._verifyNodeList(\n    // @ts-expect-error refine typings\n    nodes,\n  );\n\n  // get an invisible path that represents the last node + 1 and replace it with our\n  // nodes, effectively inlining it\n\n  const container = this.node[listKey];\n  const path = NodePath.get({\n    parentPath: this,\n    parent: this.node,\n    container: container as unknown as t.Node | t.Node[],\n    listKey,\n    // @ts-expect-error TS cannot infer that container is t.Node[]\n    key: container.length,\n  }).setContext(this.context);\n\n  return path.replaceWithMultiple(verifiedNodes);\n}\n\n/**\n * Hoist the current node to the highest scope possible and return a UID\n * referencing it.\n */\nexport function hoist<T extends t.Node>(\n  this: NodePath<T>,\n  scope: Scope = this.scope,\n) {\n  const hoister = new PathHoister<T>(this, scope);\n  return hoister.run();\n}\n", "// This file contains methods responsible for dealing with/retrieving children or siblings.\n\nimport type TraversalContext from \"../context\";\nimport NodePath from \"./index\";\nimport {\n  getBindingIdentifiers as _getBindingIdentifiers,\n  getOuterBindingIdentifiers as _getOuterBindingIdentifiers,\n  isDeclaration,\n  numericLiteral,\n  unaryExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\n\nconst NORMAL_COMPLETION = 0 as const;\nconst BREAK_COMPLETION = 1 as const;\n\ntype Completion = {\n  path: NodePath;\n  type: 0 | 1;\n};\n\ntype CompletionContext = {\n  // whether the current context allows `break` statement. When it allows, we have\n  // to search all the statements for potential `break`\n  canHaveBreak: boolean;\n  // whether the statement is an immediate descendant of a switch case clause\n  inCaseClause: boolean;\n  // whether the `break` statement record should be populated to upper level\n  // when a `break` statement is an immediate descendant of a block statement, e.g.\n  // `{ break }`, it can influence the control flow in the upper levels.\n  shouldPopulateBreak: boolean;\n};\n\nfunction NormalCompletion(path: NodePath) {\n  return { type: NORMAL_COMPLETION, path };\n}\n\nfunction BreakCompletion(path: NodePath) {\n  return { type: BREAK_COMPLETION, path };\n}\n\nexport function getOpposite(this: NodePath): NodePath | null {\n  if (this.key === \"left\") {\n    return this.getSibling(\"right\");\n  } else if (this.key === \"right\") {\n    return this.getSibling(\"left\");\n  }\n  return null;\n}\n\nfunction addCompletionRecords(\n  path: NodePath | null | undefined,\n  records: Completion[],\n  context: CompletionContext,\n): Completion[] {\n  if (path) {\n    records.push(..._getCompletionRecords(path, context));\n  }\n  return records;\n}\n\nfunction completionRecordForSwitch(\n  cases: NodePath<t.SwitchCase>[],\n  records: Completion[],\n  context: CompletionContext,\n): Completion[] {\n  // https://tc39.es/ecma262/#sec-runtime-semantics-caseblockevaluation\n  let lastNormalCompletions: Completion[] = [];\n  for (let i = 0; i < cases.length; i++) {\n    const casePath = cases[i];\n    const caseCompletions = _getCompletionRecords(casePath, context);\n    const normalCompletions = [];\n    const breakCompletions = [];\n    for (const c of caseCompletions) {\n      if (c.type === NORMAL_COMPLETION) {\n        normalCompletions.push(c);\n      }\n      if (c.type === BREAK_COMPLETION) {\n        breakCompletions.push(c);\n      }\n    }\n    if (normalCompletions.length) {\n      lastNormalCompletions = normalCompletions;\n    }\n    records.push(...breakCompletions);\n  }\n  records.push(...lastNormalCompletions);\n  return records;\n}\n\nfunction normalCompletionToBreak(completions: Completion[]) {\n  completions.forEach(c => {\n    c.type = BREAK_COMPLETION;\n  });\n}\n\n/**\n * Determine how we should handle the break statement for break completions\n *\n * @param {Completion[]} completions\n * @param {boolean} reachable Whether the break statement is reachable after\n   we mark the normal completions _before_ the given break completions as the final\n   completions. For example,\n   `{ 0 }; break;` is transformed to `{ return 0 }; break;`, the `break` here is unreachable\n   and thus can be removed without consequences. We may in the future reserve them instead since\n   we do not consistently remove unreachable statements _after_ break\n   `{ var x = 0 }; break;` is transformed to `{ var x = 0 }; return void 0;`, the `break` is reachable\n   because we can not wrap variable declaration under a return statement\n */\nfunction replaceBreakStatementInBreakCompletion(\n  completions: Completion[],\n  reachable: boolean,\n) {\n  completions.forEach(c => {\n    if (c.path.isBreakStatement({ label: null })) {\n      if (reachable) {\n        c.path.replaceWith(unaryExpression(\"void\", numericLiteral(0)));\n      } else {\n        c.path.remove();\n      }\n    }\n  });\n}\n\nfunction getStatementListCompletion(\n  paths: NodePath[],\n  context: CompletionContext,\n): Completion[] {\n  const completions = [];\n  if (context.canHaveBreak) {\n    let lastNormalCompletions = [];\n    for (let i = 0; i < paths.length; i++) {\n      const path = paths[i];\n      const newContext = { ...context, inCaseClause: false };\n      if (\n        path.isBlockStatement() &&\n        (context.inCaseClause || // case test: { break }\n          context.shouldPopulateBreak) // case test: { { break } }\n      ) {\n        newContext.shouldPopulateBreak = true;\n      } else {\n        newContext.shouldPopulateBreak = false;\n      }\n      const statementCompletions = _getCompletionRecords(path, newContext);\n      if (\n        statementCompletions.length > 0 &&\n        // we can stop search `paths` when we have seen a `path` that is\n        // effectively a `break` statement. Examples are\n        // - `break`\n        // - `if (true) { 1; break } else { 2; break }`\n        // - `{ break }```\n        // In other words, the paths after this `path` are unreachable\n        statementCompletions.every(c => c.type === BREAK_COMPLETION)\n      ) {\n        if (\n          lastNormalCompletions.length > 0 &&\n          statementCompletions.every(c =>\n            c.path.isBreakStatement({ label: null }),\n          )\n        ) {\n          // when a break completion has a path as BreakStatement, it must be `{ break }`\n          // whose completion value we can not determine, otherwise it would have been\n          // replaced by `replaceBreakStatementInBreakCompletion`\n          // When we have seen normal completions from the last statement\n          // it is safe to stop populating break and mark normal completions as break\n          normalCompletionToBreak(lastNormalCompletions);\n          completions.push(...lastNormalCompletions);\n          // Declarations have empty completion record, however they can not be nested\n          // directly in return statement, i.e. `return (var a = 1)` is invalid.\n          if (lastNormalCompletions.some(c => c.path.isDeclaration())) {\n            completions.push(...statementCompletions);\n            replaceBreakStatementInBreakCompletion(\n              statementCompletions,\n              /* reachable */ true,\n            );\n          }\n          replaceBreakStatementInBreakCompletion(\n            statementCompletions,\n            /* reachable */ false,\n          );\n        } else {\n          completions.push(...statementCompletions);\n          if (!context.shouldPopulateBreak) {\n            replaceBreakStatementInBreakCompletion(\n              statementCompletions,\n              /* reachable */ true,\n            );\n          }\n        }\n        break;\n      }\n      if (i === paths.length - 1) {\n        completions.push(...statementCompletions);\n      } else {\n        lastNormalCompletions = [];\n        for (let i = 0; i < statementCompletions.length; i++) {\n          const c = statementCompletions[i];\n          if (c.type === BREAK_COMPLETION) {\n            completions.push(c);\n          }\n          if (c.type === NORMAL_COMPLETION) {\n            lastNormalCompletions.push(c);\n          }\n        }\n      }\n    }\n  } else if (paths.length) {\n    // When we are in a context where `break` must not exist, we can skip linear\n    // search on statement lists and assume that the last\n    // non-variable-declaration statement determines the completion.\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const pathCompletions = _getCompletionRecords(paths[i], context);\n      if (\n        pathCompletions.length > 1 ||\n        (pathCompletions.length === 1 &&\n          !pathCompletions[0].path.isVariableDeclaration())\n      ) {\n        completions.push(...pathCompletions);\n        break;\n      }\n    }\n  }\n  return completions;\n}\n\nfunction _getCompletionRecords(\n  path: NodePath,\n  context: CompletionContext,\n): Completion[] {\n  let records: Completion[] = [];\n  if (path.isIfStatement()) {\n    records = addCompletionRecords(path.get(\"consequent\"), records, context);\n    records = addCompletionRecords(path.get(\"alternate\"), records, context);\n  } else if (\n    path.isDoExpression() ||\n    path.isFor() ||\n    path.isWhile() ||\n    path.isLabeledStatement()\n  ) {\n    // @ts-expect-error(flow->ts): todo\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isProgram() || path.isBlockStatement()) {\n    // @ts-expect-error(flow->ts): todo\n    return getStatementListCompletion(path.get(\"body\"), context);\n  } else if (path.isFunction()) {\n    return _getCompletionRecords(path.get(\"body\"), context);\n  } else if (path.isTryStatement()) {\n    records = addCompletionRecords(path.get(\"block\"), records, context);\n    records = addCompletionRecords(path.get(\"handler\"), records, context);\n  } else if (path.isCatchClause()) {\n    return addCompletionRecords(path.get(\"body\"), records, context);\n  } else if (path.isSwitchStatement()) {\n    return completionRecordForSwitch(path.get(\"cases\"), records, context);\n  } else if (path.isSwitchCase()) {\n    return getStatementListCompletion(path.get(\"consequent\"), {\n      canHaveBreak: true,\n      shouldPopulateBreak: false,\n      inCaseClause: true,\n    });\n  } else if (path.isBreakStatement()) {\n    records.push(BreakCompletion(path));\n  } else {\n    records.push(NormalCompletion(path));\n  }\n\n  return records;\n}\n\n/**\n * Retrieve the completion records of a given path.\n * Note: to ensure proper support on `break` statement, this method\n * will manipulate the AST around the break statement. Do not call the method\n * twice for the same path.\n *\n * @export\n * @param {NodePath} this\n * @returns {NodePath[]} Completion records\n */\nexport function getCompletionRecords(this: NodePath): NodePath[] {\n  const records = _getCompletionRecords(this, {\n    canHaveBreak: false,\n    shouldPopulateBreak: false,\n    inCaseClause: false,\n  });\n  return records.map(r => r.path);\n}\n\nexport function getSibling(this: NodePath, key: string | number): NodePath {\n  return NodePath.get({\n    parentPath: this.parentPath,\n    parent: this.parent,\n    container: this.container,\n    listKey: this.listKey,\n    key: key,\n  }).setContext(this.context);\n}\n\nexport function getPrevSibling(this: NodePath): NodePath {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  return this.getSibling(this.key - 1);\n}\n\nexport function getNextSibling(this: NodePath): NodePath {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  return this.getSibling(this.key + 1);\n}\n\nexport function getAllNextSiblings(this: NodePath): NodePath[] {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  let _key: number = this.key;\n  let sibling = this.getSibling(++_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(++_key);\n  }\n  return siblings;\n}\n\nexport function getAllPrevSiblings(this: NodePath): NodePath[] {\n  // @ts-expect-error todo(flow->ts) this.key could be a string\n  let _key: number = this.key;\n  let sibling = this.getSibling(--_key);\n  const siblings = [];\n  while (sibling.node) {\n    siblings.push(sibling);\n    sibling = this.getSibling(--_key);\n  }\n  return siblings;\n}\n\n// convert \"1\" to 1 (string index to number index)\ntype MaybeToIndex<T extends string> = T extends `${bigint}` ? number : T;\n\ntype Pattern<Obj extends string, Prop extends string> = `${Obj}.${Prop}`;\n\n// split \"body.body.1\" to [\"body\", \"body\", 1]\ntype Split<P extends string> = P extends Pattern<infer O, infer U>\n  ? [MaybeToIndex<O>, ...Split<U>]\n  : [MaybeToIndex<P>];\n\n// get all K with Node[K] is t.Node | t.Node[]\ntype NodeKeyOf<Node extends t.Node | t.Node[]> = keyof Pick<\n  Node,\n  {\n    [Key in keyof Node]-?: Node[Key] extends t.Node | t.Node[] ? Key : never;\n  }[keyof Node]\n>;\n\n// traverse the Node with tuple path [\"body\", \"body\", 1]\n// Path should be created with Split\ntype Trav<\n  Node extends t.Node | t.Node[],\n  Path extends unknown[],\n> = Path extends [infer K, ...infer R]\n  ? K extends NodeKeyOf<Node>\n    ? R extends []\n      ? Node[K]\n      : // @ts-expect-error ignore since TS is not smart enough\n        Trav<Node[K], R>\n    : never\n  : never;\n\ntype ToNodePath<T> = T extends Array<t.Node | null | undefined>\n  ? Array<NodePath<T[number]>>\n  : T extends t.Node | null | undefined\n  ? NodePath<T>\n  : never;\n\nfunction get<T extends t.Node, K extends keyof T>(\n  this: NodePath<T>,\n  key: K,\n  context?: boolean | TraversalContext,\n): T[K] extends Array<t.Node | null | undefined>\n  ? Array<NodePath<T[K][number]>>\n  : T[K] extends t.Node | null | undefined\n  ? NodePath<T[K]>\n  : never;\n\nfunction get<T extends t.Node, K extends string>(\n  this: NodePath<T>,\n  key: K,\n  context?: boolean | TraversalContext,\n): ToNodePath<Trav<T, Split<K>>>;\n\nfunction get<T extends t.Node>(\n  this: NodePath<T>,\n  key: string,\n  context?: true | TraversalContext,\n): NodePath | NodePath[];\n\nfunction get<T extends t.Node>(\n  this: NodePath<T>,\n  key: string,\n  context: true | TraversalContext = true,\n): NodePath | NodePath[] {\n  if (context === true) context = this.context;\n  const parts = key.split(\".\");\n  if (parts.length === 1) {\n    // \"foo\"\n    // @ts-expect-error key may not index T\n    return this._getKey(key, context);\n  } else {\n    // \"foo.bar\"\n    return this._getPattern(parts, context);\n  }\n}\n\nexport { get };\n\nexport function _getKey<T extends t.Node>(\n  this: NodePath<T>,\n  key: keyof T & string,\n  context?: TraversalContext,\n): NodePath | NodePath[] {\n  const node = this.node;\n  const container = node[key];\n\n  if (Array.isArray(container)) {\n    // requested a container so give them all the paths\n    return container.map((_, i) => {\n      return NodePath.get({\n        listKey: key,\n        parentPath: this,\n        parent: node,\n        container: container,\n        key: i,\n      }).setContext(context);\n    });\n  } else {\n    return NodePath.get({\n      parentPath: this,\n      parent: node,\n      container: node,\n      key: key,\n    }).setContext(context);\n  }\n}\n\nexport function _getPattern(\n  this: NodePath,\n  parts: string[],\n  context?: TraversalContext,\n): NodePath | NodePath[] {\n  let path: NodePath | NodePath[] = this;\n  for (const part of parts) {\n    if (part === \".\") {\n      // @ts-expect-error todo(flow-ts): Can path be an array here?\n      path = path.parentPath;\n    } else {\n      if (Array.isArray(path)) {\n        // @ts-expect-error part may not index path\n        path = path[part];\n      } else {\n        path = path.get(part, context);\n      }\n    }\n  }\n  return path;\n}\n\nfunction getBindingIdentifiers(\n  duplicates: true,\n): Record<string, t.Identifier[]>;\nfunction getBindingIdentifiers(\n  duplicates?: false,\n): Record<string, t.Identifier>;\nfunction getBindingIdentifiers(\n  duplicates: boolean,\n): Record<string, t.Identifier[] | t.Identifier>;\n\nfunction getBindingIdentifiers(\n  this: NodePath,\n  duplicates?: boolean,\n): Record<string, t.Identifier[] | t.Identifier> {\n  return _getBindingIdentifiers(this.node, duplicates);\n}\n\nexport { getBindingIdentifiers };\n\nfunction getOuterBindingIdentifiers(\n  duplicates: true,\n): Record<string, t.Identifier[]>;\nfunction getOuterBindingIdentifiers(\n  duplicates?: false,\n): Record<string, t.Identifier>;\nfunction getOuterBindingIdentifiers(\n  duplicates: boolean,\n): Record<string, t.Identifier[] | t.Identifier>;\n\nfunction getOuterBindingIdentifiers(\n  this: NodePath,\n  duplicates?: boolean,\n): Record<string, t.Identifier[] | t.Identifier> {\n  return _getOuterBindingIdentifiers(this.node, duplicates);\n}\n\nexport { getOuterBindingIdentifiers };\n\nfunction getBindingIdentifierPaths(\n  duplicates: true,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier>[]>;\nfunction getBindingIdentifierPaths(\n  duplicates: false,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier>>;\nfunction getBindingIdentifierPaths(\n  duplicates?: boolean,\n  outerOnly?: boolean,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]>;\n\n// original source - https://github.com/babel/babel/blob/main/packages/babel-types/src/retrievers/getBindingIdentifiers.js\n// path.getBindingIdentifiers returns nodes where the following re-implementation returns paths\nfunction getBindingIdentifierPaths(\n  this: NodePath,\n  duplicates: boolean = false,\n  outerOnly: boolean = false,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]> {\n  const path = this;\n  const search = [path];\n  const ids = Object.create(null);\n\n  while (search.length) {\n    const id = search.shift();\n    if (!id) continue;\n    if (!id.node) continue;\n\n    const keys =\n      // @ts-expect-error _getBindingIdentifiers.keys do not cover all node types\n      _getBindingIdentifiers.keys[id.node.type];\n\n    if (id.isIdentifier()) {\n      if (duplicates) {\n        const _ids = (ids[id.node.name] = ids[id.node.name] || []);\n        _ids.push(id);\n      } else {\n        ids[id.node.name] = id;\n      }\n      continue;\n    }\n\n    if (id.isExportDeclaration()) {\n      const declaration = id.get(\"declaration\");\n      if (isDeclaration(declaration)) {\n        search.push(declaration);\n      }\n      continue;\n    }\n\n    if (outerOnly) {\n      if (id.isFunctionDeclaration()) {\n        search.push(id.get(\"id\"));\n        continue;\n      }\n      if (id.isFunctionExpression()) {\n        continue;\n      }\n    }\n\n    if (keys) {\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        const child = id.get(key);\n        if (Array.isArray(child)) {\n          search.push(...child);\n        } else if (child.node) {\n          search.push(child);\n        }\n      }\n    }\n  }\n\n  return ids;\n}\n\nexport { getBindingIdentifierPaths };\n\nfunction getOuterBindingIdentifierPaths(\n  duplicates: true,\n): Record<string, NodePath<t.Identifier>[]>;\nfunction getOuterBindingIdentifierPaths(\n  duplicates?: false,\n): Record<string, NodePath<t.Identifier>>;\nfunction getOuterBindingIdentifierPaths(\n  duplicates?: boolean,\n): Record<string, NodePath<t.Identifier> | NodePath<t.Identifier>[]>;\n\nfunction getOuterBindingIdentifierPaths(\n  this: NodePath,\n  duplicates: boolean = false,\n) {\n  return this.getBindingIdentifierPaths(duplicates, true);\n}\n\nexport { getOuterBindingIdentifierPaths };\n", "// This file contains methods responsible for dealing with comments.\nimport type * as t from \"@babel/types\";\nimport type NodePath from \"./index\";\nimport {\n  addComment as _addComment,\n  addComments as _addComments,\n} from \"@babel/types\";\n\n/**\n * Share comments amongst siblings.\n */\n\nexport function shareCommentsWithSiblings(this: NodePath) {\n  // NOTE: this assumes numbered keys\n  if (typeof this.key === \"string\") return;\n\n  const node = this.node;\n  if (!node) return;\n\n  const trailing = node.trailingComments;\n  const leading = node.leadingComments;\n  if (!trailing && !leading) return;\n\n  const prev = this.getSibling(this.key - 1);\n  const next = this.getSibling(this.key + 1);\n  const hasPrev = Boolean(prev.node);\n  const hasNext = Boolean(next.node);\n  if (hasPrev && !hasNext) {\n    prev.addComments(\"trailing\", trailing);\n  } else if (hasNext && !hasPrev) {\n    next.addComments(\"leading\", leading);\n  }\n}\n\nexport function addComment(\n  this: NodePath,\n  type: t.CommentTypeShorthand,\n  content: string,\n  line?: boolean,\n) {\n  _addComment(this.node, type, content, line);\n}\n\n/**\n * Give node `comments` of the specified `type`.\n */\n\nexport function addComments(\n  this: NodePath,\n  type: t.CommentTypeShorthand,\n  comments: t.Comment[],\n) {\n  _addComments(this.node, type, comments);\n}\n", "import type NodePath from \"../index\";\nimport {\n  isBinding,\n  isBlockScoped as nodeIsBlockScoped,\n  isExportDeclaration,\n  isExpression as nodeIsExpression,\n  isFlow as nodeIsFlow,\n  isForStatement,\n  isForXStatement,\n  isIdentifier,\n  isImportDeclaration,\n  isImportSpecifier,\n  isJSXIdentifier,\n  isJSXMemberExpression,\n  isMemberExpression,\n  isRestElement as nodeIsRestElement,\n  isReferenced as nodeIsReferenced,\n  isScope as nodeIsScope,\n  isStatement as nodeIsStatement,\n  isVar as nodeIsVar,\n  isVariableDeclaration,\n  react,\n  isForOfStatement,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nconst { isCompatTag } = react;\nimport type { VirtualTypeAliases } from \"./virtual-types\";\n\nexport interface VirtualTypeNodePathValidators {\n  isBindingIdentifier<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & VirtualTypeAliases[\"BindingIdentifier\"]>;\n  isBlockScoped(opts?: object): boolean;\n  /**\n   * @deprecated\n   */\n  isExistentialTypeParam<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & VirtualTypeAliases[\"ExistentialTypeParam\"]>;\n  isExpression<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & t.Expression>;\n  isFlow<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & t.Flow>;\n  isForAwaitStatement<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & VirtualTypeAliases[\"ForAwaitStatement\"]>;\n  isGenerated(opts?: object): boolean;\n  /**\n   * @deprecated\n   */\n  isNumericLiteralTypeAnnotation(opts?: object): void;\n  isPure(opts?: object): boolean;\n  isReferenced(opts?: object): boolean;\n  isReferencedIdentifier<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & VirtualTypeAliases[\"ReferencedIdentifier\"]>;\n  isReferencedMemberExpression<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & VirtualTypeAliases[\"ReferencedMemberExpression\"]>;\n  isRestProperty<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & t.RestProperty>;\n  isScope<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & VirtualTypeAliases[\"Scope\"]>;\n  isSpreadProperty<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & t.SpreadProperty>;\n  isStatement<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & t.Statement>;\n  isUser(opts?: object): boolean;\n  isVar<T extends t.Node>(\n    this: NodePath<T>,\n    opts?: object,\n  ): this is NodePath<T & VirtualTypeAliases[\"Var\"]>;\n}\n\nexport function isReferencedIdentifier(this: NodePath, opts?: any): boolean {\n  const { node, parent } = this;\n  if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {\n    if (isJSXIdentifier(node, opts)) {\n      if (isCompatTag(node.name)) return false;\n    } else {\n      // not a JSXIdentifier or an Identifier\n      return false;\n    }\n  }\n\n  // check if node is referenced\n  return nodeIsReferenced(node, parent, this.parentPath.parent);\n}\n\nexport function isReferencedMemberExpression(this: NodePath): boolean {\n  const { node, parent } = this;\n  return isMemberExpression(node) && nodeIsReferenced(node, parent);\n}\n\nexport function isBindingIdentifier(this: NodePath): boolean {\n  const { node, parent } = this;\n  const grandparent = this.parentPath.parent;\n  return isIdentifier(node) && isBinding(node, parent, grandparent);\n}\n\nexport function isStatement(this: NodePath): boolean {\n  const { node, parent } = this;\n  if (nodeIsStatement(node)) {\n    if (isVariableDeclaration(node)) {\n      if (isForXStatement(parent, { left: node })) return false;\n      if (isForStatement(parent, { init: node })) return false;\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function isExpression(this: NodePath): boolean {\n  if (this.isIdentifier()) {\n    return this.isReferencedIdentifier();\n  } else {\n    return nodeIsExpression(this.node);\n  }\n}\n\nexport function isScope(this: NodePath): boolean {\n  return nodeIsScope(this.node, this.parent);\n}\n\nexport function isReferenced(this: NodePath): boolean {\n  return nodeIsReferenced(this.node, this.parent);\n}\n\nexport function isBlockScoped(this: NodePath): boolean {\n  return nodeIsBlockScoped(this.node);\n}\n\nexport function isVar(this: NodePath): boolean {\n  return nodeIsVar(this.node);\n}\n\nexport function isUser(this: NodePath): boolean {\n  return this.node && !!this.node.loc;\n}\n\nexport function isGenerated(this: NodePath): boolean {\n  return !this.isUser();\n}\n\nexport function isPure(this: NodePath, constantsOnly?: boolean): boolean {\n  return this.scope.isPure(this.node, constantsOnly);\n}\n\nexport function isFlow(this: NodePath): boolean {\n  const { node } = this;\n  if (nodeIsFlow(node)) {\n    return true;\n  } else if (isImportDeclaration(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else if (isExportDeclaration(node)) {\n    return node.exportKind === \"type\";\n  } else if (isImportSpecifier(node)) {\n    return node.importKind === \"type\" || node.importKind === \"typeof\";\n  } else {\n    return false;\n  }\n}\n\n// TODO: 7.0 Backwards Compat\nexport function isRestProperty(this: NodePath): boolean {\n  return (\n    nodeIsRestElement(this.node) &&\n    this.parentPath &&\n    this.parentPath.isObjectPattern()\n  );\n}\n\nexport function isSpreadProperty(this: NodePath): boolean {\n  return (\n    nodeIsRestElement(this.node) &&\n    this.parentPath &&\n    this.parentPath.isObjectExpression()\n  );\n}\n\nexport function isForAwaitStatement(this: NodePath): boolean {\n  return isForOfStatement(this.node, { await: true });\n}\n\nexport function isExistentialTypeParam(this: NodePath): void {\n  throw new Error(\n    \"`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.\",\n  );\n}\n\nexport function isNumericLiteralTypeAnnotation(this: NodePath): void {\n  throw new Error(\n    \"`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.\",\n  );\n}\n", "import type { HubInterface } from \"../hub\";\nimport type TraversalContext from \"../context\";\nimport * as virtualTypes from \"./lib/virtual-types\";\nimport buildDebug from \"debug\";\nimport traverse from \"../index\";\nimport type { Visitor } from \"../types\";\nimport Scope from \"../scope\";\nimport { validate } from \"@babel/types\";\nimport * as t from \"@babel/types\";\nimport { path as pathCache } from \"../cache\";\nimport generator from \"@babel/generator\";\n\n// NodePath is split across many files.\nimport * as NodePath_ancestry from \"./ancestry\";\nimport * as NodePath_inference from \"./inference\";\nimport * as NodePath_replacement from \"./replacement\";\nimport * as NodePath_evaluation from \"./evaluation\";\nimport * as NodePath_conversion from \"./conversion\";\nimport * as NodePath_introspection from \"./introspection\";\nimport * as NodePath_context from \"./context\";\nimport * as NodePath_removal from \"./removal\";\nimport * as NodePath_modification from \"./modification\";\nimport * as NodePath_family from \"./family\";\nimport * as NodePath_comments from \"./comments\";\nimport * as NodePath_virtual_types_validator from \"./lib/virtual-types-validator\";\nimport type { NodePathAssertions } from \"./generated/asserts\";\nimport type { NodePathValidators } from \"./generated/validators\";\n\nconst debug = buildDebug(\"babel\");\n\nexport const REMOVED = 1 << 0;\nexport const SHOULD_STOP = 1 << 1;\nexport const SHOULD_SKIP = 1 << 2;\n\nclass NodePath<T extends t.Node = t.Node> {\n  constructor(hub: HubInterface, parent: t.ParentMaps[T[\"type\"]]) {\n    this.parent = parent;\n    this.hub = hub;\n    this.data = null;\n\n    this.context = null;\n    this.scope = null;\n  }\n\n  declare parent: t.ParentMaps[T[\"type\"]];\n  declare hub: HubInterface;\n  declare data: Record<string | symbol, unknown>;\n  // TraversalContext is configured by setContext\n  declare context: TraversalContext;\n  declare scope: Scope;\n\n  contexts: Array<TraversalContext> = [];\n  state: any = null;\n  opts: any = null;\n  // this.shouldSkip = false; this.shouldStop = false; this.removed = false;\n  _traverseFlags: number = 0;\n  skipKeys: any = null;\n  parentPath: t.ParentMaps[T[\"type\"]] extends null\n    ? null\n    : NodePath<t.ParentMaps[T[\"type\"]]> | null = null;\n  container: t.Node | Array<t.Node> | null = null;\n  listKey: string | null = null;\n  key: string | number | null = null;\n  node: T = null;\n  type: T[\"type\"] | null = null;\n\n  static get({\n    hub,\n    parentPath,\n    parent,\n    container,\n    listKey,\n    key,\n  }: {\n    hub?: HubInterface;\n    parentPath: NodePath | null;\n    parent: t.Node;\n    container: t.Node | t.Node[];\n    listKey?: string;\n    key: string | number;\n  }): NodePath {\n    if (!hub && parentPath) {\n      hub = parentPath.hub;\n    }\n\n    if (!parent) {\n      throw new Error(\"To get a node path the parent needs to exist\");\n    }\n\n    const targetNode =\n      // @ts-expect-error key must present in container\n      container[key];\n\n    let paths = pathCache.get(parent);\n    if (!paths) {\n      paths = new Map();\n      pathCache.set(parent, paths);\n    }\n\n    let path = paths.get(targetNode);\n    if (!path) {\n      path = new NodePath(hub, parent);\n      if (targetNode) paths.set(targetNode, path);\n    }\n\n    path.setup(parentPath, container, listKey, key);\n\n    return path;\n  }\n\n  getScope(scope: Scope): Scope {\n    return this.isScope() ? new Scope(this) : scope;\n  }\n\n  setData(key: string | symbol, val: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    return (this.data[key] = val);\n  }\n\n  getData(key: string | symbol, def?: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    let val = this.data[key];\n    if (val === undefined && def !== undefined) val = this.data[key] = def;\n    return val;\n  }\n\n  hasNode(): this is NodePath<NonNullable<this[\"node\"]>> {\n    return this.node != null;\n  }\n\n  buildCodeFrameError(\n    msg: string,\n    Error: new () => Error = SyntaxError,\n  ): Error {\n    return this.hub.buildError(this.node, msg, Error);\n  }\n\n  traverse<T>(visitor: Visitor<T>, state: T): void;\n  traverse(visitor: Visitor): void;\n  traverse(visitor: any, state?: any) {\n    traverse(this.node, visitor, this.scope, state, this);\n  }\n\n  set(key: string, node: any) {\n    validate(this.node, key, node);\n    // @ts-expect-error key must present in this.node\n    this.node[key] = node;\n  }\n\n  getPathLocation(): string {\n    const parts = [];\n    let path: NodePath = this;\n    do {\n      let key = path.key;\n      if (path.inList) key = `${path.listKey}[${key}]`;\n      parts.unshift(key);\n    } while ((path = path.parentPath));\n    return parts.join(\".\");\n  }\n\n  debug(message: string) {\n    if (!debug.enabled) return;\n    debug(`${this.getPathLocation()} ${this.type}: ${message}`);\n  }\n\n  toString() {\n    return generator(this.node).code;\n  }\n\n  get inList() {\n    return !!this.listKey;\n  }\n\n  set inList(inList) {\n    if (!inList) {\n      this.listKey = null;\n    }\n    // ignore inList = true as it should depend on `listKey`\n  }\n\n  get parentKey(): string {\n    return (this.listKey || this.key) as string;\n  }\n\n  get shouldSkip() {\n    return !!(this._traverseFlags & SHOULD_SKIP);\n  }\n\n  set shouldSkip(v) {\n    if (v) {\n      this._traverseFlags |= SHOULD_SKIP;\n    } else {\n      this._traverseFlags &= ~SHOULD_SKIP;\n    }\n  }\n\n  get shouldStop() {\n    return !!(this._traverseFlags & SHOULD_STOP);\n  }\n\n  set shouldStop(v) {\n    if (v) {\n      this._traverseFlags |= SHOULD_STOP;\n    } else {\n      this._traverseFlags &= ~SHOULD_STOP;\n    }\n  }\n\n  get removed() {\n    return !!(this._traverseFlags & REMOVED);\n  }\n  set removed(v) {\n    if (v) {\n      this._traverseFlags |= REMOVED;\n    } else {\n      this._traverseFlags &= ~REMOVED;\n    }\n  }\n}\n\nObject.assign(\n  NodePath.prototype,\n  NodePath_ancestry,\n  NodePath_inference,\n  NodePath_replacement,\n  NodePath_evaluation,\n  NodePath_conversion,\n  NodePath_introspection,\n  NodePath_context,\n  NodePath_removal,\n  NodePath_modification,\n  NodePath_family,\n  NodePath_comments,\n);\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error The original _guessExecutionStatusRelativeToDifferentFunctions only worked for paths in\n  // different functions, but _guessExecutionStatusRelativeTo works as a replacement in those cases.\n  NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions =\n    NodePath_introspection._guessExecutionStatusRelativeTo;\n}\n\n// we can not use `import { TYPES } from \"@babel/types\"` here\n// because the transformNamedBabelTypesImportToDestructuring plugin in babel.config.js\n// does not offer live bindings for `TYPES`\n// we can change to `import { TYPES }` when we are publishing ES modules only\nfor (const type of t.TYPES) {\n  const typeKey = `is${type}`;\n  // @ts-expect-error typeKey must present in t\n  const fn = t[typeKey];\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath.prototype[typeKey] = function (opts: any) {\n    return fn(this.node, opts);\n  };\n\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath.prototype[`assert${type}`] = function (opts: any) {\n    if (!fn(this.node, opts)) {\n      throw new TypeError(`Expected node path of type ${type}`);\n    }\n  };\n}\n\n// Register virtual types validators after base types validators\nObject.assign(NodePath.prototype, NodePath_virtual_types_validator);\n\nfor (const type of Object.keys(virtualTypes) as (keyof typeof virtualTypes)[]) {\n  if (type[0] === \"_\") continue;\n  if (!t.TYPES.includes(type)) t.TYPES.push(type);\n}\n\ntype NodePathMixins = typeof NodePath_ancestry &\n  typeof NodePath_inference &\n  typeof NodePath_replacement &\n  typeof NodePath_evaluation &\n  typeof NodePath_conversion &\n  typeof NodePath_introspection &\n  typeof NodePath_context &\n  typeof NodePath_removal &\n  typeof NodePath_modification &\n  typeof NodePath_family &\n  typeof NodePath_comments;\n\n// @ts-expect-error TS throws because ensureBlock returns the body node path\n// however, we don't use the return value and treat it as a transform and\n// assertion utilities. For better type inference we annotate it as an\n// assertion method\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface NodePath<T>\n  extends NodePathAssertions,\n    NodePathValidators,\n    NodePathMixins {\n  /**\n   * @see ./conversion.ts for implementation\n   */\n  ensureBlock<\n    T extends\n      | t.Loop\n      | t.WithStatement\n      | t.Function\n      | t.LabeledStatement\n      | t.CatchClause,\n  >(\n    this: NodePath<T>,\n  ): asserts this is NodePath<T & { body: t.BlockStatement }>;\n}\n\nexport default NodePath;\n", "import NodePath from \"./path\";\nimport { VISITOR_KEYS } from \"@babel/types\";\nimport type Scope from \"./scope\";\nimport type { TraverseOptions } from \".\";\nimport type * as t from \"@babel/types\";\nimport type { Visitor } from \"./types\";\n\nexport default class TraversalContext<S = unknown> {\n  constructor(\n    scope: Scope,\n    opts: TraverseOptions,\n    state: S,\n    parentPath: NodePath,\n  ) {\n    this.parentPath = parentPath;\n    this.scope = scope;\n    this.state = state;\n    this.opts = opts;\n  }\n\n  declare parentPath: NodePath;\n  declare scope: Scope;\n  declare state: S;\n  declare opts: TraverseOptions;\n  queue: Array<NodePath> | null = null;\n  priorityQueue: Array<NodePath> | null = null;\n\n  /**\n   * This method does a simple check to determine whether or not we really need to attempt\n   * visit a node. This will prevent us from constructing a NodePath.\n   */\n\n  shouldVisit(node: t.Node): boolean {\n    const opts = this.opts as Visitor;\n    if (opts.enter || opts.exit) return true;\n\n    // check if we have a visitor for this node\n    if (opts[node.type]) return true;\n\n    // check if we're going to traverse into this node\n    const keys: Array<string> | undefined = VISITOR_KEYS[node.type];\n    if (!keys?.length) return false;\n\n    // we need to traverse into this node so ensure that it has children to traverse into!\n    for (const key of keys) {\n      if (\n        // @ts-expect-error key is from visitor keys\n        node[key]\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  create(\n    node: t.Node,\n    container: t.Node | t.Node[],\n    key: string | number,\n    listKey?: string,\n  ): NodePath {\n    // We don't need to `.setContext()` here, since `.visitQueue()` already\n    // calls `.pushContext`.\n    return NodePath.get({\n      parentPath: this.parentPath,\n      parent: node,\n      container,\n      key: key,\n      listKey,\n    });\n  }\n\n  maybeQueue(path: NodePath, notPriority?: boolean) {\n    if (this.queue) {\n      if (notPriority) {\n        this.queue.push(path);\n      } else {\n        this.priorityQueue.push(path);\n      }\n    }\n  }\n\n  visitMultiple(container: t.Node[], parent: t.Node, listKey: string) {\n    // nothing to traverse!\n    if (container.length === 0) return false;\n\n    const queue = [];\n\n    // build up initial queue\n    for (let key = 0; key < container.length; key++) {\n      const node = container[key];\n      if (node && this.shouldVisit(node)) {\n        queue.push(this.create(parent, container, key, listKey));\n      }\n    }\n\n    return this.visitQueue(queue);\n  }\n\n  visitSingle(node: t.Node, key: string): boolean {\n    if (\n      this.shouldVisit(\n        // @ts-expect-error key may not index node\n        node[key],\n      )\n    ) {\n      return this.visitQueue([this.create(node, node, key)]);\n    } else {\n      return false;\n    }\n  }\n\n  visitQueue(queue: Array<NodePath>): boolean {\n    // set queue\n    this.queue = queue;\n    this.priorityQueue = [];\n\n    const visited = new WeakSet();\n    let stop = false;\n\n    // visit the queue\n    for (const path of queue) {\n      path.resync();\n\n      if (\n        path.contexts.length === 0 ||\n        path.contexts[path.contexts.length - 1] !== this\n      ) {\n        // The context might already have been pushed when this path was inserted and queued.\n        // If we always re-pushed here, we could get duplicates and risk leaving contexts\n        // on the stack after the traversal has completed, which could break things.\n        path.pushContext(this);\n      }\n\n      // this path no longer belongs to the tree\n      if (path.key === null) continue;\n\n      // ensure we don't visit the same node twice\n      const { node } = path;\n      if (visited.has(node)) continue;\n      if (node) visited.add(node);\n\n      if (path.visit()) {\n        stop = true;\n        break;\n      }\n\n      if (this.priorityQueue.length) {\n        stop = this.visitQueue(this.priorityQueue);\n        this.priorityQueue = [];\n        this.queue = queue;\n        if (stop) break;\n      }\n    }\n\n    // clear queue\n    for (const path of queue) {\n      path.popContext();\n    }\n\n    // clear queue\n    this.queue = null;\n\n    return stop;\n  }\n\n  visit(node: t.Node, key: string) {\n    // @ts-expect-error key may not index node\n    const nodes = node[key] as t.Node | t.Node[] | null;\n    if (!nodes) return false;\n\n    if (Array.isArray(nodes)) {\n      return this.visitMultiple(nodes, node, key);\n    } else {\n      return this.visitSingle(node, key);\n    }\n  }\n}\n", "import TraversalContext from \"./context\";\nimport type { TraverseOptions } from \"./index\";\nimport type NodePath from \"./path\";\nimport type Scope from \"./scope\";\nimport type * as t from \"@babel/types\";\nimport { VISITOR_KEYS } from \"@babel/types\";\n\n/**\n * Traverse the children of given node\n * @param {Node} node\n * @param {TraverseOptions} opts The traverse options used to create a new traversal context\n * @param {scope} scope A traversal scope used to create a new traversal context. When opts.noScope is true, scope should not be provided\n * @param {any} state A user data storage provided as the second callback argument for traversal visitors\n * @param {NodePath} path A NodePath of given node\n * @param {Record<string, boolean>} skipKeys A map from key names to whether that should be skipped during traversal. The skipKeys are applied to every descendants\n * @returns {boolean} Whether the traversal stops early\n\n * @note This function does not visit the given `node`.\n */\nexport function traverseNode(\n  node: t.Node,\n  opts: TraverseOptions,\n  scope?: Scope,\n  state?: any,\n  path?: NodePath,\n  skipKeys?: Record<string, boolean>,\n): boolean {\n  const keys = VISITOR_KEYS[node.type];\n  if (!keys) return false;\n\n  const context = new TraversalContext(scope, opts, state, path);\n  for (const key of keys) {\n    if (skipKeys && skipKeys[key]) continue;\n    if (context.visit(node, key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n", "import type Scope from \"./scope\";\nimport type { Node } from \"@babel/types\";\n\nexport interface HubInterface {\n  getCode(): string | void;\n  getScope(): Scope | void;\n  addHelper(name: string): any;\n  buildError(node: Node, msg: string, Error: new () => Error): Error;\n}\n\nexport default class Hub implements HubInterface {\n  getCode() {}\n\n  getScope() {}\n\n  addHelper() {\n    throw new Error(\"Helpers are not supported by the default hub.\");\n  }\n\n  buildError(node: Node, msg: string, Error = TypeError): Error {\n    return new Error(msg);\n  }\n}\n", "import * as visitors from \"./visitors\";\nimport {\n  VISITOR_KEYS,\n  removeProperties,\n  type RemovePropertiesOptions,\n  traverseFast,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport * as cache from \"./cache\";\nimport type NodePath from \"./path\";\nimport type { default as Scope, Binding } from \"./scope\";\nimport type { Visitor } from \"./types\";\nimport { traverseNode } from \"./traverse-node\";\n\nexport type { Visitor, Binding };\nexport { default as NodePath } from \"./path\";\nexport { default as Scope } from \"./scope\";\nexport { default as Hub } from \"./hub\";\nexport type { HubInterface } from \"./hub\";\n\nexport { visitors };\n\nexport type TraverseOptions<S = t.Node> = {\n  scope?: Scope;\n  noScope?: boolean;\n  denylist?: string[];\n} & Visitor<S>;\n\nfunction traverse<S>(\n  parent: t.Node,\n  opts: TraverseOptions<S>,\n  scope: Scope | undefined,\n  state: S,\n  parentPath?: NodePath,\n): void;\n\nfunction traverse(\n  parent: t.Node,\n  opts: TraverseOptions,\n  scope?: Scope,\n  state?: any,\n  parentPath?: NodePath,\n): void;\n\nfunction traverse<Options extends TraverseOptions>(\n  parent: t.Node,\n  // @ts-expect-error provide {} as default value for Options\n  opts: Options = {},\n  scope?: Scope,\n  state?: any,\n  parentPath?: NodePath,\n) {\n  if (!parent) return;\n\n  if (!opts.noScope && !scope) {\n    if (parent.type !== \"Program\" && parent.type !== \"File\") {\n      throw new Error(\n        \"You must pass a scope and parentPath unless traversing a Program/File. \" +\n          `Instead of that you tried to traverse a ${parent.type} node without ` +\n          \"passing scope and parentPath.\",\n      );\n    }\n  }\n\n  if (!VISITOR_KEYS[parent.type]) {\n    return;\n  }\n\n  visitors.explode(opts as Visitor);\n\n  traverseNode(parent, opts, scope, state, parentPath);\n}\n\nexport default traverse;\n\ntraverse.visitors = visitors;\ntraverse.verify = visitors.verify;\ntraverse.explode = visitors.explode;\n\ntraverse.cheap = function (node: t.Node, enter: (node: t.Node) => void) {\n  return traverseFast(node, enter);\n};\n\ntraverse.node = function (\n  node: t.Node,\n  opts: TraverseOptions,\n  scope?: Scope,\n  state?: any,\n  path?: NodePath,\n  skipKeys?: Record<string, boolean>,\n) {\n  traverseNode(node, opts, scope, state, path, skipKeys);\n  // traverse.node always returns undefined\n};\n\ntraverse.clearNode = function (node: t.Node, opts?: RemovePropertiesOptions) {\n  removeProperties(node, opts);\n\n  cache.path.delete(node);\n};\n\ntraverse.removeProperties = function (\n  tree: t.Node,\n  opts?: RemovePropertiesOptions,\n) {\n  traverseFast(tree, traverse.clearNode, opts);\n  return tree;\n};\n\ntype HasDenylistedTypeState = {\n  has: boolean;\n  type: t.Node[\"type\"];\n};\nfunction hasDenylistedType(path: NodePath, state: HasDenylistedTypeState) {\n  if (path.node.type === state.type) {\n    state.has = true;\n    path.stop();\n  }\n}\n\ntraverse.hasType = function (\n  tree: t.Node,\n  type: t.Node[\"type\"],\n  denylistTypes?: Array<string>,\n): boolean {\n  // the node we're searching in is denylisted\n  if (denylistTypes?.includes(tree.type)) return false;\n\n  // the type we're looking for is the same as the passed node\n  if (tree.type === type) return true;\n\n  const state: HasDenylistedTypeState = {\n    has: false,\n    type: type,\n  };\n\n  traverse(\n    tree,\n    {\n      noScope: true,\n      denylist: denylistTypes,\n      enter: hasDenylistedType,\n    },\n    null,\n    state,\n  );\n\n  return state.has;\n};\n\ntraverse.cache = cache;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"path\" has been externalized for browser compatibility. Cannot access \"path.${key}\" in client code.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"os\" has been externalized for browser compatibility. Cannot access \"os.${key}\" in client code.`)\n    }\n  }\n}))", "'use strict';\n\nvar os = require('os');\n\n// adapted from https://github.com/sindresorhus/os-homedir/blob/11e089f4754db38bb535e5a8416320c4446e8cfd/index.js\n\nmodule.exports = os.homedir || function homedir() {\n    var home = process.env.HOME;\n    var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;\n\n    if (process.platform === 'win32') {\n        return process.env.USERPROFILE || process.env.HOMEDRIVE + process.env.HOMEPATH || home || null;\n    }\n\n    if (process.platform === 'darwin') {\n        return home || (user ? '/Users/' + user : null);\n    }\n\n    if (process.platform === 'linux') {\n        return home || (process.getuid() === 0 ? '/root' : (user ? '/home/' + user : null)); // eslint-disable-line no-extra-parens\n    }\n\n    return home || null;\n};\n", "module.exports = function () {\n    // see https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n    var origPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = function (_, stack) { return stack; };\n    var stack = (new Error()).stack;\n    Error.prepareStackTrace = origPrepareStackTrace;\n    return stack[2].getFileName();\n};\n", "'use strict';\n\nvar isWindows = process.platform === 'win32';\n\n// Regex to split a windows path into into [dir, root, basename, name, ext]\nvar splitWindowsRe =\n    /^(((?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?[\\\\\\/]?)(?:[^\\\\\\/]*[\\\\\\/])*)((\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))[\\\\\\/]*$/;\n\nvar win32 = {};\n\nfunction win32SplitPath(filename) {\n  return splitWindowsRe.exec(filename).slice(1);\n}\n\nwin32.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = win32SplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  return {\n    root: allParts[1],\n    dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3]\n  };\n};\n\n\n\n// Split a filename into [dir, root, basename, name, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^((\\/?)(?:[^\\/]*\\/)*)((\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))[\\/]*$/;\nvar posix = {};\n\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\n\nposix.parse = function(pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\n    );\n  }\n  var allParts = posixSplitPath(pathString);\n  if (!allParts || allParts.length !== 5) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n  \n  return {\n    root: allParts[1],\n    dir: allParts[0].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[4],\n    name: allParts[3],\n  };\n};\n\n\nif (isWindows)\n  module.exports = win32.parse;\nelse /* posix */\n  module.exports = posix.parse;\n\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;\n", "var path = require('path');\nvar parse = path.parse || require('path-parse'); // eslint-disable-line global-require\n\nvar getNodeModulesDirs = function getNodeModulesDirs(absoluteStart, modules) {\n    var prefix = '/';\n    if ((/^([A-Za-z]:)/).test(absoluteStart)) {\n        prefix = '';\n    } else if ((/^\\\\\\\\/).test(absoluteStart)) {\n        prefix = '\\\\\\\\';\n    }\n\n    var paths = [absoluteStart];\n    var parsed = parse(absoluteStart);\n    while (parsed.dir !== paths[paths.length - 1]) {\n        paths.push(parsed.dir);\n        parsed = parse(parsed.dir);\n    }\n\n    return paths.reduce(function (dirs, aPath) {\n        return dirs.concat(modules.map(function (moduleDir) {\n            return path.resolve(prefix, aPath, moduleDir);\n        }));\n    }, []);\n};\n\nmodule.exports = function nodeModulesPaths(start, opts, request) {\n    var modules = opts && opts.moduleDirectory\n        ? [].concat(opts.moduleDirectory)\n        : ['node_modules'];\n\n    if (opts && typeof opts.paths === 'function') {\n        return opts.paths(\n            request,\n            start,\n            function () { return getNodeModulesDirs(start, modules); },\n            opts\n        );\n    }\n\n    var dirs = getNodeModulesDirs(start, modules);\n    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;\n};\n", "module.exports = function (x, opts) {\n    /**\n     * This file is purposefully a passthrough. It's expected that third-party\n     * environments will override it at runtime in order to inject special logic\n     * into `resolve` (by manipulating the options). One such example is the PnP\n     * code path in Yarn.\n     */\n\n    return opts || {};\n};\n", "'use strict';\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n", "'use strict';\n\nvar implementation = require('./implementation');\n\nmodule.exports = Function.prototype.bind || implementation;\n", "'use strict';\n\nvar bind = require('function-bind');\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n", "{\n\t\"assert\": true,\n\t\"node:assert\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"assert/strict\": \">= 15\",\n\t\"node:assert/strict\": \">= 16\",\n\t\"async_hooks\": \">= 8\",\n\t\"node:async_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"buffer_ieee754\": \">= 0.5 && < 0.9.7\",\n\t\"buffer\": true,\n\t\"node:buffer\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"child_process\": true,\n\t\"node:child_process\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"cluster\": \">= 0.5\",\n\t\"node:cluster\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"console\": true,\n\t\"node:console\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"constants\": true,\n\t\"node:constants\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"crypto\": true,\n\t\"node:crypto\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_debug_agent\": \">= 1 && < 8\",\n\t\"_debugger\": \"< 8\",\n\t\"dgram\": true,\n\t\"node:dgram\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"diagnostics_channel\": [\">= 14.17 && < 15\", \">= 15.1\"],\n\t\"node:diagnostics_channel\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"dns\": true,\n\t\"node:dns\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"dns/promises\": \">= 15\",\n\t\"node:dns/promises\": \">= 16\",\n\t\"domain\": \">= 0.7.12\",\n\t\"node:domain\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"events\": true,\n\t\"node:events\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"freelist\": \"< 6\",\n\t\"fs\": true,\n\t\"node:fs\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"fs/promises\": [\">= 10 && < 10.1\", \">= 14\"],\n\t\"node:fs/promises\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_agent\": \">= 0.11.1\",\n\t\"node:_http_agent\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_client\": \">= 0.11.1\",\n\t\"node:_http_client\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_common\": \">= 0.11.1\",\n\t\"node:_http_common\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_incoming\": \">= 0.11.1\",\n\t\"node:_http_incoming\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_outgoing\": \">= 0.11.1\",\n\t\"node:_http_outgoing\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_server\": \">= 0.11.1\",\n\t\"node:_http_server\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"http\": true,\n\t\"node:http\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"http2\": \">= 8.8\",\n\t\"node:http2\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"https\": true,\n\t\"node:https\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"inspector\": \">= 8\",\n\t\"node:inspector\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"inspector/promises\": [\">= 19\"],\n\t\"node:inspector/promises\": [\">= 19\"],\n\t\"_linklist\": \"< 8\",\n\t\"module\": true,\n\t\"node:module\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"net\": true,\n\t\"node:net\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"node-inspect/lib/_inspect\": \">= 7.6 && < 12\",\n\t\"node-inspect/lib/internal/inspect_client\": \">= 7.6 && < 12\",\n\t\"node-inspect/lib/internal/inspect_repl\": \">= 7.6 && < 12\",\n\t\"os\": true,\n\t\"node:os\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"path\": true,\n\t\"node:path\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"path/posix\": \">= 15.3\",\n\t\"node:path/posix\": \">= 16\",\n\t\"path/win32\": \">= 15.3\",\n\t\"node:path/win32\": \">= 16\",\n\t\"perf_hooks\": \">= 8.5\",\n\t\"node:perf_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"process\": \">= 1\",\n\t\"node:process\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"punycode\": \">= 0.5\",\n\t\"node:punycode\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"querystring\": true,\n\t\"node:querystring\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"readline\": true,\n\t\"node:readline\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"readline/promises\": \">= 17\",\n\t\"node:readline/promises\": \">= 17\",\n\t\"repl\": true,\n\t\"node:repl\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"smalloc\": \">= 0.11.5 && < 3\",\n\t\"_stream_duplex\": \">= 0.9.4\",\n\t\"node:_stream_duplex\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_transform\": \">= 0.9.4\",\n\t\"node:_stream_transform\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_wrap\": \">= 1.4.1\",\n\t\"node:_stream_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_passthrough\": \">= 0.9.4\",\n\t\"node:_stream_passthrough\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_readable\": \">= 0.9.4\",\n\t\"node:_stream_readable\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_writable\": \">= 0.9.4\",\n\t\"node:_stream_writable\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"stream\": true,\n\t\"node:stream\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"stream/consumers\": \">= 16.7\",\n\t\"node:stream/consumers\": \">= 16.7\",\n\t\"stream/promises\": \">= 15\",\n\t\"node:stream/promises\": \">= 16\",\n\t\"stream/web\": \">= 16.5\",\n\t\"node:stream/web\": \">= 16.5\",\n\t\"string_decoder\": true,\n\t\"node:string_decoder\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"sys\": [\">= 0.4 && < 0.7\", \">= 0.8\"],\n\t\"node:sys\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"node:test\": [\">= 16.17 && < 17\", \">= 18\"],\n\t\"timers\": true,\n\t\"node:timers\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"timers/promises\": \">= 15\",\n\t\"node:timers/promises\": \">= 16\",\n\t\"_tls_common\": \">= 0.11.13\",\n\t\"node:_tls_common\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_tls_legacy\": \">= 0.11.3 && < 10\",\n\t\"_tls_wrap\": \">= 0.11.3\",\n\t\"node:_tls_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"tls\": true,\n\t\"node:tls\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"trace_events\": \">= 10\",\n\t\"node:trace_events\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"tty\": true,\n\t\"node:tty\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"url\": true,\n\t\"node:url\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"util\": true,\n\t\"node:util\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"util/types\": \">= 15.3\",\n\t\"node:util/types\": \">= 16\",\n\t\"v8/tools/arguments\": \">= 10 && < 12\",\n\t\"v8/tools/codemap\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/consarray\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/csvparser\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/logreader\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/profile_view\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/splaytree\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8\": \">= 1\",\n\t\"node:v8\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"vm\": true,\n\t\"node:vm\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"wasi\": \">= 13.4 && < 13.5\",\n\t\"worker_threads\": \">= 11.7\",\n\t\"node:worker_threads\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"zlib\": \">= 0.5\",\n\t\"node:zlib\": [\">= 14.18 && < 15\", \">= 16\"]\n}\n", "'use strict';\n\nvar has = require('has');\n\nfunction specifierIncluded(current, specifier) {\n\tvar nodeParts = current.split('.');\n\tvar parts = specifier.split(' ');\n\tvar op = parts.length > 1 ? parts[0] : '=';\n\tvar versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');\n\n\tfor (var i = 0; i < 3; ++i) {\n\t\tvar cur = parseInt(nodeParts[i] || 0, 10);\n\t\tvar ver = parseInt(versionParts[i] || 0, 10);\n\t\tif (cur === ver) {\n\t\t\tcontinue; // eslint-disable-line no-restricted-syntax, no-continue\n\t\t}\n\t\tif (op === '<') {\n\t\t\treturn cur < ver;\n\t\t}\n\t\tif (op === '>=') {\n\t\t\treturn cur >= ver;\n\t\t}\n\t\treturn false;\n\t}\n\treturn op === '>=';\n}\n\nfunction matchesRange(current, range) {\n\tvar specifiers = range.split(/ ?&& ?/);\n\tif (specifiers.length === 0) {\n\t\treturn false;\n\t}\n\tfor (var i = 0; i < specifiers.length; ++i) {\n\t\tif (!specifierIncluded(current, specifiers[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction versionIncluded(nodeVersion, specifierValue) {\n\tif (typeof specifierValue === 'boolean') {\n\t\treturn specifierValue;\n\t}\n\n\tvar current = typeof nodeVersion === 'undefined'\n\t\t? process.versions && process.versions.node\n\t\t: nodeVersion;\n\n\tif (typeof current !== 'string') {\n\t\tthrow new TypeError(typeof nodeVersion === 'undefined' ? 'Unable to determine current node version' : 'If provided, a valid node version is required');\n\t}\n\n\tif (specifierValue && typeof specifierValue === 'object') {\n\t\tfor (var i = 0; i < specifierValue.length; ++i) {\n\t\t\tif (matchesRange(current, specifierValue[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\treturn matchesRange(current, specifierValue);\n}\n\nvar data = require('./core.json');\n\nmodule.exports = function isCore(x, nodeVersion) {\n\treturn has(data, x) && versionIncluded(nodeVersion, data[x]);\n};\n", "var fs = require('fs');\nvar getHomedir = require('./homedir');\nvar path = require('path');\nvar caller = require('./caller');\nvar nodeModulesPaths = require('./node-modules-paths');\nvar normalizeOptions = require('./normalize-options');\nvar isCore = require('is-core-module');\n\nvar realpathFS = process.platform !== 'win32' && fs.realpath && typeof fs.realpath.native === 'function' ? fs.realpath.native : fs.realpath;\n\nvar homedir = getHomedir();\nvar defaultPaths = function () {\n    return [\n        path.join(homedir, '.node_modules'),\n        path.join(homedir, '.node_libraries')\n    ];\n};\n\nvar defaultIsFile = function isFile(file, cb) {\n    fs.stat(file, function (err, stat) {\n        if (!err) {\n            return cb(null, stat.isFile() || stat.isFIFO());\n        }\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n        return cb(err);\n    });\n};\n\nvar defaultIsDir = function isDirectory(dir, cb) {\n    fs.stat(dir, function (err, stat) {\n        if (!err) {\n            return cb(null, stat.isDirectory());\n        }\n        if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n        return cb(err);\n    });\n};\n\nvar defaultRealpath = function realpath(x, cb) {\n    realpathFS(x, function (realpathErr, realPath) {\n        if (realpathErr && realpathErr.code !== 'ENOENT') cb(realpathErr);\n        else cb(null, realpathErr ? x : realPath);\n    });\n};\n\nvar maybeRealpath = function maybeRealpath(realpath, x, opts, cb) {\n    if (opts && opts.preserveSymlinks === false) {\n        realpath(x, cb);\n    } else {\n        cb(null, x);\n    }\n};\n\nvar defaultReadPackage = function defaultReadPackage(readFile, pkgfile, cb) {\n    readFile(pkgfile, function (readFileErr, body) {\n        if (readFileErr) cb(readFileErr);\n        else {\n            try {\n                var pkg = JSON.parse(body);\n                cb(null, pkg);\n            } catch (jsonErr) {\n                cb(null);\n            }\n        }\n    });\n};\n\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\n    var dirs = nodeModulesPaths(start, opts, x);\n    for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path.join(dirs[i], x);\n    }\n    return dirs;\n};\n\nmodule.exports = function resolve(x, options, callback) {\n    var cb = callback;\n    var opts = options;\n    if (typeof options === 'function') {\n        cb = opts;\n        opts = {};\n    }\n    if (typeof x !== 'string') {\n        var err = new TypeError('Path must be a string.');\n        return process.nextTick(function () {\n            cb(err);\n        });\n    }\n\n    opts = normalizeOptions(x, opts);\n\n    var isFile = opts.isFile || defaultIsFile;\n    var isDirectory = opts.isDirectory || defaultIsDir;\n    var readFile = opts.readFile || fs.readFile;\n    var realpath = opts.realpath || defaultRealpath;\n    var readPackage = opts.readPackage || defaultReadPackage;\n    if (opts.readFile && opts.readPackage) {\n        var conflictErr = new TypeError('`readFile` and `readPackage` are mutually exclusive.');\n        return process.nextTick(function () {\n            cb(conflictErr);\n        });\n    }\n    var packageIterator = opts.packageIterator;\n\n    var extensions = opts.extensions || ['.js'];\n    var includeCoreModules = opts.includeCoreModules !== false;\n    var basedir = opts.basedir || path.dirname(caller());\n    var parent = opts.filename || basedir;\n\n    opts.paths = opts.paths || defaultPaths();\n\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\n    var absoluteStart = path.resolve(basedir);\n\n    maybeRealpath(\n        realpath,\n        absoluteStart,\n        opts,\n        function (err, realStart) {\n            if (err) cb(err);\n            else init(realStart);\n        }\n    );\n\n    var res;\n    function init(basedir) {\n        if ((/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/).test(x)) {\n            res = path.resolve(basedir, x);\n            if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\n            if ((/\\/$/).test(x) && res === basedir) {\n                loadAsDirectory(res, opts.package, onfile);\n            } else loadAsFile(res, opts.package, onfile);\n        } else if (includeCoreModules && isCore(x)) {\n            return cb(null, x);\n        } else loadNodeModules(x, basedir, function (err, n, pkg) {\n            if (err) cb(err);\n            else if (n) {\n                return maybeRealpath(realpath, n, opts, function (err, realN) {\n                    if (err) {\n                        cb(err);\n                    } else {\n                        cb(null, realN, pkg);\n                    }\n                });\n            } else {\n                var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n                moduleError.code = 'MODULE_NOT_FOUND';\n                cb(moduleError);\n            }\n        });\n    }\n\n    function onfile(err, m, pkg) {\n        if (err) cb(err);\n        else if (m) cb(null, m, pkg);\n        else loadAsDirectory(res, function (err, d, pkg) {\n            if (err) cb(err);\n            else if (d) {\n                maybeRealpath(realpath, d, opts, function (err, realD) {\n                    if (err) {\n                        cb(err);\n                    } else {\n                        cb(null, realD, pkg);\n                    }\n                });\n            } else {\n                var moduleError = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n                moduleError.code = 'MODULE_NOT_FOUND';\n                cb(moduleError);\n            }\n        });\n    }\n\n    function loadAsFile(x, thePackage, callback) {\n        var loadAsFilePackage = thePackage;\n        var cb = callback;\n        if (typeof loadAsFilePackage === 'function') {\n            cb = loadAsFilePackage;\n            loadAsFilePackage = undefined;\n        }\n\n        var exts = [''].concat(extensions);\n        load(exts, x, loadAsFilePackage);\n\n        function load(exts, x, loadPackage) {\n            if (exts.length === 0) return cb(null, undefined, loadPackage);\n            var file = x + exts[0];\n\n            var pkg = loadPackage;\n            if (pkg) onpkg(null, pkg);\n            else loadpkg(path.dirname(file), onpkg);\n\n            function onpkg(err, pkg_, dir) {\n                pkg = pkg_;\n                if (err) return cb(err);\n                if (dir && pkg && opts.pathFilter) {\n                    var rfile = path.relative(dir, file);\n                    var rel = rfile.slice(0, rfile.length - exts[0].length);\n                    var r = opts.pathFilter(pkg, x, rel);\n                    if (r) return load(\n                        [''].concat(extensions.slice()),\n                        path.resolve(dir, r),\n                        pkg\n                    );\n                }\n                isFile(file, onex);\n            }\n            function onex(err, ex) {\n                if (err) return cb(err);\n                if (ex) return cb(null, file, pkg);\n                load(exts.slice(1), x, pkg);\n            }\n        }\n    }\n\n    function loadpkg(dir, cb) {\n        if (dir === '' || dir === '/') return cb(null);\n        if (process.platform === 'win32' && (/^\\w:[/\\\\]*$/).test(dir)) {\n            return cb(null);\n        }\n        if ((/[/\\\\]node_modules[/\\\\]*$/).test(dir)) return cb(null);\n\n        maybeRealpath(realpath, dir, opts, function (unwrapErr, pkgdir) {\n            if (unwrapErr) return loadpkg(path.dirname(dir), cb);\n            var pkgfile = path.join(pkgdir, 'package.json');\n            isFile(pkgfile, function (err, ex) {\n                // on err, ex is false\n                if (!ex) return loadpkg(path.dirname(dir), cb);\n\n                readPackage(readFile, pkgfile, function (err, pkgParam) {\n                    if (err) cb(err);\n\n                    var pkg = pkgParam;\n\n                    if (pkg && opts.packageFilter) {\n                        pkg = opts.packageFilter(pkg, pkgfile);\n                    }\n                    cb(null, pkg, dir);\n                });\n            });\n        });\n    }\n\n    function loadAsDirectory(x, loadAsDirectoryPackage, callback) {\n        var cb = callback;\n        var fpkg = loadAsDirectoryPackage;\n        if (typeof fpkg === 'function') {\n            cb = fpkg;\n            fpkg = opts.package;\n        }\n\n        maybeRealpath(realpath, x, opts, function (unwrapErr, pkgdir) {\n            if (unwrapErr) return cb(unwrapErr);\n            var pkgfile = path.join(pkgdir, 'package.json');\n            isFile(pkgfile, function (err, ex) {\n                if (err) return cb(err);\n                if (!ex) return loadAsFile(path.join(x, 'index'), fpkg, cb);\n\n                readPackage(readFile, pkgfile, function (err, pkgParam) {\n                    if (err) return cb(err);\n\n                    var pkg = pkgParam;\n\n                    if (pkg && opts.packageFilter) {\n                        pkg = opts.packageFilter(pkg, pkgfile);\n                    }\n\n                    if (pkg && pkg.main) {\n                        if (typeof pkg.main !== 'string') {\n                            var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\n                            mainError.code = 'INVALID_PACKAGE_MAIN';\n                            return cb(mainError);\n                        }\n                        if (pkg.main === '.' || pkg.main === './') {\n                            pkg.main = 'index';\n                        }\n                        loadAsFile(path.resolve(x, pkg.main), pkg, function (err, m, pkg) {\n                            if (err) return cb(err);\n                            if (m) return cb(null, m, pkg);\n                            if (!pkg) return loadAsFile(path.join(x, 'index'), pkg, cb);\n\n                            var dir = path.resolve(x, pkg.main);\n                            loadAsDirectory(dir, pkg, function (err, n, pkg) {\n                                if (err) return cb(err);\n                                if (n) return cb(null, n, pkg);\n                                loadAsFile(path.join(x, 'index'), pkg, cb);\n                            });\n                        });\n                        return;\n                    }\n\n                    loadAsFile(path.join(x, '/index'), pkg, cb);\n                });\n            });\n        });\n    }\n\n    function processDirs(cb, dirs) {\n        if (dirs.length === 0) return cb(null, undefined);\n        var dir = dirs[0];\n\n        isDirectory(path.dirname(dir), isdir);\n\n        function isdir(err, isdir) {\n            if (err) return cb(err);\n            if (!isdir) return processDirs(cb, dirs.slice(1));\n            loadAsFile(dir, opts.package, onfile);\n        }\n\n        function onfile(err, m, pkg) {\n            if (err) return cb(err);\n            if (m) return cb(null, m, pkg);\n            loadAsDirectory(dir, opts.package, ondir);\n        }\n\n        function ondir(err, n, pkg) {\n            if (err) return cb(err);\n            if (n) return cb(null, n, pkg);\n            processDirs(cb, dirs.slice(1));\n        }\n    }\n    function loadNodeModules(x, start, cb) {\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\n        processDirs(\n            cb,\n            packageIterator ? packageIterator(x, start, thunk, opts) : thunk()\n        );\n    }\n};\n", "{\n\t\"assert\": true,\n\t\"node:assert\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"assert/strict\": \">= 15\",\n\t\"node:assert/strict\": \">= 16\",\n\t\"async_hooks\": \">= 8\",\n\t\"node:async_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"buffer_ieee754\": \">= 0.5 && < 0.9.7\",\n\t\"buffer\": true,\n\t\"node:buffer\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"child_process\": true,\n\t\"node:child_process\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"cluster\": \">= 0.5\",\n\t\"node:cluster\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"console\": true,\n\t\"node:console\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"constants\": true,\n\t\"node:constants\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"crypto\": true,\n\t\"node:crypto\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_debug_agent\": \">= 1 && < 8\",\n\t\"_debugger\": \"< 8\",\n\t\"dgram\": true,\n\t\"node:dgram\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"diagnostics_channel\": [\">= 14.17 && < 15\", \">= 15.1\"],\n\t\"node:diagnostics_channel\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"dns\": true,\n\t\"node:dns\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"dns/promises\": \">= 15\",\n\t\"node:dns/promises\": \">= 16\",\n\t\"domain\": \">= 0.7.12\",\n\t\"node:domain\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"events\": true,\n\t\"node:events\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"freelist\": \"< 6\",\n\t\"fs\": true,\n\t\"node:fs\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"fs/promises\": [\">= 10 && < 10.1\", \">= 14\"],\n\t\"node:fs/promises\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_agent\": \">= 0.11.1\",\n\t\"node:_http_agent\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_client\": \">= 0.11.1\",\n\t\"node:_http_client\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_common\": \">= 0.11.1\",\n\t\"node:_http_common\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_incoming\": \">= 0.11.1\",\n\t\"node:_http_incoming\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_outgoing\": \">= 0.11.1\",\n\t\"node:_http_outgoing\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_http_server\": \">= 0.11.1\",\n\t\"node:_http_server\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"http\": true,\n\t\"node:http\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"http2\": \">= 8.8\",\n\t\"node:http2\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"https\": true,\n\t\"node:https\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"inspector\": \">= 8\",\n\t\"node:inspector\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_linklist\": \"< 8\",\n\t\"module\": true,\n\t\"node:module\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"net\": true,\n\t\"node:net\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"node-inspect/lib/_inspect\": \">= 7.6 && < 12\",\n\t\"node-inspect/lib/internal/inspect_client\": \">= 7.6 && < 12\",\n\t\"node-inspect/lib/internal/inspect_repl\": \">= 7.6 && < 12\",\n\t\"os\": true,\n\t\"node:os\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"path\": true,\n\t\"node:path\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"path/posix\": \">= 15.3\",\n\t\"node:path/posix\": \">= 16\",\n\t\"path/win32\": \">= 15.3\",\n\t\"node:path/win32\": \">= 16\",\n\t\"perf_hooks\": \">= 8.5\",\n\t\"node:perf_hooks\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"process\": \">= 1\",\n\t\"node:process\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"punycode\": \">= 0.5\",\n\t\"node:punycode\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"querystring\": true,\n\t\"node:querystring\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"readline\": true,\n\t\"node:readline\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"readline/promises\": \">= 17\",\n\t\"node:readline/promises\": \">= 17\",\n\t\"repl\": true,\n\t\"node:repl\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"smalloc\": \">= 0.11.5 && < 3\",\n\t\"_stream_duplex\": \">= 0.9.4\",\n\t\"node:_stream_duplex\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_transform\": \">= 0.9.4\",\n\t\"node:_stream_transform\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_wrap\": \">= 1.4.1\",\n\t\"node:_stream_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_passthrough\": \">= 0.9.4\",\n\t\"node:_stream_passthrough\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_readable\": \">= 0.9.4\",\n\t\"node:_stream_readable\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_stream_writable\": \">= 0.9.4\",\n\t\"node:_stream_writable\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"stream\": true,\n\t\"node:stream\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"stream/consumers\": \">= 16.7\",\n\t\"node:stream/consumers\": \">= 16.7\",\n\t\"stream/promises\": \">= 15\",\n\t\"node:stream/promises\": \">= 16\",\n\t\"stream/web\": \">= 16.5\",\n\t\"node:stream/web\": \">= 16.5\",\n\t\"string_decoder\": true,\n\t\"node:string_decoder\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"sys\": [\">= 0.4 && < 0.7\", \">= 0.8\"],\n\t\"node:sys\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"node:test\": \">= 18\",\n\t\"timers\": true,\n\t\"node:timers\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"timers/promises\": \">= 15\",\n\t\"node:timers/promises\": \">= 16\",\n\t\"_tls_common\": \">= 0.11.13\",\n\t\"node:_tls_common\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"_tls_legacy\": \">= 0.11.3 && < 10\",\n\t\"_tls_wrap\": \">= 0.11.3\",\n\t\"node:_tls_wrap\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"tls\": true,\n\t\"node:tls\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"trace_events\": \">= 10\",\n\t\"node:trace_events\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"tty\": true,\n\t\"node:tty\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"url\": true,\n\t\"node:url\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"util\": true,\n\t\"node:util\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"util/types\": \">= 15.3\",\n\t\"node:util/types\": \">= 16\",\n\t\"v8/tools/arguments\": \">= 10 && < 12\",\n\t\"v8/tools/codemap\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/consarray\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/csvparser\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/logreader\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/profile_view\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8/tools/splaytree\": [\">= 4.4 && < 5\", \">= 5.2 && < 12\"],\n\t\"v8\": \">= 1\",\n\t\"node:v8\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"vm\": true,\n\t\"node:vm\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"wasi\": \">= 13.4 && < 13.5\",\n\t\"worker_threads\": \">= 11.7\",\n\t\"node:worker_threads\": [\">= 14.18 && < 15\", \">= 16\"],\n\t\"zlib\": \">= 0.5\",\n\t\"node:zlib\": [\">= 14.18 && < 15\", \">= 16\"]\n}\n", "var current = (process.versions && process.versions.node && process.versions.node.split('.')) || [];\n\nfunction specifierIncluded(specifier) {\n    var parts = specifier.split(' ');\n    var op = parts.length > 1 ? parts[0] : '=';\n    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');\n\n    for (var i = 0; i < 3; ++i) {\n        var cur = parseInt(current[i] || 0, 10);\n        var ver = parseInt(versionParts[i] || 0, 10);\n        if (cur === ver) {\n            continue; // eslint-disable-line no-restricted-syntax, no-continue\n        }\n        if (op === '<') {\n            return cur < ver;\n        } else if (op === '>=') {\n            return cur >= ver;\n        }\n        return false;\n    }\n    return op === '>=';\n}\n\nfunction matchesRange(range) {\n    var specifiers = range.split(/ ?&& ?/);\n    if (specifiers.length === 0) { return false; }\n    for (var i = 0; i < specifiers.length; ++i) {\n        if (!specifierIncluded(specifiers[i])) { return false; }\n    }\n    return true;\n}\n\nfunction versionIncluded(specifierValue) {\n    if (typeof specifierValue === 'boolean') { return specifierValue; }\n    if (specifierValue && typeof specifierValue === 'object') {\n        for (var i = 0; i < specifierValue.length; ++i) {\n            if (matchesRange(specifierValue[i])) { return true; }\n        }\n        return false;\n    }\n    return matchesRange(specifierValue);\n}\n\nvar data = require('./core.json');\n\nvar core = {};\nfor (var mod in data) { // eslint-disable-line no-restricted-syntax\n    if (Object.prototype.hasOwnProperty.call(data, mod)) {\n        core[mod] = versionIncluded(data[mod]);\n    }\n}\nmodule.exports = core;\n", "var isCoreModule = require('is-core-module');\n\nmodule.exports = function isCore(x) {\n    return isCoreModule(x);\n};\n", "var isCore = require('is-core-module');\nvar fs = require('fs');\nvar path = require('path');\nvar getHomedir = require('./homedir');\nvar caller = require('./caller');\nvar nodeModulesPaths = require('./node-modules-paths');\nvar normalizeOptions = require('./normalize-options');\n\nvar realpathFS = process.platform !== 'win32' && fs.realpathSync && typeof fs.realpathSync.native === 'function' ? fs.realpathSync.native : fs.realpathSync;\n\nvar homedir = getHomedir();\nvar defaultPaths = function () {\n    return [\n        path.join(homedir, '.node_modules'),\n        path.join(homedir, '.node_libraries')\n    ];\n};\n\nvar defaultIsFile = function isFile(file) {\n    try {\n        var stat = fs.statSync(file, { throwIfNoEntry: false });\n    } catch (e) {\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n        throw e;\n    }\n    return !!stat && (stat.isFile() || stat.isFIFO());\n};\n\nvar defaultIsDir = function isDirectory(dir) {\n    try {\n        var stat = fs.statSync(dir, { throwIfNoEntry: false });\n    } catch (e) {\n        if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n        throw e;\n    }\n    return !!stat && stat.isDirectory();\n};\n\nvar defaultRealpathSync = function realpathSync(x) {\n    try {\n        return realpathFS(x);\n    } catch (realpathErr) {\n        if (realpathErr.code !== 'ENOENT') {\n            throw realpathErr;\n        }\n    }\n    return x;\n};\n\nvar maybeRealpathSync = function maybeRealpathSync(realpathSync, x, opts) {\n    if (opts && opts.preserveSymlinks === false) {\n        return realpathSync(x);\n    }\n    return x;\n};\n\nvar defaultReadPackageSync = function defaultReadPackageSync(readFileSync, pkgfile) {\n    var body = readFileSync(pkgfile);\n    try {\n        var pkg = JSON.parse(body);\n        return pkg;\n    } catch (jsonErr) {}\n};\n\nvar getPackageCandidates = function getPackageCandidates(x, start, opts) {\n    var dirs = nodeModulesPaths(start, opts, x);\n    for (var i = 0; i < dirs.length; i++) {\n        dirs[i] = path.join(dirs[i], x);\n    }\n    return dirs;\n};\n\nmodule.exports = function resolveSync(x, options) {\n    if (typeof x !== 'string') {\n        throw new TypeError('Path must be a string.');\n    }\n    var opts = normalizeOptions(x, options);\n\n    var isFile = opts.isFile || defaultIsFile;\n    var readFileSync = opts.readFileSync || fs.readFileSync;\n    var isDirectory = opts.isDirectory || defaultIsDir;\n    var realpathSync = opts.realpathSync || defaultRealpathSync;\n    var readPackageSync = opts.readPackageSync || defaultReadPackageSync;\n    if (opts.readFileSync && opts.readPackageSync) {\n        throw new TypeError('`readFileSync` and `readPackageSync` are mutually exclusive.');\n    }\n    var packageIterator = opts.packageIterator;\n\n    var extensions = opts.extensions || ['.js'];\n    var includeCoreModules = opts.includeCoreModules !== false;\n    var basedir = opts.basedir || path.dirname(caller());\n    var parent = opts.filename || basedir;\n\n    opts.paths = opts.paths || defaultPaths();\n\n    // ensure that `basedir` is an absolute path at this point, resolving against the process' current working directory\n    var absoluteStart = maybeRealpathSync(realpathSync, path.resolve(basedir), opts);\n\n    if ((/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[/\\\\])/).test(x)) {\n        var res = path.resolve(absoluteStart, x);\n        if (x === '.' || x === '..' || x.slice(-1) === '/') res += '/';\n        var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n        if (m) return maybeRealpathSync(realpathSync, m, opts);\n    } else if (includeCoreModules && isCore(x)) {\n        return x;\n    } else {\n        var n = loadNodeModulesSync(x, absoluteStart);\n        if (n) return maybeRealpathSync(realpathSync, n, opts);\n    }\n\n    var err = new Error(\"Cannot find module '\" + x + \"' from '\" + parent + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n\n    function loadAsFileSync(x) {\n        var pkg = loadpkg(path.dirname(x));\n\n        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {\n            var rfile = path.relative(pkg.dir, x);\n            var r = opts.pathFilter(pkg.pkg, x, rfile);\n            if (r) {\n                x = path.resolve(pkg.dir, r); // eslint-disable-line no-param-reassign\n            }\n        }\n\n        if (isFile(x)) {\n            return x;\n        }\n\n        for (var i = 0; i < extensions.length; i++) {\n            var file = x + extensions[i];\n            if (isFile(file)) {\n                return file;\n            }\n        }\n    }\n\n    function loadpkg(dir) {\n        if (dir === '' || dir === '/') return;\n        if (process.platform === 'win32' && (/^\\w:[/\\\\]*$/).test(dir)) {\n            return;\n        }\n        if ((/[/\\\\]node_modules[/\\\\]*$/).test(dir)) return;\n\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, dir, opts), 'package.json');\n\n        if (!isFile(pkgfile)) {\n            return loadpkg(path.dirname(dir));\n        }\n\n        var pkg = readPackageSync(readFileSync, pkgfile);\n\n        if (pkg && opts.packageFilter) {\n            // v2 will pass pkgfile\n            pkg = opts.packageFilter(pkg, /*pkgfile,*/ dir); // eslint-disable-line spaced-comment\n        }\n\n        return { pkg: pkg, dir: dir };\n    }\n\n    function loadAsDirectorySync(x) {\n        var pkgfile = path.join(maybeRealpathSync(realpathSync, x, opts), '/package.json');\n        if (isFile(pkgfile)) {\n            try {\n                var pkg = readPackageSync(readFileSync, pkgfile);\n            } catch (e) {}\n\n            if (pkg && opts.packageFilter) {\n                // v2 will pass pkgfile\n                pkg = opts.packageFilter(pkg, /*pkgfile,*/ x); // eslint-disable-line spaced-comment\n            }\n\n            if (pkg && pkg.main) {\n                if (typeof pkg.main !== 'string') {\n                    var mainError = new TypeError('package “' + pkg.name + '” `main` must be a string');\n                    mainError.code = 'INVALID_PACKAGE_MAIN';\n                    throw mainError;\n                }\n                if (pkg.main === '.' || pkg.main === './') {\n                    pkg.main = 'index';\n                }\n                try {\n                    var m = loadAsFileSync(path.resolve(x, pkg.main));\n                    if (m) return m;\n                    var n = loadAsDirectorySync(path.resolve(x, pkg.main));\n                    if (n) return n;\n                } catch (e) {}\n            }\n        }\n\n        return loadAsFileSync(path.join(x, '/index'));\n    }\n\n    function loadNodeModulesSync(x, start) {\n        var thunk = function () { return getPackageCandidates(x, start, opts); };\n        var dirs = packageIterator ? packageIterator(x, start, thunk, opts) : thunk();\n\n        for (var i = 0; i < dirs.length; i++) {\n            var dir = dirs[i];\n            if (isDirectory(path.dirname(dir))) {\n                var m = loadAsFileSync(dir);\n                if (m) return m;\n                var n = loadAsDirectorySync(dir);\n                if (n) return n;\n            }\n        }\n    }\n};\n", "var async = require('./lib/async');\nasync.core = require('./lib/core');\nasync.isCore = require('./lib/is-core');\nasync.sync = require('./lib/sync');\n\nmodule.exports = async;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"module\" has been externalized for browser compatibility. Cannot access \"module.${key}\" in client code.`)\n    }\n  }\n}))", "'use strict';\nconst path = require('path');\nconst Module = require('module');\nconst fs = require('fs');\n\nconst resolveFrom = (fromDir, moduleId, silent) => {\n\tif (typeof fromDir !== 'string') {\n\t\tthrow new TypeError(`Expected \\`fromDir\\` to be of type \\`string\\`, got \\`${typeof fromDir}\\``);\n\t}\n\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError(`Expected \\`moduleId\\` to be of type \\`string\\`, got \\`${typeof moduleId}\\``);\n\t}\n\n\ttry {\n\t\tfromDir = fs.realpathSync(fromDir);\n\t} catch (err) {\n\t\tif (err.code === 'ENOENT') {\n\t\t\tfromDir = path.resolve(fromDir);\n\t\t} else if (silent) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tconst fromFile = path.join(fromDir, 'noop.js');\n\n\tconst resolveFileName = () => Module._resolveFilename(moduleId, {\n\t\tid: fromFile,\n\t\tfilename: fromFile,\n\t\tpaths: Module._nodeModulePaths(fromDir)\n\t});\n\n\tif (silent) {\n\t\ttry {\n\t\t\treturn resolveFileName();\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn resolveFileName();\n};\n\nmodule.exports = (fromDir, moduleId) => resolveFrom(fromDir, moduleId);\nmodule.exports.silent = (fromDir, moduleId) => resolveFrom(fromDir, moduleId, true);\n", "'use strict';\n\nconst callsites = () => {\n\tconst _prepareStackTrace = Error.prepareStackTrace;\n\tError.prepareStackTrace = (_, stack) => stack;\n\tconst stack = new Error().stack.slice(1);\n\tError.prepareStackTrace = _prepareStackTrace;\n\treturn stack;\n};\n\nmodule.exports = callsites;\n// TODO: Remove this for the next major release\nmodule.exports.default = callsites;\n", "'use strict';\nconst callsites = require('callsites');\n\nmodule.exports = filepath => {\n\tconst stacks = callsites();\n\n\tif (!filepath) {\n\t\treturn stacks[2].getFileName();\n\t}\n\n\tlet seenVal = false;\n\n\t// Skip the first stack as it's this function\n\tstacks.shift();\n\n\tfor (const stack of stacks) {\n\t\tconst parentFilepath = stack.getFileName();\n\n\t\tif (typeof parentFilepath !== 'string') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (parentFilepath === filepath) {\n\t\t\tseenVal = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Skip native modules\n\t\tif (parentFilepath === 'module.js') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (seenVal && parentFilepath !== filepath) {\n\t\t\treturn parentFilepath;\n\t\t}\n\t}\n};\n", "'use strict';\nconst path = require('path');\nconst resolveFrom = require('resolve-from');\nconst parentModule = require('parent-module');\n\nmodule.exports = moduleId => {\n\tif (typeof moduleId !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\tconst parentPath = parentModule(__filename);\n\n\tconst cwd = parentPath ? path.dirname(parentPath) : __dirname;\n\tconst filePath = resolveFrom(cwd, moduleId);\n\n\tconst oldModule = require.cache[filePath];\n\t// Delete itself from module parent\n\tif (oldModule && oldModule.parent) {\n\t\tlet i = oldModule.parent.children.length;\n\n\t\twhile (i--) {\n\t\t\tif (oldModule.parent.children[i].id === filePath) {\n\t\t\t\toldModule.parent.children.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tdelete require.cache[filePath]; // Delete module from cache\n\n\tconst parent = require.cache[parentPath]; // If `filePath` and `parentPath` are the same, cache will already be deleted so we won't get a memory leak in next step\n\n\treturn parent === undefined ? require(filePath) : parent.require(filePath); // In case cache doesn't have parent, fall back to normal require\n};\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"util\" has been externalized for browser compatibility. Cannot access \"util.${key}\" in client code.`)\n    }\n  }\n}))", "'use strict';\n\nmodule.exports = function isArrayish(obj) {\n\tif (!obj) {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && obj.splice instanceof Function);\n};\n", "'use strict';\n\nvar util = require('util');\nvar isArrayish = require('is-arrayish');\n\nvar errorEx = function errorEx(name, properties) {\n\tif (!name || name.constructor !== String) {\n\t\tproperties = name || {};\n\t\tname = Error.name;\n\t}\n\n\tvar errorExError = function ErrorEXError(message) {\n\t\tif (!this) {\n\t\t\treturn new ErrorEXError(message);\n\t\t}\n\n\t\tmessage = message instanceof Error\n\t\t\t? message.message\n\t\t\t: (message || this.message);\n\n\t\tError.call(this, message);\n\t\tError.captureStackTrace(this, errorExError);\n\n\t\tthis.name = name;\n\n\t\tObject.defineProperty(this, 'message', {\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t\tget: function () {\n\t\t\t\tvar newMessage = message.split(/\\r?\\n/g);\n\n\t\t\t\tfor (var key in properties) {\n\t\t\t\t\tif (!properties.hasOwnProperty(key)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar modifier = properties[key];\n\n\t\t\t\t\tif ('message' in modifier) {\n\t\t\t\t\t\tnewMessage = modifier.message(this[key], newMessage) || newMessage;\n\t\t\t\t\t\tif (!isArrayish(newMessage)) {\n\t\t\t\t\t\t\tnewMessage = [newMessage];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn newMessage.join('\\n');\n\t\t\t},\n\t\t\tset: function (v) {\n\t\t\t\tmessage = v;\n\t\t\t}\n\t\t});\n\n\t\tvar overwrittenStack = null;\n\n\t\tvar stackDescriptor = Object.getOwnPropertyDescriptor(this, 'stack');\n\t\tvar stackGetter = stackDescriptor.get;\n\t\tvar stackValue = stackDescriptor.value;\n\t\tdelete stackDescriptor.value;\n\t\tdelete stackDescriptor.writable;\n\n\t\tstackDescriptor.set = function (newstack) {\n\t\t\toverwrittenStack = newstack;\n\t\t};\n\n\t\tstackDescriptor.get = function () {\n\t\t\tvar stack = (overwrittenStack || ((stackGetter)\n\t\t\t\t? stackGetter.call(this)\n\t\t\t\t: stackValue)).split(/\\r?\\n+/g);\n\n\t\t\t// starting in Node 7, the stack builder caches the message.\n\t\t\t// just replace it.\n\t\t\tif (!overwrittenStack) {\n\t\t\t\tstack[0] = this.name + ': ' + this.message;\n\t\t\t}\n\n\t\t\tvar lineCount = 1;\n\t\t\tfor (var key in properties) {\n\t\t\t\tif (!properties.hasOwnProperty(key)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar modifier = properties[key];\n\n\t\t\t\tif ('line' in modifier) {\n\t\t\t\t\tvar line = modifier.line(this[key]);\n\t\t\t\t\tif (line) {\n\t\t\t\t\t\tstack.splice(lineCount++, 0, '    ' + line);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ('stack' in modifier) {\n\t\t\t\t\tmodifier.stack(this[key], stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn stack.join('\\n');\n\t\t};\n\n\t\tObject.defineProperty(this, 'stack', stackDescriptor);\n\t};\n\n\tif (Object.setPrototypeOf) {\n\t\tObject.setPrototypeOf(errorExError.prototype, Error.prototype);\n\t\tObject.setPrototypeOf(errorExError, Error);\n\t} else {\n\t\tutil.inherits(errorExError, Error);\n\t}\n\n\treturn errorExError;\n};\n\nerrorEx.append = function (str, def) {\n\treturn {\n\t\tmessage: function (v, message) {\n\t\t\tv = v || def;\n\n\t\t\tif (v) {\n\t\t\t\tmessage[0] += ' ' + str.replace('%s', v.toString());\n\t\t\t}\n\n\t\t\treturn message;\n\t\t}\n\t};\n};\n\nerrorEx.line = function (str, def) {\n\treturn {\n\t\tline: function (v) {\n\t\t\tv = v || def;\n\n\t\t\tif (v) {\n\t\t\t\treturn str.replace('%s', v.toString());\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t};\n};\n\nmodule.exports = errorEx;\n", "'use strict'\n\nconst hexify = char => {\n  const h = char.charCodeAt(0).toString(16).toUpperCase()\n  return '0x' + (h.length % 2 ? '0' : '') + h\n}\n\nconst parseError = (e, txt, context) => {\n  if (!txt) {\n    return {\n      message: e.message + ' while parsing empty string',\n      position: 0,\n    }\n  }\n  const badToken = e.message.match(/^Unexpected token (.) .*position\\s+(\\d+)/i)\n  const errIdx = badToken ? +badToken[2]\n    : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1\n    : null\n\n  const msg = badToken ? e.message.replace(/^Unexpected token ./, `Unexpected token ${\n      JSON.stringify(badToken[1])\n    } (${hexify(badToken[1])})`)\n    : e.message\n\n  if (errIdx !== null && errIdx !== undefined) {\n    const start = errIdx <= context ? 0\n      : errIdx - context\n\n    const end = errIdx + context >= txt.length ? txt.length\n      : errIdx + context\n\n    const slice = (start === 0 ? '' : '...') +\n      txt.slice(start, end) +\n      (end === txt.length ? '' : '...')\n\n    const near = txt === slice ? '' : 'near '\n\n    return {\n      message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,\n      position: errIdx,\n    }\n  } else {\n    return {\n      message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,\n      position: 0,\n    }\n  }\n}\n\nclass JSONParseError extends SyntaxError {\n  constructor (er, txt, context, caller) {\n    context = context || 20\n    const metadata = parseError(er, txt, context)\n    super(metadata.message)\n    Object.assign(this, metadata)\n    this.code = 'EJSONPARSE'\n    this.systemError = er\n    Error.captureStackTrace(this, caller || this.constructor)\n  }\n  get name () { return this.constructor.name }\n  set name (n) {}\n  get [Symbol.toStringTag] () { return this.constructor.name }\n}\n\nconst kIndent = Symbol.for('indent')\nconst kNewline = Symbol.for('newline')\n// only respect indentation if we got a line break, otherwise squash it\n// things other than objects and arrays aren't indented, so ignore those\n// Important: in both of these regexps, the $1 capture group is the newline\n// or undefined, and the $2 capture group is the indent, or undefined.\nconst formatRE = /^\\s*[{\\[]((?:\\r?\\n)+)([\\s\\t]*)/\nconst emptyRE = /^(?:\\{\\}|\\[\\])((?:\\r?\\n)+)?$/\n\nconst parseJson = (txt, reviver, context) => {\n  const parseText = stripBOM(txt)\n  context = context || 20\n  try {\n    // get the indentation so that we can save it back nicely\n    // if the file starts with {\" then we have an indent of '', ie, none\n    // otherwise, pick the indentation of the next line after the first \\n\n    // If the pattern doesn't match, then it means no indentation.\n    // JSON.stringify ignores symbols, so this is reasonably safe.\n    // if the string is '{}' or '[]', then use the default 2-space indent.\n    const [, newline = '\\n', indent = '  '] = parseText.match(emptyRE) ||\n      parseText.match(formatRE) ||\n      [, '', '']\n\n    const result = JSON.parse(parseText, reviver)\n    if (result && typeof result === 'object') {\n      result[kNewline] = newline\n      result[kIndent] = indent\n    }\n    return result\n  } catch (e) {\n    if (typeof txt !== 'string' && !Buffer.isBuffer(txt)) {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0\n      throw Object.assign(new TypeError(\n        `Cannot parse ${isEmptyArray ? 'an empty array' : String(txt)}`\n      ), {\n        code: 'EJSONPARSE',\n        systemError: e,\n      })\n    }\n\n    throw new JSONParseError(e, parseText, context, parseJson)\n  }\n}\n\n// Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n// because the buffer-to-string conversion in `fs.readFileSync()`\n// translates it to FEFF, the UTF-16 BOM.\nconst stripBOM = txt => String(txt).replace(/^\\uFEFF/, '')\n\nmodule.exports = parseJson\nparseJson.JSONParseError = JSONParseError\n\nparseJson.noExceptions = (txt, reviver) => {\n  try {\n    return JSON.parse(stripBOM(txt), reviver)\n  } catch (e) {}\n}\n", "\"use strict\";\nexports.__esModule = true;\nexports.LinesAndColumns = void 0;\nvar LF = '\\n';\nvar CR = '\\r';\nvar LinesAndColumns = /** @class */ (function () {\n    function LinesAndColumns(string) {\n        this.string = string;\n        var offsets = [0];\n        for (var offset = 0; offset < string.length;) {\n            switch (string[offset]) {\n                case LF:\n                    offset += LF.length;\n                    offsets.push(offset);\n                    break;\n                case CR:\n                    offset += CR.length;\n                    if (string[offset] === LF) {\n                        offset += LF.length;\n                    }\n                    offsets.push(offset);\n                    break;\n                default:\n                    offset++;\n                    break;\n            }\n        }\n        this.offsets = offsets;\n    }\n    LinesAndColumns.prototype.locationForIndex = function (index) {\n        if (index < 0 || index > this.string.length) {\n            return null;\n        }\n        var line = 0;\n        var offsets = this.offsets;\n        while (offsets[line + 1] <= index) {\n            line++;\n        }\n        var column = index - offsets[line];\n        return { line: line, column: column };\n    };\n    LinesAndColumns.prototype.indexForLocation = function (location) {\n        var line = location.line, column = location.column;\n        if (line < 0 || line >= this.offsets.length) {\n            return null;\n        }\n        if (column < 0 || column > this.lengthOfLine(line)) {\n            return null;\n        }\n        return this.offsets[line] + column;\n    };\n    LinesAndColumns.prototype.lengthOfLine = function (line) {\n        var offset = this.offsets[line];\n        var nextOffset = line === this.offsets.length - 1\n            ? this.string.length\n            : this.offsets[line + 1];\n        return nextOffset - offset;\n    };\n    return LinesAndColumns;\n}());\nexports.LinesAndColumns = LinesAndColumns;\nexports[\"default\"] = LinesAndColumns;\n", "'use strict';\nconst errorEx = require('error-ex');\nconst fallback = require('json-parse-even-better-errors');\nconst {default: LinesAndColumns} = require('lines-and-columns');\nconst {codeFrameColumns} = require('@babel/code-frame');\n\nconst JSONError = errorEx('JSONError', {\n\tfileName: errorEx.append('in %s'),\n\tcodeFrame: errorEx.append('\\n\\n%s\\n')\n});\n\nconst parseJson = (string, reviver, filename) => {\n\tif (typeof reviver === 'string') {\n\t\tfilename = reviver;\n\t\treviver = null;\n\t}\n\n\ttry {\n\t\ttry {\n\t\t\treturn JSON.parse(string, reviver);\n\t\t} catch (error) {\n\t\t\tfallback(string, reviver);\n\t\t\tthrow error;\n\t\t}\n\t} catch (error) {\n\t\terror.message = error.message.replace(/\\n/g, '');\n\t\tconst indexMatch = error.message.match(/in JSON at position (\\d+) while parsing/);\n\n\t\tconst jsonError = new JSONError(error);\n\t\tif (filename) {\n\t\t\tjsonError.fileName = filename;\n\t\t}\n\n\t\tif (indexMatch && indexMatch.length > 0) {\n\t\t\tconst lines = new LinesAndColumns(string);\n\t\t\tconst index = Number(indexMatch[1]);\n\t\t\tconst location = lines.locationForIndex(index);\n\n\t\t\tconst codeFrame = codeFrameColumns(\n\t\t\t\tstring,\n\t\t\t\t{start: {line: location.line + 1, column: location.column + 1}},\n\t\t\t\t{highlightCode: true}\n\t\t\t);\n\n\t\t\tjsonError.codeFrame = codeFrame;\n\t\t}\n\n\t\tthrow jsonError;\n\t}\n};\n\nparseJson.JSONError = JSONError;\n\nmodule.exports = parseJson;\n", "function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = o[Symbol.iterator]();\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar Char = {\n  ANCHOR: '&',\n  COMMENT: '#',\n  TAG: '!',\n  DIRECTIVES_END: '-',\n  DOCUMENT_END: '.'\n};\nvar Type = {\n  ALIAS: 'ALIAS',\n  BLANK_LINE: 'BLANK_LINE',\n  BLOCK_FOLDED: 'BLOCK_FOLDED',\n  BLOCK_LITERAL: 'BLOCK_LITERAL',\n  COMMENT: 'COMMENT',\n  DIRECTIVE: 'DIRECTIVE',\n  DOCUMENT: 'DOCUMENT',\n  FLOW_MAP: 'FLOW_MAP',\n  FLOW_SEQ: 'FLOW_SEQ',\n  MAP: 'MAP',\n  MAP_KEY: 'MAP_KEY',\n  MAP_VALUE: 'MAP_VALUE',\n  PLAIN: 'PLAIN',\n  QUOTE_DOUBLE: 'QUOTE_DOUBLE',\n  QUOTE_SINGLE: 'QUOTE_SINGLE',\n  SEQ: 'SEQ',\n  SEQ_ITEM: 'SEQ_ITEM'\n};\nvar defaultTagPrefix = 'tag:yaml.org,2002:';\nvar defaultTags = {\n  MAP: 'tag:yaml.org,2002:map',\n  SEQ: 'tag:yaml.org,2002:seq',\n  STR: 'tag:yaml.org,2002:str'\n};\n\nfunction findLineStarts(src) {\n  var ls = [0];\n  var offset = src.indexOf('\\n');\n\n  while (offset !== -1) {\n    offset += 1;\n    ls.push(offset);\n    offset = src.indexOf('\\n', offset);\n  }\n\n  return ls;\n}\n\nfunction getSrcInfo(cst) {\n  var lineStarts, src;\n\n  if (typeof cst === 'string') {\n    lineStarts = findLineStarts(cst);\n    src = cst;\n  } else {\n    if (Array.isArray(cst)) cst = cst[0];\n\n    if (cst && cst.context) {\n      if (!cst.lineStarts) cst.lineStarts = findLineStarts(cst.context.src);\n      lineStarts = cst.lineStarts;\n      src = cst.context.src;\n    }\n  }\n\n  return {\n    lineStarts: lineStarts,\n    src: src\n  };\n}\n/**\n * @typedef {Object} LinePos - One-indexed position in the source\n * @property {number} line\n * @property {number} col\n */\n\n/**\n * Determine the line/col position matching a character offset.\n *\n * Accepts a source string or a CST document as the second parameter. With\n * the latter, starting indices for lines are cached in the document as\n * `lineStarts: number[]`.\n *\n * Returns a one-indexed `{ line, col }` location if found, or\n * `undefined` otherwise.\n *\n * @param {number} offset\n * @param {string|Document|Document[]} cst\n * @returns {?LinePos}\n */\n\n\nfunction getLinePos(offset, cst) {\n  if (typeof offset !== 'number' || offset < 0) return null;\n\n  var _getSrcInfo = getSrcInfo(cst),\n      lineStarts = _getSrcInfo.lineStarts,\n      src = _getSrcInfo.src;\n\n  if (!lineStarts || !src || offset > src.length) return null;\n\n  for (var i = 0; i < lineStarts.length; ++i) {\n    var start = lineStarts[i];\n\n    if (offset < start) {\n      return {\n        line: i,\n        col: offset - lineStarts[i - 1] + 1\n      };\n    }\n\n    if (offset === start) return {\n      line: i + 1,\n      col: 1\n    };\n  }\n\n  var line = lineStarts.length;\n  return {\n    line: line,\n    col: offset - lineStarts[line - 1] + 1\n  };\n}\n/**\n * Get a specified line from the source.\n *\n * Accepts a source string or a CST document as the second parameter. With\n * the latter, starting indices for lines are cached in the document as\n * `lineStarts: number[]`.\n *\n * Returns the line as a string if found, or `null` otherwise.\n *\n * @param {number} line One-indexed line number\n * @param {string|Document|Document[]} cst\n * @returns {?string}\n */\n\nfunction getLine(line, cst) {\n  var _getSrcInfo2 = getSrcInfo(cst),\n      lineStarts = _getSrcInfo2.lineStarts,\n      src = _getSrcInfo2.src;\n\n  if (!lineStarts || !(line >= 1) || line > lineStarts.length) return null;\n  var start = lineStarts[line - 1];\n  var end = lineStarts[line]; // undefined for last line; that's ok for slice()\n\n  while (end && end > start && src[end - 1] === '\\n') {\n    --end;\n  }\n\n  return src.slice(start, end);\n}\n/**\n * Pretty-print the starting line from the source indicated by the range `pos`\n *\n * Trims output to `maxWidth` chars while keeping the starting column visible,\n * using `…` at either end to indicate dropped characters.\n *\n * Returns a two-line string (or `null`) with `\\n` as separator; the second line\n * will hold appropriately indented `^` marks indicating the column range.\n *\n * @param {Object} pos\n * @param {LinePos} pos.start\n * @param {LinePos} [pos.end]\n * @param {string|Document|Document[]*} cst\n * @param {number} [maxWidth=80]\n * @returns {?string}\n */\n\nfunction getPrettyContext(_ref, cst) {\n  var start = _ref.start,\n      end = _ref.end;\n  var maxWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 80;\n  var src = getLine(start.line, cst);\n  if (!src) return null;\n  var col = start.col;\n\n  if (src.length > maxWidth) {\n    if (col <= maxWidth - 10) {\n      src = src.substr(0, maxWidth - 1) + '…';\n    } else {\n      var halfWidth = Math.round(maxWidth / 2);\n      if (src.length > col + halfWidth) src = src.substr(0, col + halfWidth - 1) + '…';\n      col -= src.length - maxWidth;\n      src = '…' + src.substr(1 - maxWidth);\n    }\n  }\n\n  var errLen = 1;\n  var errEnd = '';\n\n  if (end) {\n    if (end.line === start.line && col + (end.col - start.col) <= maxWidth + 1) {\n      errLen = end.col - start.col;\n    } else {\n      errLen = Math.min(src.length + 1, maxWidth) - col;\n      errEnd = '…';\n    }\n  }\n\n  var offset = col > 1 ? ' '.repeat(col - 1) : '';\n  var err = '^'.repeat(errLen);\n  return \"\".concat(src, \"\\n\").concat(offset).concat(err).concat(errEnd);\n}\n\nvar Range = /*#__PURE__*/function () {\n  function Range(start, end) {\n    _classCallCheck(this, Range);\n\n    this.start = start;\n    this.end = end || start;\n  }\n\n  _createClass(Range, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return typeof this.start !== 'number' || !this.end || this.end <= this.start;\n    }\n    /**\n     * Set `origStart` and `origEnd` to point to the original source range for\n     * this node, which may differ due to dropped CR characters.\n     *\n     * @param {number[]} cr - Positions of dropped CR characters\n     * @param {number} offset - Starting index of `cr` from the last call\n     * @returns {number} - The next offset, matching the one found for `origStart`\n     */\n\n  }, {\n    key: \"setOrigRange\",\n    value: function setOrigRange(cr, offset) {\n      var start = this.start,\n          end = this.end;\n\n      if (cr.length === 0 || end <= cr[0]) {\n        this.origStart = start;\n        this.origEnd = end;\n        return offset;\n      }\n\n      var i = offset;\n\n      while (i < cr.length) {\n        if (cr[i] > start) break;else ++i;\n      }\n\n      this.origStart = start + i;\n      var nextOffset = i;\n\n      while (i < cr.length) {\n        // if end was at \\n, it should now be at \\r\n        if (cr[i] >= end) break;else ++i;\n      }\n\n      this.origEnd = end + i;\n      return nextOffset;\n    }\n  }], [{\n    key: \"copy\",\n    value: function copy(orig) {\n      return new Range(orig.start, orig.end);\n    }\n  }]);\n\n  return Range;\n}();\n\n/** Root class of all nodes */\n\nvar Node = /*#__PURE__*/function () {\n  function Node(type, props, context) {\n    _classCallCheck(this, Node);\n\n    Object.defineProperty(this, 'context', {\n      value: context || null,\n      writable: true\n    });\n    this.error = null;\n    this.range = null;\n    this.valueRange = null;\n    this.props = props || [];\n    this.type = type;\n    this.value = null;\n  }\n\n  _createClass(Node, [{\n    key: \"getPropValue\",\n    value: function getPropValue(idx, key, skipKey) {\n      if (!this.context) return null;\n      var src = this.context.src;\n      var prop = this.props[idx];\n      return prop && src[prop.start] === key ? src.slice(prop.start + (skipKey ? 1 : 0), prop.end) : null;\n    }\n  }, {\n    key: \"anchor\",\n    get: function get() {\n      for (var i = 0; i < this.props.length; ++i) {\n        var anchor = this.getPropValue(i, Char.ANCHOR, true);\n        if (anchor != null) return anchor;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"comment\",\n    get: function get() {\n      var comments = [];\n\n      for (var i = 0; i < this.props.length; ++i) {\n        var comment = this.getPropValue(i, Char.COMMENT, true);\n        if (comment != null) comments.push(comment);\n      }\n\n      return comments.length > 0 ? comments.join('\\n') : null;\n    }\n  }, {\n    key: \"commentHasRequiredWhitespace\",\n    value: function commentHasRequiredWhitespace(start) {\n      var src = this.context.src;\n      if (this.header && start === this.header.end) return false;\n      if (!this.valueRange) return false;\n      var end = this.valueRange.end;\n      return start !== end || Node.atBlank(src, end - 1);\n    }\n  }, {\n    key: \"hasComment\",\n    get: function get() {\n      if (this.context) {\n        var src = this.context.src;\n\n        for (var i = 0; i < this.props.length; ++i) {\n          if (src[this.props[i].start] === Char.COMMENT) return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"hasProps\",\n    get: function get() {\n      if (this.context) {\n        var src = this.context.src;\n\n        for (var i = 0; i < this.props.length; ++i) {\n          if (src[this.props[i].start] !== Char.COMMENT) return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"includesTrailingLines\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"jsonLike\",\n    get: function get() {\n      var jsonLikeTypes = [Type.FLOW_MAP, Type.FLOW_SEQ, Type.QUOTE_DOUBLE, Type.QUOTE_SINGLE];\n      return jsonLikeTypes.indexOf(this.type) !== -1;\n    }\n  }, {\n    key: \"rangeAsLinePos\",\n    get: function get() {\n      if (!this.range || !this.context) return undefined;\n      var start = getLinePos(this.range.start, this.context.root);\n      if (!start) return undefined;\n      var end = getLinePos(this.range.end, this.context.root);\n      return {\n        start: start,\n        end: end\n      };\n    }\n  }, {\n    key: \"rawValue\",\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      return this.context.src.slice(start, end);\n    }\n  }, {\n    key: \"tag\",\n    get: function get() {\n      for (var i = 0; i < this.props.length; ++i) {\n        var tag = this.getPropValue(i, Char.TAG, false);\n\n        if (tag != null) {\n          if (tag[1] === '<') {\n            return {\n              verbatim: tag.slice(2, -1)\n            };\n          } else {\n            // eslint-disable-next-line no-unused-vars\n            var _tag$match = tag.match(/^(.*!)([^!]*)$/),\n                _tag$match2 = _slicedToArray(_tag$match, 3);\n                _tag$match2[0];\n                var handle = _tag$match2[1],\n                suffix = _tag$match2[2];\n\n            return {\n              handle: handle,\n              suffix: suffix\n            };\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"valueRangeContainsNewline\",\n    get: function get() {\n      if (!this.valueRange || !this.context) return false;\n      var _this$valueRange2 = this.valueRange,\n          start = _this$valueRange2.start,\n          end = _this$valueRange2.end;\n      var src = this.context.src;\n\n      for (var i = start; i < end; ++i) {\n        if (src[i] === '\\n') return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseComment\",\n    value: function parseComment(start) {\n      var src = this.context.src;\n\n      if (src[start] === Char.COMMENT) {\n        var end = Node.endOfLine(src, start + 1);\n        var commentRange = new Range(start, end);\n        this.props.push(commentRange);\n        return end;\n      }\n\n      return start;\n    }\n    /**\n     * Populates the `origStart` and `origEnd` values of all ranges for this\n     * node. Extended by child classes to handle descendant nodes.\n     *\n     * @param {number[]} cr - Positions of dropped CR characters\n     * @param {number} offset - Starting index of `cr` from the last call\n     * @returns {number} - The next offset, matching the one found for `origStart`\n     */\n\n  }, {\n    key: \"setOrigRanges\",\n    value: function setOrigRanges(cr, offset) {\n      if (this.range) offset = this.range.setOrigRange(cr, offset);\n      if (this.valueRange) this.valueRange.setOrigRange(cr, offset);\n      this.props.forEach(function (prop) {\n        return prop.setOrigRange(cr, offset);\n      });\n      return offset;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var src = this.context.src,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var str = src.slice(range.start, range.end);\n      return Node.addStringTerminator(src, range.end, str);\n    }\n  }], [{\n    key: \"addStringTerminator\",\n    value: function addStringTerminator(src, offset, str) {\n      if (str[str.length - 1] === '\\n') return str;\n      var next = Node.endOfWhiteSpace(src, offset);\n      return next >= src.length || src[next] === '\\n' ? str + '\\n' : str;\n    } // ^(---|...)\n\n  }, {\n    key: \"atDocumentBoundary\",\n    value: function atDocumentBoundary(src, offset, sep) {\n      var ch0 = src[offset];\n      if (!ch0) return true;\n      var prev = src[offset - 1];\n      if (prev && prev !== '\\n') return false;\n\n      if (sep) {\n        if (ch0 !== sep) return false;\n      } else {\n        if (ch0 !== Char.DIRECTIVES_END && ch0 !== Char.DOCUMENT_END) return false;\n      }\n\n      var ch1 = src[offset + 1];\n      var ch2 = src[offset + 2];\n      if (ch1 !== ch0 || ch2 !== ch0) return false;\n      var ch3 = src[offset + 3];\n      return !ch3 || ch3 === '\\n' || ch3 === '\\t' || ch3 === ' ';\n    }\n  }, {\n    key: \"endOfIdentifier\",\n    value: function endOfIdentifier(src, offset) {\n      var ch = src[offset];\n      var isVerbatim = ch === '<';\n      var notOk = isVerbatim ? ['\\n', '\\t', ' ', '>'] : ['\\n', '\\t', ' ', '[', ']', '{', '}', ','];\n\n      while (ch && notOk.indexOf(ch) === -1) {\n        ch = src[offset += 1];\n      }\n\n      if (isVerbatim && ch === '>') offset += 1;\n      return offset;\n    }\n  }, {\n    key: \"endOfIndent\",\n    value: function endOfIndent(src, offset) {\n      var ch = src[offset];\n\n      while (ch === ' ') {\n        ch = src[offset += 1];\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"endOfLine\",\n    value: function endOfLine(src, offset) {\n      var ch = src[offset];\n\n      while (ch && ch !== '\\n') {\n        ch = src[offset += 1];\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"endOfWhiteSpace\",\n    value: function endOfWhiteSpace(src, offset) {\n      var ch = src[offset];\n\n      while (ch === '\\t' || ch === ' ') {\n        ch = src[offset += 1];\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"startOfLine\",\n    value: function startOfLine(src, offset) {\n      var ch = src[offset - 1];\n      if (ch === '\\n') return offset;\n\n      while (ch && ch !== '\\n') {\n        ch = src[offset -= 1];\n      }\n\n      return offset + 1;\n    }\n    /**\n     * End of indentation, or null if the line's indent level is not more\n     * than `indent`\n     *\n     * @param {string} src\n     * @param {number} indent\n     * @param {number} lineStart\n     * @returns {?number}\n     */\n\n  }, {\n    key: \"endOfBlockIndent\",\n    value: function endOfBlockIndent(src, indent, lineStart) {\n      var inEnd = Node.endOfIndent(src, lineStart);\n\n      if (inEnd > lineStart + indent) {\n        return inEnd;\n      } else {\n        var wsEnd = Node.endOfWhiteSpace(src, inEnd);\n        var ch = src[wsEnd];\n        if (!ch || ch === '\\n') return wsEnd;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"atBlank\",\n    value: function atBlank(src, offset, endAsBlank) {\n      var ch = src[offset];\n      return ch === '\\n' || ch === '\\t' || ch === ' ' || endAsBlank && !ch;\n    }\n  }, {\n    key: \"nextNodeIsIndented\",\n    value: function nextNodeIsIndented(ch, indentDiff, indicatorAsIndent) {\n      if (!ch || indentDiff < 0) return false;\n      if (indentDiff > 0) return true;\n      return indicatorAsIndent && ch === '-';\n    } // should be at line or string end, or at next non-whitespace char\n\n  }, {\n    key: \"normalizeOffset\",\n    value: function normalizeOffset(src, offset) {\n      var ch = src[offset];\n      return !ch ? offset : ch !== '\\n' && src[offset - 1] === '\\n' ? offset - 1 : Node.endOfWhiteSpace(src, offset);\n    } // fold single newline into space, multiple newlines to N - 1 newlines\n    // presumes src[offset] === '\\n'\n\n  }, {\n    key: \"foldNewline\",\n    value: function foldNewline(src, offset, indent) {\n      var inCount = 0;\n      var error = false;\n      var fold = '';\n      var ch = src[offset + 1];\n\n      while (ch === ' ' || ch === '\\t' || ch === '\\n') {\n        switch (ch) {\n          case '\\n':\n            inCount = 0;\n            offset += 1;\n            fold += '\\n';\n            break;\n\n          case '\\t':\n            if (inCount <= indent) error = true;\n            offset = Node.endOfWhiteSpace(src, offset + 2) - 1;\n            break;\n\n          case ' ':\n            inCount += 1;\n            offset += 1;\n            break;\n        }\n\n        ch = src[offset + 1];\n      }\n\n      if (!fold) fold = ' ';\n      if (ch && inCount <= indent) error = true;\n      return {\n        fold: fold,\n        offset: offset,\n        error: error\n      };\n    }\n  }]);\n\n  return Node;\n}();\n\nvar YAMLError = /*#__PURE__*/function (_Error) {\n  _inherits(YAMLError, _Error);\n\n  var _super = _createSuper(YAMLError);\n\n  function YAMLError(name, source, message) {\n    var _this;\n\n    _classCallCheck(this, YAMLError);\n\n    if (!message || !(source instanceof Node)) throw new Error(\"Invalid arguments for new \".concat(name));\n    _this = _super.call(this);\n    _this.name = name;\n    _this.message = message;\n    _this.source = source;\n    return _this;\n  }\n\n  _createClass(YAMLError, [{\n    key: \"makePretty\",\n    value: function makePretty() {\n      if (!this.source) return;\n      this.nodeType = this.source.type;\n      var cst = this.source.context && this.source.context.root;\n\n      if (typeof this.offset === 'number') {\n        this.range = new Range(this.offset, this.offset + 1);\n        var start = cst && getLinePos(this.offset, cst);\n\n        if (start) {\n          var end = {\n            line: start.line,\n            col: start.col + 1\n          };\n          this.linePos = {\n            start: start,\n            end: end\n          };\n        }\n\n        delete this.offset;\n      } else {\n        this.range = this.source.range;\n        this.linePos = this.source.rangeAsLinePos;\n      }\n\n      if (this.linePos) {\n        var _this$linePos$start = this.linePos.start,\n            line = _this$linePos$start.line,\n            col = _this$linePos$start.col;\n        this.message += \" at line \".concat(line, \", column \").concat(col);\n        var ctx = cst && getPrettyContext(this.linePos, cst);\n        if (ctx) this.message += \":\\n\\n\".concat(ctx, \"\\n\");\n      }\n\n      delete this.source;\n    }\n  }]);\n\n  return YAMLError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar YAMLReferenceError = /*#__PURE__*/function (_YAMLError) {\n  _inherits(YAMLReferenceError, _YAMLError);\n\n  var _super2 = _createSuper(YAMLReferenceError);\n\n  function YAMLReferenceError(source, message) {\n    _classCallCheck(this, YAMLReferenceError);\n\n    return _super2.call(this, 'YAMLReferenceError', source, message);\n  }\n\n  return YAMLReferenceError;\n}(YAMLError);\nvar YAMLSemanticError = /*#__PURE__*/function (_YAMLError2) {\n  _inherits(YAMLSemanticError, _YAMLError2);\n\n  var _super3 = _createSuper(YAMLSemanticError);\n\n  function YAMLSemanticError(source, message) {\n    _classCallCheck(this, YAMLSemanticError);\n\n    return _super3.call(this, 'YAMLSemanticError', source, message);\n  }\n\n  return YAMLSemanticError;\n}(YAMLError);\nvar YAMLSyntaxError = /*#__PURE__*/function (_YAMLError3) {\n  _inherits(YAMLSyntaxError, _YAMLError3);\n\n  var _super4 = _createSuper(YAMLSyntaxError);\n\n  function YAMLSyntaxError(source, message) {\n    _classCallCheck(this, YAMLSyntaxError);\n\n    return _super4.call(this, 'YAMLSyntaxError', source, message);\n  }\n\n  return YAMLSyntaxError;\n}(YAMLError);\nvar YAMLWarning = /*#__PURE__*/function (_YAMLError4) {\n  _inherits(YAMLWarning, _YAMLError4);\n\n  var _super5 = _createSuper(YAMLWarning);\n\n  function YAMLWarning(source, message) {\n    _classCallCheck(this, YAMLWarning);\n\n    return _super5.call(this, 'YAMLWarning', source, message);\n  }\n\n  return YAMLWarning;\n}(YAMLError);\n\nvar PlainValue = /*#__PURE__*/function (_Node) {\n  _inherits(PlainValue, _Node);\n\n  var _super = _createSuper(PlainValue);\n\n  function PlainValue() {\n    _classCallCheck(this, PlainValue);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PlainValue, [{\n    key: \"strValue\",\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var src = this.context.src;\n      var ch = src[end - 1];\n\n      while (start < end && (ch === '\\n' || ch === '\\t' || ch === ' ')) {\n        ch = src[--end - 1];\n      }\n\n      var str = '';\n\n      for (var i = start; i < end; ++i) {\n        var _ch = src[i];\n\n        if (_ch === '\\n') {\n          var _Node$foldNewline = Node.foldNewline(src, i, -1),\n              fold = _Node$foldNewline.fold,\n              offset = _Node$foldNewline.offset;\n\n          str += fold;\n          i = offset;\n        } else if (_ch === ' ' || _ch === '\\t') {\n          // trim trailing whitespace\n          var wsStart = i;\n          var next = src[i + 1];\n\n          while (i < end && (next === ' ' || next === '\\t')) {\n            i += 1;\n            next = src[i + 1];\n          }\n\n          if (next !== '\\n') str += i > wsStart ? src.slice(wsStart, i + 1) : _ch;\n        } else {\n          str += _ch;\n        }\n      }\n\n      var ch0 = src[start];\n\n      switch (ch0) {\n        case '\\t':\n          {\n            var msg = 'Plain value cannot start with a tab character';\n            var errors = [new YAMLSemanticError(this, msg)];\n            return {\n              errors: errors,\n              str: str\n            };\n          }\n\n        case '@':\n        case '`':\n          {\n            var _msg = \"Plain value cannot start with reserved character \".concat(ch0);\n\n            var _errors = [new YAMLSemanticError(this, _msg)];\n            return {\n              errors: _errors,\n              str: str\n            };\n          }\n\n        default:\n          return str;\n      }\n    }\n  }, {\n    key: \"parseBlockValue\",\n    value: function parseBlockValue(start) {\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          inFlow = _this$context.inFlow,\n          src = _this$context.src;\n      var offset = start;\n      var valueEnd = start;\n\n      for (var ch = src[offset]; ch === '\\n'; ch = src[offset]) {\n        if (Node.atDocumentBoundary(src, offset + 1)) break;\n        var end = Node.endOfBlockIndent(src, indent, offset + 1);\n        if (end === null || src[end] === '#') break;\n\n        if (src[end] === '\\n') {\n          offset = end;\n        } else {\n          valueEnd = PlainValue.endOfLine(src, end, inFlow);\n          offset = valueEnd;\n        }\n      }\n\n      if (this.valueRange.isEmpty()) this.valueRange.start = start;\n      this.valueRange.end = valueEnd;\n      return valueEnd;\n    }\n    /**\n     * Parses a plain value from the source\n     *\n     * Accepted forms are:\n     * ```\n     * #comment\n     *\n     * first line\n     *\n     * first line #comment\n     *\n     * first line\n     * block\n     * lines\n     *\n     * #comment\n     * block\n     * lines\n     * ```\n     * where block lines are empty or have an indent level greater than `indent`.\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar, may be `\\n`\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var inFlow = context.inFlow,\n          src = context.src;\n      var offset = start;\n      var ch = src[offset];\n\n      if (ch && ch !== '#' && ch !== '\\n') {\n        offset = PlainValue.endOfLine(src, start, inFlow);\n      }\n\n      this.valueRange = new Range(start, offset);\n      offset = Node.endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n\n      if (!this.hasComment || this.valueRange.isEmpty()) {\n        offset = this.parseBlockValue(offset);\n      }\n\n      return offset;\n    }\n  }], [{\n    key: \"endOfLine\",\n    value: function endOfLine(src, start, inFlow) {\n      var ch = src[start];\n      var offset = start;\n\n      while (ch && ch !== '\\n') {\n        if (inFlow && (ch === '[' || ch === ']' || ch === '{' || ch === '}' || ch === ',')) break;\n        var next = src[offset + 1];\n        if (ch === ':' && (!next || next === '\\n' || next === '\\t' || next === ' ' || inFlow && next === ',')) break;\n        if ((ch === ' ' || ch === '\\t') && next === '#') break;\n        offset += 1;\n        ch = next;\n      }\n\n      return offset;\n    }\n  }]);\n\n  return PlainValue;\n}(Node);\n\nexport { Char as C, Node as N, PlainValue as P, Range as R, Type as T, YAMLSyntaxError as Y, _createForOfIteratorHelper as _, _typeof as a, _createClass as b, _classCallCheck as c, defaultTagPrefix as d, _defineProperty as e, YAMLWarning as f, YAMLSemanticError as g, _slicedToArray as h, YAMLError as i, _inherits as j, _createSuper as k, _get as l, _getPrototypeOf as m, defaultTags as n, YAMLReferenceError as o, _assertThisInitialized as p, _toArray as q, _possibleConstructorReturn as r };\n", "import { j as _inherits, k as _createSuper, c as _classCallCheck, T as Type, b as _createClass, R as Range, N as Node, g as YAMLSemanticError, l as _get, m as _getPrototypeOf, Y as YAMLSyntaxError, C as Char, e as _defineProperty, P as PlainValue } from './PlainValue-b8036b75.js';\n\nvar BlankLine = /*#__PURE__*/function (_Node) {\n  _inherits(BlankLine, _Node);\n\n  var _super = _createSuper(BlankLine);\n\n  function BlankLine() {\n    _classCallCheck(this, BlankLine);\n\n    return _super.call(this, Type.BLANK_LINE);\n  }\n  /* istanbul ignore next */\n\n\n  _createClass(BlankLine, [{\n    key: \"includesTrailingLines\",\n    get: function get() {\n      // This is never called from anywhere, but if it were,\n      // this is the value it should return.\n      return true;\n    }\n    /**\n     * Parses a blank line from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first \\n character\n     * @returns {number} - Index of the character after this\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      this.range = new Range(start, start + 1);\n      return start + 1;\n    }\n  }]);\n\n  return BlankLine;\n}(Node);\n\nvar CollectionItem = /*#__PURE__*/function (_Node) {\n  _inherits(CollectionItem, _Node);\n\n  var _super = _createSuper(CollectionItem);\n\n  function CollectionItem(type, props) {\n    var _this;\n\n    _classCallCheck(this, CollectionItem);\n\n    _this = _super.call(this, type, props);\n    _this.node = null;\n    return _this;\n  }\n\n  _createClass(CollectionItem, [{\n    key: \"includesTrailingLines\",\n    get: function get() {\n      return !!this.node && this.node.includesTrailingLines;\n    }\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var parseNode = context.parseNode,\n          src = context.src;\n      var atLineStart = context.atLineStart,\n          lineStart = context.lineStart;\n      if (!atLineStart && this.type === Type.SEQ_ITEM) this.error = new YAMLSemanticError(this, 'Sequence items must not have preceding content on the same line');\n      var indent = atLineStart ? start - lineStart : context.indent;\n      var offset = Node.endOfWhiteSpace(src, start + 1);\n      var ch = src[offset];\n      var inlineComment = ch === '#';\n      var comments = [];\n      var blankLine = null;\n\n      while (ch === '\\n' || ch === '#') {\n        if (ch === '#') {\n          var _end = Node.endOfLine(src, offset + 1);\n\n          comments.push(new Range(offset, _end));\n          offset = _end;\n        } else {\n          atLineStart = true;\n          lineStart = offset + 1;\n          var wsEnd = Node.endOfWhiteSpace(src, lineStart);\n\n          if (src[wsEnd] === '\\n' && comments.length === 0) {\n            blankLine = new BlankLine();\n            lineStart = blankLine.parse({\n              src: src\n            }, lineStart);\n          }\n\n          offset = Node.endOfIndent(src, lineStart);\n        }\n\n        ch = src[offset];\n      }\n\n      if (Node.nextNodeIsIndented(ch, offset - (lineStart + indent), this.type !== Type.SEQ_ITEM)) {\n        this.node = parseNode({\n          atLineStart: atLineStart,\n          inCollection: false,\n          indent: indent,\n          lineStart: lineStart,\n          parent: this\n        }, offset);\n      } else if (ch && lineStart > start + 1) {\n        offset = lineStart - 1;\n      }\n\n      if (this.node) {\n        if (blankLine) {\n          // Only blank lines preceding non-empty nodes are captured. Note that\n          // this means that collection item range start indices do not always\n          // increase monotonically. -- eemeli/yaml#126\n          var items = context.parent.items || context.parent.contents;\n          if (items) items.push(blankLine);\n        }\n\n        if (comments.length) Array.prototype.push.apply(this.props, comments);\n        offset = this.node.range.end;\n      } else {\n        if (inlineComment) {\n          var c = comments[0];\n          this.props.push(c);\n          offset = c.end;\n        } else {\n          offset = Node.endOfLine(src, start + 1);\n        }\n      }\n\n      var end = this.node ? this.node.valueRange.end : offset;\n      this.valueRange = new Range(start, end);\n      return offset;\n    }\n  }, {\n    key: \"setOrigRanges\",\n    value: function setOrigRanges(cr, offset) {\n      offset = _get(_getPrototypeOf(CollectionItem.prototype), \"setOrigRanges\", this).call(this, cr, offset);\n      return this.node ? this.node.setOrigRanges(cr, offset) : offset;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var src = this.context.src,\n          node = this.node,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var str = node ? src.slice(range.start, node.range.start) + String(node) : src.slice(range.start, range.end);\n      return Node.addStringTerminator(src, range.end, str);\n    }\n  }]);\n\n  return CollectionItem;\n}(Node);\n\nvar Comment = /*#__PURE__*/function (_Node) {\n  _inherits(Comment, _Node);\n\n  var _super = _createSuper(Comment);\n\n  function Comment() {\n    _classCallCheck(this, Comment);\n\n    return _super.call(this, Type.COMMENT);\n  }\n  /**\n   * Parses a comment line from the source\n   *\n   * @param {ParseContext} context\n   * @param {number} start - Index of first character\n   * @returns {number} - Index of the character after this scalar\n   */\n\n\n  _createClass(Comment, [{\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var offset = this.parseComment(start);\n      this.range = new Range(start, offset);\n      return offset;\n    }\n  }]);\n\n  return Comment;\n}(Node);\n\nfunction grabCollectionEndComments(node) {\n  var cnode = node;\n\n  while (cnode instanceof CollectionItem) {\n    cnode = cnode.node;\n  }\n\n  if (!(cnode instanceof Collection)) return null;\n  var len = cnode.items.length;\n  var ci = -1;\n\n  for (var i = len - 1; i >= 0; --i) {\n    var n = cnode.items[i];\n\n    if (n.type === Type.COMMENT) {\n      // Keep sufficiently indented comments with preceding node\n      var _n$context = n.context,\n          indent = _n$context.indent,\n          lineStart = _n$context.lineStart;\n      if (indent > 0 && n.range.start >= lineStart + indent) break;\n      ci = i;\n    } else if (n.type === Type.BLANK_LINE) ci = i;else break;\n  }\n\n  if (ci === -1) return null;\n  var ca = cnode.items.splice(ci, len - ci);\n  var prevEnd = ca[0].range.start;\n\n  while (true) {\n    cnode.range.end = prevEnd;\n    if (cnode.valueRange && cnode.valueRange.end > prevEnd) cnode.valueRange.end = prevEnd;\n    if (cnode === node) break;\n    cnode = cnode.context.parent;\n  }\n\n  return ca;\n}\nvar Collection = /*#__PURE__*/function (_Node) {\n  _inherits(Collection, _Node);\n\n  var _super = _createSuper(Collection);\n\n  function Collection(firstItem) {\n    var _this;\n\n    _classCallCheck(this, Collection);\n\n    _this = _super.call(this, firstItem.type === Type.SEQ_ITEM ? Type.SEQ : Type.MAP);\n\n    for (var i = firstItem.props.length - 1; i >= 0; --i) {\n      if (firstItem.props[i].start < firstItem.context.lineStart) {\n        // props on previous line are assumed by the collection\n        _this.props = firstItem.props.slice(0, i + 1);\n        firstItem.props = firstItem.props.slice(i + 1);\n        var itemRange = firstItem.props[0] || firstItem.valueRange;\n        firstItem.range.start = itemRange.start;\n        break;\n      }\n    }\n\n    _this.items = [firstItem];\n    var ec = grabCollectionEndComments(firstItem);\n    if (ec) Array.prototype.push.apply(_this.items, ec);\n    return _this;\n  }\n\n  _createClass(Collection, [{\n    key: \"includesTrailingLines\",\n    get: function get() {\n      return this.items.length > 0;\n    }\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var parseNode = context.parseNode,\n          src = context.src; // It's easier to recalculate lineStart here rather than tracking down the\n      // last context from which to read it -- eemeli/yaml#2\n\n      var lineStart = Node.startOfLine(src, start);\n      var firstItem = this.items[0]; // First-item context needs to be correct for later comment handling\n      // -- eemeli/yaml#17\n\n      firstItem.context.parent = this;\n      this.valueRange = Range.copy(firstItem.valueRange);\n      var indent = firstItem.range.start - firstItem.context.lineStart;\n      var offset = start;\n      offset = Node.normalizeOffset(src, offset);\n      var ch = src[offset];\n      var atLineStart = Node.endOfWhiteSpace(src, lineStart) === offset;\n      var prevIncludesTrailingLines = false;\n\n      while (ch) {\n        while (ch === '\\n' || ch === '#') {\n          if (atLineStart && ch === '\\n' && !prevIncludesTrailingLines) {\n            var blankLine = new BlankLine();\n            offset = blankLine.parse({\n              src: src\n            }, offset);\n            this.valueRange.end = offset;\n\n            if (offset >= src.length) {\n              ch = null;\n              break;\n            }\n\n            this.items.push(blankLine);\n            offset -= 1; // blankLine.parse() consumes terminal newline\n          } else if (ch === '#') {\n            if (offset < lineStart + indent && !Collection.nextContentHasIndent(src, offset, indent)) {\n              return offset;\n            }\n\n            var comment = new Comment();\n            offset = comment.parse({\n              indent: indent,\n              lineStart: lineStart,\n              src: src\n            }, offset);\n            this.items.push(comment);\n            this.valueRange.end = offset;\n\n            if (offset >= src.length) {\n              ch = null;\n              break;\n            }\n          }\n\n          lineStart = offset + 1;\n          offset = Node.endOfIndent(src, lineStart);\n\n          if (Node.atBlank(src, offset)) {\n            var wsEnd = Node.endOfWhiteSpace(src, offset);\n            var next = src[wsEnd];\n\n            if (!next || next === '\\n' || next === '#') {\n              offset = wsEnd;\n            }\n          }\n\n          ch = src[offset];\n          atLineStart = true;\n        }\n\n        if (!ch) {\n          break;\n        }\n\n        if (offset !== lineStart + indent && (atLineStart || ch !== ':')) {\n          if (offset < lineStart + indent) {\n            if (lineStart > start) offset = lineStart;\n            break;\n          } else if (!this.error) {\n            var msg = 'All collection items must start at the same column';\n            this.error = new YAMLSyntaxError(this, msg);\n          }\n        }\n\n        if (firstItem.type === Type.SEQ_ITEM) {\n          if (ch !== '-') {\n            if (lineStart > start) offset = lineStart;\n            break;\n          }\n        } else if (ch === '-' && !this.error) {\n          // map key may start with -, as long as it's followed by a non-whitespace char\n          var _next = src[offset + 1];\n\n          if (!_next || _next === '\\n' || _next === '\\t' || _next === ' ') {\n            var _msg = 'A collection cannot be both a mapping and a sequence';\n            this.error = new YAMLSyntaxError(this, _msg);\n          }\n        }\n\n        var node = parseNode({\n          atLineStart: atLineStart,\n          inCollection: true,\n          indent: indent,\n          lineStart: lineStart,\n          parent: this\n        }, offset);\n        if (!node) return offset; // at next document start\n\n        this.items.push(node);\n        this.valueRange.end = node.valueRange.end;\n        offset = Node.normalizeOffset(src, node.range.end);\n        ch = src[offset];\n        atLineStart = false;\n        prevIncludesTrailingLines = node.includesTrailingLines; // Need to reset lineStart and atLineStart here if preceding node's range\n        // has advanced to check the current line's indentation level\n        // -- eemeli/yaml#10 & eemeli/yaml#38\n\n        if (ch) {\n          var ls = offset - 1;\n          var prev = src[ls];\n\n          while (prev === ' ' || prev === '\\t') {\n            prev = src[--ls];\n          }\n\n          if (prev === '\\n') {\n            lineStart = ls + 1;\n            atLineStart = true;\n          }\n        }\n\n        var ec = grabCollectionEndComments(node);\n        if (ec) Array.prototype.push.apply(this.items, ec);\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"setOrigRanges\",\n    value: function setOrigRanges(cr, offset) {\n      offset = _get(_getPrototypeOf(Collection.prototype), \"setOrigRanges\", this).call(this, cr, offset);\n      this.items.forEach(function (node) {\n        offset = node.setOrigRanges(cr, offset);\n      });\n      return offset;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var src = this.context.src,\n          items = this.items,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var str = src.slice(range.start, items[0].range.start) + String(items[0]);\n\n      for (var i = 1; i < items.length; ++i) {\n        var item = items[i];\n        var _item$context = item.context,\n            atLineStart = _item$context.atLineStart,\n            indent = _item$context.indent;\n        if (atLineStart) for (var _i = 0; _i < indent; ++_i) {\n          str += ' ';\n        }\n        str += String(item);\n      }\n\n      return Node.addStringTerminator(src, range.end, str);\n    }\n  }], [{\n    key: \"nextContentHasIndent\",\n    value: function nextContentHasIndent(src, offset, indent) {\n      var lineStart = Node.endOfLine(src, offset) + 1;\n      offset = Node.endOfWhiteSpace(src, lineStart);\n      var ch = src[offset];\n      if (!ch) return false;\n      if (offset >= lineStart + indent) return true;\n      if (ch !== '#' && ch !== '\\n') return false;\n      return Collection.nextContentHasIndent(src, offset, indent);\n    }\n  }]);\n\n  return Collection;\n}(Node);\n\nvar Directive = /*#__PURE__*/function (_Node) {\n  _inherits(Directive, _Node);\n\n  var _super = _createSuper(Directive);\n\n  function Directive() {\n    var _this;\n\n    _classCallCheck(this, Directive);\n\n    _this = _super.call(this, Type.DIRECTIVE);\n    _this.name = null;\n    return _this;\n  }\n\n  _createClass(Directive, [{\n    key: \"parameters\",\n    get: function get() {\n      var raw = this.rawValue;\n      return raw ? raw.trim().split(/[ \\t]+/) : [];\n    }\n  }, {\n    key: \"parseName\",\n    value: function parseName(start) {\n      var src = this.context.src;\n      var offset = start;\n      var ch = src[offset];\n\n      while (ch && ch !== '\\n' && ch !== '\\t' && ch !== ' ') {\n        ch = src[offset += 1];\n      }\n\n      this.name = src.slice(start, offset);\n      return offset;\n    }\n  }, {\n    key: \"parseParameters\",\n    value: function parseParameters(start) {\n      var src = this.context.src;\n      var offset = start;\n      var ch = src[offset];\n\n      while (ch && ch !== '\\n' && ch !== '#') {\n        ch = src[offset += 1];\n      }\n\n      this.valueRange = new Range(start, offset);\n      return offset;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var offset = this.parseName(start + 1);\n      offset = this.parseParameters(offset);\n      offset = this.parseComment(offset);\n      this.range = new Range(start, offset);\n      return offset;\n    }\n  }]);\n\n  return Directive;\n}(Node);\n\nvar Document = /*#__PURE__*/function (_Node) {\n  _inherits(Document, _Node);\n\n  var _super = _createSuper(Document);\n\n  function Document() {\n    var _this;\n\n    _classCallCheck(this, Document);\n\n    _this = _super.call(this, Type.DOCUMENT);\n    _this.directives = null;\n    _this.contents = null;\n    _this.directivesEndMarker = null;\n    _this.documentEndMarker = null;\n    return _this;\n  }\n\n  _createClass(Document, [{\n    key: \"parseDirectives\",\n    value: function parseDirectives(start) {\n      var src = this.context.src;\n      this.directives = [];\n      var atLineStart = true;\n      var hasDirectives = false;\n      var offset = start;\n\n      while (!Node.atDocumentBoundary(src, offset, Char.DIRECTIVES_END)) {\n        offset = Document.startCommentOrEndBlankLine(src, offset);\n\n        switch (src[offset]) {\n          case '\\n':\n            if (atLineStart) {\n              var blankLine = new BlankLine();\n              offset = blankLine.parse({\n                src: src\n              }, offset);\n\n              if (offset < src.length) {\n                this.directives.push(blankLine);\n              }\n            } else {\n              offset += 1;\n              atLineStart = true;\n            }\n\n            break;\n\n          case '#':\n            {\n              var comment = new Comment();\n              offset = comment.parse({\n                src: src\n              }, offset);\n              this.directives.push(comment);\n              atLineStart = false;\n            }\n            break;\n\n          case '%':\n            {\n              var directive = new Directive();\n              offset = directive.parse({\n                parent: this,\n                src: src\n              }, offset);\n              this.directives.push(directive);\n              hasDirectives = true;\n              atLineStart = false;\n            }\n            break;\n\n          default:\n            if (hasDirectives) {\n              this.error = new YAMLSemanticError(this, 'Missing directives-end indicator line');\n            } else if (this.directives.length > 0) {\n              this.contents = this.directives;\n              this.directives = [];\n            }\n\n            return offset;\n        }\n      }\n\n      if (src[offset]) {\n        this.directivesEndMarker = new Range(offset, offset + 3);\n        return offset + 3;\n      }\n\n      if (hasDirectives) {\n        this.error = new YAMLSemanticError(this, 'Missing directives-end indicator line');\n      } else if (this.directives.length > 0) {\n        this.contents = this.directives;\n        this.directives = [];\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"parseContents\",\n    value: function parseContents(start) {\n      var _this$context = this.context,\n          parseNode = _this$context.parseNode,\n          src = _this$context.src;\n      if (!this.contents) this.contents = [];\n      var lineStart = start;\n\n      while (src[lineStart - 1] === '-') {\n        lineStart -= 1;\n      }\n\n      var offset = Node.endOfWhiteSpace(src, start);\n      var atLineStart = lineStart === start;\n      this.valueRange = new Range(offset);\n\n      while (!Node.atDocumentBoundary(src, offset, Char.DOCUMENT_END)) {\n        switch (src[offset]) {\n          case '\\n':\n            if (atLineStart) {\n              var blankLine = new BlankLine();\n              offset = blankLine.parse({\n                src: src\n              }, offset);\n\n              if (offset < src.length) {\n                this.contents.push(blankLine);\n              }\n            } else {\n              offset += 1;\n              atLineStart = true;\n            }\n\n            lineStart = offset;\n            break;\n\n          case '#':\n            {\n              var comment = new Comment();\n              offset = comment.parse({\n                src: src\n              }, offset);\n              this.contents.push(comment);\n              atLineStart = false;\n            }\n            break;\n\n          default:\n            {\n              var iEnd = Node.endOfIndent(src, offset);\n              var context = {\n                atLineStart: atLineStart,\n                indent: -1,\n                inFlow: false,\n                inCollection: false,\n                lineStart: lineStart,\n                parent: this\n              };\n              var node = parseNode(context, iEnd);\n              if (!node) return this.valueRange.end = iEnd; // at next document start\n\n              this.contents.push(node);\n              offset = node.range.end;\n              atLineStart = false;\n              var ec = grabCollectionEndComments(node);\n              if (ec) Array.prototype.push.apply(this.contents, ec);\n            }\n        }\n\n        offset = Document.startCommentOrEndBlankLine(src, offset);\n      }\n\n      this.valueRange.end = offset;\n\n      if (src[offset]) {\n        this.documentEndMarker = new Range(offset, offset + 3);\n        offset += 3;\n\n        if (src[offset]) {\n          offset = Node.endOfWhiteSpace(src, offset);\n\n          if (src[offset] === '#') {\n            var _comment = new Comment();\n\n            offset = _comment.parse({\n              src: src\n            }, offset);\n            this.contents.push(_comment);\n          }\n\n          switch (src[offset]) {\n            case '\\n':\n              offset += 1;\n              break;\n\n            case undefined:\n              break;\n\n            default:\n              this.error = new YAMLSyntaxError(this, 'Document end marker line cannot have a non-comment suffix');\n          }\n        }\n      }\n\n      return offset;\n    }\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      context.root = this;\n      this.context = context;\n      var src = context.src;\n      var offset = src.charCodeAt(start) === 0xfeff ? start + 1 : start; // skip BOM\n\n      offset = this.parseDirectives(offset);\n      offset = this.parseContents(offset);\n      return offset;\n    }\n  }, {\n    key: \"setOrigRanges\",\n    value: function setOrigRanges(cr, offset) {\n      offset = _get(_getPrototypeOf(Document.prototype), \"setOrigRanges\", this).call(this, cr, offset);\n      this.directives.forEach(function (node) {\n        offset = node.setOrigRanges(cr, offset);\n      });\n      if (this.directivesEndMarker) offset = this.directivesEndMarker.setOrigRange(cr, offset);\n      this.contents.forEach(function (node) {\n        offset = node.setOrigRanges(cr, offset);\n      });\n      if (this.documentEndMarker) offset = this.documentEndMarker.setOrigRange(cr, offset);\n      return offset;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var contents = this.contents,\n          directives = this.directives,\n          value = this.value;\n      if (value != null) return value;\n      var str = directives.join('');\n\n      if (contents.length > 0) {\n        if (directives.length > 0 || contents[0].type === Type.COMMENT) str += '---\\n';\n        str += contents.join('');\n      }\n\n      if (str[str.length - 1] !== '\\n') str += '\\n';\n      return str;\n    }\n  }], [{\n    key: \"startCommentOrEndBlankLine\",\n    value: function startCommentOrEndBlankLine(src, start) {\n      var offset = Node.endOfWhiteSpace(src, start);\n      var ch = src[offset];\n      return ch === '#' || ch === '\\n' ? offset : start;\n    }\n  }]);\n\n  return Document;\n}(Node);\n\nvar Alias = /*#__PURE__*/function (_Node) {\n  _inherits(Alias, _Node);\n\n  var _super = _createSuper(Alias);\n\n  function Alias() {\n    _classCallCheck(this, Alias);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Alias, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parses an *alias from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar\n     */\n    function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = Node.endOfIdentifier(src, start + 1);\n      this.valueRange = new Range(start + 1, offset);\n      offset = Node.endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      return offset;\n    }\n  }]);\n\n  return Alias;\n}(Node);\n\nvar Chomp = {\n  CLIP: 'CLIP',\n  KEEP: 'KEEP',\n  STRIP: 'STRIP'\n};\nvar BlockValue = /*#__PURE__*/function (_Node) {\n  _inherits(BlockValue, _Node);\n\n  var _super = _createSuper(BlockValue);\n\n  function BlockValue(type, props) {\n    var _this;\n\n    _classCallCheck(this, BlockValue);\n\n    _this = _super.call(this, type, props);\n    _this.blockIndent = null;\n    _this.chomping = Chomp.CLIP;\n    _this.header = null;\n    return _this;\n  }\n\n  _createClass(BlockValue, [{\n    key: \"includesTrailingLines\",\n    get: function get() {\n      return this.chomping === Chomp.KEEP;\n    }\n  }, {\n    key: \"strValue\",\n    get: function get() {\n      if (!this.valueRange || !this.context) return null;\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          src = _this$context.src;\n      if (this.valueRange.isEmpty()) return '';\n      var lastNewLine = null;\n      var ch = src[end - 1];\n\n      while (ch === '\\n' || ch === '\\t' || ch === ' ') {\n        end -= 1;\n\n        if (end <= start) {\n          if (this.chomping === Chomp.KEEP) break;else return ''; // probably never happens\n        }\n\n        if (ch === '\\n') lastNewLine = end;\n        ch = src[end - 1];\n      }\n\n      var keepStart = end + 1;\n\n      if (lastNewLine) {\n        if (this.chomping === Chomp.KEEP) {\n          keepStart = lastNewLine;\n          end = this.valueRange.end;\n        } else {\n          end = lastNewLine;\n        }\n      }\n\n      var bi = indent + this.blockIndent;\n      var folded = this.type === Type.BLOCK_FOLDED;\n      var atStart = true;\n      var str = '';\n      var sep = '';\n      var prevMoreIndented = false;\n\n      for (var i = start; i < end; ++i) {\n        for (var j = 0; j < bi; ++j) {\n          if (src[i] !== ' ') break;\n          i += 1;\n        }\n\n        var _ch = src[i];\n\n        if (_ch === '\\n') {\n          if (sep === '\\n') str += '\\n';else sep = '\\n';\n        } else {\n          var lineEnd = Node.endOfLine(src, i);\n          var line = src.slice(i, lineEnd);\n          i = lineEnd;\n\n          if (folded && (_ch === ' ' || _ch === '\\t') && i < keepStart) {\n            if (sep === ' ') sep = '\\n';else if (!prevMoreIndented && !atStart && sep === '\\n') sep = '\\n\\n';\n            str += sep + line; //+ ((lineEnd < end && src[lineEnd]) || '')\n\n            sep = lineEnd < end && src[lineEnd] || '';\n            prevMoreIndented = true;\n          } else {\n            str += sep + line;\n            sep = folded && i < keepStart ? ' ' : '\\n';\n            prevMoreIndented = false;\n          }\n\n          if (atStart && line !== '') atStart = false;\n        }\n      }\n\n      return this.chomping === Chomp.STRIP ? str : str + '\\n';\n    }\n  }, {\n    key: \"parseBlockHeader\",\n    value: function parseBlockHeader(start) {\n      var src = this.context.src;\n      var offset = start + 1;\n      var bi = '';\n\n      while (true) {\n        var ch = src[offset];\n\n        switch (ch) {\n          case '-':\n            this.chomping = Chomp.STRIP;\n            break;\n\n          case '+':\n            this.chomping = Chomp.KEEP;\n            break;\n\n          case '0':\n          case '1':\n          case '2':\n          case '3':\n          case '4':\n          case '5':\n          case '6':\n          case '7':\n          case '8':\n          case '9':\n            bi += ch;\n            break;\n\n          default:\n            this.blockIndent = Number(bi) || null;\n            this.header = new Range(start, offset);\n            return offset;\n        }\n\n        offset += 1;\n      }\n    }\n  }, {\n    key: \"parseBlockValue\",\n    value: function parseBlockValue(start) {\n      var _this$context2 = this.context,\n          indent = _this$context2.indent,\n          src = _this$context2.src;\n      var explicit = !!this.blockIndent;\n      var offset = start;\n      var valueEnd = start;\n      var minBlockIndent = 1;\n\n      for (var ch = src[offset]; ch === '\\n'; ch = src[offset]) {\n        offset += 1;\n        if (Node.atDocumentBoundary(src, offset)) break;\n        var end = Node.endOfBlockIndent(src, indent, offset); // should not include tab?\n\n        if (end === null) break;\n        var _ch2 = src[end];\n        var lineIndent = end - (offset + indent);\n\n        if (!this.blockIndent) {\n          // no explicit block indent, none yet detected\n          if (src[end] !== '\\n') {\n            // first line with non-whitespace content\n            if (lineIndent < minBlockIndent) {\n              var msg = 'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';\n              this.error = new YAMLSemanticError(this, msg);\n            }\n\n            this.blockIndent = lineIndent;\n          } else if (lineIndent > minBlockIndent) {\n            // empty line with more whitespace\n            minBlockIndent = lineIndent;\n          }\n        } else if (_ch2 && _ch2 !== '\\n' && lineIndent < this.blockIndent) {\n          if (src[end] === '#') break;\n\n          if (!this.error) {\n            var _src = explicit ? 'explicit indentation indicator' : 'first line';\n\n            var _msg = \"Block scalars must not be less indented than their \".concat(_src);\n\n            this.error = new YAMLSemanticError(this, _msg);\n          }\n        }\n\n        if (src[end] === '\\n') {\n          offset = end;\n        } else {\n          offset = valueEnd = Node.endOfLine(src, end);\n        }\n      }\n\n      if (this.chomping !== Chomp.KEEP) {\n        offset = src[valueEnd] ? valueEnd + 1 : valueEnd;\n      }\n\n      this.valueRange = new Range(start + 1, offset);\n      return offset;\n    }\n    /**\n     * Parses a block value from the source\n     *\n     * Accepted forms are:\n     * ```\n     * BS\n     * block\n     * lines\n     *\n     * BS #comment\n     * block\n     * lines\n     * ```\n     * where the block style BS matches the regexp `[|>][-+1-9]*` and block lines\n     * are empty or have an indent level greater than `indent`.\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this block\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = this.parseBlockHeader(start);\n      offset = Node.endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      offset = this.parseBlockValue(offset);\n      return offset;\n    }\n  }, {\n    key: \"setOrigRanges\",\n    value: function setOrigRanges(cr, offset) {\n      offset = _get(_getPrototypeOf(BlockValue.prototype), \"setOrigRanges\", this).call(this, cr, offset);\n      return this.header ? this.header.setOrigRange(cr, offset) : offset;\n    }\n  }]);\n\n  return BlockValue;\n}(Node);\n\nvar FlowCollection = /*#__PURE__*/function (_Node) {\n  _inherits(FlowCollection, _Node);\n\n  var _super = _createSuper(FlowCollection);\n\n  function FlowCollection(type, props) {\n    var _this;\n\n    _classCallCheck(this, FlowCollection);\n\n    _this = _super.call(this, type, props);\n    _this.items = null;\n    return _this;\n  }\n\n  _createClass(FlowCollection, [{\n    key: \"prevNodeIsJsonLike\",\n    value: function prevNodeIsJsonLike() {\n      var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.items.length;\n      var node = this.items[idx - 1];\n      return !!node && (node.jsonLike || node.type === Type.COMMENT && this.prevNodeIsJsonLike(idx - 1));\n    }\n    /**\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var parseNode = context.parseNode,\n          src = context.src;\n      var indent = context.indent,\n          lineStart = context.lineStart;\n      var char = src[start]; // { or [\n\n      this.items = [{\n        char: char,\n        offset: start\n      }];\n      var offset = Node.endOfWhiteSpace(src, start + 1);\n      char = src[offset];\n\n      while (char && char !== ']' && char !== '}') {\n        switch (char) {\n          case '\\n':\n            {\n              lineStart = offset + 1;\n              var wsEnd = Node.endOfWhiteSpace(src, lineStart);\n\n              if (src[wsEnd] === '\\n') {\n                var blankLine = new BlankLine();\n                lineStart = blankLine.parse({\n                  src: src\n                }, lineStart);\n                this.items.push(blankLine);\n              }\n\n              offset = Node.endOfIndent(src, lineStart);\n\n              if (offset <= lineStart + indent) {\n                char = src[offset];\n\n                if (offset < lineStart + indent || char !== ']' && char !== '}') {\n                  var msg = 'Insufficient indentation in flow collection';\n                  this.error = new YAMLSemanticError(this, msg);\n                }\n              }\n            }\n            break;\n\n          case ',':\n            {\n              this.items.push({\n                char: char,\n                offset: offset\n              });\n              offset += 1;\n            }\n            break;\n\n          case '#':\n            {\n              var comment = new Comment();\n              offset = comment.parse({\n                src: src\n              }, offset);\n              this.items.push(comment);\n            }\n            break;\n\n          case '?':\n          case ':':\n            {\n              var next = src[offset + 1];\n\n              if (next === '\\n' || next === '\\t' || next === ' ' || next === ',' || // in-flow : after JSON-like key does not need to be followed by whitespace\n              char === ':' && this.prevNodeIsJsonLike()) {\n                this.items.push({\n                  char: char,\n                  offset: offset\n                });\n                offset += 1;\n                break;\n              }\n            }\n          // fallthrough\n\n          default:\n            {\n              var node = parseNode({\n                atLineStart: false,\n                inCollection: false,\n                inFlow: true,\n                indent: -1,\n                lineStart: lineStart,\n                parent: this\n              }, offset);\n\n              if (!node) {\n                // at next document start\n                this.valueRange = new Range(start, offset);\n                return offset;\n              }\n\n              this.items.push(node);\n              offset = Node.normalizeOffset(src, node.range.end);\n            }\n        }\n\n        offset = Node.endOfWhiteSpace(src, offset);\n        char = src[offset];\n      }\n\n      this.valueRange = new Range(start, offset + 1);\n\n      if (char) {\n        this.items.push({\n          char: char,\n          offset: offset\n        });\n        offset = Node.endOfWhiteSpace(src, offset + 1);\n        offset = this.parseComment(offset);\n      }\n\n      return offset;\n    }\n  }, {\n    key: \"setOrigRanges\",\n    value: function setOrigRanges(cr, offset) {\n      offset = _get(_getPrototypeOf(FlowCollection.prototype), \"setOrigRanges\", this).call(this, cr, offset);\n      this.items.forEach(function (node) {\n        if (node instanceof Node) {\n          offset = node.setOrigRanges(cr, offset);\n        } else if (cr.length === 0) {\n          node.origOffset = node.offset;\n        } else {\n          var i = offset;\n\n          while (i < cr.length) {\n            if (cr[i] > node.offset) break;else ++i;\n          }\n\n          node.origOffset = node.offset + i;\n          offset = i;\n        }\n      });\n      return offset;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var src = this.context.src,\n          items = this.items,\n          range = this.range,\n          value = this.value;\n      if (value != null) return value;\n      var nodes = items.filter(function (item) {\n        return item instanceof Node;\n      });\n      var str = '';\n      var prevEnd = range.start;\n      nodes.forEach(function (node) {\n        var prefix = src.slice(prevEnd, node.range.start);\n        prevEnd = node.range.end;\n        str += prefix + String(node);\n\n        if (str[str.length - 1] === '\\n' && src[prevEnd - 1] !== '\\n' && src[prevEnd] === '\\n') {\n          // Comment range does not include the terminal newline, but its\n          // stringified value does. Without this fix, newlines at comment ends\n          // get duplicated.\n          prevEnd += 1;\n        }\n      });\n      str += src.slice(prevEnd, range.end);\n      return Node.addStringTerminator(src, range.end, str);\n    }\n  }]);\n\n  return FlowCollection;\n}(Node);\n\nvar QuoteDouble = /*#__PURE__*/function (_Node) {\n  _inherits(QuoteDouble, _Node);\n\n  var _super = _createSuper(QuoteDouble);\n\n  function QuoteDouble() {\n    _classCallCheck(this, QuoteDouble);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(QuoteDouble, [{\n    key: \"strValue\",\n    get:\n    /**\n     * @returns {string | { str: string, errors: YAMLSyntaxError[] }}\n     */\n    function get() {\n      if (!this.valueRange || !this.context) return null;\n      var errors = [];\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          src = _this$context.src;\n      if (src[end - 1] !== '\"') errors.push(new YAMLSyntaxError(this, 'Missing closing \"quote')); // Using String#replace is too painful with escaped newlines preceded by\n      // escaped backslashes; also, this should be faster.\n\n      var str = '';\n\n      for (var i = start + 1; i < end - 1; ++i) {\n        var ch = src[i];\n\n        if (ch === '\\n') {\n          if (Node.atDocumentBoundary(src, i + 1)) errors.push(new YAMLSemanticError(this, 'Document boundary indicators are not allowed within string values'));\n\n          var _Node$foldNewline = Node.foldNewline(src, i, indent),\n              fold = _Node$foldNewline.fold,\n              offset = _Node$foldNewline.offset,\n              error = _Node$foldNewline.error;\n\n          str += fold;\n          i = offset;\n          if (error) errors.push(new YAMLSemanticError(this, 'Multi-line double-quoted string needs to be sufficiently indented'));\n        } else if (ch === '\\\\') {\n          i += 1;\n\n          switch (src[i]) {\n            case '0':\n              str += '\\0';\n              break;\n            // null character\n\n            case 'a':\n              str += '\\x07';\n              break;\n            // bell character\n\n            case 'b':\n              str += '\\b';\n              break;\n            // backspace\n\n            case 'e':\n              str += '\\x1b';\n              break;\n            // escape character\n\n            case 'f':\n              str += '\\f';\n              break;\n            // form feed\n\n            case 'n':\n              str += '\\n';\n              break;\n            // line feed\n\n            case 'r':\n              str += '\\r';\n              break;\n            // carriage return\n\n            case 't':\n              str += '\\t';\n              break;\n            // horizontal tab\n\n            case 'v':\n              str += '\\v';\n              break;\n            // vertical tab\n\n            case 'N':\n              str += \"\\x85\";\n              break;\n            // Unicode next line\n\n            case '_':\n              str += \"\\xA0\";\n              break;\n            // Unicode non-breaking space\n\n            case 'L':\n              str += \"\\u2028\";\n              break;\n            // Unicode line separator\n\n            case 'P':\n              str += \"\\u2029\";\n              break;\n            // Unicode paragraph separator\n\n            case ' ':\n              str += ' ';\n              break;\n\n            case '\"':\n              str += '\"';\n              break;\n\n            case '/':\n              str += '/';\n              break;\n\n            case '\\\\':\n              str += '\\\\';\n              break;\n\n            case '\\t':\n              str += '\\t';\n              break;\n\n            case 'x':\n              str += this.parseCharCode(i + 1, 2, errors);\n              i += 2;\n              break;\n\n            case 'u':\n              str += this.parseCharCode(i + 1, 4, errors);\n              i += 4;\n              break;\n\n            case 'U':\n              str += this.parseCharCode(i + 1, 8, errors);\n              i += 8;\n              break;\n\n            case '\\n':\n              // skip escaped newlines, but still trim the following line\n              while (src[i + 1] === ' ' || src[i + 1] === '\\t') {\n                i += 1;\n              }\n\n              break;\n\n            default:\n              errors.push(new YAMLSyntaxError(this, \"Invalid escape sequence \".concat(src.substr(i - 1, 2))));\n              str += '\\\\' + src[i];\n          }\n        } else if (ch === ' ' || ch === '\\t') {\n          // trim trailing whitespace\n          var wsStart = i;\n          var next = src[i + 1];\n\n          while (next === ' ' || next === '\\t') {\n            i += 1;\n            next = src[i + 1];\n          }\n\n          if (next !== '\\n') str += i > wsStart ? src.slice(wsStart, i + 1) : ch;\n        } else {\n          str += ch;\n        }\n      }\n\n      return errors.length > 0 ? {\n        errors: errors,\n        str: str\n      } : str;\n    }\n  }, {\n    key: \"parseCharCode\",\n    value: function parseCharCode(offset, length, errors) {\n      var src = this.context.src;\n      var cc = src.substr(offset, length);\n      var ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);\n      var code = ok ? parseInt(cc, 16) : NaN;\n\n      if (isNaN(code)) {\n        errors.push(new YAMLSyntaxError(this, \"Invalid escape sequence \".concat(src.substr(offset - 2, length + 2))));\n        return src.substr(offset - 2, length + 2);\n      }\n\n      return String.fromCodePoint(code);\n    }\n    /**\n     * Parses a \"double quoted\" value from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = QuoteDouble.endOfQuote(src, start + 1);\n      this.valueRange = new Range(start, offset);\n      offset = Node.endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      return offset;\n    }\n  }], [{\n    key: \"endOfQuote\",\n    value: function endOfQuote(src, offset) {\n      var ch = src[offset];\n\n      while (ch && ch !== '\"') {\n        offset += ch === '\\\\' ? 2 : 1;\n        ch = src[offset];\n      }\n\n      return offset + 1;\n    }\n  }]);\n\n  return QuoteDouble;\n}(Node);\n\nvar QuoteSingle = /*#__PURE__*/function (_Node) {\n  _inherits(QuoteSingle, _Node);\n\n  var _super = _createSuper(QuoteSingle);\n\n  function QuoteSingle() {\n    _classCallCheck(this, QuoteSingle);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(QuoteSingle, [{\n    key: \"strValue\",\n    get:\n    /**\n     * @returns {string | { str: string, errors: YAMLSyntaxError[] }}\n     */\n    function get() {\n      if (!this.valueRange || !this.context) return null;\n      var errors = [];\n      var _this$valueRange = this.valueRange,\n          start = _this$valueRange.start,\n          end = _this$valueRange.end;\n      var _this$context = this.context,\n          indent = _this$context.indent,\n          src = _this$context.src;\n      if (src[end - 1] !== \"'\") errors.push(new YAMLSyntaxError(this, \"Missing closing 'quote\"));\n      var str = '';\n\n      for (var i = start + 1; i < end - 1; ++i) {\n        var ch = src[i];\n\n        if (ch === '\\n') {\n          if (Node.atDocumentBoundary(src, i + 1)) errors.push(new YAMLSemanticError(this, 'Document boundary indicators are not allowed within string values'));\n\n          var _Node$foldNewline = Node.foldNewline(src, i, indent),\n              fold = _Node$foldNewline.fold,\n              offset = _Node$foldNewline.offset,\n              error = _Node$foldNewline.error;\n\n          str += fold;\n          i = offset;\n          if (error) errors.push(new YAMLSemanticError(this, 'Multi-line single-quoted string needs to be sufficiently indented'));\n        } else if (ch === \"'\") {\n          str += ch;\n          i += 1;\n          if (src[i] !== \"'\") errors.push(new YAMLSyntaxError(this, 'Unescaped single quote? This should not happen.'));\n        } else if (ch === ' ' || ch === '\\t') {\n          // trim trailing whitespace\n          var wsStart = i;\n          var next = src[i + 1];\n\n          while (next === ' ' || next === '\\t') {\n            i += 1;\n            next = src[i + 1];\n          }\n\n          if (next !== '\\n') str += i > wsStart ? src.slice(wsStart, i + 1) : ch;\n        } else {\n          str += ch;\n        }\n      }\n\n      return errors.length > 0 ? {\n        errors: errors,\n        str: str\n      } : str;\n    }\n    /**\n     * Parses a 'single quoted' value from the source\n     *\n     * @param {ParseContext} context\n     * @param {number} start - Index of first character\n     * @returns {number} - Index of the character after this scalar\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(context, start) {\n      this.context = context;\n      var src = context.src;\n      var offset = QuoteSingle.endOfQuote(src, start + 1);\n      this.valueRange = new Range(start, offset);\n      offset = Node.endOfWhiteSpace(src, offset);\n      offset = this.parseComment(offset);\n      return offset;\n    }\n  }], [{\n    key: \"endOfQuote\",\n    value: function endOfQuote(src, offset) {\n      var ch = src[offset];\n\n      while (ch) {\n        if (ch === \"'\") {\n          if (src[offset + 1] !== \"'\") break;\n          ch = src[offset += 2];\n        } else {\n          ch = src[offset += 1];\n        }\n      }\n\n      return offset + 1;\n    }\n  }]);\n\n  return QuoteSingle;\n}(Node);\n\nfunction createNewNode(type, props) {\n  switch (type) {\n    case Type.ALIAS:\n      return new Alias(type, props);\n\n    case Type.BLOCK_FOLDED:\n    case Type.BLOCK_LITERAL:\n      return new BlockValue(type, props);\n\n    case Type.FLOW_MAP:\n    case Type.FLOW_SEQ:\n      return new FlowCollection(type, props);\n\n    case Type.MAP_KEY:\n    case Type.MAP_VALUE:\n    case Type.SEQ_ITEM:\n      return new CollectionItem(type, props);\n\n    case Type.COMMENT:\n    case Type.PLAIN:\n      return new PlainValue(type, props);\n\n    case Type.QUOTE_DOUBLE:\n      return new QuoteDouble(type, props);\n\n    case Type.QUOTE_SINGLE:\n      return new QuoteSingle(type, props);\n\n    /* istanbul ignore next */\n\n    default:\n      return null;\n    // should never happen\n  }\n}\n/**\n * @param {boolean} atLineStart - Node starts at beginning of line\n * @param {boolean} inFlow - true if currently in a flow context\n * @param {boolean} inCollection - true if currently in a collection context\n * @param {number} indent - Current level of indentation\n * @param {number} lineStart - Start of the current line\n * @param {Node} parent - The parent of the node\n * @param {string} src - Source of the YAML document\n */\n\n\nvar ParseContext = /*#__PURE__*/function () {\n  function ParseContext() {\n    var _this = this;\n\n    var orig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        atLineStart = _ref.atLineStart,\n        inCollection = _ref.inCollection,\n        inFlow = _ref.inFlow,\n        indent = _ref.indent,\n        lineStart = _ref.lineStart,\n        parent = _ref.parent;\n\n    _classCallCheck(this, ParseContext);\n\n    _defineProperty(this, \"parseNode\", function (overlay, start) {\n      if (Node.atDocumentBoundary(_this.src, start)) return null;\n      var context = new ParseContext(_this, overlay);\n\n      var _context$parseProps = context.parseProps(start),\n          props = _context$parseProps.props,\n          type = _context$parseProps.type,\n          valueStart = _context$parseProps.valueStart;\n\n      var node = createNewNode(type, props);\n      var offset = node.parse(context, valueStart);\n      node.range = new Range(start, offset);\n      /* istanbul ignore if */\n\n      if (offset <= start) {\n        // This should never happen, but if it does, let's make sure to at least\n        // step one character forward to avoid a busy loop.\n        node.error = new Error(\"Node#parse consumed no characters\");\n        node.error.parseEnd = offset;\n        node.error.source = node;\n        node.range.end = start + 1;\n      }\n\n      if (context.nodeStartsCollection(node)) {\n        if (!node.error && !context.atLineStart && context.parent.type === Type.DOCUMENT) {\n          node.error = new YAMLSyntaxError(node, 'Block collection must not have preceding content here (e.g. directives-end indicator)');\n        }\n\n        var collection = new Collection(node);\n        offset = collection.parse(new ParseContext(context), offset);\n        collection.range = new Range(start, offset);\n        return collection;\n      }\n\n      return node;\n    });\n\n    this.atLineStart = atLineStart != null ? atLineStart : orig.atLineStart || false;\n    this.inCollection = inCollection != null ? inCollection : orig.inCollection || false;\n    this.inFlow = inFlow != null ? inFlow : orig.inFlow || false;\n    this.indent = indent != null ? indent : orig.indent;\n    this.lineStart = lineStart != null ? lineStart : orig.lineStart;\n    this.parent = parent != null ? parent : orig.parent || {};\n    this.root = orig.root;\n    this.src = orig.src;\n  }\n\n  _createClass(ParseContext, [{\n    key: \"nodeStartsCollection\",\n    value: function nodeStartsCollection(node) {\n      var inCollection = this.inCollection,\n          inFlow = this.inFlow,\n          src = this.src;\n      if (inCollection || inFlow) return false;\n      if (node instanceof CollectionItem) return true; // check for implicit key\n\n      var offset = node.range.end;\n      if (src[offset] === '\\n' || src[offset - 1] === '\\n') return false;\n      offset = Node.endOfWhiteSpace(src, offset);\n      return src[offset] === ':';\n    } // Anchor and tag are before type, which determines the node implementation\n    // class; hence this intermediate step.\n\n  }, {\n    key: \"parseProps\",\n    value: function parseProps(offset) {\n      var inFlow = this.inFlow,\n          parent = this.parent,\n          src = this.src;\n      var props = [];\n      var lineHasProps = false;\n      offset = this.atLineStart ? Node.endOfIndent(src, offset) : Node.endOfWhiteSpace(src, offset);\n      var ch = src[offset];\n\n      while (ch === Char.ANCHOR || ch === Char.COMMENT || ch === Char.TAG || ch === '\\n') {\n        if (ch === '\\n') {\n          var inEnd = offset;\n          var lineStart = void 0;\n\n          do {\n            lineStart = inEnd + 1;\n            inEnd = Node.endOfIndent(src, lineStart);\n          } while (src[inEnd] === '\\n');\n\n          var indentDiff = inEnd - (lineStart + this.indent);\n          var noIndicatorAsIndent = parent.type === Type.SEQ_ITEM && parent.context.atLineStart;\n          if (src[inEnd] !== '#' && !Node.nextNodeIsIndented(src[inEnd], indentDiff, !noIndicatorAsIndent)) break;\n          this.atLineStart = true;\n          this.lineStart = lineStart;\n          lineHasProps = false;\n          offset = inEnd;\n        } else if (ch === Char.COMMENT) {\n          var end = Node.endOfLine(src, offset + 1);\n          props.push(new Range(offset, end));\n          offset = end;\n        } else {\n          var _end = Node.endOfIdentifier(src, offset + 1);\n\n          if (ch === Char.TAG && src[_end] === ',' && /^[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]+,\\d\\d\\d\\d(-\\d\\d){0,2}\\/\\S/.test(src.slice(offset + 1, _end + 13))) {\n            // Let's presume we're dealing with a YAML 1.0 domain tag here, rather\n            // than an empty but 'foo.bar' private-tagged node in a flow collection\n            // followed without whitespace by a plain string starting with a year\n            // or date divided by something.\n            _end = Node.endOfIdentifier(src, _end + 5);\n          }\n\n          props.push(new Range(offset, _end));\n          lineHasProps = true;\n          offset = Node.endOfWhiteSpace(src, _end);\n        }\n\n        ch = src[offset];\n      } // '- &a : b' has an anchor on an empty node\n\n\n      if (lineHasProps && ch === ':' && Node.atBlank(src, offset + 1, true)) offset -= 1;\n      var type = ParseContext.parseType(src, offset, inFlow);\n      return {\n        props: props,\n        type: type,\n        valueStart: offset\n      };\n    }\n    /**\n     * Parses a node from the source\n     * @param {ParseContext} overlay\n     * @param {number} start - Index of first non-whitespace character for the node\n     * @returns {?Node} - null if at a document boundary\n     */\n\n  }], [{\n    key: \"parseType\",\n    value: function parseType(src, offset, inFlow) {\n      switch (src[offset]) {\n        case '*':\n          return Type.ALIAS;\n\n        case '>':\n          return Type.BLOCK_FOLDED;\n\n        case '|':\n          return Type.BLOCK_LITERAL;\n\n        case '{':\n          return Type.FLOW_MAP;\n\n        case '[':\n          return Type.FLOW_SEQ;\n\n        case '?':\n          return !inFlow && Node.atBlank(src, offset + 1, true) ? Type.MAP_KEY : Type.PLAIN;\n\n        case ':':\n          return !inFlow && Node.atBlank(src, offset + 1, true) ? Type.MAP_VALUE : Type.PLAIN;\n\n        case '-':\n          return !inFlow && Node.atBlank(src, offset + 1, true) ? Type.SEQ_ITEM : Type.PLAIN;\n\n        case '\"':\n          return Type.QUOTE_DOUBLE;\n\n        case \"'\":\n          return Type.QUOTE_SINGLE;\n\n        default:\n          return Type.PLAIN;\n      }\n    }\n  }]);\n\n  return ParseContext;\n}();\n\n// Published as 'yaml/parse-cst'\nfunction parse(src) {\n  var cr = [];\n\n  if (src.indexOf('\\r') !== -1) {\n    src = src.replace(/\\r\\n?/g, function (match, offset) {\n      if (match.length > 1) cr.push(offset);\n      return '\\n';\n    });\n  }\n\n  var documents = [];\n  var offset = 0;\n\n  do {\n    var doc = new Document();\n    var context = new ParseContext({\n      src: src\n    });\n    offset = doc.parse(context, offset);\n    documents.push(doc);\n  } while (offset < src.length);\n\n  documents.setOrigRanges = function () {\n    if (cr.length === 0) return false;\n\n    for (var i = 1; i < cr.length; ++i) {\n      cr[i] -= i;\n    }\n\n    var crOffset = 0;\n\n    for (var _i = 0; _i < documents.length; ++_i) {\n      crOffset = documents[_i].setOrigRanges(cr, crOffset);\n    }\n\n    cr.splice(0, cr.length);\n    return true;\n  };\n\n  documents.toString = function () {\n    return documents.join('...\\n');\n  };\n\n  return documents;\n}\n\nexport { parse };\n", "import { c as _classCallCheck, j as _inherits, k as _createSuper, b as _createClass, e as _defineProperty, p as _assertThisInitialized, a as _typeof, q as _toArray, T as Type, _ as _createForOfIteratorHelper, l as _get, m as _getPrototypeOf, o as YAMLReferenceError, r as _possibleConstructorReturn, h as _slicedToArray, g as YAMLSemanticError, n as defaultTags, f as YAMLWarning, C as Char, Y as YAMLSyntaxError, P as PlainValue } from './PlainValue-b8036b75.js';\n\nfunction addCommentBefore(str, indent, comment) {\n  if (!comment) return str;\n  var cc = comment.replace(/[\\s\\S]^/gm, \"$&\".concat(indent, \"#\"));\n  return \"#\".concat(cc, \"\\n\").concat(indent).concat(str);\n}\nfunction addComment(str, indent, comment) {\n  return !comment ? str : comment.indexOf('\\n') === -1 ? \"\".concat(str, \" #\").concat(comment) : \"\".concat(str, \"\\n\") + comment.replace(/^/gm, \"\".concat(indent || '', \"#\"));\n}\n\nvar Node = function Node() {\n  _classCallCheck(this, Node);\n};\n\nfunction toJSON(value, arg, ctx) {\n  if (Array.isArray(value)) return value.map(function (v, i) {\n    return toJSON(v, String(i), ctx);\n  });\n\n  if (value && typeof value.toJSON === 'function') {\n    var anchor = ctx && ctx.anchors && ctx.anchors.get(value);\n    if (anchor) ctx.onCreate = function (res) {\n      anchor.res = res;\n      delete ctx.onCreate;\n    };\n    var res = value.toJSON(arg, ctx);\n    if (anchor && ctx.onCreate) ctx.onCreate(res);\n    return res;\n  }\n\n  if ((!ctx || !ctx.keep) && typeof value === 'bigint') return Number(value);\n  return value;\n}\n\nvar Scalar = /*#__PURE__*/function (_Node) {\n  _inherits(Scalar, _Node);\n\n  var _super = _createSuper(Scalar);\n\n  function Scalar(value) {\n    var _this;\n\n    _classCallCheck(this, Scalar);\n\n    _this = _super.call(this);\n    _this.value = value;\n    return _this;\n  }\n\n  _createClass(Scalar, [{\n    key: \"toJSON\",\n    value: function toJSON$1(arg, ctx) {\n      return ctx && ctx.keep ? this.value : toJSON(this.value, arg, ctx);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return String(this.value);\n    }\n  }]);\n\n  return Scalar;\n}(Node);\n\nfunction collectionFromPath(schema, path, value) {\n  var v = value;\n\n  for (var i = path.length - 1; i >= 0; --i) {\n    var k = path[i];\n\n    if (Number.isInteger(k) && k >= 0) {\n      var a = [];\n      a[k] = v;\n      v = a;\n    } else {\n      var o = {};\n      Object.defineProperty(o, k, {\n        value: v,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      });\n      v = o;\n    }\n  }\n\n  return schema.createNode(v, false);\n} // null, undefined, or an empty non-string iterable (e.g. [])\n\n\nvar isEmptyPath = function isEmptyPath(path) {\n  return path == null || _typeof(path) === 'object' && path[Symbol.iterator]().next().done;\n};\nvar Collection = /*#__PURE__*/function (_Node) {\n  _inherits(Collection, _Node);\n\n  var _super = _createSuper(Collection);\n\n  function Collection(schema) {\n    var _this;\n\n    _classCallCheck(this, Collection);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"items\", []);\n\n    _this.schema = schema;\n    return _this;\n  }\n\n  _createClass(Collection, [{\n    key: \"addIn\",\n    value: function addIn(path, value) {\n      if (isEmptyPath(path)) this.add(value);else {\n        var _path = _toArray(path),\n            key = _path[0],\n            rest = _path.slice(1);\n\n        var node = this.get(key, true);\n        if (node instanceof Collection) node.addIn(rest, value);else if (node === undefined && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error(\"Expected YAML collection at \".concat(key, \". Remaining path: \").concat(rest));\n      }\n    }\n  }, {\n    key: \"deleteIn\",\n    value: function deleteIn(_ref) {\n      var _ref2 = _toArray(_ref),\n          key = _ref2[0],\n          rest = _ref2.slice(1);\n\n      if (rest.length === 0) return this.delete(key);\n      var node = this.get(key, true);\n      if (node instanceof Collection) return node.deleteIn(rest);else throw new Error(\"Expected YAML collection at \".concat(key, \". Remaining path: \").concat(rest));\n    }\n  }, {\n    key: \"getIn\",\n    value: function getIn(_ref3, keepScalar) {\n      var _ref4 = _toArray(_ref3),\n          key = _ref4[0],\n          rest = _ref4.slice(1);\n\n      var node = this.get(key, true);\n      if (rest.length === 0) return !keepScalar && node instanceof Scalar ? node.value : node;else return node instanceof Collection ? node.getIn(rest, keepScalar) : undefined;\n    }\n  }, {\n    key: \"hasAllNullValues\",\n    value: function hasAllNullValues() {\n      return this.items.every(function (node) {\n        if (!node || node.type !== 'PAIR') return false;\n        var n = node.value;\n        return n == null || n instanceof Scalar && n.value == null && !n.commentBefore && !n.comment && !n.tag;\n      });\n    }\n  }, {\n    key: \"hasIn\",\n    value: function hasIn(_ref5) {\n      var _ref6 = _toArray(_ref5),\n          key = _ref6[0],\n          rest = _ref6.slice(1);\n\n      if (rest.length === 0) return this.has(key);\n      var node = this.get(key, true);\n      return node instanceof Collection ? node.hasIn(rest) : false;\n    }\n  }, {\n    key: \"setIn\",\n    value: function setIn(_ref7, value) {\n      var _ref8 = _toArray(_ref7),\n          key = _ref8[0],\n          rest = _ref8.slice(1);\n\n      if (rest.length === 0) {\n        this.set(key, value);\n      } else {\n        var node = this.get(key, true);\n        if (node instanceof Collection) node.setIn(rest, value);else if (node === undefined && this.schema) this.set(key, collectionFromPath(this.schema, rest, value));else throw new Error(\"Expected YAML collection at \".concat(key, \". Remaining path: \").concat(rest));\n      }\n    } // overridden in implementations\n\n    /* istanbul ignore next */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return null;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(ctx, _ref9, onComment, onChompKeep) {\n      var _this2 = this;\n\n      var blockItem = _ref9.blockItem,\n          flowChars = _ref9.flowChars,\n          isMap = _ref9.isMap,\n          itemIndent = _ref9.itemIndent;\n      var _ctx = ctx,\n          indent = _ctx.indent,\n          indentStep = _ctx.indentStep,\n          stringify = _ctx.stringify;\n      var inFlow = this.type === Type.FLOW_MAP || this.type === Type.FLOW_SEQ || ctx.inFlow;\n      if (inFlow) itemIndent += indentStep;\n      var allNullValues = isMap && this.hasAllNullValues();\n      ctx = Object.assign({}, ctx, {\n        allNullValues: allNullValues,\n        indent: itemIndent,\n        inFlow: inFlow,\n        type: null\n      });\n      var chompKeep = false;\n      var hasItemWithNewLine = false;\n      var nodes = this.items.reduce(function (nodes, item, i) {\n        var comment;\n\n        if (item) {\n          if (!chompKeep && item.spaceBefore) nodes.push({\n            type: 'comment',\n            str: ''\n          });\n          if (item.commentBefore) item.commentBefore.match(/^.*$/gm).forEach(function (line) {\n            nodes.push({\n              type: 'comment',\n              str: \"#\".concat(line)\n            });\n          });\n          if (item.comment) comment = item.comment;\n          if (inFlow && (!chompKeep && item.spaceBefore || item.commentBefore || item.comment || item.key && (item.key.commentBefore || item.key.comment) || item.value && (item.value.commentBefore || item.value.comment))) hasItemWithNewLine = true;\n        }\n\n        chompKeep = false;\n        var str = stringify(item, ctx, function () {\n          return comment = null;\n        }, function () {\n          return chompKeep = true;\n        });\n        if (inFlow && !hasItemWithNewLine && str.includes('\\n')) hasItemWithNewLine = true;\n        if (inFlow && i < _this2.items.length - 1) str += ',';\n        str = addComment(str, itemIndent, comment);\n        if (chompKeep && (comment || inFlow)) chompKeep = false;\n        nodes.push({\n          type: 'item',\n          str: str\n        });\n        return nodes;\n      }, []);\n      var str;\n\n      if (nodes.length === 0) {\n        str = flowChars.start + flowChars.end;\n      } else if (inFlow) {\n        var start = flowChars.start,\n            end = flowChars.end;\n        var strings = nodes.map(function (n) {\n          return n.str;\n        });\n\n        if (hasItemWithNewLine || strings.reduce(function (sum, str) {\n          return sum + str.length + 2;\n        }, 2) > Collection.maxFlowStringSingleLineLength) {\n          str = start;\n\n          var _iterator = _createForOfIteratorHelper(strings),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var s = _step.value;\n              str += s ? \"\\n\".concat(indentStep).concat(indent).concat(s) : '\\n';\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          str += \"\\n\".concat(indent).concat(end);\n        } else {\n          str = \"\".concat(start, \" \").concat(strings.join(' '), \" \").concat(end);\n        }\n      } else {\n        var _strings = nodes.map(blockItem);\n\n        str = _strings.shift();\n\n        var _iterator2 = _createForOfIteratorHelper(_strings),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _s = _step2.value;\n            str += _s ? \"\\n\".concat(indent).concat(_s) : '\\n';\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (this.comment) {\n        str += '\\n' + this.comment.replace(/^/gm, \"\".concat(indent, \"#\"));\n        if (onComment) onComment();\n      } else if (chompKeep && onChompKeep) onChompKeep();\n\n      return str;\n    }\n  }]);\n\n  return Collection;\n}(Node);\n\n_defineProperty(Collection, \"maxFlowStringSingleLineLength\", 60);\n\nfunction asItemIndex(key) {\n  var idx = key instanceof Scalar ? key.value : key;\n  if (idx && typeof idx === 'string') idx = Number(idx);\n  return Number.isInteger(idx) && idx >= 0 ? idx : null;\n}\n\nvar YAMLSeq = /*#__PURE__*/function (_Collection) {\n  _inherits(YAMLSeq, _Collection);\n\n  var _super = _createSuper(YAMLSeq);\n\n  function YAMLSeq() {\n    _classCallCheck(this, YAMLSeq);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(YAMLSeq, [{\n    key: \"add\",\n    value: function add(value) {\n      this.items.push(value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var idx = asItemIndex(key);\n      if (typeof idx !== 'number') return false;\n      var del = this.items.splice(idx, 1);\n      return del.length > 0;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, keepScalar) {\n      var idx = asItemIndex(key);\n      if (typeof idx !== 'number') return undefined;\n      var it = this.items[idx];\n      return !keepScalar && it instanceof Scalar ? it.value : it;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var idx = asItemIndex(key);\n      return typeof idx === 'number' && idx < this.items.length;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var idx = asItemIndex(key);\n      if (typeof idx !== 'number') throw new Error(\"Expected a valid index, not \".concat(key, \".\"));\n      this.items[idx] = value;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON$1(_, ctx) {\n      var seq = [];\n      if (ctx && ctx.onCreate) ctx.onCreate(seq);\n      var i = 0;\n\n      var _iterator = _createForOfIteratorHelper(this.items),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          seq.push(toJSON(item, String(i++), ctx));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return seq;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx) return JSON.stringify(this);\n      return _get(_getPrototypeOf(YAMLSeq.prototype), \"toString\", this).call(this, ctx, {\n        blockItem: function blockItem(n) {\n          return n.type === 'comment' ? n.str : \"- \".concat(n.str);\n        },\n        flowChars: {\n          start: '[',\n          end: ']'\n        },\n        isMap: false,\n        itemIndent: (ctx.indent || '') + '  '\n      }, onComment, onChompKeep);\n    }\n  }]);\n\n  return YAMLSeq;\n}(Collection);\n\nvar stringifyKey = function stringifyKey(key, jsKey, ctx) {\n  if (jsKey === null) return '';\n  if (_typeof(jsKey) !== 'object') return String(jsKey);\n  if (key instanceof Node && ctx && ctx.doc) return key.toString({\n    anchors: Object.create(null),\n    doc: ctx.doc,\n    indent: '',\n    indentStep: ctx.indentStep,\n    inFlow: true,\n    inStringifyKey: true,\n    stringify: ctx.stringify\n  });\n  return JSON.stringify(jsKey);\n};\n\nvar Pair = /*#__PURE__*/function (_Node) {\n  _inherits(Pair, _Node);\n\n  var _super = _createSuper(Pair);\n\n  function Pair(key) {\n    var _this;\n\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    _classCallCheck(this, Pair);\n\n    _this = _super.call(this);\n    _this.key = key;\n    _this.value = value;\n    _this.type = Pair.Type.PAIR;\n    return _this;\n  }\n\n  _createClass(Pair, [{\n    key: \"commentBefore\",\n    get: function get() {\n      return this.key instanceof Node ? this.key.commentBefore : undefined;\n    },\n    set: function set(cb) {\n      if (this.key == null) this.key = new Scalar(null);\n      if (this.key instanceof Node) this.key.commentBefore = cb;else {\n        var msg = 'Pair.commentBefore is an alias for Pair.key.commentBefore. To set it, the key must be a Node.';\n        throw new Error(msg);\n      }\n    }\n  }, {\n    key: \"addToJSMap\",\n    value: function addToJSMap(ctx, map) {\n      var key = toJSON(this.key, '', ctx);\n\n      if (map instanceof Map) {\n        var value = toJSON(this.value, key, ctx);\n        map.set(key, value);\n      } else if (map instanceof Set) {\n        map.add(key);\n      } else {\n        var stringKey = stringifyKey(this.key, key, ctx);\n\n        var _value = toJSON(this.value, stringKey, ctx);\n\n        if (stringKey in map) Object.defineProperty(map, stringKey, {\n          value: _value,\n          writable: true,\n          enumerable: true,\n          configurable: true\n        });else map[stringKey] = _value;\n      }\n\n      return map;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(_, ctx) {\n      var pair = ctx && ctx.mapAsMap ? new Map() : {};\n      return this.addToJSMap(ctx, pair);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx || !ctx.doc) return JSON.stringify(this);\n      var _ctx$doc$options = ctx.doc.options,\n          indentSize = _ctx$doc$options.indent,\n          indentSeq = _ctx$doc$options.indentSeq,\n          simpleKeys = _ctx$doc$options.simpleKeys;\n      var key = this.key,\n          value = this.value;\n      var keyComment = key instanceof Node && key.comment;\n\n      if (simpleKeys) {\n        if (keyComment) {\n          throw new Error('With simple keys, key nodes cannot have comments');\n        }\n\n        if (key instanceof Collection) {\n          var msg = 'With simple keys, collection cannot be used as a key value';\n          throw new Error(msg);\n        }\n      }\n\n      var explicitKey = !simpleKeys && (!key || keyComment || (key instanceof Node ? key instanceof Collection || key.type === Type.BLOCK_FOLDED || key.type === Type.BLOCK_LITERAL : _typeof(key) === 'object'));\n      var _ctx = ctx,\n          doc = _ctx.doc,\n          indent = _ctx.indent,\n          indentStep = _ctx.indentStep,\n          stringify = _ctx.stringify;\n      ctx = Object.assign({}, ctx, {\n        implicitKey: !explicitKey,\n        indent: indent + indentStep\n      });\n      var chompKeep = false;\n      var str = stringify(key, ctx, function () {\n        return keyComment = null;\n      }, function () {\n        return chompKeep = true;\n      });\n      str = addComment(str, ctx.indent, keyComment);\n\n      if (!explicitKey && str.length > 1024) {\n        if (simpleKeys) throw new Error('With simple keys, single line scalar must not span more than 1024 characters');\n        explicitKey = true;\n      }\n\n      if (ctx.allNullValues && !simpleKeys) {\n        if (this.comment) {\n          str = addComment(str, ctx.indent, this.comment);\n          if (onComment) onComment();\n        } else if (chompKeep && !keyComment && onChompKeep) onChompKeep();\n\n        return ctx.inFlow && !explicitKey ? str : \"? \".concat(str);\n      }\n\n      str = explicitKey ? \"? \".concat(str, \"\\n\").concat(indent, \":\") : \"\".concat(str, \":\");\n\n      if (this.comment) {\n        // expected (but not strictly required) to be a single-line comment\n        str = addComment(str, ctx.indent, this.comment);\n        if (onComment) onComment();\n      }\n\n      var vcb = '';\n      var valueComment = null;\n\n      if (value instanceof Node) {\n        if (value.spaceBefore) vcb = '\\n';\n\n        if (value.commentBefore) {\n          var cs = value.commentBefore.replace(/^/gm, \"\".concat(ctx.indent, \"#\"));\n          vcb += \"\\n\".concat(cs);\n        }\n\n        valueComment = value.comment;\n      } else if (value && _typeof(value) === 'object') {\n        value = doc.schema.createNode(value, true);\n      }\n\n      ctx.implicitKey = false;\n      if (!explicitKey && !this.comment && value instanceof Scalar) ctx.indentAtStart = str.length + 1;\n      chompKeep = false;\n\n      if (!indentSeq && indentSize >= 2 && !ctx.inFlow && !explicitKey && value instanceof YAMLSeq && value.type !== Type.FLOW_SEQ && !value.tag && !doc.anchors.getName(value)) {\n        // If indentSeq === false, consider '- ' as part of indentation where possible\n        ctx.indent = ctx.indent.substr(2);\n      }\n\n      var valueStr = stringify(value, ctx, function () {\n        return valueComment = null;\n      }, function () {\n        return chompKeep = true;\n      });\n      var ws = ' ';\n\n      if (vcb || this.comment) {\n        ws = \"\".concat(vcb, \"\\n\").concat(ctx.indent);\n      } else if (!explicitKey && value instanceof Collection) {\n        var flow = valueStr[0] === '[' || valueStr[0] === '{';\n        if (!flow || valueStr.includes('\\n')) ws = \"\\n\".concat(ctx.indent);\n      } else if (valueStr[0] === '\\n') ws = '';\n\n      if (chompKeep && !valueComment && onChompKeep) onChompKeep();\n      return addComment(str + ws + valueStr, ctx.indent, valueComment);\n    }\n  }]);\n\n  return Pair;\n}(Node);\n\n_defineProperty(Pair, \"Type\", {\n  PAIR: 'PAIR',\n  MERGE_PAIR: 'MERGE_PAIR'\n});\n\nvar getAliasCount = function getAliasCount(node, anchors) {\n  if (node instanceof Alias) {\n    var anchor = anchors.get(node.source);\n    return anchor.count * anchor.aliasCount;\n  } else if (node instanceof Collection) {\n    var count = 0;\n\n    var _iterator = _createForOfIteratorHelper(node.items),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        var c = getAliasCount(item, anchors);\n        if (c > count) count = c;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return count;\n  } else if (node instanceof Pair) {\n    var kc = getAliasCount(node.key, anchors);\n    var vc = getAliasCount(node.value, anchors);\n    return Math.max(kc, vc);\n  }\n\n  return 1;\n};\n\nvar Alias = /*#__PURE__*/function (_Node) {\n  _inherits(Alias, _Node);\n\n  var _super = _createSuper(Alias);\n\n  function Alias(source) {\n    var _this;\n\n    _classCallCheck(this, Alias);\n\n    _this = _super.call(this);\n    _this.source = source;\n    _this.type = Type.ALIAS;\n    return _this;\n  }\n\n  _createClass(Alias, [{\n    key: \"tag\",\n    set: function set(t) {\n      throw new Error('Alias nodes cannot have tags');\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON$1(arg, ctx) {\n      if (!ctx) return toJSON(this.source, arg, ctx);\n      var anchors = ctx.anchors,\n          maxAliasCount = ctx.maxAliasCount;\n      var anchor = anchors.get(this.source);\n      /* istanbul ignore if */\n\n      if (!anchor || anchor.res === undefined) {\n        var msg = 'This should not happen: Alias anchor was not resolved?';\n        if (this.cstNode) throw new YAMLReferenceError(this.cstNode, msg);else throw new ReferenceError(msg);\n      }\n\n      if (maxAliasCount >= 0) {\n        anchor.count += 1;\n        if (anchor.aliasCount === 0) anchor.aliasCount = getAliasCount(this.source, anchors);\n\n        if (anchor.count * anchor.aliasCount > maxAliasCount) {\n          var _msg = 'Excessive alias count indicates a resource exhaustion attack';\n          if (this.cstNode) throw new YAMLReferenceError(this.cstNode, _msg);else throw new ReferenceError(_msg);\n        }\n      }\n\n      return anchor.res;\n    } // Only called when stringifying an alias mapping key while constructing\n    // Object output.\n\n  }, {\n    key: \"toString\",\n    value: function toString(ctx) {\n      return Alias.stringify(this, ctx);\n    }\n  }], [{\n    key: \"stringify\",\n    value: function stringify(_ref, _ref2) {\n      var range = _ref.range,\n          source = _ref.source;\n      var anchors = _ref2.anchors,\n          doc = _ref2.doc,\n          implicitKey = _ref2.implicitKey,\n          inStringifyKey = _ref2.inStringifyKey;\n      var anchor = Object.keys(anchors).find(function (a) {\n        return anchors[a] === source;\n      });\n      if (!anchor && inStringifyKey) anchor = doc.anchors.getName(source) || doc.anchors.newName();\n      if (anchor) return \"*\".concat(anchor).concat(implicitKey ? ' ' : '');\n      var msg = doc.anchors.getName(source) ? 'Alias node must be after source node' : 'Source node not found for alias node';\n      throw new Error(\"\".concat(msg, \" [\").concat(range, \"]\"));\n    }\n  }]);\n\n  return Alias;\n}(Node);\n\n_defineProperty(Alias, \"default\", true);\n\nfunction findPair(items, key) {\n  var k = key instanceof Scalar ? key.value : key;\n\n  var _iterator = _createForOfIteratorHelper(items),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var it = _step.value;\n\n      if (it instanceof Pair) {\n        if (it.key === key || it.key === k) return it;\n        if (it.key && it.key.value === k) return it;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return undefined;\n}\nvar YAMLMap = /*#__PURE__*/function (_Collection) {\n  _inherits(YAMLMap, _Collection);\n\n  var _super = _createSuper(YAMLMap);\n\n  function YAMLMap() {\n    _classCallCheck(this, YAMLMap);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(YAMLMap, [{\n    key: \"add\",\n    value: function add(pair, overwrite) {\n      if (!pair) pair = new Pair(pair);else if (!(pair instanceof Pair)) pair = new Pair(pair.key || pair, pair.value);\n      var prev = findPair(this.items, pair.key);\n      var sortEntries = this.schema && this.schema.sortMapEntries;\n\n      if (prev) {\n        if (overwrite) prev.value = pair.value;else throw new Error(\"Key \".concat(pair.key, \" already set\"));\n      } else if (sortEntries) {\n        var i = this.items.findIndex(function (item) {\n          return sortEntries(pair, item) < 0;\n        });\n        if (i === -1) this.items.push(pair);else this.items.splice(i, 0, pair);\n      } else {\n        this.items.push(pair);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var it = findPair(this.items, key);\n      if (!it) return false;\n      var del = this.items.splice(this.items.indexOf(it), 1);\n      return del.length > 0;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, keepScalar) {\n      var it = findPair(this.items, key);\n      var node = it && it.value;\n      return !keepScalar && node instanceof Scalar ? node.value : node;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return !!findPair(this.items, key);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      this.add(new Pair(key, value), true);\n    }\n    /**\n     * @param {*} arg ignored\n     * @param {*} ctx Conversion context, originally set in Document#toJSON()\n     * @param {Class} Type If set, forces the returned collection type\n     * @returns {*} Instance of Type, Map, or Object\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(_, ctx, Type) {\n      var map = Type ? new Type() : ctx && ctx.mapAsMap ? new Map() : {};\n      if (ctx && ctx.onCreate) ctx.onCreate(map);\n\n      var _iterator2 = _createForOfIteratorHelper(this.items),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          item.addToJSMap(ctx, map);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return map;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx) return JSON.stringify(this);\n\n      var _iterator3 = _createForOfIteratorHelper(this.items),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var item = _step3.value;\n          if (!(item instanceof Pair)) throw new Error(\"Map items must all be pairs; found \".concat(JSON.stringify(item), \" instead\"));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return _get(_getPrototypeOf(YAMLMap.prototype), \"toString\", this).call(this, ctx, {\n        blockItem: function blockItem(n) {\n          return n.str;\n        },\n        flowChars: {\n          start: '{',\n          end: '}'\n        },\n        isMap: true,\n        itemIndent: ctx.indent || ''\n      }, onComment, onChompKeep);\n    }\n  }]);\n\n  return YAMLMap;\n}(Collection);\n\nvar MERGE_KEY = '<<';\nvar Merge = /*#__PURE__*/function (_Pair) {\n  _inherits(Merge, _Pair);\n\n  var _super = _createSuper(Merge);\n\n  function Merge(pair) {\n    var _this;\n\n    _classCallCheck(this, Merge);\n\n    if (pair instanceof Pair) {\n      var seq = pair.value;\n\n      if (!(seq instanceof YAMLSeq)) {\n        seq = new YAMLSeq();\n        seq.items.push(pair.value);\n        seq.range = pair.value.range;\n      }\n\n      _this = _super.call(this, pair.key, seq);\n      _this.range = pair.range;\n    } else {\n      _this = _super.call(this, new Scalar(MERGE_KEY), new YAMLSeq());\n    }\n\n    _this.type = Pair.Type.MERGE_PAIR;\n    return _possibleConstructorReturn(_this);\n  } // If the value associated with a merge key is a single mapping node, each of\n  // its key/value pairs is inserted into the current mapping, unless the key\n  // already exists in it. If the value associated with the merge key is a\n  // sequence, then this sequence is expected to contain mapping nodes and each\n  // of these nodes is merged in turn according to its order in the sequence.\n  // Keys in mapping nodes earlier in the sequence override keys specified in\n  // later mapping nodes. -- http://yaml.org/type/merge.html\n\n\n  _createClass(Merge, [{\n    key: \"addToJSMap\",\n    value: function addToJSMap(ctx, map) {\n      var _iterator = _createForOfIteratorHelper(this.value.items),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var source = _step.value.source;\n          if (!(source instanceof YAMLMap)) throw new Error('Merge sources must be maps');\n          var srcMap = source.toJSON(null, ctx, Map);\n\n          var _iterator2 = _createForOfIteratorHelper(srcMap),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                  key = _step2$value[0],\n                  value = _step2$value[1];\n\n              if (map instanceof Map) {\n                if (!map.has(key)) map.set(key, value);\n              } else if (map instanceof Set) {\n                map.add(key);\n              } else if (!Object.prototype.hasOwnProperty.call(map, key)) {\n                Object.defineProperty(map, key, {\n                  value: value,\n                  writable: true,\n                  enumerable: true,\n                  configurable: true\n                });\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return map;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(ctx, onComment) {\n      var seq = this.value;\n      if (seq.items.length > 1) return _get(_getPrototypeOf(Merge.prototype), \"toString\", this).call(this, ctx, onComment);\n      this.value = seq.items[0];\n\n      var str = _get(_getPrototypeOf(Merge.prototype), \"toString\", this).call(this, ctx, onComment);\n\n      this.value = seq;\n      return str;\n    }\n  }]);\n\n  return Merge;\n}(Pair);\n\nvar binaryOptions = {\n  defaultType: Type.BLOCK_LITERAL,\n  lineWidth: 76\n};\nvar boolOptions = {\n  trueStr: 'true',\n  falseStr: 'false'\n};\nvar intOptions = {\n  asBigInt: false\n};\nvar nullOptions = {\n  nullStr: 'null'\n};\nvar strOptions = {\n  defaultType: Type.PLAIN,\n  doubleQuoted: {\n    jsonEncoding: false,\n    minMultiLineLength: 40\n  },\n  fold: {\n    lineWidth: 80,\n    minContentWidth: 20\n  }\n};\n\nfunction resolveScalar(str, tags, scalarFallback) {\n  var _iterator = _createForOfIteratorHelper(tags),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          format = _step$value.format,\n          test = _step$value.test,\n          resolve = _step$value.resolve;\n\n      if (test) {\n        var match = str.match(test);\n\n        if (match) {\n          var res = resolve.apply(null, match);\n          if (!(res instanceof Scalar)) res = new Scalar(res);\n          if (format) res.format = format;\n          return res;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (scalarFallback) str = scalarFallback(str);\n  return new Scalar(str);\n}\n\nvar FOLD_FLOW = 'flow';\nvar FOLD_BLOCK = 'block';\nvar FOLD_QUOTED = 'quoted'; // presumes i+1 is at the start of a line\n// returns index of last newline in more-indented block\n\nvar consumeMoreIndentedLines = function consumeMoreIndentedLines(text, i) {\n  var ch = text[i + 1];\n\n  while (ch === ' ' || ch === '\\t') {\n    do {\n      ch = text[i += 1];\n    } while (ch && ch !== '\\n');\n\n    ch = text[i + 1];\n  }\n\n  return i;\n};\n/**\n * Tries to keep input at up to `lineWidth` characters, splitting only on spaces\n * not followed by newlines or spaces unless `mode` is `'quoted'`. Lines are\n * terminated with `\\n` and started with `indent`.\n *\n * @param {string} text\n * @param {string} indent\n * @param {string} [mode='flow'] `'block'` prevents more-indented lines\n *   from being folded; `'quoted'` allows for `\\` escapes, including escaped\n *   newlines\n * @param {Object} options\n * @param {number} [options.indentAtStart] Accounts for leading contents on\n *   the first line, defaulting to `indent.length`\n * @param {number} [options.lineWidth=80]\n * @param {number} [options.minContentWidth=20] Allow highly indented lines to\n *   stretch the line width or indent content from the start\n * @param {function} options.onFold Called once if the text is folded\n * @param {function} options.onFold Called once if any line of text exceeds\n *   lineWidth characters\n */\n\n\nfunction foldFlowLines(text, indent, mode, _ref) {\n  var indentAtStart = _ref.indentAtStart,\n      _ref$lineWidth = _ref.lineWidth,\n      lineWidth = _ref$lineWidth === void 0 ? 80 : _ref$lineWidth,\n      _ref$minContentWidth = _ref.minContentWidth,\n      minContentWidth = _ref$minContentWidth === void 0 ? 20 : _ref$minContentWidth,\n      onFold = _ref.onFold,\n      onOverflow = _ref.onOverflow;\n  if (!lineWidth || lineWidth < 0) return text;\n  var endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);\n  if (text.length <= endStep) return text;\n  var folds = [];\n  var escapedFolds = {};\n  var end = lineWidth - indent.length;\n\n  if (typeof indentAtStart === 'number') {\n    if (indentAtStart > lineWidth - Math.max(2, minContentWidth)) folds.push(0);else end = lineWidth - indentAtStart;\n  }\n\n  var split = undefined;\n  var prev = undefined;\n  var overflow = false;\n  var i = -1;\n  var escStart = -1;\n  var escEnd = -1;\n\n  if (mode === FOLD_BLOCK) {\n    i = consumeMoreIndentedLines(text, i);\n    if (i !== -1) end = i + endStep;\n  }\n\n  for (var ch; ch = text[i += 1];) {\n    if (mode === FOLD_QUOTED && ch === '\\\\') {\n      escStart = i;\n\n      switch (text[i + 1]) {\n        case 'x':\n          i += 3;\n          break;\n\n        case 'u':\n          i += 5;\n          break;\n\n        case 'U':\n          i += 9;\n          break;\n\n        default:\n          i += 1;\n      }\n\n      escEnd = i;\n    }\n\n    if (ch === '\\n') {\n      if (mode === FOLD_BLOCK) i = consumeMoreIndentedLines(text, i);\n      end = i + endStep;\n      split = undefined;\n    } else {\n      if (ch === ' ' && prev && prev !== ' ' && prev !== '\\n' && prev !== '\\t') {\n        // space surrounded by non-space can be replaced with newline + indent\n        var next = text[i + 1];\n        if (next && next !== ' ' && next !== '\\n' && next !== '\\t') split = i;\n      }\n\n      if (i >= end) {\n        if (split) {\n          folds.push(split);\n          end = split + endStep;\n          split = undefined;\n        } else if (mode === FOLD_QUOTED) {\n          // white-space collected at end may stretch past lineWidth\n          while (prev === ' ' || prev === '\\t') {\n            prev = ch;\n            ch = text[i += 1];\n            overflow = true;\n          } // Account for newline escape, but don't break preceding escape\n\n\n          var j = i > escEnd + 1 ? i - 2 : escStart - 1; // Bail out if lineWidth & minContentWidth are shorter than an escape string\n\n          if (escapedFolds[j]) return text;\n          folds.push(j);\n          escapedFolds[j] = true;\n          end = j + endStep;\n          split = undefined;\n        } else {\n          overflow = true;\n        }\n      }\n    }\n\n    prev = ch;\n  }\n\n  if (overflow && onOverflow) onOverflow();\n  if (folds.length === 0) return text;\n  if (onFold) onFold();\n  var res = text.slice(0, folds[0]);\n\n  for (var _i = 0; _i < folds.length; ++_i) {\n    var fold = folds[_i];\n\n    var _end = folds[_i + 1] || text.length;\n\n    if (fold === 0) res = \"\\n\".concat(indent).concat(text.slice(0, _end));else {\n      if (mode === FOLD_QUOTED && escapedFolds[fold]) res += \"\".concat(text[fold], \"\\\\\");\n      res += \"\\n\".concat(indent).concat(text.slice(fold + 1, _end));\n    }\n  }\n\n  return res;\n}\n\nvar getFoldOptions = function getFoldOptions(_ref) {\n  var indentAtStart = _ref.indentAtStart;\n  return indentAtStart ? Object.assign({\n    indentAtStart: indentAtStart\n  }, strOptions.fold) : strOptions.fold;\n}; // Also checks for lines starting with %, as parsing the output as YAML 1.1 will\n// presume that's starting a new document.\n\n\nvar containsDocumentMarker = function containsDocumentMarker(str) {\n  return /^(%|---|\\.\\.\\.)/m.test(str);\n};\n\nfunction lineLengthOverLimit(str, lineWidth, indentLength) {\n  if (!lineWidth || lineWidth < 0) return false;\n  var limit = lineWidth - indentLength;\n  var strLen = str.length;\n  if (strLen <= limit) return false;\n\n  for (var i = 0, start = 0; i < strLen; ++i) {\n    if (str[i] === '\\n') {\n      if (i - start > limit) return true;\n      start = i + 1;\n      if (strLen - start <= limit) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction doubleQuotedString(value, ctx) {\n  var implicitKey = ctx.implicitKey;\n  var _strOptions$doubleQuo = strOptions.doubleQuoted,\n      jsonEncoding = _strOptions$doubleQuo.jsonEncoding,\n      minMultiLineLength = _strOptions$doubleQuo.minMultiLineLength;\n  var json = JSON.stringify(value);\n  if (jsonEncoding) return json;\n  var indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n  var str = '';\n  var start = 0;\n\n  for (var i = 0, ch = json[i]; ch; ch = json[++i]) {\n    if (ch === ' ' && json[i + 1] === '\\\\' && json[i + 2] === 'n') {\n      // space before newline needs to be escaped to not be folded\n      str += json.slice(start, i) + '\\\\ ';\n      i += 1;\n      start = i;\n      ch = '\\\\';\n    }\n\n    if (ch === '\\\\') switch (json[i + 1]) {\n      case 'u':\n        {\n          str += json.slice(start, i);\n          var code = json.substr(i + 2, 4);\n\n          switch (code) {\n            case '0000':\n              str += '\\\\0';\n              break;\n\n            case '0007':\n              str += '\\\\a';\n              break;\n\n            case '000b':\n              str += '\\\\v';\n              break;\n\n            case '001b':\n              str += '\\\\e';\n              break;\n\n            case '0085':\n              str += '\\\\N';\n              break;\n\n            case '00a0':\n              str += '\\\\_';\n              break;\n\n            case '2028':\n              str += '\\\\L';\n              break;\n\n            case '2029':\n              str += '\\\\P';\n              break;\n\n            default:\n              if (code.substr(0, 2) === '00') str += '\\\\x' + code.substr(2);else str += json.substr(i, 6);\n          }\n\n          i += 5;\n          start = i + 1;\n        }\n        break;\n\n      case 'n':\n        if (implicitKey || json[i + 2] === '\"' || json.length < minMultiLineLength) {\n          i += 1;\n        } else {\n          // folding will eat first newline\n          str += json.slice(start, i) + '\\n\\n';\n\n          while (json[i + 2] === '\\\\' && json[i + 3] === 'n' && json[i + 4] !== '\"') {\n            str += '\\n';\n            i += 2;\n          }\n\n          str += indent; // space after newline needs to be escaped to not be folded\n\n          if (json[i + 2] === ' ') str += '\\\\';\n          i += 1;\n          start = i + 1;\n        }\n\n        break;\n\n      default:\n        i += 1;\n    }\n  }\n\n  str = start ? str + json.slice(start) : json;\n  return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx));\n}\n\nfunction singleQuotedString(value, ctx) {\n  if (ctx.implicitKey) {\n    if (/\\n/.test(value)) return doubleQuotedString(value, ctx);\n  } else {\n    // single quoted string can't have leading or trailing whitespace around newline\n    if (/[ \\t]\\n|\\n[ \\t]/.test(value)) return doubleQuotedString(value, ctx);\n  }\n\n  var indent = ctx.indent || (containsDocumentMarker(value) ? '  ' : '');\n  var res = \"'\" + value.replace(/'/g, \"''\").replace(/\\n+/g, \"$&\\n\".concat(indent)) + \"'\";\n  return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx));\n}\n\nfunction blockString(_ref2, ctx, onComment, onChompKeep) {\n  var comment = _ref2.comment,\n      type = _ref2.type,\n      value = _ref2.value;\n\n  // 1. Block can't end in whitespace unless the last line is non-empty.\n  // 2. Strings consisting of only whitespace are best rendered explicitly.\n  if (/\\n[\\t ]+$/.test(value) || /^\\s*$/.test(value)) {\n    return doubleQuotedString(value, ctx);\n  }\n\n  var indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? '  ' : '');\n  var indentSize = indent ? '2' : '1'; // root is at -1\n\n  var literal = type === Type.BLOCK_FOLDED ? false : type === Type.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, strOptions.fold.lineWidth, indent.length);\n  var header = literal ? '|' : '>';\n  if (!value) return header + '\\n';\n  var wsStart = '';\n  var wsEnd = '';\n  value = value.replace(/[\\n\\t ]*$/, function (ws) {\n    var n = ws.indexOf('\\n');\n\n    if (n === -1) {\n      header += '-'; // strip\n    } else if (value === ws || n !== ws.length - 1) {\n      header += '+'; // keep\n\n      if (onChompKeep) onChompKeep();\n    }\n\n    wsEnd = ws.replace(/\\n$/, '');\n    return '';\n  }).replace(/^[\\n ]*/, function (ws) {\n    if (ws.indexOf(' ') !== -1) header += indentSize;\n    var m = ws.match(/ +$/);\n\n    if (m) {\n      wsStart = ws.slice(0, -m[0].length);\n      return m[0];\n    } else {\n      wsStart = ws;\n      return '';\n    }\n  });\n  if (wsEnd) wsEnd = wsEnd.replace(/\\n+(?!\\n|$)/g, \"$&\".concat(indent));\n  if (wsStart) wsStart = wsStart.replace(/\\n+/g, \"$&\".concat(indent));\n\n  if (comment) {\n    header += ' #' + comment.replace(/ ?[\\r\\n]+/g, ' ');\n    if (onComment) onComment();\n  }\n\n  if (!value) return \"\".concat(header).concat(indentSize, \"\\n\").concat(indent).concat(wsEnd);\n\n  if (literal) {\n    value = value.replace(/\\n+/g, \"$&\".concat(indent));\n    return \"\".concat(header, \"\\n\").concat(indent).concat(wsStart).concat(value).concat(wsEnd);\n  }\n\n  value = value.replace(/\\n+/g, '\\n$&').replace(/(?:^|\\n)([\\t ].*)(?:([\\n\\t ]*)\\n(?![\\n\\t ]))?/g, '$1$2') // more-indented lines aren't folded\n  //         ^ ind.line  ^ empty     ^ capture next empty lines only at end of indent\n  .replace(/\\n+/g, \"$&\".concat(indent));\n  var body = foldFlowLines(\"\".concat(wsStart).concat(value).concat(wsEnd), indent, FOLD_BLOCK, strOptions.fold);\n  return \"\".concat(header, \"\\n\").concat(indent).concat(body);\n}\n\nfunction plainString(item, ctx, onComment, onChompKeep) {\n  var comment = item.comment,\n      type = item.type,\n      value = item.value;\n  var actualString = ctx.actualString,\n      implicitKey = ctx.implicitKey,\n      indent = ctx.indent,\n      inFlow = ctx.inFlow;\n\n  if (implicitKey && /[\\n[\\]{},]/.test(value) || inFlow && /[[\\]{},]/.test(value)) {\n    return doubleQuotedString(value, ctx);\n  }\n\n  if (!value || /^[\\n\\t ,[\\]{}#&*!|>'\"%@`]|^[?-]$|^[?-][ \\t]|[\\n:][ \\t]|[ \\t]\\n|[\\n\\t ]#|[\\n\\t :]$/.test(value)) {\n    // not allowed:\n    // - empty string, '-' or '?'\n    // - start with an indicator character (except [?:-]) or /[?-] /\n    // - '\\n ', ': ' or ' \\n' anywhere\n    // - '#' not preceded by a non-space char\n    // - end with ' ' or ':'\n    return implicitKey || inFlow || value.indexOf('\\n') === -1 ? value.indexOf('\"') !== -1 && value.indexOf(\"'\") === -1 ? singleQuotedString(value, ctx) : doubleQuotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);\n  }\n\n  if (!implicitKey && !inFlow && type !== Type.PLAIN && value.indexOf('\\n') !== -1) {\n    // Where allowed & type not set explicitly, prefer block style for multiline strings\n    return blockString(item, ctx, onComment, onChompKeep);\n  }\n\n  if (indent === '' && containsDocumentMarker(value)) {\n    ctx.forceBlockIndent = true;\n    return blockString(item, ctx, onComment, onChompKeep);\n  }\n\n  var str = value.replace(/\\n+/g, \"$&\\n\".concat(indent)); // Verify that output will be parsed as a string, as e.g. plain numbers and\n  // booleans get parsed with those types in v1.2 (e.g. '42', 'true' & '0.9e-3'),\n  // and others in v1.1.\n\n  if (actualString) {\n    var tags = ctx.doc.schema.tags;\n    var resolved = resolveScalar(str, tags, tags.scalarFallback).value;\n    if (typeof resolved !== 'string') return doubleQuotedString(value, ctx);\n  }\n\n  var body = implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx));\n\n  if (comment && !inFlow && (body.indexOf('\\n') !== -1 || comment.indexOf('\\n') !== -1)) {\n    if (onComment) onComment();\n    return addCommentBefore(body, indent, comment);\n  }\n\n  return body;\n}\n\nfunction stringifyString(item, ctx, onComment, onChompKeep) {\n  var defaultType = strOptions.defaultType;\n  var implicitKey = ctx.implicitKey,\n      inFlow = ctx.inFlow;\n  var _item = item,\n      type = _item.type,\n      value = _item.value;\n\n  if (typeof value !== 'string') {\n    value = String(value);\n    item = Object.assign({}, item, {\n      value: value\n    });\n  }\n\n  var _stringify = function _stringify(_type) {\n    switch (_type) {\n      case Type.BLOCK_FOLDED:\n      case Type.BLOCK_LITERAL:\n        return blockString(item, ctx, onComment, onChompKeep);\n\n      case Type.QUOTE_DOUBLE:\n        return doubleQuotedString(value, ctx);\n\n      case Type.QUOTE_SINGLE:\n        return singleQuotedString(value, ctx);\n\n      case Type.PLAIN:\n        return plainString(item, ctx, onComment, onChompKeep);\n\n      default:\n        return null;\n    }\n  };\n\n  if (type !== Type.QUOTE_DOUBLE && /[\\x00-\\x08\\x0b-\\x1f\\x7f-\\x9f]/.test(value)) {\n    // force double quotes on control characters\n    type = Type.QUOTE_DOUBLE;\n  } else if ((implicitKey || inFlow) && (type === Type.BLOCK_FOLDED || type === Type.BLOCK_LITERAL)) {\n    // should not happen; blocks are not valid inside flow containers\n    type = Type.QUOTE_DOUBLE;\n  }\n\n  var res = _stringify(type);\n\n  if (res === null) {\n    res = _stringify(defaultType);\n    if (res === null) throw new Error(\"Unsupported default string type \".concat(defaultType));\n  }\n\n  return res;\n}\n\nfunction stringifyNumber(_ref) {\n  var format = _ref.format,\n      minFractionDigits = _ref.minFractionDigits,\n      tag = _ref.tag,\n      value = _ref.value;\n  if (typeof value === 'bigint') return String(value);\n  if (!isFinite(value)) return isNaN(value) ? '.nan' : value < 0 ? '-.inf' : '.inf';\n  var n = JSON.stringify(value);\n\n  if (!format && minFractionDigits && (!tag || tag === 'tag:yaml.org,2002:float') && /^\\d/.test(n)) {\n    var i = n.indexOf('.');\n\n    if (i < 0) {\n      i = n.length;\n      n += '.';\n    }\n\n    var d = minFractionDigits - (n.length - i - 1);\n\n    while (d-- > 0) {\n      n += '0';\n    }\n  }\n\n  return n;\n}\n\nfunction checkFlowCollectionEnd(errors, cst) {\n  var char, name;\n\n  switch (cst.type) {\n    case Type.FLOW_MAP:\n      char = '}';\n      name = 'flow map';\n      break;\n\n    case Type.FLOW_SEQ:\n      char = ']';\n      name = 'flow sequence';\n      break;\n\n    default:\n      errors.push(new YAMLSemanticError(cst, 'Not a flow collection!?'));\n      return;\n  }\n\n  var lastItem;\n\n  for (var i = cst.items.length - 1; i >= 0; --i) {\n    var item = cst.items[i];\n\n    if (!item || item.type !== Type.COMMENT) {\n      lastItem = item;\n      break;\n    }\n  }\n\n  if (lastItem && lastItem.char !== char) {\n    var msg = \"Expected \".concat(name, \" to end with \").concat(char);\n    var err;\n\n    if (typeof lastItem.offset === 'number') {\n      err = new YAMLSemanticError(cst, msg);\n      err.offset = lastItem.offset + 1;\n    } else {\n      err = new YAMLSemanticError(lastItem, msg);\n      if (lastItem.range && lastItem.range.end) err.offset = lastItem.range.end - lastItem.range.start;\n    }\n\n    errors.push(err);\n  }\n}\nfunction checkFlowCommentSpace(errors, comment) {\n  var prev = comment.context.src[comment.range.start - 1];\n\n  if (prev !== '\\n' && prev !== '\\t' && prev !== ' ') {\n    var msg = 'Comments must be separated from other tokens by white space characters';\n    errors.push(new YAMLSemanticError(comment, msg));\n  }\n}\nfunction getLongKeyError(source, key) {\n  var sk = String(key);\n  var k = sk.substr(0, 8) + '...' + sk.substr(-8);\n  return new YAMLSemanticError(source, \"The \\\"\".concat(k, \"\\\" key is too long\"));\n}\nfunction resolveComments(collection, comments) {\n  var _iterator = _createForOfIteratorHelper(comments),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          afterKey = _step$value.afterKey,\n          before = _step$value.before,\n          comment = _step$value.comment;\n      var item = collection.items[before];\n\n      if (!item) {\n        if (comment !== undefined) {\n          if (collection.comment) collection.comment += '\\n' + comment;else collection.comment = comment;\n        }\n      } else {\n        if (afterKey && item.value) item = item.value;\n\n        if (comment === undefined) {\n          if (afterKey || !item.commentBefore) item.spaceBefore = true;\n        } else {\n          if (item.commentBefore) item.commentBefore += '\\n' + comment;else item.commentBefore = comment;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\n// on error, will return { str: string, errors: Error[] }\nfunction resolveString(doc, node) {\n  var res = node.strValue;\n  if (!res) return '';\n  if (typeof res === 'string') return res;\n  res.errors.forEach(function (error) {\n    if (!error.source) error.source = node;\n    doc.errors.push(error);\n  });\n  return res.str;\n}\n\nfunction resolveTagHandle(doc, node) {\n  var _node$tag = node.tag,\n      handle = _node$tag.handle,\n      suffix = _node$tag.suffix;\n  var prefix = doc.tagPrefixes.find(function (p) {\n    return p.handle === handle;\n  });\n\n  if (!prefix) {\n    var dtp = doc.getDefaults().tagPrefixes;\n    if (dtp) prefix = dtp.find(function (p) {\n      return p.handle === handle;\n    });\n    if (!prefix) throw new YAMLSemanticError(node, \"The \".concat(handle, \" tag handle is non-default and was not declared.\"));\n  }\n\n  if (!suffix) throw new YAMLSemanticError(node, \"The \".concat(handle, \" tag has no suffix.\"));\n\n  if (handle === '!' && (doc.version || doc.options.version) === '1.0') {\n    if (suffix[0] === '^') {\n      doc.warnings.push(new YAMLWarning(node, 'YAML 1.0 ^ tag expansion is not supported'));\n      return suffix;\n    }\n\n    if (/[:/]/.test(suffix)) {\n      // word/foo -> tag:word.yaml.org,2002:foo\n      var vocab = suffix.match(/^([a-z0-9-]+)\\/(.*)/i);\n      return vocab ? \"tag:\".concat(vocab[1], \".yaml.org,2002:\").concat(vocab[2]) : \"tag:\".concat(suffix);\n    }\n  }\n\n  return prefix.prefix + decodeURIComponent(suffix);\n}\n\nfunction resolveTagName(doc, node) {\n  var tag = node.tag,\n      type = node.type;\n  var nonSpecific = false;\n\n  if (tag) {\n    var handle = tag.handle,\n        suffix = tag.suffix,\n        verbatim = tag.verbatim;\n\n    if (verbatim) {\n      if (verbatim !== '!' && verbatim !== '!!') return verbatim;\n      var msg = \"Verbatim tags aren't resolved, so \".concat(verbatim, \" is invalid.\");\n      doc.errors.push(new YAMLSemanticError(node, msg));\n    } else if (handle === '!' && !suffix) {\n      nonSpecific = true;\n    } else {\n      try {\n        return resolveTagHandle(doc, node);\n      } catch (error) {\n        doc.errors.push(error);\n      }\n    }\n  }\n\n  switch (type) {\n    case Type.BLOCK_FOLDED:\n    case Type.BLOCK_LITERAL:\n    case Type.QUOTE_DOUBLE:\n    case Type.QUOTE_SINGLE:\n      return defaultTags.STR;\n\n    case Type.FLOW_MAP:\n    case Type.MAP:\n      return defaultTags.MAP;\n\n    case Type.FLOW_SEQ:\n    case Type.SEQ:\n      return defaultTags.SEQ;\n\n    case Type.PLAIN:\n      return nonSpecific ? defaultTags.STR : null;\n\n    default:\n      return null;\n  }\n}\n\nfunction resolveByTagName(doc, node, tagName) {\n  var tags = doc.schema.tags;\n  var matchWithTest = [];\n\n  var _iterator = _createForOfIteratorHelper(tags),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var tag = _step.value;\n\n      if (tag.tag === tagName) {\n        if (tag.test) matchWithTest.push(tag);else {\n          var res = tag.resolve(doc, node);\n          return res instanceof Collection ? res : new Scalar(res);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var str = resolveString(doc, node);\n  if (typeof str === 'string' && matchWithTest.length > 0) return resolveScalar(str, matchWithTest, tags.scalarFallback);\n  return null;\n}\n\nfunction getFallbackTagName(_ref) {\n  var type = _ref.type;\n\n  switch (type) {\n    case Type.FLOW_MAP:\n    case Type.MAP:\n      return defaultTags.MAP;\n\n    case Type.FLOW_SEQ:\n    case Type.SEQ:\n      return defaultTags.SEQ;\n\n    default:\n      return defaultTags.STR;\n  }\n}\n\nfunction resolveTag(doc, node, tagName) {\n  try {\n    var res = resolveByTagName(doc, node, tagName);\n\n    if (res) {\n      if (tagName && node.tag) res.tag = tagName;\n      return res;\n    }\n  } catch (error) {\n    /* istanbul ignore if */\n    if (!error.source) error.source = node;\n    doc.errors.push(error);\n    return null;\n  }\n\n  try {\n    var fallback = getFallbackTagName(node);\n    if (!fallback) throw new Error(\"The tag \".concat(tagName, \" is unavailable\"));\n    var msg = \"The tag \".concat(tagName, \" is unavailable, falling back to \").concat(fallback);\n    doc.warnings.push(new YAMLWarning(node, msg));\n\n    var _res = resolveByTagName(doc, node, fallback);\n\n    _res.tag = tagName;\n    return _res;\n  } catch (error) {\n    var refError = new YAMLReferenceError(node, error.message);\n    refError.stack = error.stack;\n    doc.errors.push(refError);\n    return null;\n  }\n}\n\nvar isCollectionItem = function isCollectionItem(node) {\n  if (!node) return false;\n  var type = node.type;\n  return type === Type.MAP_KEY || type === Type.MAP_VALUE || type === Type.SEQ_ITEM;\n};\n\nfunction resolveNodeProps(errors, node) {\n  var comments = {\n    before: [],\n    after: []\n  };\n  var hasAnchor = false;\n  var hasTag = false;\n  var props = isCollectionItem(node.context.parent) ? node.context.parent.props.concat(node.props) : node.props;\n\n  var _iterator = _createForOfIteratorHelper(props),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n          start = _step$value.start,\n          end = _step$value.end;\n\n      switch (node.context.src[start]) {\n        case Char.COMMENT:\n          {\n            if (!node.commentHasRequiredWhitespace(start)) {\n              var msg = 'Comments must be separated from other tokens by white space characters';\n              errors.push(new YAMLSemanticError(node, msg));\n            }\n\n            var header = node.header,\n                valueRange = node.valueRange;\n            var cc = valueRange && (start > valueRange.start || header && start > header.start) ? comments.after : comments.before;\n            cc.push(node.context.src.slice(start + 1, end));\n            break;\n          }\n        // Actual anchor & tag resolution is handled by schema, here we just complain\n\n        case Char.ANCHOR:\n          if (hasAnchor) {\n            var _msg = 'A node can have at most one anchor';\n            errors.push(new YAMLSemanticError(node, _msg));\n          }\n\n          hasAnchor = true;\n          break;\n\n        case Char.TAG:\n          if (hasTag) {\n            var _msg2 = 'A node can have at most one tag';\n            errors.push(new YAMLSemanticError(node, _msg2));\n          }\n\n          hasTag = true;\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    comments: comments,\n    hasAnchor: hasAnchor,\n    hasTag: hasTag\n  };\n}\n\nfunction resolveNodeValue(doc, node) {\n  var anchors = doc.anchors,\n      errors = doc.errors,\n      schema = doc.schema;\n\n  if (node.type === Type.ALIAS) {\n    var name = node.rawValue;\n    var src = anchors.getNode(name);\n\n    if (!src) {\n      var msg = \"Aliased anchor not found: \".concat(name);\n      errors.push(new YAMLReferenceError(node, msg));\n      return null;\n    } // Lazy resolution for circular references\n\n\n    var res = new Alias(src);\n\n    anchors._cstAliases.push(res);\n\n    return res;\n  }\n\n  var tagName = resolveTagName(doc, node);\n  if (tagName) return resolveTag(doc, node, tagName);\n\n  if (node.type !== Type.PLAIN) {\n    var _msg3 = \"Failed to resolve \".concat(node.type, \" node here\");\n\n    errors.push(new YAMLSyntaxError(node, _msg3));\n    return null;\n  }\n\n  try {\n    var str = resolveString(doc, node);\n    return resolveScalar(str, schema.tags, schema.tags.scalarFallback);\n  } catch (error) {\n    if (!error.source) error.source = node;\n    errors.push(error);\n    return null;\n  }\n} // sets node.resolved on success\n\n\nfunction resolveNode(doc, node) {\n  if (!node) return null;\n  if (node.error) doc.errors.push(node.error);\n\n  var _resolveNodeProps = resolveNodeProps(doc.errors, node),\n      comments = _resolveNodeProps.comments,\n      hasAnchor = _resolveNodeProps.hasAnchor,\n      hasTag = _resolveNodeProps.hasTag;\n\n  if (hasAnchor) {\n    var anchors = doc.anchors;\n    var name = node.anchor;\n    var prev = anchors.getNode(name); // At this point, aliases for any preceding node with the same anchor\n    // name have already been resolved, so it may safely be renamed.\n\n    if (prev) anchors.map[anchors.newName(name)] = prev; // During parsing, we need to store the CST node in anchors.map as\n    // anchors need to be available during resolution to allow for\n    // circular references.\n\n    anchors.map[name] = node;\n  }\n\n  if (node.type === Type.ALIAS && (hasAnchor || hasTag)) {\n    var msg = 'An alias node must not specify any properties';\n    doc.errors.push(new YAMLSemanticError(node, msg));\n  }\n\n  var res = resolveNodeValue(doc, node);\n\n  if (res) {\n    res.range = [node.range.start, node.range.end];\n    if (doc.options.keepCstNodes) res.cstNode = node;\n    if (doc.options.keepNodeTypes) res.type = node.type;\n    var cb = comments.before.join('\\n');\n\n    if (cb) {\n      res.commentBefore = res.commentBefore ? \"\".concat(res.commentBefore, \"\\n\").concat(cb) : cb;\n    }\n\n    var ca = comments.after.join('\\n');\n    if (ca) res.comment = res.comment ? \"\".concat(res.comment, \"\\n\").concat(ca) : ca;\n  }\n\n  return node.resolved = res;\n}\n\nfunction resolveMap(doc, cst) {\n  if (cst.type !== Type.MAP && cst.type !== Type.FLOW_MAP) {\n    var msg = \"A \".concat(cst.type, \" node cannot be resolved as a mapping\");\n    doc.errors.push(new YAMLSyntaxError(cst, msg));\n    return null;\n  }\n\n  var _ref = cst.type === Type.FLOW_MAP ? resolveFlowMapItems(doc, cst) : resolveBlockMapItems(doc, cst),\n      comments = _ref.comments,\n      items = _ref.items;\n\n  var map = new YAMLMap();\n  map.items = items;\n  resolveComments(map, comments);\n  var hasCollectionKey = false;\n\n  for (var i = 0; i < items.length; ++i) {\n    var iKey = items[i].key;\n    if (iKey instanceof Collection) hasCollectionKey = true;\n\n    if (doc.schema.merge && iKey && iKey.value === MERGE_KEY) {\n      items[i] = new Merge(items[i]);\n      var sources = items[i].value.items;\n      var error = null;\n      sources.some(function (node) {\n        if (node instanceof Alias) {\n          // During parsing, alias sources are CST nodes; to account for\n          // circular references their resolved values can't be used here.\n          var type = node.source.type;\n          if (type === Type.MAP || type === Type.FLOW_MAP) return false;\n          return error = 'Merge nodes aliases can only point to maps';\n        }\n\n        return error = 'Merge nodes can only have Alias nodes as values';\n      });\n      if (error) doc.errors.push(new YAMLSemanticError(cst, error));\n    } else {\n      for (var j = i + 1; j < items.length; ++j) {\n        var jKey = items[j].key;\n\n        if (iKey === jKey || iKey && jKey && Object.prototype.hasOwnProperty.call(iKey, 'value') && iKey.value === jKey.value) {\n          var _msg = \"Map keys must be unique; \\\"\".concat(iKey, \"\\\" is repeated\");\n\n          doc.errors.push(new YAMLSemanticError(cst, _msg));\n          break;\n        }\n      }\n    }\n  }\n\n  if (hasCollectionKey && !doc.options.mapAsMap) {\n    var warn = 'Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.';\n    doc.warnings.push(new YAMLWarning(cst, warn));\n  }\n\n  cst.resolved = map;\n  return map;\n}\n\nvar valueHasPairComment = function valueHasPairComment(_ref2) {\n  var _ref2$context = _ref2.context,\n      lineStart = _ref2$context.lineStart,\n      node = _ref2$context.node,\n      src = _ref2$context.src,\n      props = _ref2.props;\n  if (props.length === 0) return false;\n  var start = props[0].start;\n  if (node && start > node.valueRange.start) return false;\n  if (src[start] !== Char.COMMENT) return false;\n\n  for (var i = lineStart; i < start; ++i) {\n    if (src[i] === '\\n') return false;\n  }\n\n  return true;\n};\n\nfunction resolvePairComment(item, pair) {\n  if (!valueHasPairComment(item)) return;\n  var comment = item.getPropValue(0, Char.COMMENT, true);\n  var found = false;\n  var cb = pair.value.commentBefore;\n\n  if (cb && cb.startsWith(comment)) {\n    pair.value.commentBefore = cb.substr(comment.length + 1);\n    found = true;\n  } else {\n    var cc = pair.value.comment;\n\n    if (!item.node && cc && cc.startsWith(comment)) {\n      pair.value.comment = cc.substr(comment.length + 1);\n      found = true;\n    }\n  }\n\n  if (found) pair.comment = comment;\n}\n\nfunction resolveBlockMapItems(doc, cst) {\n  var comments = [];\n  var items = [];\n  var key = undefined;\n  var keyStart = null;\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    var item = cst.items[i];\n\n    switch (item.type) {\n      case Type.BLANK_LINE:\n        comments.push({\n          afterKey: !!key,\n          before: items.length\n        });\n        break;\n\n      case Type.COMMENT:\n        comments.push({\n          afterKey: !!key,\n          before: items.length,\n          comment: item.comment\n        });\n        break;\n\n      case Type.MAP_KEY:\n        if (key !== undefined) items.push(new Pair(key));\n        if (item.error) doc.errors.push(item.error);\n        key = resolveNode(doc, item.node);\n        keyStart = null;\n        break;\n\n      case Type.MAP_VALUE:\n        {\n          if (key === undefined) key = null;\n          if (item.error) doc.errors.push(item.error);\n\n          if (!item.context.atLineStart && item.node && item.node.type === Type.MAP && !item.node.context.atLineStart) {\n            var msg = 'Nested mappings are not allowed in compact mappings';\n            doc.errors.push(new YAMLSemanticError(item.node, msg));\n          }\n\n          var valueNode = item.node;\n\n          if (!valueNode && item.props.length > 0) {\n            // Comments on an empty mapping value need to be preserved, so we\n            // need to construct a minimal empty node here to use instead of the\n            // missing `item.node`. -- eemeli/yaml#19\n            valueNode = new PlainValue(Type.PLAIN, []);\n            valueNode.context = {\n              parent: item,\n              src: item.context.src\n            };\n            var pos = item.range.start + 1;\n            valueNode.range = {\n              start: pos,\n              end: pos\n            };\n            valueNode.valueRange = {\n              start: pos,\n              end: pos\n            };\n\n            if (typeof item.range.origStart === 'number') {\n              var origPos = item.range.origStart + 1;\n              valueNode.range.origStart = valueNode.range.origEnd = origPos;\n              valueNode.valueRange.origStart = valueNode.valueRange.origEnd = origPos;\n            }\n          }\n\n          var pair = new Pair(key, resolveNode(doc, valueNode));\n          resolvePairComment(item, pair);\n          items.push(pair);\n\n          if (key && typeof keyStart === 'number') {\n            if (item.range.start > keyStart + 1024) doc.errors.push(getLongKeyError(cst, key));\n          }\n\n          key = undefined;\n          keyStart = null;\n        }\n        break;\n\n      default:\n        if (key !== undefined) items.push(new Pair(key));\n        key = resolveNode(doc, item);\n        keyStart = item.range.start;\n        if (item.error) doc.errors.push(item.error);\n\n        next: for (var j = i + 1;; ++j) {\n          var nextItem = cst.items[j];\n\n          switch (nextItem && nextItem.type) {\n            case Type.BLANK_LINE:\n            case Type.COMMENT:\n              continue next;\n\n            case Type.MAP_VALUE:\n              break next;\n\n            default:\n              {\n                var _msg2 = 'Implicit map keys need to be followed by map values';\n                doc.errors.push(new YAMLSemanticError(item, _msg2));\n                break next;\n              }\n          }\n        }\n\n        if (item.valueRangeContainsNewline) {\n          var _msg3 = 'Implicit map keys need to be on a single line';\n          doc.errors.push(new YAMLSemanticError(item, _msg3));\n        }\n\n    }\n  }\n\n  if (key !== undefined) items.push(new Pair(key));\n  return {\n    comments: comments,\n    items: items\n  };\n}\n\nfunction resolveFlowMapItems(doc, cst) {\n  var comments = [];\n  var items = [];\n  var key = undefined;\n  var explicitKey = false;\n  var next = '{';\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    var item = cst.items[i];\n\n    if (typeof item.char === 'string') {\n      var char = item.char,\n          offset = item.offset;\n\n      if (char === '?' && key === undefined && !explicitKey) {\n        explicitKey = true;\n        next = ':';\n        continue;\n      }\n\n      if (char === ':') {\n        if (key === undefined) key = null;\n\n        if (next === ':') {\n          next = ',';\n          continue;\n        }\n      } else {\n        if (explicitKey) {\n          if (key === undefined && char !== ',') key = null;\n          explicitKey = false;\n        }\n\n        if (key !== undefined) {\n          items.push(new Pair(key));\n          key = undefined;\n\n          if (char === ',') {\n            next = ':';\n            continue;\n          }\n        }\n      }\n\n      if (char === '}') {\n        if (i === cst.items.length - 1) continue;\n      } else if (char === next) {\n        next = ':';\n        continue;\n      }\n\n      var msg = \"Flow map contains an unexpected \".concat(char);\n      var err = new YAMLSyntaxError(cst, msg);\n      err.offset = offset;\n      doc.errors.push(err);\n    } else if (item.type === Type.BLANK_LINE) {\n      comments.push({\n        afterKey: !!key,\n        before: items.length\n      });\n    } else if (item.type === Type.COMMENT) {\n      checkFlowCommentSpace(doc.errors, item);\n      comments.push({\n        afterKey: !!key,\n        before: items.length,\n        comment: item.comment\n      });\n    } else if (key === undefined) {\n      if (next === ',') doc.errors.push(new YAMLSemanticError(item, 'Separator , missing in flow map'));\n      key = resolveNode(doc, item);\n    } else {\n      if (next !== ',') doc.errors.push(new YAMLSemanticError(item, 'Indicator : missing in flow map entry'));\n      items.push(new Pair(key, resolveNode(doc, item)));\n      key = undefined;\n      explicitKey = false;\n    }\n  }\n\n  checkFlowCollectionEnd(doc.errors, cst);\n  if (key !== undefined) items.push(new Pair(key));\n  return {\n    comments: comments,\n    items: items\n  };\n}\n\nfunction resolveSeq(doc, cst) {\n  if (cst.type !== Type.SEQ && cst.type !== Type.FLOW_SEQ) {\n    var msg = \"A \".concat(cst.type, \" node cannot be resolved as a sequence\");\n    doc.errors.push(new YAMLSyntaxError(cst, msg));\n    return null;\n  }\n\n  var _ref = cst.type === Type.FLOW_SEQ ? resolveFlowSeqItems(doc, cst) : resolveBlockSeqItems(doc, cst),\n      comments = _ref.comments,\n      items = _ref.items;\n\n  var seq = new YAMLSeq();\n  seq.items = items;\n  resolveComments(seq, comments);\n\n  if (!doc.options.mapAsMap && items.some(function (it) {\n    return it instanceof Pair && it.key instanceof Collection;\n  })) {\n    var warn = 'Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.';\n    doc.warnings.push(new YAMLWarning(cst, warn));\n  }\n\n  cst.resolved = seq;\n  return seq;\n}\n\nfunction resolveBlockSeqItems(doc, cst) {\n  var comments = [];\n  var items = [];\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    var item = cst.items[i];\n\n    switch (item.type) {\n      case Type.BLANK_LINE:\n        comments.push({\n          before: items.length\n        });\n        break;\n\n      case Type.COMMENT:\n        comments.push({\n          comment: item.comment,\n          before: items.length\n        });\n        break;\n\n      case Type.SEQ_ITEM:\n        if (item.error) doc.errors.push(item.error);\n        items.push(resolveNode(doc, item.node));\n\n        if (item.hasProps) {\n          var msg = 'Sequence items cannot have tags or anchors before the - indicator';\n          doc.errors.push(new YAMLSemanticError(item, msg));\n        }\n\n        break;\n\n      default:\n        if (item.error) doc.errors.push(item.error);\n        doc.errors.push(new YAMLSyntaxError(item, \"Unexpected \".concat(item.type, \" node in sequence\")));\n    }\n  }\n\n  return {\n    comments: comments,\n    items: items\n  };\n}\n\nfunction resolveFlowSeqItems(doc, cst) {\n  var comments = [];\n  var items = [];\n  var explicitKey = false;\n  var key = undefined;\n  var keyStart = null;\n  var next = '[';\n  var prevItem = null;\n\n  for (var i = 0; i < cst.items.length; ++i) {\n    var item = cst.items[i];\n\n    if (typeof item.char === 'string') {\n      var char = item.char,\n          offset = item.offset;\n\n      if (char !== ':' && (explicitKey || key !== undefined)) {\n        if (explicitKey && key === undefined) key = next ? items.pop() : null;\n        items.push(new Pair(key));\n        explicitKey = false;\n        key = undefined;\n        keyStart = null;\n      }\n\n      if (char === next) {\n        next = null;\n      } else if (!next && char === '?') {\n        explicitKey = true;\n      } else if (next !== '[' && char === ':' && key === undefined) {\n        if (next === ',') {\n          key = items.pop();\n\n          if (key instanceof Pair) {\n            var msg = 'Chaining flow sequence pairs is invalid';\n            var err = new YAMLSemanticError(cst, msg);\n            err.offset = offset;\n            doc.errors.push(err);\n          }\n\n          if (!explicitKey && typeof keyStart === 'number') {\n            var keyEnd = item.range ? item.range.start : item.offset;\n            if (keyEnd > keyStart + 1024) doc.errors.push(getLongKeyError(cst, key));\n            var src = prevItem.context.src;\n\n            for (var _i = keyStart; _i < keyEnd; ++_i) {\n              if (src[_i] === '\\n') {\n                var _msg = 'Implicit keys of flow sequence pairs need to be on a single line';\n                doc.errors.push(new YAMLSemanticError(prevItem, _msg));\n                break;\n              }\n            }\n          }\n        } else {\n          key = null;\n        }\n\n        keyStart = null;\n        explicitKey = false;\n        next = null;\n      } else if (next === '[' || char !== ']' || i < cst.items.length - 1) {\n        var _msg2 = \"Flow sequence contains an unexpected \".concat(char);\n\n        var _err = new YAMLSyntaxError(cst, _msg2);\n\n        _err.offset = offset;\n        doc.errors.push(_err);\n      }\n    } else if (item.type === Type.BLANK_LINE) {\n      comments.push({\n        before: items.length\n      });\n    } else if (item.type === Type.COMMENT) {\n      checkFlowCommentSpace(doc.errors, item);\n      comments.push({\n        comment: item.comment,\n        before: items.length\n      });\n    } else {\n      if (next) {\n        var _msg3 = \"Expected a \".concat(next, \" in flow sequence\");\n\n        doc.errors.push(new YAMLSemanticError(item, _msg3));\n      }\n\n      var value = resolveNode(doc, item);\n\n      if (key === undefined) {\n        items.push(value);\n        prevItem = item;\n      } else {\n        items.push(new Pair(key, value));\n        key = undefined;\n      }\n\n      keyStart = item.range.start;\n      next = ',';\n    }\n  }\n\n  checkFlowCollectionEnd(doc.errors, cst);\n  if (key !== undefined) items.push(new Pair(key));\n  return {\n    comments: comments,\n    items: items\n  };\n}\n\nexport { Alias as A, Collection as C, Merge as M, Node as N, Pair as P, Scalar as S, YAMLSeq as Y, boolOptions as a, binaryOptions as b, stringifyString as c, YAMLMap as d, isEmptyPath as e, addComment as f, resolveMap as g, resolveSeq as h, intOptions as i, resolveString as j, stringifyNumber as k, findPair as l, nullOptions as n, resolveNode as r, strOptions as s, toJSON as t };\n", "import { o as YAMLReferenceError, T as Type, g as YAMLSemanticError, _ as _createForOfIteratorHelper, e as _defineProperty, j as _inherits, k as _createSuper, c as _classCallCheck, p as _assertThisInitialized, b as _createClass, a as _typeof, l as _get, m as _getPrototypeOf } from './PlainValue-b8036b75.js';\nimport { j as resolveString, b as binaryOptions, c as stringifyString, h as resolveSeq, P as Pair, d as YAMLMap, Y as YAMLSeq, t as toJSON, S as Scalar, l as findPair, g as resolveMap, k as stringifyNumber } from './resolveSeq-492ab440.js';\n\n/* global atob, btoa, Buffer */\nvar binary = {\n  identify: function identify(value) {\n    return value instanceof Uint8Array;\n  },\n  // Buffer inherits from Uint8Array\n  default: false,\n  tag: 'tag:yaml.org,2002:binary',\n\n  /**\n   * Returns a Buffer in node and an Uint8Array in browsers\n   *\n   * To use the resulting buffer as an image, you'll want to do something like:\n   *\n   *   const blob = new Blob([buffer], { type: 'image/jpeg' })\n   *   document.querySelector('#photo').src = URL.createObjectURL(blob)\n   */\n  resolve: function resolve(doc, node) {\n    var src = resolveString(doc, node);\n\n    if (typeof Buffer === 'function') {\n      return Buffer.from(src, 'base64');\n    } else if (typeof atob === 'function') {\n      // On IE 11, atob() can't handle newlines\n      var str = atob(src.replace(/[\\n\\r]/g, ''));\n      var buffer = new Uint8Array(str.length);\n\n      for (var i = 0; i < str.length; ++i) {\n        buffer[i] = str.charCodeAt(i);\n      }\n\n      return buffer;\n    } else {\n      var msg = 'This environment does not support reading binary tags; either Buffer or atob is required';\n      doc.errors.push(new YAMLReferenceError(node, msg));\n      return null;\n    }\n  },\n  options: binaryOptions,\n  stringify: function stringify(_ref, ctx, onComment, onChompKeep) {\n    var comment = _ref.comment,\n        type = _ref.type,\n        value = _ref.value;\n    var src;\n\n    if (typeof Buffer === 'function') {\n      src = value instanceof Buffer ? value.toString('base64') : Buffer.from(value.buffer).toString('base64');\n    } else if (typeof btoa === 'function') {\n      var s = '';\n\n      for (var i = 0; i < value.length; ++i) {\n        s += String.fromCharCode(value[i]);\n      }\n\n      src = btoa(s);\n    } else {\n      throw new Error('This environment does not support writing binary tags; either Buffer or btoa is required');\n    }\n\n    if (!type) type = binaryOptions.defaultType;\n\n    if (type === Type.QUOTE_DOUBLE) {\n      value = src;\n    } else {\n      var lineWidth = binaryOptions.lineWidth;\n      var n = Math.ceil(src.length / lineWidth);\n      var lines = new Array(n);\n\n      for (var _i = 0, o = 0; _i < n; ++_i, o += lineWidth) {\n        lines[_i] = src.substr(o, lineWidth);\n      }\n\n      value = lines.join(type === Type.BLOCK_LITERAL ? '\\n' : ' ');\n    }\n\n    return stringifyString({\n      comment: comment,\n      type: type,\n      value: value\n    }, ctx, onComment, onChompKeep);\n  }\n};\n\nfunction parsePairs(doc, cst) {\n  var seq = resolveSeq(doc, cst);\n\n  for (var i = 0; i < seq.items.length; ++i) {\n    var item = seq.items[i];\n    if (item instanceof Pair) continue;else if (item instanceof YAMLMap) {\n      if (item.items.length > 1) {\n        var msg = 'Each pair must have its own sequence indicator';\n        throw new YAMLSemanticError(cst, msg);\n      }\n\n      var pair = item.items[0] || new Pair();\n      if (item.commentBefore) pair.commentBefore = pair.commentBefore ? \"\".concat(item.commentBefore, \"\\n\").concat(pair.commentBefore) : item.commentBefore;\n      if (item.comment) pair.comment = pair.comment ? \"\".concat(item.comment, \"\\n\").concat(pair.comment) : item.comment;\n      item = pair;\n    }\n    seq.items[i] = item instanceof Pair ? item : new Pair(item);\n  }\n\n  return seq;\n}\nfunction createPairs(schema, iterable, ctx) {\n  var pairs = new YAMLSeq(schema);\n  pairs.tag = 'tag:yaml.org,2002:pairs';\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var it = _step.value;\n      var key = void 0,\n          value = void 0;\n\n      if (Array.isArray(it)) {\n        if (it.length === 2) {\n          key = it[0];\n          value = it[1];\n        } else throw new TypeError(\"Expected [key, value] tuple: \".concat(it));\n      } else if (it && it instanceof Object) {\n        var keys = Object.keys(it);\n\n        if (keys.length === 1) {\n          key = keys[0];\n          value = it[key];\n        } else throw new TypeError(\"Expected { key: value } tuple: \".concat(it));\n      } else {\n        key = it;\n      }\n\n      var pair = schema.createPair(key, value, ctx);\n      pairs.items.push(pair);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return pairs;\n}\nvar pairs = {\n  default: false,\n  tag: 'tag:yaml.org,2002:pairs',\n  resolve: parsePairs,\n  createNode: createPairs\n};\n\nvar YAMLOMap = /*#__PURE__*/function (_YAMLSeq) {\n  _inherits(YAMLOMap, _YAMLSeq);\n\n  var _super = _createSuper(YAMLOMap);\n\n  function YAMLOMap() {\n    var _this;\n\n    _classCallCheck(this, YAMLOMap);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"add\", YAMLMap.prototype.add.bind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"delete\", YAMLMap.prototype.delete.bind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"get\", YAMLMap.prototype.get.bind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"has\", YAMLMap.prototype.has.bind(_assertThisInitialized(_this)));\n\n    _defineProperty(_assertThisInitialized(_this), \"set\", YAMLMap.prototype.set.bind(_assertThisInitialized(_this)));\n\n    _this.tag = YAMLOMap.tag;\n    return _this;\n  }\n\n  _createClass(YAMLOMap, [{\n    key: \"toJSON\",\n    value: function toJSON$1(_, ctx) {\n      var map = new Map();\n      if (ctx && ctx.onCreate) ctx.onCreate(map);\n\n      var _iterator = _createForOfIteratorHelper(this.items),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n          var key = void 0,\n              value = void 0;\n\n          if (pair instanceof Pair) {\n            key = toJSON(pair.key, '', ctx);\n            value = toJSON(pair.value, key, ctx);\n          } else {\n            key = toJSON(pair, '', ctx);\n          }\n\n          if (map.has(key)) throw new Error('Ordered maps must not include duplicate keys');\n          map.set(key, value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return map;\n    }\n  }]);\n\n  return YAMLOMap;\n}(YAMLSeq);\n\n_defineProperty(YAMLOMap, \"tag\", 'tag:yaml.org,2002:omap');\n\nfunction parseOMap(doc, cst) {\n  var pairs = parsePairs(doc, cst);\n  var seenKeys = [];\n\n  var _iterator2 = _createForOfIteratorHelper(pairs.items),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var key = _step2.value.key;\n\n      if (key instanceof Scalar) {\n        if (seenKeys.includes(key.value)) {\n          var msg = 'Ordered maps must not include duplicate keys';\n          throw new YAMLSemanticError(cst, msg);\n        } else {\n          seenKeys.push(key.value);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return Object.assign(new YAMLOMap(), pairs);\n}\n\nfunction createOMap(schema, iterable, ctx) {\n  var pairs = createPairs(schema, iterable, ctx);\n  var omap = new YAMLOMap();\n  omap.items = pairs.items;\n  return omap;\n}\n\nvar omap = {\n  identify: function identify(value) {\n    return value instanceof Map;\n  },\n  nodeClass: YAMLOMap,\n  default: false,\n  tag: 'tag:yaml.org,2002:omap',\n  resolve: parseOMap,\n  createNode: createOMap\n};\n\nvar YAMLSet = /*#__PURE__*/function (_YAMLMap) {\n  _inherits(YAMLSet, _YAMLMap);\n\n  var _super = _createSuper(YAMLSet);\n\n  function YAMLSet() {\n    var _this;\n\n    _classCallCheck(this, YAMLSet);\n\n    _this = _super.call(this);\n    _this.tag = YAMLSet.tag;\n    return _this;\n  }\n\n  _createClass(YAMLSet, [{\n    key: \"add\",\n    value: function add(key) {\n      var pair = key instanceof Pair ? key : new Pair(key);\n      var prev = findPair(this.items, pair.key);\n      if (!prev) this.items.push(pair);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, keepPair) {\n      var pair = findPair(this.items, key);\n      return !keepPair && pair instanceof Pair ? pair.key instanceof Scalar ? pair.key.value : pair.key : pair;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (typeof value !== 'boolean') throw new Error(\"Expected boolean value for set(key, value) in a YAML set, not \".concat(_typeof(value)));\n      var prev = findPair(this.items, key);\n\n      if (prev && !value) {\n        this.items.splice(this.items.indexOf(prev), 1);\n      } else if (!prev && value) {\n        this.items.push(new Pair(key));\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(_, ctx) {\n      return _get(_getPrototypeOf(YAMLSet.prototype), \"toJSON\", this).call(this, _, ctx, Set);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx) return JSON.stringify(this);\n      if (this.hasAllNullValues()) return _get(_getPrototypeOf(YAMLSet.prototype), \"toString\", this).call(this, ctx, onComment, onChompKeep);else throw new Error('Set items must all have null values');\n    }\n  }]);\n\n  return YAMLSet;\n}(YAMLMap);\n\n_defineProperty(YAMLSet, \"tag\", 'tag:yaml.org,2002:set');\n\nfunction parseSet(doc, cst) {\n  var map = resolveMap(doc, cst);\n  if (!map.hasAllNullValues()) throw new YAMLSemanticError(cst, 'Set items must all have null values');\n  return Object.assign(new YAMLSet(), map);\n}\n\nfunction createSet(schema, iterable, ctx) {\n  var set = new YAMLSet();\n\n  var _iterator = _createForOfIteratorHelper(iterable),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      set.items.push(schema.createPair(value, null, ctx));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return set;\n}\n\nvar set = {\n  identify: function identify(value) {\n    return value instanceof Set;\n  },\n  nodeClass: YAMLSet,\n  default: false,\n  tag: 'tag:yaml.org,2002:set',\n  resolve: parseSet,\n  createNode: createSet\n};\n\nvar parseSexagesimal = function parseSexagesimal(sign, parts) {\n  var n = parts.split(':').reduce(function (n, p) {\n    return n * 60 + Number(p);\n  }, 0);\n  return sign === '-' ? -n : n;\n}; // hhhh:mm:ss.sss\n\n\nvar stringifySexagesimal = function stringifySexagesimal(_ref) {\n  var value = _ref.value;\n  if (isNaN(value) || !isFinite(value)) return stringifyNumber(value);\n  var sign = '';\n\n  if (value < 0) {\n    sign = '-';\n    value = Math.abs(value);\n  }\n\n  var parts = [value % 60]; // seconds, including ms\n\n  if (value < 60) {\n    parts.unshift(0); // at least one : is required\n  } else {\n    value = Math.round((value - parts[0]) / 60);\n    parts.unshift(value % 60); // minutes\n\n    if (value >= 60) {\n      value = Math.round((value - parts[0]) / 60);\n      parts.unshift(value); // hours\n    }\n  }\n\n  return sign + parts.map(function (n) {\n    return n < 10 ? '0' + String(n) : String(n);\n  }).join(':').replace(/000000\\d*$/, '') // % 60 may introduce error\n  ;\n};\n\nvar intTime = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'TIME',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,\n  resolve: function resolve(str, sign, parts) {\n    return parseSexagesimal(sign, parts.replace(/_/g, ''));\n  },\n  stringify: stringifySexagesimal\n};\nvar floatTime = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'TIME',\n  test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*)$/,\n  resolve: function resolve(str, sign, parts) {\n    return parseSexagesimal(sign, parts.replace(/_/g, ''));\n  },\n  stringify: stringifySexagesimal\n};\nvar timestamp = {\n  identify: function identify(value) {\n    return value instanceof Date;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:timestamp',\n  // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n  // may be omitted altogether, resulting in a date format. In such a case, the time part is\n  // assumed to be 00:00:00Z (start of day, UTC).\n  test: RegExp('^(?:' + '([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n  '(?:(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n  '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n  '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n  ')?' + ')$'),\n  resolve: function resolve(str, year, month, day, hour, minute, second, millisec, tz) {\n    if (millisec) millisec = (millisec + '00').substr(1, 3);\n    var date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec || 0);\n\n    if (tz && tz !== 'Z') {\n      var d = parseSexagesimal(tz[0], tz.slice(1));\n      if (Math.abs(d) < 30) d *= 60;\n      date -= 60000 * d;\n    }\n\n    return new Date(date);\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '');\n  }\n};\n\n/* global console, process, YAML_SILENCE_DEPRECATION_WARNINGS, YAML_SILENCE_WARNINGS */\nfunction shouldWarn(deprecation) {\n  var env = typeof process !== 'undefined' && process.env || {};\n\n  if (deprecation) {\n    if (typeof YAML_SILENCE_DEPRECATION_WARNINGS !== 'undefined') return !YAML_SILENCE_DEPRECATION_WARNINGS;\n    return !env.YAML_SILENCE_DEPRECATION_WARNINGS;\n  }\n\n  if (typeof YAML_SILENCE_WARNINGS !== 'undefined') return !YAML_SILENCE_WARNINGS;\n  return !env.YAML_SILENCE_WARNINGS;\n}\n\nfunction warn(warning, type) {\n  if (shouldWarn(false)) {\n    var emit = typeof process !== 'undefined' && process.emitWarning; // This will throw in Jest if `warning` is an Error instance due to\n    // https://github.com/facebook/jest/issues/2549\n\n    if (emit) emit(warning, type);else {\n      // eslint-disable-next-line no-console\n      console.warn(type ? \"\".concat(type, \": \").concat(warning) : warning);\n    }\n  }\n}\nfunction warnFileDeprecation(filename) {\n  if (shouldWarn(true)) {\n    var path = filename.replace(/.*yaml[/\\\\]/i, '').replace(/\\.js$/, '').replace(/\\\\/g, '/');\n    warn(\"The endpoint 'yaml/\".concat(path, \"' will be removed in a future release.\"), 'DeprecationWarning');\n  }\n}\nvar warned = {};\nfunction warnOptionDeprecation(name, alternative) {\n  if (!warned[name] && shouldWarn(true)) {\n    warned[name] = true;\n    var msg = \"The option '\".concat(name, \"' will be removed in a future release\");\n    msg += alternative ? \", use '\".concat(alternative, \"' instead.\") : '.';\n    warn(msg, 'DeprecationWarning');\n  }\n}\n\nexport { warnOptionDeprecation as a, binary as b, warnFileDeprecation as c, floatTime as f, intTime as i, omap as o, pairs as p, set as s, timestamp as t, warn as w };\n", "import { _ as _createForOfIteratorHelper, h as _slicedToArray, a as _typeof, b as _createClass, e as _defineProperty, c as _classCallCheck, d as defaultTagPrefix, n as defaultTags } from './PlainValue-b8036b75.js';\nimport { d as YAMLMap, g as resolveMap, Y as YAMLSeq, h as resolveSeq, j as resolveString, c as stringifyString, s as strOptions, S as Scalar, n as nullOptions, a as boolOptions, i as intOptions, k as stringifyNumber, N as Node, A as Alias, P as Pair } from './resolveSeq-492ab440.js';\nimport { b as binary, o as omap, p as pairs, s as set, i as intTime, f as floatTime, t as timestamp, a as warnOptionDeprecation } from './warnings-df54cb69.js';\n\nfunction createMap(schema, obj, ctx) {\n  var map = new YAMLMap(schema);\n\n  if (obj instanceof Map) {\n    var _iterator = _createForOfIteratorHelper(obj),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            key = _step$value[0],\n            value = _step$value[1];\n\n        map.items.push(schema.createPair(key, value, ctx));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (obj && _typeof(obj) === 'object') {\n    for (var _i = 0, _Object$keys = Object.keys(obj); _i < _Object$keys.length; _i++) {\n      var _key = _Object$keys[_i];\n      map.items.push(schema.createPair(_key, obj[_key], ctx));\n    }\n  }\n\n  if (typeof schema.sortMapEntries === 'function') {\n    map.items.sort(schema.sortMapEntries);\n  }\n\n  return map;\n}\n\nvar map = {\n  createNode: createMap,\n  default: true,\n  nodeClass: YAMLMap,\n  tag: 'tag:yaml.org,2002:map',\n  resolve: resolveMap\n};\n\nfunction createSeq(schema, obj, ctx) {\n  var seq = new YAMLSeq(schema);\n\n  if (obj && obj[Symbol.iterator]) {\n    var _iterator = _createForOfIteratorHelper(obj),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var it = _step.value;\n        var v = schema.createNode(it, ctx.wrapScalars, null, ctx);\n        seq.items.push(v);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return seq;\n}\n\nvar seq = {\n  createNode: createSeq,\n  default: true,\n  nodeClass: YAMLSeq,\n  tag: 'tag:yaml.org,2002:seq',\n  resolve: resolveSeq\n};\n\nvar string = {\n  identify: function identify(value) {\n    return typeof value === 'string';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: resolveString,\n  stringify: function stringify(item, ctx, onComment, onChompKeep) {\n    ctx = Object.assign({\n      actualString: true\n    }, ctx);\n    return stringifyString(item, ctx, onComment, onChompKeep);\n  },\n  options: strOptions\n};\n\nvar failsafe = [map, seq, string];\n\n/* global BigInt */\n\nvar intIdentify$2 = function intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n};\n\nvar intResolve$1 = function intResolve(src, part, radix) {\n  return intOptions.asBigInt ? BigInt(src) : parseInt(part, radix);\n};\n\nfunction intStringify$1(node, radix, prefix) {\n  var value = node.value;\n  if (intIdentify$2(value) && value >= 0) return prefix + value.toString(radix);\n  return stringifyNumber(node);\n}\n\nvar nullObj = {\n  identify: function identify(value) {\n    return value == null;\n  },\n  createNode: function createNode(schema, value, ctx) {\n    return ctx.wrapScalars ? new Scalar(null) : null;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: function resolve() {\n    return null;\n  },\n  options: nullOptions,\n  stringify: function stringify() {\n    return nullOptions.nullStr;\n  }\n};\nvar boolObj = {\n  identify: function identify(value) {\n    return typeof value === 'boolean';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,\n  resolve: function resolve(str) {\n    return str[0] === 't' || str[0] === 'T';\n  },\n  options: boolOptions,\n  stringify: function stringify(_ref) {\n    var value = _ref.value;\n    return value ? boolOptions.trueStr : boolOptions.falseStr;\n  }\n};\nvar octObj = {\n  identify: function identify(value) {\n    return intIdentify$2(value) && value >= 0;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^0o([0-7]+)$/,\n  resolve: function resolve(str, oct) {\n    return intResolve$1(str, oct, 8);\n  },\n  options: intOptions,\n  stringify: function stringify(node) {\n    return intStringify$1(node, 8, '0o');\n  }\n};\nvar intObj = {\n  identify: intIdentify$2,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^[-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return intResolve$1(str, str, 10);\n  },\n  options: intOptions,\n  stringify: stringifyNumber\n};\nvar hexObj = {\n  identify: function identify(value) {\n    return intIdentify$2(value) && value >= 0;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^0x([0-9a-fA-F]+)$/,\n  resolve: function resolve(str, hex) {\n    return intResolve$1(str, hex, 16);\n  },\n  options: intOptions,\n  stringify: function stringify(node) {\n    return intStringify$1(node, 16, '0x');\n  }\n};\nvar nanObj = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: function resolve(str, nan) {\n    return nan ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  },\n  stringify: stringifyNumber\n};\nvar expObj = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return parseFloat(str);\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return Number(value).toExponential();\n  }\n};\nvar floatObj = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:\\.([0-9]+)|[0-9]+\\.([0-9]*))$/,\n  resolve: function resolve(str, frac1, frac2) {\n    var frac = frac1 || frac2;\n    var node = new Scalar(parseFloat(str));\n    if (frac && frac[frac.length - 1] === '0') node.minFractionDigits = frac.length;\n    return node;\n  },\n  stringify: stringifyNumber\n};\nvar core = failsafe.concat([nullObj, boolObj, octObj, intObj, hexObj, nanObj, expObj, floatObj]);\n\n/* global BigInt */\n\nvar intIdentify$1 = function intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n};\n\nvar stringifyJSON = function stringifyJSON(_ref) {\n  var value = _ref.value;\n  return JSON.stringify(value);\n};\n\nvar json = [map, seq, {\n  identify: function identify(value) {\n    return typeof value === 'string';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: resolveString,\n  stringify: stringifyJSON\n}, {\n  identify: function identify(value) {\n    return value == null;\n  },\n  createNode: function createNode(schema, value, ctx) {\n    return ctx.wrapScalars ? new Scalar(null) : null;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^null$/,\n  resolve: function resolve() {\n    return null;\n  },\n  stringify: stringifyJSON\n}, {\n  identify: function identify(value) {\n    return typeof value === 'boolean';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^true|false$/,\n  resolve: function resolve(str) {\n    return str === 'true';\n  },\n  stringify: stringifyJSON\n}, {\n  identify: intIdentify$1,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^-?(?:0|[1-9][0-9]*)$/,\n  resolve: function resolve(str) {\n    return intOptions.asBigInt ? BigInt(str) : parseInt(str, 10);\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return intIdentify$1(value) ? value.toString() : JSON.stringify(value);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n  resolve: function resolve(str) {\n    return parseFloat(str);\n  },\n  stringify: stringifyJSON\n}];\n\njson.scalarFallback = function (str) {\n  throw new SyntaxError(\"Unresolved plain scalar \".concat(JSON.stringify(str)));\n};\n\n/* global BigInt */\n\nvar boolStringify = function boolStringify(_ref) {\n  var value = _ref.value;\n  return value ? boolOptions.trueStr : boolOptions.falseStr;\n};\n\nvar intIdentify = function intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n};\n\nfunction intResolve(sign, src, radix) {\n  var str = src.replace(/_/g, '');\n\n  if (intOptions.asBigInt) {\n    switch (radix) {\n      case 2:\n        str = \"0b\".concat(str);\n        break;\n\n      case 8:\n        str = \"0o\".concat(str);\n        break;\n\n      case 16:\n        str = \"0x\".concat(str);\n        break;\n    }\n\n    var _n = BigInt(str);\n\n    return sign === '-' ? BigInt(-1) * _n : _n;\n  }\n\n  var n = parseInt(str, radix);\n  return sign === '-' ? -1 * n : n;\n}\n\nfunction intStringify(node, radix, prefix) {\n  var value = node.value;\n\n  if (intIdentify(value)) {\n    var str = value.toString(radix);\n    return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n  }\n\n  return stringifyNumber(node);\n}\n\nvar yaml11 = failsafe.concat([{\n  identify: function identify(value) {\n    return value == null;\n  },\n  createNode: function createNode(schema, value, ctx) {\n    return ctx.wrapScalars ? new Scalar(null) : null;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^(?:~|[Nn]ull|NULL)?$/,\n  resolve: function resolve() {\n    return null;\n  },\n  options: nullOptions,\n  stringify: function stringify() {\n    return nullOptions.nullStr;\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === 'boolean';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,\n  resolve: function resolve() {\n    return true;\n  },\n  options: boolOptions,\n  stringify: boolStringify\n}, {\n  identify: function identify(value) {\n    return typeof value === 'boolean';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,\n  resolve: function resolve() {\n    return false;\n  },\n  options: boolOptions,\n  stringify: boolStringify\n}, {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'BIN',\n  test: /^([-+]?)0b([0-1_]+)$/,\n  resolve: function resolve(str, sign, bin) {\n    return intResolve(sign, bin, 2);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 2, '0b');\n  }\n}, {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^([-+]?)0([0-7_]+)$/,\n  resolve: function resolve(str, sign, oct) {\n    return intResolve(sign, oct, 8);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 8, '0');\n  }\n}, {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^([-+]?)([0-9][0-9_]*)$/,\n  resolve: function resolve(str, sign, abs) {\n    return intResolve(sign, abs, 10);\n  },\n  stringify: stringifyNumber\n}, {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^([-+]?)0x([0-9a-fA-F_]+)$/,\n  resolve: function resolve(str, sign, hex) {\n    return intResolve(sign, hex, 16);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 16, '0x');\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.inf|(\\.nan))$/i,\n  resolve: function resolve(str, nan) {\n    return nan ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  },\n  stringify: stringifyNumber\n}, {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?([0-9][0-9_]*)?(\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return parseFloat(str.replace(/_/g, ''));\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return Number(value).toExponential();\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:[0-9][0-9_]*)?\\.([0-9_]*)$/,\n  resolve: function resolve(str, frac) {\n    var node = new Scalar(parseFloat(str.replace(/_/g, '')));\n\n    if (frac) {\n      var f = frac.replace(/_/g, '');\n      if (f[f.length - 1] === '0') node.minFractionDigits = f.length;\n    }\n\n    return node;\n  },\n  stringify: stringifyNumber\n}], binary, omap, pairs, set, intTime, floatTime, timestamp);\n\nvar schemas = {\n  core: core,\n  failsafe: failsafe,\n  json: json,\n  yaml11: yaml11\n};\nvar tags = {\n  binary: binary,\n  bool: boolObj,\n  float: floatObj,\n  floatExp: expObj,\n  floatNaN: nanObj,\n  floatTime: floatTime,\n  int: intObj,\n  intHex: hexObj,\n  intOct: octObj,\n  intTime: intTime,\n  map: map,\n  null: nullObj,\n  omap: omap,\n  pairs: pairs,\n  seq: seq,\n  set: set,\n  timestamp: timestamp\n};\n\nfunction findTagObject(value, tagName, tags) {\n  if (tagName) {\n    var match = tags.filter(function (t) {\n      return t.tag === tagName;\n    });\n    var tagObj = match.find(function (t) {\n      return !t.format;\n    }) || match[0];\n    if (!tagObj) throw new Error(\"Tag \".concat(tagName, \" not found\"));\n    return tagObj;\n  } // TODO: deprecate/remove class check\n\n\n  return tags.find(function (t) {\n    return (t.identify && t.identify(value) || t.class && value instanceof t.class) && !t.format;\n  });\n}\n\nfunction createNode(value, tagName, ctx) {\n  if (value instanceof Node) return value;\n  var defaultPrefix = ctx.defaultPrefix,\n      onTagObj = ctx.onTagObj,\n      prevObjects = ctx.prevObjects,\n      schema = ctx.schema,\n      wrapScalars = ctx.wrapScalars;\n  if (tagName && tagName.startsWith('!!')) tagName = defaultPrefix + tagName.slice(2);\n  var tagObj = findTagObject(value, tagName, schema.tags);\n\n  if (!tagObj) {\n    if (typeof value.toJSON === 'function') value = value.toJSON();\n    if (!value || _typeof(value) !== 'object') return wrapScalars ? new Scalar(value) : value;\n    tagObj = value instanceof Map ? map : value[Symbol.iterator] ? seq : map;\n  }\n\n  if (onTagObj) {\n    onTagObj(tagObj);\n    delete ctx.onTagObj;\n  } // Detect duplicate references to the same object & use Alias nodes for all\n  // after first. The `obj` wrapper allows for circular references to resolve.\n\n\n  var obj = {\n    value: undefined,\n    node: undefined\n  };\n\n  if (value && _typeof(value) === 'object' && prevObjects) {\n    var prev = prevObjects.get(value);\n\n    if (prev) {\n      var alias = new Alias(prev); // leaves source dirty; must be cleaned by caller\n\n      ctx.aliasNodes.push(alias); // defined along with prevObjects\n\n      return alias;\n    }\n\n    obj.value = value;\n    prevObjects.set(value, obj);\n  }\n\n  obj.node = tagObj.createNode ? tagObj.createNode(ctx.schema, value, ctx) : wrapScalars ? new Scalar(value) : value;\n  if (tagName && obj.node instanceof Node) obj.node.tag = tagName;\n  return obj.node;\n}\n\nfunction getSchemaTags(schemas, knownTags, customTags, schemaId) {\n  var tags = schemas[schemaId.replace(/\\W/g, '')]; // 'yaml-1.1' -> 'yaml11'\n\n  if (!tags) {\n    var keys = Object.keys(schemas).map(function (key) {\n      return JSON.stringify(key);\n    }).join(', ');\n    throw new Error(\"Unknown schema \\\"\".concat(schemaId, \"\\\"; use one of \").concat(keys));\n  }\n\n  if (Array.isArray(customTags)) {\n    var _iterator = _createForOfIteratorHelper(customTags),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var tag = _step.value;\n        tags = tags.concat(tag);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (typeof customTags === 'function') {\n    tags = customTags(tags.slice());\n  }\n\n  for (var i = 0; i < tags.length; ++i) {\n    var _tag = tags[i];\n\n    if (typeof _tag === 'string') {\n      var tagObj = knownTags[_tag];\n\n      if (!tagObj) {\n        var _keys = Object.keys(knownTags).map(function (key) {\n          return JSON.stringify(key);\n        }).join(', ');\n\n        throw new Error(\"Unknown custom tag \\\"\".concat(_tag, \"\\\"; use one of \").concat(_keys));\n      }\n\n      tags[i] = tagObj;\n    }\n  }\n\n  return tags;\n}\n\nvar sortMapEntriesByKey = function sortMapEntriesByKey(a, b) {\n  return a.key < b.key ? -1 : a.key > b.key ? 1 : 0;\n};\n\nvar Schema = /*#__PURE__*/function () {\n  // TODO: remove in v2\n  // TODO: remove in v2\n  function Schema(_ref) {\n    var customTags = _ref.customTags,\n        merge = _ref.merge,\n        schema = _ref.schema,\n        sortMapEntries = _ref.sortMapEntries,\n        deprecatedCustomTags = _ref.tags;\n\n    _classCallCheck(this, Schema);\n\n    this.merge = !!merge;\n    this.name = schema;\n    this.sortMapEntries = sortMapEntries === true ? sortMapEntriesByKey : sortMapEntries || null;\n    if (!customTags && deprecatedCustomTags) warnOptionDeprecation('tags', 'customTags');\n    this.tags = getSchemaTags(schemas, tags, customTags || deprecatedCustomTags, schema);\n  }\n\n  _createClass(Schema, [{\n    key: \"createNode\",\n    value: function createNode$1(value, wrapScalars, tagName, ctx) {\n      var baseCtx = {\n        defaultPrefix: Schema.defaultPrefix,\n        schema: this,\n        wrapScalars: wrapScalars\n      };\n      var createCtx = ctx ? Object.assign(ctx, baseCtx) : baseCtx;\n      return createNode(value, tagName, createCtx);\n    }\n  }, {\n    key: \"createPair\",\n    value: function createPair(key, value, ctx) {\n      if (!ctx) ctx = {\n        wrapScalars: true\n      };\n      var k = this.createNode(key, ctx.wrapScalars, null, ctx);\n      var v = this.createNode(value, ctx.wrapScalars, null, ctx);\n      return new Pair(k, v);\n    }\n  }]);\n\n  return Schema;\n}();\n\n_defineProperty(Schema, \"defaultPrefix\", defaultTagPrefix);\n\n_defineProperty(Schema, \"defaultTags\", defaultTags);\n\nexport { Schema as S };\n", "import { d as defaultTagPrefix, _ as _createForOfIteratorHelper, a as _typeof, b as _createClass, c as _classCallCheck, e as _defineProperty, Y as YAMLSyntaxError, T as Type, f as YAMLWarning, g as YAMLSemanticError, h as _slicedToArray, i as YAMLError, j as _inherits, k as _createSuper } from './PlainValue-b8036b75.js';\nimport { parse as parse$1 } from './parse-cst.js';\nimport { b as binaryOptions, a as boolOptions, i as intOptions, n as nullOptions, s as strOptions, N as Node, P as Pair, S as Scalar, c as stringifyString, A as Alias, Y as YAMLSeq, d as YAMLMap, M as Merge, C as Collection, r as resolveNode, e as isEmptyPath, t as toJSON, f as addComment } from './resolveSeq-492ab440.js';\nimport { S as Schema } from './Schema-e94716c8.js';\nimport { w as warn } from './warnings-df54cb69.js';\n\nvar defaultOptions = {\n  anchorPrefix: 'a',\n  customTags: null,\n  indent: 2,\n  indentSeq: true,\n  keepCstNodes: false,\n  keepNodeTypes: true,\n  keepBlobsInJSON: true,\n  mapAsMap: false,\n  maxAliasCount: 100,\n  prettyErrors: false,\n  // TODO Set true in v2\n  simpleKeys: false,\n  version: '1.2'\n};\nvar scalarOptions = {\n  get binary() {\n    return binaryOptions;\n  },\n\n  set binary(opt) {\n    Object.assign(binaryOptions, opt);\n  },\n\n  get bool() {\n    return boolOptions;\n  },\n\n  set bool(opt) {\n    Object.assign(boolOptions, opt);\n  },\n\n  get int() {\n    return intOptions;\n  },\n\n  set int(opt) {\n    Object.assign(intOptions, opt);\n  },\n\n  get null() {\n    return nullOptions;\n  },\n\n  set null(opt) {\n    Object.assign(nullOptions, opt);\n  },\n\n  get str() {\n    return strOptions;\n  },\n\n  set str(opt) {\n    Object.assign(strOptions, opt);\n  }\n\n};\nvar documentOptions = {\n  '1.0': {\n    schema: 'yaml-1.1',\n    merge: true,\n    tagPrefixes: [{\n      handle: '!',\n      prefix: defaultTagPrefix\n    }, {\n      handle: '!!',\n      prefix: 'tag:private.yaml.org,2002:'\n    }]\n  },\n  1.1: {\n    schema: 'yaml-1.1',\n    merge: true,\n    tagPrefixes: [{\n      handle: '!',\n      prefix: '!'\n    }, {\n      handle: '!!',\n      prefix: defaultTagPrefix\n    }]\n  },\n  1.2: {\n    schema: 'core',\n    merge: false,\n    tagPrefixes: [{\n      handle: '!',\n      prefix: '!'\n    }, {\n      handle: '!!',\n      prefix: defaultTagPrefix\n    }]\n  }\n};\n\nfunction stringifyTag(doc, tag) {\n  if ((doc.version || doc.options.version) === '1.0') {\n    var priv = tag.match(/^tag:private\\.yaml\\.org,2002:([^:/]+)$/);\n    if (priv) return '!' + priv[1];\n    var vocab = tag.match(/^tag:([a-zA-Z0-9-]+)\\.yaml\\.org,2002:(.*)/);\n    return vocab ? \"!\".concat(vocab[1], \"/\").concat(vocab[2]) : \"!\".concat(tag.replace(/^tag:/, ''));\n  }\n\n  var p = doc.tagPrefixes.find(function (p) {\n    return tag.indexOf(p.prefix) === 0;\n  });\n\n  if (!p) {\n    var dtp = doc.getDefaults().tagPrefixes;\n    p = dtp && dtp.find(function (p) {\n      return tag.indexOf(p.prefix) === 0;\n    });\n  }\n\n  if (!p) return tag[0] === '!' ? tag : \"!<\".concat(tag, \">\");\n  var suffix = tag.substr(p.prefix.length).replace(/[!,[\\]{}]/g, function (ch) {\n    return {\n      '!': '%21',\n      ',': '%2C',\n      '[': '%5B',\n      ']': '%5D',\n      '{': '%7B',\n      '}': '%7D'\n    }[ch];\n  });\n  return p.handle + suffix;\n}\n\nfunction getTagObject(tags, item) {\n  if (item instanceof Alias) return Alias;\n\n  if (item.tag) {\n    var match = tags.filter(function (t) {\n      return t.tag === item.tag;\n    });\n    if (match.length > 0) return match.find(function (t) {\n      return t.format === item.format;\n    }) || match[0];\n  }\n\n  var tagObj, obj;\n\n  if (item instanceof Scalar) {\n    obj = item.value; // TODO: deprecate/remove class check\n\n    var _match = tags.filter(function (t) {\n      return t.identify && t.identify(obj) || t.class && obj instanceof t.class;\n    });\n\n    tagObj = _match.find(function (t) {\n      return t.format === item.format;\n    }) || _match.find(function (t) {\n      return !t.format;\n    });\n  } else {\n    obj = item;\n    tagObj = tags.find(function (t) {\n      return t.nodeClass && obj instanceof t.nodeClass;\n    });\n  }\n\n  if (!tagObj) {\n    var name = obj && obj.constructor ? obj.constructor.name : _typeof(obj);\n    throw new Error(\"Tag not resolved for \".concat(name, \" value\"));\n  }\n\n  return tagObj;\n} // needs to be called before value stringifier to allow for circular anchor refs\n\n\nfunction stringifyProps(node, tagObj, _ref) {\n  var anchors = _ref.anchors,\n      doc = _ref.doc;\n  var props = [];\n  var anchor = doc.anchors.getName(node);\n\n  if (anchor) {\n    anchors[anchor] = node;\n    props.push(\"&\".concat(anchor));\n  }\n\n  if (node.tag) {\n    props.push(stringifyTag(doc, node.tag));\n  } else if (!tagObj.default) {\n    props.push(stringifyTag(doc, tagObj.tag));\n  }\n\n  return props.join(' ');\n}\n\nfunction stringify$1(item, ctx, onComment, onChompKeep) {\n  var _ctx$doc = ctx.doc,\n      anchors = _ctx$doc.anchors,\n      schema = _ctx$doc.schema;\n  var tagObj;\n\n  if (!(item instanceof Node)) {\n    var createCtx = {\n      aliasNodes: [],\n      onTagObj: function onTagObj(o) {\n        return tagObj = o;\n      },\n      prevObjects: new Map()\n    };\n    item = schema.createNode(item, true, null, createCtx);\n\n    var _iterator = _createForOfIteratorHelper(createCtx.aliasNodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var alias = _step.value;\n        alias.source = alias.source.node;\n        var name = anchors.getName(alias.source);\n\n        if (!name) {\n          name = anchors.newName();\n          anchors.map[name] = alias.source;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (item instanceof Pair) return item.toString(ctx, onComment, onChompKeep);\n  if (!tagObj) tagObj = getTagObject(schema.tags, item);\n  var props = stringifyProps(item, tagObj, ctx);\n  if (props.length > 0) ctx.indentAtStart = (ctx.indentAtStart || 0) + props.length + 1;\n  var str = typeof tagObj.stringify === 'function' ? tagObj.stringify(item, ctx, onComment, onChompKeep) : item instanceof Scalar ? stringifyString(item, ctx, onComment, onChompKeep) : item.toString(ctx, onComment, onChompKeep);\n  if (!props) return str;\n  return item instanceof Scalar || str[0] === '{' || str[0] === '[' ? \"\".concat(props, \" \").concat(str) : \"\".concat(props, \"\\n\").concat(ctx.indent).concat(str);\n}\n\nvar Anchors = /*#__PURE__*/function () {\n  function Anchors(prefix) {\n    _classCallCheck(this, Anchors);\n\n    _defineProperty(this, \"map\", Object.create(null));\n\n    this.prefix = prefix;\n  }\n\n  _createClass(Anchors, [{\n    key: \"createAlias\",\n    value: function createAlias(node, name) {\n      this.setAnchor(node, name);\n      return new Alias(node);\n    }\n  }, {\n    key: \"createMergePair\",\n    value: function createMergePair() {\n      var _this = this;\n\n      var merge = new Merge();\n\n      for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      merge.value.items = sources.map(function (s) {\n        if (s instanceof Alias) {\n          if (s.source instanceof YAMLMap) return s;\n        } else if (s instanceof YAMLMap) {\n          return _this.createAlias(s);\n        }\n\n        throw new Error('Merge sources must be Map nodes or their Aliases');\n      });\n      return merge;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName(node) {\n      var map = this.map;\n      return Object.keys(map).find(function (a) {\n        return map[a] === node;\n      });\n    }\n  }, {\n    key: \"getNames\",\n    value: function getNames() {\n      return Object.keys(this.map);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(name) {\n      return this.map[name];\n    }\n  }, {\n    key: \"newName\",\n    value: function newName(prefix) {\n      if (!prefix) prefix = this.prefix;\n      var names = Object.keys(this.map);\n\n      for (var i = 1; true; ++i) {\n        var name = \"\".concat(prefix).concat(i);\n        if (!names.includes(name)) return name;\n      }\n    } // During parsing, map & aliases contain CST nodes\n\n  }, {\n    key: \"resolveNodes\",\n    value: function resolveNodes() {\n      var map = this.map,\n          _cstAliases = this._cstAliases;\n      Object.keys(map).forEach(function (a) {\n        map[a] = map[a].resolved;\n      });\n\n      _cstAliases.forEach(function (a) {\n        a.source = a.source.resolved;\n      });\n\n      delete this._cstAliases;\n    }\n  }, {\n    key: \"setAnchor\",\n    value: function setAnchor(node, name) {\n      if (node != null && !Anchors.validAnchorNode(node)) {\n        throw new Error('Anchors may only be set for Scalar, Seq and Map nodes');\n      }\n\n      if (name && /[\\x00-\\x19\\s,[\\]{}]/.test(name)) {\n        throw new Error('Anchor names must not contain whitespace or control characters');\n      }\n\n      var map = this.map;\n      var prev = node && Object.keys(map).find(function (a) {\n        return map[a] === node;\n      });\n\n      if (prev) {\n        if (!name) {\n          return prev;\n        } else if (prev !== name) {\n          delete map[prev];\n          map[name] = node;\n        }\n      } else {\n        if (!name) {\n          if (!node) return null;\n          name = this.newName();\n        }\n\n        map[name] = node;\n      }\n\n      return name;\n    }\n  }], [{\n    key: \"validAnchorNode\",\n    value: function validAnchorNode(node) {\n      return node instanceof Scalar || node instanceof YAMLSeq || node instanceof YAMLMap;\n    }\n  }]);\n\n  return Anchors;\n}();\n\nvar visit = function visit(node, tags) {\n  if (node && _typeof(node) === 'object') {\n    var tag = node.tag;\n\n    if (node instanceof Collection) {\n      if (tag) tags[tag] = true;\n      node.items.forEach(function (n) {\n        return visit(n, tags);\n      });\n    } else if (node instanceof Pair) {\n      visit(node.key, tags);\n      visit(node.value, tags);\n    } else if (node instanceof Scalar) {\n      if (tag) tags[tag] = true;\n    }\n  }\n\n  return tags;\n};\n\nvar listTagNames = function listTagNames(node) {\n  return Object.keys(visit(node, {}));\n};\n\nfunction parseContents(doc, contents) {\n  var comments = {\n    before: [],\n    after: []\n  };\n  var body = undefined;\n  var spaceBefore = false;\n\n  var _iterator = _createForOfIteratorHelper(contents),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var node = _step.value;\n\n      if (node.valueRange) {\n        if (body !== undefined) {\n          var msg = 'Document contains trailing content not separated by a ... or --- line';\n          doc.errors.push(new YAMLSyntaxError(node, msg));\n          break;\n        }\n\n        var res = resolveNode(doc, node);\n\n        if (spaceBefore) {\n          res.spaceBefore = true;\n          spaceBefore = false;\n        }\n\n        body = res;\n      } else if (node.comment !== null) {\n        var cc = body === undefined ? comments.before : comments.after;\n        cc.push(node.comment);\n      } else if (node.type === Type.BLANK_LINE) {\n        spaceBefore = true;\n\n        if (body === undefined && comments.before.length > 0 && !doc.commentBefore) {\n          // space-separated comments at start are parsed as document comments\n          doc.commentBefore = comments.before.join('\\n');\n          comments.before = [];\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  doc.contents = body || null;\n\n  if (!body) {\n    doc.comment = comments.before.concat(comments.after).join('\\n') || null;\n  } else {\n    var cb = comments.before.join('\\n');\n\n    if (cb) {\n      var cbNode = body instanceof Collection && body.items[0] ? body.items[0] : body;\n      cbNode.commentBefore = cbNode.commentBefore ? \"\".concat(cb, \"\\n\").concat(cbNode.commentBefore) : cb;\n    }\n\n    doc.comment = comments.after.join('\\n') || null;\n  }\n}\n\nfunction resolveTagDirective(_ref, directive) {\n  var tagPrefixes = _ref.tagPrefixes;\n\n  var _directive$parameters = _slicedToArray(directive.parameters, 2),\n      handle = _directive$parameters[0],\n      prefix = _directive$parameters[1];\n\n  if (!handle || !prefix) {\n    var msg = 'Insufficient parameters given for %TAG directive';\n    throw new YAMLSemanticError(directive, msg);\n  }\n\n  if (tagPrefixes.some(function (p) {\n    return p.handle === handle;\n  })) {\n    var _msg = 'The %TAG directive must only be given at most once per handle in the same document.';\n    throw new YAMLSemanticError(directive, _msg);\n  }\n\n  return {\n    handle: handle,\n    prefix: prefix\n  };\n}\n\nfunction resolveYamlDirective(doc, directive) {\n  var _directive$parameters2 = _slicedToArray(directive.parameters, 1),\n      version = _directive$parameters2[0];\n\n  if (directive.name === 'YAML:1.0') version = '1.0';\n\n  if (!version) {\n    var msg = 'Insufficient parameters given for %YAML directive';\n    throw new YAMLSemanticError(directive, msg);\n  }\n\n  if (!documentOptions[version]) {\n    var v0 = doc.version || doc.options.version;\n\n    var _msg2 = \"Document will be parsed as YAML \".concat(v0, \" rather than YAML \").concat(version);\n\n    doc.warnings.push(new YAMLWarning(directive, _msg2));\n  }\n\n  return version;\n}\n\nfunction parseDirectives(doc, directives, prevDoc) {\n  var directiveComments = [];\n  var hasDirectives = false;\n\n  var _iterator = _createForOfIteratorHelper(directives),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var directive = _step.value;\n      var comment = directive.comment,\n          name = directive.name;\n\n      switch (name) {\n        case 'TAG':\n          try {\n            doc.tagPrefixes.push(resolveTagDirective(doc, directive));\n          } catch (error) {\n            doc.errors.push(error);\n          }\n\n          hasDirectives = true;\n          break;\n\n        case 'YAML':\n        case 'YAML:1.0':\n          if (doc.version) {\n            var msg = 'The %YAML directive must only be given at most once per document.';\n            doc.errors.push(new YAMLSemanticError(directive, msg));\n          }\n\n          try {\n            doc.version = resolveYamlDirective(doc, directive);\n          } catch (error) {\n            doc.errors.push(error);\n          }\n\n          hasDirectives = true;\n          break;\n\n        default:\n          if (name) {\n            var _msg3 = \"YAML only supports %TAG and %YAML directives, and not %\".concat(name);\n\n            doc.warnings.push(new YAMLWarning(directive, _msg3));\n          }\n\n      }\n\n      if (comment) directiveComments.push(comment);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (prevDoc && !hasDirectives && '1.1' === (doc.version || prevDoc.version || doc.options.version)) {\n    var copyTagPrefix = function copyTagPrefix(_ref2) {\n      var handle = _ref2.handle,\n          prefix = _ref2.prefix;\n      return {\n        handle: handle,\n        prefix: prefix\n      };\n    };\n\n    doc.tagPrefixes = prevDoc.tagPrefixes.map(copyTagPrefix);\n    doc.version = prevDoc.version;\n  }\n\n  doc.commentBefore = directiveComments.join('\\n') || null;\n}\n\nfunction assertCollection(contents) {\n  if (contents instanceof Collection) return true;\n  throw new Error('Expected a YAML collection as document contents');\n}\n\nvar Document$1 = /*#__PURE__*/function () {\n  function Document(options) {\n    _classCallCheck(this, Document);\n\n    this.anchors = new Anchors(options.anchorPrefix);\n    this.commentBefore = null;\n    this.comment = null;\n    this.contents = null;\n    this.directivesEndMarker = null;\n    this.errors = [];\n    this.options = options;\n    this.schema = null;\n    this.tagPrefixes = [];\n    this.version = null;\n    this.warnings = [];\n  }\n\n  _createClass(Document, [{\n    key: \"add\",\n    value: function add(value) {\n      assertCollection(this.contents);\n      return this.contents.add(value);\n    }\n  }, {\n    key: \"addIn\",\n    value: function addIn(path, value) {\n      assertCollection(this.contents);\n      this.contents.addIn(path, value);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      assertCollection(this.contents);\n      return this.contents.delete(key);\n    }\n  }, {\n    key: \"deleteIn\",\n    value: function deleteIn(path) {\n      if (isEmptyPath(path)) {\n        if (this.contents == null) return false;\n        this.contents = null;\n        return true;\n      }\n\n      assertCollection(this.contents);\n      return this.contents.deleteIn(path);\n    }\n  }, {\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Document.defaults[this.version] || Document.defaults[this.options.version] || {};\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, keepScalar) {\n      return this.contents instanceof Collection ? this.contents.get(key, keepScalar) : undefined;\n    }\n  }, {\n    key: \"getIn\",\n    value: function getIn(path, keepScalar) {\n      if (isEmptyPath(path)) return !keepScalar && this.contents instanceof Scalar ? this.contents.value : this.contents;\n      return this.contents instanceof Collection ? this.contents.getIn(path, keepScalar) : undefined;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return this.contents instanceof Collection ? this.contents.has(key) : false;\n    }\n  }, {\n    key: \"hasIn\",\n    value: function hasIn(path) {\n      if (isEmptyPath(path)) return this.contents !== undefined;\n      return this.contents instanceof Collection ? this.contents.hasIn(path) : false;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      assertCollection(this.contents);\n      this.contents.set(key, value);\n    }\n  }, {\n    key: \"setIn\",\n    value: function setIn(path, value) {\n      if (isEmptyPath(path)) this.contents = value;else {\n        assertCollection(this.contents);\n        this.contents.setIn(path, value);\n      }\n    }\n  }, {\n    key: \"setSchema\",\n    value: function setSchema(id, customTags) {\n      if (!id && !customTags && this.schema) return;\n      if (typeof id === 'number') id = id.toFixed(1);\n\n      if (id === '1.0' || id === '1.1' || id === '1.2') {\n        if (this.version) this.version = id;else this.options.version = id;\n        delete this.options.schema;\n      } else if (id && typeof id === 'string') {\n        this.options.schema = id;\n      }\n\n      if (Array.isArray(customTags)) this.options.customTags = customTags;\n      var opt = Object.assign({}, this.getDefaults(), this.options);\n      this.schema = new Schema(opt);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(node, prevDoc) {\n      if (this.options.keepCstNodes) this.cstNode = node;\n      if (this.options.keepNodeTypes) this.type = 'DOCUMENT';\n      var _node$directives = node.directives,\n          directives = _node$directives === void 0 ? [] : _node$directives,\n          _node$contents = node.contents,\n          contents = _node$contents === void 0 ? [] : _node$contents,\n          directivesEndMarker = node.directivesEndMarker,\n          error = node.error,\n          valueRange = node.valueRange;\n\n      if (error) {\n        if (!error.source) error.source = this;\n        this.errors.push(error);\n      }\n\n      parseDirectives(this, directives, prevDoc);\n      if (directivesEndMarker) this.directivesEndMarker = true;\n      this.range = valueRange ? [valueRange.start, valueRange.end] : null;\n      this.setSchema();\n      this.anchors._cstAliases = [];\n      parseContents(this, contents);\n      this.anchors.resolveNodes();\n\n      if (this.options.prettyErrors) {\n        var _iterator = _createForOfIteratorHelper(this.errors),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _error = _step.value;\n            if (_error instanceof YAMLError) _error.makePretty();\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var _iterator2 = _createForOfIteratorHelper(this.warnings),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var warn = _step2.value;\n            if (warn instanceof YAMLError) warn.makePretty();\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"listNonDefaultTags\",\n    value: function listNonDefaultTags() {\n      return listTagNames(this.contents).filter(function (t) {\n        return t.indexOf(Schema.defaultPrefix) !== 0;\n      });\n    }\n  }, {\n    key: \"setTagPrefix\",\n    value: function setTagPrefix(handle, prefix) {\n      if (handle[0] !== '!' || handle[handle.length - 1] !== '!') throw new Error('Handle must start and end with !');\n\n      if (prefix) {\n        var prev = this.tagPrefixes.find(function (p) {\n          return p.handle === handle;\n        });\n        if (prev) prev.prefix = prefix;else this.tagPrefixes.push({\n          handle: handle,\n          prefix: prefix\n        });\n      } else {\n        this.tagPrefixes = this.tagPrefixes.filter(function (p) {\n          return p.handle !== handle;\n        });\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON$1(arg, onAnchor) {\n      var _this = this;\n\n      var _this$options = this.options,\n          keepBlobsInJSON = _this$options.keepBlobsInJSON,\n          mapAsMap = _this$options.mapAsMap,\n          maxAliasCount = _this$options.maxAliasCount;\n      var keep = keepBlobsInJSON && (typeof arg !== 'string' || !(this.contents instanceof Scalar));\n      var ctx = {\n        doc: this,\n        indentStep: '  ',\n        keep: keep,\n        mapAsMap: keep && !!mapAsMap,\n        maxAliasCount: maxAliasCount,\n        stringify: stringify$1 // Requiring directly in Pair would create circular dependencies\n\n      };\n      var anchorNames = Object.keys(this.anchors.map);\n      if (anchorNames.length > 0) ctx.anchors = new Map(anchorNames.map(function (name) {\n        return [_this.anchors.map[name], {\n          alias: [],\n          aliasCount: 0,\n          count: 1\n        }];\n      }));\n\n      var res = toJSON(this.contents, arg, ctx);\n\n      if (typeof onAnchor === 'function' && ctx.anchors) {\n        var _iterator3 = _createForOfIteratorHelper(ctx.anchors.values()),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _step3$value = _step3.value,\n                count = _step3$value.count,\n                _res = _step3$value.res;\n            onAnchor(_res, count);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.errors.length > 0) throw new Error('Document with errors cannot be stringified');\n      var indentSize = this.options.indent;\n\n      if (!Number.isInteger(indentSize) || indentSize <= 0) {\n        var s = JSON.stringify(indentSize);\n        throw new Error(\"\\\"indent\\\" option must be a positive integer, not \".concat(s));\n      }\n\n      this.setSchema();\n      var lines = [];\n      var hasDirectives = false;\n\n      if (this.version) {\n        var vd = '%YAML 1.2';\n\n        if (this.schema.name === 'yaml-1.1') {\n          if (this.version === '1.0') vd = '%YAML:1.0';else if (this.version === '1.1') vd = '%YAML 1.1';\n        }\n\n        lines.push(vd);\n        hasDirectives = true;\n      }\n\n      var tagNames = this.listNonDefaultTags();\n      this.tagPrefixes.forEach(function (_ref) {\n        var handle = _ref.handle,\n            prefix = _ref.prefix;\n\n        if (tagNames.some(function (t) {\n          return t.indexOf(prefix) === 0;\n        })) {\n          lines.push(\"%TAG \".concat(handle, \" \").concat(prefix));\n          hasDirectives = true;\n        }\n      });\n      if (hasDirectives || this.directivesEndMarker) lines.push('---');\n\n      if (this.commentBefore) {\n        if (hasDirectives || !this.directivesEndMarker) lines.unshift('');\n        lines.unshift(this.commentBefore.replace(/^/gm, '#'));\n      }\n\n      var ctx = {\n        anchors: Object.create(null),\n        doc: this,\n        indent: '',\n        indentStep: ' '.repeat(indentSize),\n        stringify: stringify$1 // Requiring directly in nodes would create circular dependencies\n\n      };\n      var chompKeep = false;\n      var contentComment = null;\n\n      if (this.contents) {\n        if (this.contents instanceof Node) {\n          if (this.contents.spaceBefore && (hasDirectives || this.directivesEndMarker)) lines.push('');\n          if (this.contents.commentBefore) lines.push(this.contents.commentBefore.replace(/^/gm, '#')); // top-level block scalars need to be indented if followed by a comment\n\n          ctx.forceBlockIndent = !!this.comment;\n          contentComment = this.contents.comment;\n        }\n\n        var onChompKeep = contentComment ? null : function () {\n          return chompKeep = true;\n        };\n        var body = stringify$1(this.contents, ctx, function () {\n          return contentComment = null;\n        }, onChompKeep);\n        lines.push(addComment(body, '', contentComment));\n      } else if (this.contents !== undefined) {\n        lines.push(stringify$1(this.contents, ctx));\n      }\n\n      if (this.comment) {\n        if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '') lines.push('');\n        lines.push(this.comment.replace(/^/gm, '#'));\n      }\n\n      return lines.join('\\n') + '\\n';\n    }\n  }]);\n\n  return Document;\n}();\n\n_defineProperty(Document$1, \"defaults\", documentOptions);\n\nfunction createNode(value) {\n  var wrapScalars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var tag = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (tag === undefined && typeof wrapScalars === 'string') {\n    tag = wrapScalars;\n    wrapScalars = true;\n  }\n\n  var options = Object.assign({}, Document$1.defaults[defaultOptions.version], defaultOptions);\n  var schema = new Schema(options);\n  return schema.createNode(value, wrapScalars, tag);\n}\n\nvar Document = /*#__PURE__*/function (_YAMLDocument) {\n  _inherits(Document, _YAMLDocument);\n\n  var _super = _createSuper(Document);\n\n  function Document(options) {\n    _classCallCheck(this, Document);\n\n    return _super.call(this, Object.assign({}, defaultOptions, options));\n  }\n\n  return Document;\n}(Document$1);\n\nfunction parseAllDocuments(src, options) {\n  var stream = [];\n  var prev;\n\n  var _iterator = _createForOfIteratorHelper(parse$1(src)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var cstDoc = _step.value;\n      var doc = new Document(options);\n      doc.parse(cstDoc, prev);\n      stream.push(doc);\n      prev = doc;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return stream;\n}\n\nfunction parseDocument(src, options) {\n  var cst = parse$1(src);\n  var doc = new Document(options).parse(cst[0]);\n\n  if (cst.length > 1) {\n    var errMsg = 'Source contains multiple documents; please use YAML.parseAllDocuments()';\n    doc.errors.unshift(new YAMLSemanticError(cst[1], errMsg));\n  }\n\n  return doc;\n}\n\nfunction parse(src, options) {\n  var doc = parseDocument(src, options);\n  doc.warnings.forEach(function (warning) {\n    return warn(warning);\n  });\n  if (doc.errors.length > 0) throw doc.errors[0];\n  return doc.toJSON();\n}\n\nfunction stringify(value, options) {\n  var doc = new Document(options);\n  doc.contents = value;\n  return String(doc);\n}\n\nvar YAML = {\n  createNode: createNode,\n  defaultOptions: defaultOptions,\n  Document: Document,\n  parse: parse,\n  parseAllDocuments: parseAllDocuments,\n  parseCST: parse$1,\n  parseDocument: parseDocument,\n  scalarOptions: scalarOptions,\n  stringify: stringify\n};\n\nexport { YAML };\n", "module.exports = require('./dist').YAML\n", "/* eslint-disable @typescript-eslint/no-require-imports */\n\nimport parseJsonType from 'parse-json';\nimport yamlType from 'yaml';\nimport importFreshType from 'import-fresh';\nimport { LoaderSync } from './index';\nimport { LoadersSync } from './types';\n\nlet importFresh: typeof importFreshType;\nconst loadJs: LoaderSync = function loadJs(filepath) {\n  if (importFresh === undefined) {\n    importFresh = require('import-fresh');\n  }\n\n  const result = importFresh(filepath);\n  return result;\n};\n\nlet parseJson: typeof parseJsonType;\nconst loadJson: LoaderSync = function loadJson(filepath, content) {\n  if (parseJson === undefined) {\n    parseJson = require('parse-json');\n  }\n\n  try {\n    const result = parseJson(content);\n    return result;\n  } catch (error) {\n    error.message = `JSON Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nlet yaml: typeof yamlType;\nconst loadYaml: LoaderSync = function loadYaml(filepath, content) {\n  if (yaml === undefined) {\n    yaml = require('yaml');\n  }\n\n  try {\n    const result = yaml.parse(content, { prettyErrors: true });\n    return result;\n  } catch (error) {\n    error.message = `YAML Error in ${filepath}:\\n${error.message}`;\n    throw error;\n  }\n};\n\nconst loaders: LoadersSync = { loadJs, loadJson, loadYaml };\n\nexport { loaders };\n", "// Resolves property names or property paths defined with period-delimited\n// strings or arrays of strings. Property names that are found on the source\n// object are used directly (even if they include a period).\n// Nested property names that include periods, within a path, are only\n// understood in array paths.\nfunction getPropertyByPath(\n  source: { [key: string]: unknown },\n  path: string | Array<string>,\n): unknown {\n  if (\n    typeof path === 'string' &&\n    Object.prototype.hasOwnProperty.call(source, path)\n  ) {\n    return source[path];\n  }\n\n  const parsedPath = typeof path === 'string' ? path.split('.') : path;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return parsedPath.reduce((previous: any, key): unknown => {\n    if (previous === undefined) {\n      return previous;\n    }\n    return previous[key];\n  }, source);\n}\n\nexport { getPropertyByPath };\n", "import path from 'path';\nimport { loaders } from './loaders';\nimport { getPropertyByPath } from './getPropertyByPath';\nimport {\n  CosmiconfigResult,\n  ExplorerOptions,\n  ExplorerOptionsSync,\n  Cache,\n  LoadedFileContent,\n} from './types';\nimport { Loader } from './index';\n\nclass ExplorerBase<T extends ExplorerOptions | ExplorerOptionsSync> {\n  protected readonly loadCache?: Cache;\n  protected readonly searchCache?: Cache;\n  protected readonly config: T;\n\n  public constructor(options: T) {\n    if (options.cache === true) {\n      this.loadCache = new Map();\n      this.searchCache = new Map();\n    }\n\n    this.config = options;\n    this.validateConfig();\n  }\n\n  public clearLoadCache(): void {\n    if (this.loadCache) {\n      this.loadCache.clear();\n    }\n  }\n\n  public clearSearchCache(): void {\n    if (this.searchCache) {\n      this.searchCache.clear();\n    }\n  }\n\n  public clearCaches(): void {\n    this.clearLoadCache();\n    this.clearSearchCache();\n  }\n\n  private validateConfig(): void {\n    const config = this.config;\n\n    config.searchPlaces.forEach((place): void => {\n      const loaderKey = path.extname(place) || 'noExt';\n      const loader = config.loaders[loaderKey];\n      if (!loader) {\n        throw new Error(\n          `No loader specified for ${getExtensionDescription(\n            place,\n          )}, so searchPlaces item \"${place}\" is invalid`,\n        );\n      }\n\n      if (typeof loader !== 'function') {\n        throw new Error(\n          `loader for ${getExtensionDescription(\n            place,\n          )} is not a function (type provided: \"${typeof loader}\"), so searchPlaces item \"${place}\" is invalid`,\n        );\n      }\n    });\n  }\n\n  protected shouldSearchStopWithResult(result: CosmiconfigResult): boolean {\n    if (result === null) return false;\n    if (result.isEmpty && this.config.ignoreEmptySearchPlaces) return false;\n    return true;\n  }\n\n  protected nextDirectoryToSearch(\n    currentDir: string,\n    currentResult: CosmiconfigResult,\n  ): string | null {\n    if (this.shouldSearchStopWithResult(currentResult)) {\n      return null;\n    }\n    const nextDir = nextDirUp(currentDir);\n    if (nextDir === currentDir || currentDir === this.config.stopDir) {\n      return null;\n    }\n    return nextDir;\n  }\n\n  private loadPackageProp(filepath: string, content: string): unknown {\n    const parsedContent = loaders.loadJson(filepath, content);\n    const packagePropValue = getPropertyByPath(\n      parsedContent,\n      this.config.packageProp,\n    );\n    return packagePropValue || null;\n  }\n\n  protected getLoaderEntryForFile(filepath: string): Loader {\n    if (path.basename(filepath) === 'package.json') {\n      const loader = this.loadPackageProp.bind(this);\n      return loader;\n    }\n\n    const loaderKey = path.extname(filepath) || 'noExt';\n\n    const loader = this.config.loaders[loaderKey];\n\n    if (!loader) {\n      throw new Error(\n        `No loader specified for ${getExtensionDescription(filepath)}`,\n      );\n    }\n\n    return loader;\n  }\n\n  protected loadedContentToCosmiconfigResult(\n    filepath: string,\n    loadedContent: LoadedFileContent,\n  ): CosmiconfigResult {\n    if (loadedContent === null) {\n      return null;\n    }\n    if (loadedContent === undefined) {\n      return { filepath, config: undefined, isEmpty: true };\n    }\n    return { config: loadedContent, filepath };\n  }\n\n  protected validateFilePath(filepath: string): void {\n    if (!filepath) {\n      throw new Error('load must pass a non-empty string');\n    }\n  }\n}\n\nfunction nextDirUp(dir: string): string {\n  return path.dirname(dir);\n}\n\nfunction getExtensionDescription(filepath: string): string {\n  const ext = path.extname(filepath);\n  return ext ? `extension \"${ext}\"` : 'files without extensions';\n}\n\nexport { ExplorerBase, getExtensionDescription };\n", "import fs from 'fs';\n\nasync function fsReadFileAsync(\n  pathname: string,\n  encoding: BufferEncoding,\n): Promise<string> {\n  return new Promise((resolve, reject): void => {\n    fs.readFile(pathname, encoding, (error, contents): void => {\n      if (error) {\n        reject(error);\n        return;\n      }\n\n      resolve(contents);\n    });\n  });\n}\n\ninterface Options {\n  throwNotFound?: boolean;\n}\n\nasync function readFile(\n  filepath: string,\n  options: Options = {},\n): Promise<string | null> {\n  const throwNotFound = options.throwNotFound === true;\n\n  try {\n    const content = await fsReadFileAsync(filepath, 'utf8');\n\n    return content;\n  } catch (error) {\n    if (\n      throwNotFound === false &&\n      (error.code === 'ENOENT' || error.code === 'EISDIR')\n    ) {\n      return null;\n    }\n\n    throw error;\n  }\n}\n\nfunction readFileSync(filepath: string, options: Options = {}): string | null {\n  const throwNotFound = options.throwNotFound === true;\n\n  try {\n    const content = fs.readFileSync(filepath, 'utf8');\n\n    return content;\n  } catch (error) {\n    if (\n      throwNotFound === false &&\n      (error.code === 'ENOENT' || error.code === 'EISDIR')\n    ) {\n      return null;\n    }\n\n    throw error;\n  }\n}\n\nexport { readFile, readFileSync };\n", "import { Cache, CosmiconfigResult } from './types';\n\nasync function cacheWrapper(\n  cache: Cache,\n  key: string,\n  fn: () => Promise<CosmiconfigResult>,\n): Promise<CosmiconfigResult> {\n  const cached = cache.get(key);\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  const result = await fn();\n  cache.set(key, result);\n  return result;\n}\n\nfunction cacheWrapperSync(\n  cache: Cache,\n  key: string,\n  fn: () => CosmiconfigResult,\n): CosmiconfigResult {\n  const cached = cache.get(key);\n  if (cached !== undefined) {\n    return cached;\n  }\n\n  const result = fn();\n  cache.set(key, result);\n  return result;\n}\n\nexport { cacheWrapper, cacheWrapperSync };\n", "'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\n\nasync function isType(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\tconst stats = await promisify(fs[fsStatType])(filePath);\n\t\treturn stats[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nfunction isTypeSync(fsStatType, statsMethodName, filePath) {\n\tif (typeof filePath !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof filePath}`);\n\t}\n\n\ttry {\n\t\treturn fs[fsStatType](filePath)[statsMethodName]();\n\t} catch (error) {\n\t\tif (error.code === 'ENOENT') {\n\t\t\treturn false;\n\t\t}\n\n\t\tthrow error;\n\t}\n}\n\nexports.isFile = isType.bind(null, 'stat', 'isFile');\nexports.isDirectory = isType.bind(null, 'stat', 'isDirectory');\nexports.isSymlink = isType.bind(null, 'lstat', 'isSymbolicLink');\nexports.isFileSync = isTypeSync.bind(null, 'statSync', 'isFile');\nexports.isDirectorySync = isTypeSync.bind(null, 'statSync', 'isDirectory');\nexports.isSymlinkSync = isTypeSync.bind(null, 'lstatSync', 'isSymbolicLink');\n", "import path from 'path';\nimport { isDirectory, isDirectorySync } from 'path-type';\n\nasync function getDirectory(filepath: string): Promise<string> {\n  const filePathIsDirectory = await isDirectory(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nfunction getDirectorySync(filepath: string): string {\n  const filePathIsDirectory = isDirectorySync(filepath);\n\n  if (filePathIsDirectory === true) {\n    return filepath;\n  }\n\n  const directory = path.dirname(filepath);\n\n  return directory;\n}\n\nexport { getDirectory, getDirectorySync };\n", "import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFile } from './readFile';\nimport { cacheWrapper } from './cacheWrapper';\nimport { getDirectory } from './getDirectory';\nimport { CosmiconfigResult, ExplorerOptions, LoadedFileContent } from './types';\n\nclass Explorer extends ExplorerBase<ExplorerOptions> {\n  public constructor(options: ExplorerOptions) {\n    super(options);\n  }\n\n  public async search(\n    searchFrom: string = process.cwd(),\n  ): Promise<CosmiconfigResult> {\n    const startDirectory = await getDirectory(searchFrom);\n    const result = await this.searchFromDirectory(startDirectory);\n\n    return result;\n  }\n\n  private async searchFromDirectory(dir: string): Promise<CosmiconfigResult> {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = async (): Promise<CosmiconfigResult> => {\n      const result = await this.searchDirectory(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectory(nextDir);\n      }\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapper(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private async searchDirectory(dir: string): Promise<CosmiconfigResult> {\n    for await (const place of this.config.searchPlaces) {\n      const placeResult = await this.loadSearchPlace(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private async loadSearchPlace(\n    dir: string,\n    place: string,\n  ): Promise<CosmiconfigResult> {\n    const filepath = path.join(dir, place);\n    const fileContents = await readFile(filepath);\n\n    const result = await this.createCosmiconfigResult(filepath, fileContents);\n\n    return result;\n  }\n\n  private async loadFileContent(\n    filepath: string,\n    content: string | null,\n  ): Promise<LoadedFileContent> {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = await loader(filepath, content);\n    return loaderResult;\n  }\n\n  private async createCosmiconfigResult(\n    filepath: string,\n    content: string | null,\n  ): Promise<CosmiconfigResult> {\n    const fileContent = await this.loadFileContent(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public async load(filepath: string): Promise<CosmiconfigResult> {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoad = async (): Promise<CosmiconfigResult> => {\n      const fileContents = await readFile(absoluteFilePath, {\n        throwNotFound: true,\n      });\n\n      const result = await this.createCosmiconfigResult(\n        absoluteFilePath,\n        fileContents,\n      );\n\n      const transformResult = await this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapper(this.loadCache, absoluteFilePath, runLoad);\n    }\n\n    return runLoad();\n  }\n}\n\nexport { Explorer };\n", "import path from 'path';\nimport { ExplorerBase } from './ExplorerBase';\nimport { readFileSync } from './readFile';\nimport { cacheWrapperSync } from './cacheWrapper';\nimport { getDirectorySync } from './getDirectory';\nimport {\n  CosmiconfigResult,\n  ExplorerOptionsSync,\n  LoadedFileContent,\n} from './types';\n\nclass ExplorerSync extends ExplorerBase<ExplorerOptionsSync> {\n  public constructor(options: ExplorerOptionsSync) {\n    super(options);\n  }\n\n  public searchSync(searchFrom: string = process.cwd()): CosmiconfigResult {\n    const startDirectory = getDirectorySync(searchFrom);\n    const result = this.searchFromDirectorySync(startDirectory);\n\n    return result;\n  }\n\n  private searchFromDirectorySync(dir: string): CosmiconfigResult {\n    const absoluteDir = path.resolve(process.cwd(), dir);\n\n    const run = (): CosmiconfigResult => {\n      const result = this.searchDirectorySync(absoluteDir);\n      const nextDir = this.nextDirectoryToSearch(absoluteDir, result);\n\n      if (nextDir) {\n        return this.searchFromDirectorySync(nextDir);\n      }\n\n      const transformResult = this.config.transform(result);\n\n      return transformResult;\n    };\n\n    if (this.searchCache) {\n      return cacheWrapperSync(this.searchCache, absoluteDir, run);\n    }\n\n    return run();\n  }\n\n  private searchDirectorySync(dir: string): CosmiconfigResult {\n    for (const place of this.config.searchPlaces) {\n      const placeResult = this.loadSearchPlaceSync(dir, place);\n\n      if (this.shouldSearchStopWithResult(placeResult) === true) {\n        return placeResult;\n      }\n    }\n\n    // config not found\n    return null;\n  }\n\n  private loadSearchPlaceSync(dir: string, place: string): CosmiconfigResult {\n    const filepath = path.join(dir, place);\n    const content = readFileSync(filepath);\n\n    const result = this.createCosmiconfigResultSync(filepath, content);\n\n    return result;\n  }\n\n  private loadFileContentSync(\n    filepath: string,\n    content: string | null,\n  ): LoadedFileContent {\n    if (content === null) {\n      return null;\n    }\n    if (content.trim() === '') {\n      return undefined;\n    }\n    const loader = this.getLoaderEntryForFile(filepath);\n    const loaderResult = loader(filepath, content);\n\n    return loaderResult;\n  }\n\n  private createCosmiconfigResultSync(\n    filepath: string,\n    content: string | null,\n  ): CosmiconfigResult {\n    const fileContent = this.loadFileContentSync(filepath, content);\n    const result = this.loadedContentToCosmiconfigResult(filepath, fileContent);\n\n    return result;\n  }\n\n  public loadSync(filepath: string): CosmiconfigResult {\n    this.validateFilePath(filepath);\n    const absoluteFilePath = path.resolve(process.cwd(), filepath);\n\n    const runLoadSync = (): CosmiconfigResult => {\n      const content = readFileSync(absoluteFilePath, { throwNotFound: true });\n      const cosmiconfigResult = this.createCosmiconfigResultSync(\n        absoluteFilePath,\n        content,\n      );\n\n      const transformResult = this.config.transform(cosmiconfigResult);\n\n      return transformResult;\n    };\n\n    if (this.loadCache) {\n      return cacheWrapperSync(this.loadCache, absoluteFilePath, runLoadSync);\n    }\n\n    return runLoadSync();\n  }\n}\n\nexport { ExplorerSync };\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n//# sourceMappingURL=types.js.map", "/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport os from 'os';\nimport { Explorer } from './Explorer';\nimport { ExplorerSync } from './ExplorerSync';\nimport { loaders } from './loaders';\nimport {\n  Config,\n  CosmiconfigResult,\n  ExplorerOptions,\n  ExplorerOptionsSync,\n  Loaders,\n  LoadersSync,\n} from './types';\n\ntype LoaderResult = Config | null;\nexport type Loader =\n  | ((filepath: string, content: string) => Promise<LoaderResult>)\n  | LoaderSync;\nexport type LoaderSync = (filepath: string, content: string) => LoaderResult;\n\nexport type Transform =\n  | ((CosmiconfigResult: CosmiconfigResult) => Promise<CosmiconfigResult>)\n  | TransformSync;\n\nexport type TransformSync = (\n  CosmiconfigResult: CosmiconfigResult,\n) => CosmiconfigResult;\n\ninterface OptionsBase {\n  packageProp?: string | Array<string>;\n  searchPlaces?: Array<string>;\n  ignoreEmptySearchPlaces?: boolean;\n  stopDir?: string;\n  cache?: boolean;\n}\n\nexport interface Options extends OptionsBase {\n  loaders?: Loaders;\n  transform?: Transform;\n}\n\nexport interface OptionsSync extends OptionsBase {\n  loaders?: LoadersSync;\n  transform?: TransformSync;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfig(moduleName: string, options: Options = {}) {\n  const normalizedOptions: ExplorerOptions = normalizeOptions(\n    moduleName,\n    options,\n  );\n\n  const explorer = new Explorer(normalizedOptions);\n\n  return {\n    search: explorer.search.bind(explorer),\n    load: explorer.load.bind(explorer),\n    clearLoadCache: explorer.clearLoadCache.bind(explorer),\n    clearSearchCache: explorer.clearSearchCache.bind(explorer),\n    clearCaches: explorer.clearCaches.bind(explorer),\n  } as const;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction cosmiconfigSync(moduleName: string, options: OptionsSync = {}) {\n  const normalizedOptions: ExplorerOptionsSync = normalizeOptions(\n    moduleName,\n    options,\n  );\n\n  const explorerSync = new ExplorerSync(normalizedOptions);\n\n  return {\n    search: explorerSync.searchSync.bind(explorerSync),\n    load: explorerSync.loadSync.bind(explorerSync),\n    clearLoadCache: explorerSync.clearLoadCache.bind(explorerSync),\n    clearSearchCache: explorerSync.clearSearchCache.bind(explorerSync),\n    clearCaches: explorerSync.clearCaches.bind(explorerSync),\n  } as const;\n}\n\n// do not allow mutation of default loaders. Make sure it is set inside options\nconst defaultLoaders = Object.freeze({\n  '.cjs': loaders.loadJs,\n  '.js': loaders.loadJs,\n  '.json': loaders.loadJson,\n  '.yaml': loaders.loadYaml,\n  '.yml': loaders.loadYaml,\n  noExt: loaders.loadYaml,\n} as const);\n\nconst identity: TransformSync = function identity(x) {\n  return x;\n};\n\nfunction normalizeOptions(\n  moduleName: string,\n  options: OptionsSync,\n): ExplorerOptionsSync;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options,\n): ExplorerOptions;\nfunction normalizeOptions(\n  moduleName: string,\n  options: Options | OptionsSync,\n): ExplorerOptions | ExplorerOptionsSync {\n  const defaults: ExplorerOptions | ExplorerOptionsSync = {\n    packageProp: moduleName,\n    searchPlaces: [\n      'package.json',\n      `.${moduleName}rc`,\n      `.${moduleName}rc.json`,\n      `.${moduleName}rc.yaml`,\n      `.${moduleName}rc.yml`,\n      `.${moduleName}rc.js`,\n      `.${moduleName}rc.cjs`,\n      `.config/${moduleName}rc`,\n      `.config/${moduleName}rc.json`,\n      `.config/${moduleName}rc.yaml`,\n      `.config/${moduleName}rc.yml`,\n      `.config/${moduleName}rc.js`,\n      `.config/${moduleName}rc.cjs`,\n      `${moduleName}.config.js`,\n      `${moduleName}.config.cjs`,\n    ],\n    ignoreEmptySearchPlaces: true,\n    stopDir: os.homedir(),\n    cache: true,\n    transform: identity,\n    loaders: defaultLoaders,\n  };\n\n  const normalizedOptions: ExplorerOptions | ExplorerOptionsSync = {\n    ...defaults,\n    ...options,\n    loaders: {\n      ...defaults.loaders,\n      ...options.loaders,\n    },\n  };\n\n  return normalizedOptions;\n}\n\nexport { cosmiconfig, cosmiconfigSync, defaultLoaders };\n", "\"use strict\";\n\nconst p = require('path');\n\nconst resolve = require('resolve'); // const printAST = require('ast-pretty-print')\n\n\nconst macrosRegex = /[./]macro(\\.c?js)?$/;\n\nconst testMacrosRegex = v => macrosRegex.test(v); // https://stackoverflow.com/a/32749533/971592\n\n\nclass MacroError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'MacroError';\n    /* istanbul ignore else */\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else if (!this.stack) {\n      this.stack = new Error(message).stack;\n    }\n  }\n\n}\n\nlet _configExplorer = null;\n\nfunction getConfigExplorer() {\n  return _configExplorer = _configExplorer || // Lazy load cosmiconfig since it is a relatively large bundle\n  require('cosmiconfig').cosmiconfigSync('babel-plugin-macros', {\n    searchPlaces: ['package.json', '.babel-plugin-macrosrc', '.babel-plugin-macrosrc.json', '.babel-plugin-macrosrc.yaml', '.babel-plugin-macrosrc.yml', '.babel-plugin-macrosrc.js', 'babel-plugin-macros.config.js'],\n    packageProp: 'babelMacros'\n  });\n}\n\nfunction createMacro(macro, options = {}) {\n  if (options.configName === 'options') {\n    throw new Error(`You cannot use the configName \"options\". It is reserved for babel-plugin-macros.`);\n  }\n\n  macroWrapper.isBabelMacro = true;\n  macroWrapper.options = options;\n  return macroWrapper;\n\n  function macroWrapper(args) {\n    const {\n      source,\n      isBabelMacrosCall\n    } = args;\n\n    if (!isBabelMacrosCall) {\n      throw new MacroError(`The macro you imported from \"${source}\" is being executed outside the context of compilation with babel-plugin-macros. ` + `This indicates that you don't have the babel plugin \"babel-plugin-macros\" configured correctly. ` + `Please see the documentation for how to configure babel-plugin-macros properly: ` + 'https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/user.md');\n    }\n\n    return macro(args);\n  }\n}\n\nfunction nodeResolvePath(source, basedir) {\n  return resolve.sync(source, {\n    basedir,\n    extensions: ['.js', '.ts', '.tsx', '.mjs', '.cjs', '.jsx'],\n    // This is here to support the package being globally installed\n    // read more: https://github.com/kentcdodds/babel-plugin-macros/pull/138\n    paths: [p.resolve(__dirname, '../../')]\n  });\n}\n\nfunction macrosPlugin(babel, // istanbul doesn't like the default of an object for the plugin options\n// but I think older versions of babel didn't always pass options\n// istanbul ignore next\n{\n  require: _require = require,\n  resolvePath = nodeResolvePath,\n  isMacrosName = testMacrosRegex,\n  ...options\n} = {}) {\n  function interopRequire(path) {\n    // eslint-disable-next-line import/no-dynamic-require\n    const o = _require(path);\n\n    return o && o.__esModule && o.default ? o.default : o;\n  }\n\n  return {\n    name: 'macros',\n    visitor: {\n      Program(progPath, state) {\n        progPath.traverse({\n          ImportDeclaration(path) {\n            const isMacros = looksLike(path, {\n              node: {\n                source: {\n                  value: v => isMacrosName(v)\n                }\n              }\n            });\n\n            if (!isMacros) {\n              return;\n            }\n\n            const imports = path.node.specifiers.map(s => ({\n              localName: s.local.name,\n              importedName: s.type === 'ImportDefaultSpecifier' ? 'default' : s.imported.name\n            }));\n            const source = path.node.source.value;\n            const result = applyMacros({\n              path,\n              imports,\n              source,\n              state,\n              babel,\n              interopRequire,\n              resolvePath,\n              options\n            });\n\n            if (!result || !result.keepImports) {\n              path.remove();\n            }\n          },\n\n          VariableDeclaration(path) {\n            const isMacros = child => looksLike(child, {\n              node: {\n                init: {\n                  callee: {\n                    type: 'Identifier',\n                    name: 'require'\n                  },\n                  arguments: args => args.length === 1 && isMacrosName(args[0].value)\n                }\n              }\n            });\n\n            path.get('declarations').filter(isMacros).forEach(child => {\n              const imports = child.node.id.name ? [{\n                localName: child.node.id.name,\n                importedName: 'default'\n              }] : child.node.id.properties.map(property => ({\n                localName: property.value.name,\n                importedName: property.key.name\n              }));\n              const call = child.get('init');\n              const source = call.node.arguments[0].value;\n              const result = applyMacros({\n                path: call,\n                imports,\n                source,\n                state,\n                babel,\n                interopRequire,\n                resolvePath,\n                options\n              });\n\n              if (!result || !result.keepImports) {\n                child.remove();\n              }\n            });\n          }\n\n        });\n      }\n\n    }\n  };\n} // eslint-disable-next-line complexity\n\n\nfunction applyMacros({\n  path,\n  imports,\n  source,\n  state,\n  babel,\n  interopRequire,\n  resolvePath,\n  options\n}) {\n  /* istanbul ignore next (pretty much only useful for astexplorer I think) */\n  const {\n    file: {\n      opts: {\n        filename = ''\n      }\n    }\n  } = state;\n  let hasReferences = false;\n  const referencePathsByImportName = imports.reduce((byName, {\n    importedName,\n    localName\n  }) => {\n    const binding = path.scope.getBinding(localName);\n    byName[importedName] = binding.referencePaths;\n    hasReferences = hasReferences || Boolean(byName[importedName].length);\n    return byName;\n  }, {});\n  const isRelative = source.indexOf('.') === 0;\n  const requirePath = resolvePath(source, p.dirname(getFullFilename(filename)));\n  const macro = interopRequire(requirePath);\n\n  if (!macro.isBabelMacro) {\n    throw new Error(`The macro imported from \"${source}\" must be wrapped in \"createMacro\" ` + `which you can get from \"babel-plugin-macros\". ` + `Please refer to the documentation to see how to do this properly: https://github.com/kentcdodds/babel-plugin-macros/blob/master/other/docs/author.md#writing-a-macro`);\n  }\n\n  const config = getConfig(macro, filename, source, options);\n  let result;\n\n  try {\n    /**\n     * Other plugins that run before babel-plugin-macros might use path.replace, where a path is\n     * put into its own replacement. Apparently babel does not update the scope after such\n     * an operation. As a remedy, the whole scope is traversed again with an empty \"Identifier\"\n     * visitor - this makes the problem go away.\n     *\n     * See: https://github.com/kentcdodds/import-all.macro/issues/7\n     */\n    state.file.scope.path.traverse({\n      Identifier() {}\n\n    });\n    result = macro({\n      references: referencePathsByImportName,\n      source,\n      state,\n      babel,\n      config,\n      isBabelMacrosCall: true\n    });\n  } catch (error) {\n    if (error.name === 'MacroError') {\n      throw error;\n    }\n\n    error.message = `${source}: ${error.message}`;\n\n    if (!isRelative) {\n      error.message = `${error.message} Learn more: https://www.npmjs.com/package/${source.replace( // remove everything after package name\n      // @org/package/macro -> @org/package\n      // package/macro      -> package\n      /^((?:@[^/]+\\/)?[^/]+).*/, '$1')}`;\n    }\n\n    throw error;\n  }\n\n  return result;\n}\n\nfunction getConfigFromFile(configName, filename) {\n  try {\n    const loaded = getConfigExplorer().search(filename);\n\n    if (loaded) {\n      return {\n        options: loaded.config[configName],\n        path: loaded.filepath\n      };\n    }\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n\n  return {};\n}\n\nfunction getConfigFromOptions(configName, options) {\n  if (options.hasOwnProperty(configName)) {\n    if (options[configName] && typeof options[configName] !== 'object') {\n      // eslint-disable-next-line no-console\n      console.error(`The macro plugin options' ${configName} property was not an object or null.`);\n    } else {\n      return {\n        options: options[configName]\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getConfig(macro, filename, source, options) {\n  const {\n    configName\n  } = macro.options;\n\n  if (configName) {\n    const fileConfig = getConfigFromFile(configName, filename);\n    const optionsConfig = getConfigFromOptions(configName, options);\n\n    if (optionsConfig.options === undefined && fileConfig.options === undefined && fileConfig.error !== undefined) {\n      // eslint-disable-next-line no-console\n      console.error(`There was an error trying to load the config \"${configName}\" ` + `for the macro imported from \"${source}. ` + `Please see the error thrown for more information.`);\n      throw fileConfig.error;\n    }\n\n    if (fileConfig.options !== undefined && optionsConfig.options !== undefined && typeof fileConfig.options !== 'object') {\n      throw new Error(`${fileConfig.path} specified a ${configName} config of type ` + `${typeof optionsConfig.options}, but the the macros plugin's ` + `options.${configName} did contain an object. Both configs must ` + `contain objects for their options to be mergeable.`);\n    }\n\n    return { ...optionsConfig.options,\n      ...fileConfig.options\n    };\n  }\n\n  return undefined;\n}\n/*\n istanbul ignore next\n because this is hard to test\n and not worth it...\n */\n\n\nfunction getFullFilename(filename) {\n  if (p.isAbsolute(filename)) {\n    return filename;\n  }\n\n  return p.join(process.cwd(), filename);\n}\n\nfunction looksLike(a, b) {\n  return a && b && Object.keys(b).every(bKey => {\n    const bVal = b[bKey];\n    const aVal = a[bKey];\n\n    if (typeof bVal === 'function') {\n      return bVal(aVal);\n    }\n\n    return isPrimitive(bVal) ? bVal === aVal : looksLike(aVal, bVal);\n  });\n}\n\nfunction isPrimitive(val) {\n  // eslint-disable-next-line\n  return val == null || /^[sbn]/.test(typeof val);\n}\n\nmodule.exports = macrosPlugin;\nObject.assign(module.exports, {\n  createMacro,\n  MacroError\n});", "\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function () {\n  return {\n    manipulateOptions: function manipulateOptions(opts, parserOpts) {\n      parserOpts.plugins.push(\"jsx\");\n    }\n  };\n};\n\nmodule.exports = exports[\"default\"];", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = annotateAsPure;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  addComment\n} = _t;\nconst PURE_ANNOTATION = \"#__PURE__\";\n\nconst isPureAnnotated = ({\n  leadingComments\n}) => !!leadingComments && leadingComments.some(comment => /[@#]__PURE__/.test(comment.value));\n\nfunction annotateAsPure(pathOrNode) {\n  const node = pathOrNode[\"node\"] || pathOrNode;\n\n  if (isPureAnnotated(node)) {\n    return;\n  }\n\n  addComment(node, \"leading\", PURE_ANNOTATION);\n}", "'use strict';\n\nconst path = require('path');\nconst WIN_SLASH = '\\\\\\\\/';\nconst WIN_NO_SLASH = `[^${WIN_SLASH}]`;\n\n/**\n * Posix glob regex\n */\n\nconst DOT_LITERAL = '\\\\.';\nconst PLUS_LITERAL = '\\\\+';\nconst QMARK_LITERAL = '\\\\?';\nconst SLASH_LITERAL = '\\\\/';\nconst ONE_CHAR = '(?=.)';\nconst QMARK = '[^/]';\nconst END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;\nconst START_ANCHOR = `(?:^|${SLASH_LITERAL})`;\nconst DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;\nconst NO_DOT = `(?!${DOT_LITERAL})`;\nconst NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;\nconst NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;\nconst NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;\nconst QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;\nconst STAR = `${QMARK}*?`;\n\nconst POSIX_CHARS = {\n  DOT_LITERAL,\n  PLUS_LITERAL,\n  QMARK_LITERAL,\n  SLASH_LITERAL,\n  ONE_CHAR,\n  QMARK,\n  END_ANCHOR,\n  DOTS_SLASH,\n  NO_DOT,\n  NO_DOTS,\n  NO_DOT_SLASH,\n  NO_DOTS_SLASH,\n  QMARK_NO_DOT,\n  STAR,\n  START_ANCHOR\n};\n\n/**\n * Windows glob regex\n */\n\nconst WINDOWS_CHARS = {\n  ...POSIX_CHARS,\n\n  SLASH_LITERAL: `[${WIN_SLASH}]`,\n  QMARK: WIN_NO_SLASH,\n  STAR: `${WIN_NO_SLASH}*?`,\n  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,\n  NO_DOT: `(?!${DOT_LITERAL})`,\n  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,\n  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,\n  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,\n  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,\n  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`\n};\n\n/**\n * POSIX Bracket Regex\n */\n\nconst POSIX_REGEX_SOURCE = {\n  alnum: 'a-zA-Z0-9',\n  alpha: 'a-zA-Z',\n  ascii: '\\\\x00-\\\\x7F',\n  blank: ' \\\\t',\n  cntrl: '\\\\x00-\\\\x1F\\\\x7F',\n  digit: '0-9',\n  graph: '\\\\x21-\\\\x7E',\n  lower: 'a-z',\n  print: '\\\\x20-\\\\x7E ',\n  punct: '\\\\-!\"#$%&\\'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~',\n  space: ' \\\\t\\\\r\\\\n\\\\v\\\\f',\n  upper: 'A-Z',\n  word: 'A-Za-z0-9_',\n  xdigit: 'A-Fa-f0-9'\n};\n\nmodule.exports = {\n  MAX_LENGTH: 1024 * 64,\n  POSIX_REGEX_SOURCE,\n\n  // regular expressions\n  REGEX_BACKSLASH: /\\\\(?![*+?^${}(|)[\\]])/g,\n  REGEX_NON_SPECIAL_CHARS: /^[^@![\\].,$*+?^{}()|\\\\/]+/,\n  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\\]]/,\n  REGEX_SPECIAL_CHARS_BACKREF: /(\\\\?)((\\W)(\\3*))/g,\n  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\\]])/g,\n  REGEX_REMOVE_BACKSLASH: /(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,\n\n  // Replace globs with equivalent patterns to reduce parsing time.\n  REPLACEMENTS: {\n    '***': '*',\n    '**/**': '**',\n    '**/**/**': '**'\n  },\n\n  // Digits\n  CHAR_0: 48, /* 0 */\n  CHAR_9: 57, /* 9 */\n\n  // Alphabet chars.\n  CHAR_UPPERCASE_A: 65, /* A */\n  CHAR_LOWERCASE_A: 97, /* a */\n  CHAR_UPPERCASE_Z: 90, /* Z */\n  CHAR_LOWERCASE_Z: 122, /* z */\n\n  CHAR_LEFT_PARENTHESES: 40, /* ( */\n  CHAR_RIGHT_PARENTHESES: 41, /* ) */\n\n  CHAR_ASTERISK: 42, /* * */\n\n  // Non-alphabetic chars.\n  CHAR_AMPERSAND: 38, /* & */\n  CHAR_AT: 64, /* @ */\n  CHAR_BACKWARD_SLASH: 92, /* \\ */\n  CHAR_CARRIAGE_RETURN: 13, /* \\r */\n  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */\n  CHAR_COLON: 58, /* : */\n  CHAR_COMMA: 44, /* , */\n  CHAR_DOT: 46, /* . */\n  CHAR_DOUBLE_QUOTE: 34, /* \" */\n  CHAR_EQUAL: 61, /* = */\n  CHAR_EXCLAMATION_MARK: 33, /* ! */\n  CHAR_FORM_FEED: 12, /* \\f */\n  CHAR_FORWARD_SLASH: 47, /* / */\n  CHAR_GRAVE_ACCENT: 96, /* ` */\n  CHAR_HASH: 35, /* # */\n  CHAR_HYPHEN_MINUS: 45, /* - */\n  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */\n  CHAR_LEFT_CURLY_BRACE: 123, /* { */\n  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */\n  CHAR_LINE_FEED: 10, /* \\n */\n  CHAR_NO_BREAK_SPACE: 160, /* \\u00A0 */\n  CHAR_PERCENT: 37, /* % */\n  CHAR_PLUS: 43, /* + */\n  CHAR_QUESTION_MARK: 63, /* ? */\n  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */\n  CHAR_RIGHT_CURLY_BRACE: 125, /* } */\n  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */\n  CHAR_SEMICOLON: 59, /* ; */\n  CHAR_SINGLE_QUOTE: 39, /* ' */\n  CHAR_SPACE: 32, /*   */\n  CHAR_TAB: 9, /* \\t */\n  CHAR_UNDERSCORE: 95, /* _ */\n  CHAR_VERTICAL_LINE: 124, /* | */\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \\uFEFF */\n\n  SEP: path.sep,\n\n  /**\n   * Create EXTGLOB_CHARS\n   */\n\n  extglobChars(chars) {\n    return {\n      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },\n      '?': { type: 'qmark', open: '(?:', close: ')?' },\n      '+': { type: 'plus', open: '(?:', close: ')+' },\n      '*': { type: 'star', open: '(?:', close: ')*' },\n      '@': { type: 'at', open: '(?:', close: ')' }\n    };\n  },\n\n  /**\n   * Create GLOB_CHARS\n   */\n\n  globChars(win32) {\n    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;\n  }\n};\n", "'use strict';\n\nconst path = require('path');\nconst win32 = process.platform === 'win32';\nconst {\n  REGEX_BACKSLASH,\n  REGEX_REMOVE_BACKSLASH,\n  REGEX_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_GLOBAL\n} = require('./constants');\n\nexports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\nexports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);\nexports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);\nexports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\\\$1');\nexports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');\n\nexports.removeBackslashes = str => {\n  return str.replace(REGEX_REMOVE_BACKSLASH, match => {\n    return match === '\\\\' ? '' : match;\n  });\n};\n\nexports.supportsLookbehinds = () => {\n  const segs = process.version.slice(1).split('.').map(Number);\n  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {\n    return true;\n  }\n  return false;\n};\n\nexports.isWindows = options => {\n  if (options && typeof options.windows === 'boolean') {\n    return options.windows;\n  }\n  return win32 === true || path.sep === '\\\\';\n};\n\nexports.escapeLast = (input, char, lastIdx) => {\n  const idx = input.lastIndexOf(char, lastIdx);\n  if (idx === -1) return input;\n  if (input[idx - 1] === '\\\\') return exports.escapeLast(input, char, idx - 1);\n  return `${input.slice(0, idx)}\\\\${input.slice(idx)}`;\n};\n\nexports.removePrefix = (input, state = {}) => {\n  let output = input;\n  if (output.startsWith('./')) {\n    output = output.slice(2);\n    state.prefix = './';\n  }\n  return output;\n};\n\nexports.wrapOutput = (input, state = {}, options = {}) => {\n  const prepend = options.contains ? '' : '^';\n  const append = options.contains ? '' : '$';\n\n  let output = `${prepend}(?:${input})${append}`;\n  if (state.negated === true) {\n    output = `(?:^(?!${output}).*$)`;\n  }\n  return output;\n};\n", "'use strict';\n\nconst utils = require('./utils');\nconst {\n  CHAR_ASTERISK,             /* * */\n  CHAR_AT,                   /* @ */\n  CHAR_BACKWARD_SLASH,       /* \\ */\n  CHAR_COMMA,                /* , */\n  CHAR_DOT,                  /* . */\n  CHAR_EXCLAMATION_MARK,     /* ! */\n  CHAR_FORWARD_SLASH,        /* / */\n  CHAR_LEFT_CURLY_BRACE,     /* { */\n  CHAR_LEFT_PARENTHESES,     /* ( */\n  CHAR_LEFT_SQUARE_BRACKET,  /* [ */\n  CHAR_PLUS,                 /* + */\n  CHAR_QUESTION_MARK,        /* ? */\n  CHAR_RIGHT_CURLY_BRACE,    /* } */\n  CHAR_RIGHT_PARENTHESES,    /* ) */\n  CHAR_RIGHT_SQUARE_BRACKET  /* ] */\n} = require('./constants');\n\nconst isPathSeparator = code => {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;\n};\n\nconst depth = token => {\n  if (token.isPrefix !== true) {\n    token.depth = token.isGlobstar ? Infinity : 1;\n  }\n};\n\n/**\n * Quickly scans a glob pattern and returns an object with a handful of\n * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),\n * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not\n * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).\n *\n * ```js\n * const pm = require('picomatch');\n * console.log(pm.scan('foo/bar/*.js'));\n * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object} Returns an object with tokens and regex source string.\n * @api public\n */\n\nconst scan = (input, options) => {\n  const opts = options || {};\n\n  const length = input.length - 1;\n  const scanToEnd = opts.parts === true || opts.scanToEnd === true;\n  const slashes = [];\n  const tokens = [];\n  const parts = [];\n\n  let str = input;\n  let index = -1;\n  let start = 0;\n  let lastIndex = 0;\n  let isBrace = false;\n  let isBracket = false;\n  let isGlob = false;\n  let isExtglob = false;\n  let isGlobstar = false;\n  let braceEscaped = false;\n  let backslashes = false;\n  let negated = false;\n  let negatedExtglob = false;\n  let finished = false;\n  let braces = 0;\n  let prev;\n  let code;\n  let token = { value: '', depth: 0, isGlob: false };\n\n  const eos = () => index >= length;\n  const peek = () => str.charCodeAt(index + 1);\n  const advance = () => {\n    prev = code;\n    return str.charCodeAt(++index);\n  };\n\n  while (index < length) {\n    code = advance();\n    let next;\n\n    if (code === CHAR_BACKWARD_SLASH) {\n      backslashes = token.backslashes = true;\n      code = advance();\n\n      if (code === CHAR_LEFT_CURLY_BRACE) {\n        braceEscaped = true;\n      }\n      continue;\n    }\n\n    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {\n      braces++;\n\n      while (eos() !== true && (code = advance())) {\n        if (code === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (code === CHAR_LEFT_CURLY_BRACE) {\n          braces++;\n          continue;\n        }\n\n        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (braceEscaped !== true && code === CHAR_COMMA) {\n          isBrace = token.isBrace = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n\n          if (scanToEnd === true) {\n            continue;\n          }\n\n          break;\n        }\n\n        if (code === CHAR_RIGHT_CURLY_BRACE) {\n          braces--;\n\n          if (braces === 0) {\n            braceEscaped = false;\n            isBrace = token.isBrace = true;\n            finished = true;\n            break;\n          }\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (code === CHAR_FORWARD_SLASH) {\n      slashes.push(index);\n      tokens.push(token);\n      token = { value: '', depth: 0, isGlob: false };\n\n      if (finished === true) continue;\n      if (prev === CHAR_DOT && index === (start + 1)) {\n        start += 2;\n        continue;\n      }\n\n      lastIndex = index + 1;\n      continue;\n    }\n\n    if (opts.noext !== true) {\n      const isExtglobChar = code === CHAR_PLUS\n        || code === CHAR_AT\n        || code === CHAR_ASTERISK\n        || code === CHAR_QUESTION_MARK\n        || code === CHAR_EXCLAMATION_MARK;\n\n      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {\n        isGlob = token.isGlob = true;\n        isExtglob = token.isExtglob = true;\n        finished = true;\n        if (code === CHAR_EXCLAMATION_MARK && index === start) {\n          negatedExtglob = true;\n        }\n\n        if (scanToEnd === true) {\n          while (eos() !== true && (code = advance())) {\n            if (code === CHAR_BACKWARD_SLASH) {\n              backslashes = token.backslashes = true;\n              code = advance();\n              continue;\n            }\n\n            if (code === CHAR_RIGHT_PARENTHESES) {\n              isGlob = token.isGlob = true;\n              finished = true;\n              break;\n            }\n          }\n          continue;\n        }\n        break;\n      }\n    }\n\n    if (code === CHAR_ASTERISK) {\n      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_QUESTION_MARK) {\n      isGlob = token.isGlob = true;\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n      break;\n    }\n\n    if (code === CHAR_LEFT_SQUARE_BRACKET) {\n      while (eos() !== true && (next = advance())) {\n        if (next === CHAR_BACKWARD_SLASH) {\n          backslashes = token.backslashes = true;\n          advance();\n          continue;\n        }\n\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\n          isBracket = token.isBracket = true;\n          isGlob = token.isGlob = true;\n          finished = true;\n          break;\n        }\n      }\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n\n    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {\n      negated = token.negated = true;\n      start++;\n      continue;\n    }\n\n    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {\n      isGlob = token.isGlob = true;\n\n      if (scanToEnd === true) {\n        while (eos() !== true && (code = advance())) {\n          if (code === CHAR_LEFT_PARENTHESES) {\n            backslashes = token.backslashes = true;\n            code = advance();\n            continue;\n          }\n\n          if (code === CHAR_RIGHT_PARENTHESES) {\n            finished = true;\n            break;\n          }\n        }\n        continue;\n      }\n      break;\n    }\n\n    if (isGlob === true) {\n      finished = true;\n\n      if (scanToEnd === true) {\n        continue;\n      }\n\n      break;\n    }\n  }\n\n  if (opts.noext === true) {\n    isExtglob = false;\n    isGlob = false;\n  }\n\n  let base = str;\n  let prefix = '';\n  let glob = '';\n\n  if (start > 0) {\n    prefix = str.slice(0, start);\n    str = str.slice(start);\n    lastIndex -= start;\n  }\n\n  if (base && isGlob === true && lastIndex > 0) {\n    base = str.slice(0, lastIndex);\n    glob = str.slice(lastIndex);\n  } else if (isGlob === true) {\n    base = '';\n    glob = str;\n  } else {\n    base = str;\n  }\n\n  if (base && base !== '' && base !== '/' && base !== str) {\n    if (isPathSeparator(base.charCodeAt(base.length - 1))) {\n      base = base.slice(0, -1);\n    }\n  }\n\n  if (opts.unescape === true) {\n    if (glob) glob = utils.removeBackslashes(glob);\n\n    if (base && backslashes === true) {\n      base = utils.removeBackslashes(base);\n    }\n  }\n\n  const state = {\n    prefix,\n    input,\n    start,\n    base,\n    glob,\n    isBrace,\n    isBracket,\n    isGlob,\n    isExtglob,\n    isGlobstar,\n    negated,\n    negatedExtglob\n  };\n\n  if (opts.tokens === true) {\n    state.maxDepth = 0;\n    if (!isPathSeparator(code)) {\n      tokens.push(token);\n    }\n    state.tokens = tokens;\n  }\n\n  if (opts.parts === true || opts.tokens === true) {\n    let prevIndex;\n\n    for (let idx = 0; idx < slashes.length; idx++) {\n      const n = prevIndex ? prevIndex + 1 : start;\n      const i = slashes[idx];\n      const value = input.slice(n, i);\n      if (opts.tokens) {\n        if (idx === 0 && start !== 0) {\n          tokens[idx].isPrefix = true;\n          tokens[idx].value = prefix;\n        } else {\n          tokens[idx].value = value;\n        }\n        depth(tokens[idx]);\n        state.maxDepth += tokens[idx].depth;\n      }\n      if (idx !== 0 || value !== '') {\n        parts.push(value);\n      }\n      prevIndex = i;\n    }\n\n    if (prevIndex && prevIndex + 1 < input.length) {\n      const value = input.slice(prevIndex + 1);\n      parts.push(value);\n\n      if (opts.tokens) {\n        tokens[tokens.length - 1].value = value;\n        depth(tokens[tokens.length - 1]);\n        state.maxDepth += tokens[tokens.length - 1].depth;\n      }\n    }\n\n    state.slashes = slashes;\n    state.parts = parts;\n  }\n\n  return state;\n};\n\nmodule.exports = scan;\n", "'use strict';\n\nconst constants = require('./constants');\nconst utils = require('./utils');\n\n/**\n * Constants\n */\n\nconst {\n  MAX_LENGTH,\n  POSIX_REGEX_SOURCE,\n  REGEX_NON_SPECIAL_CHARS,\n  REGEX_SPECIAL_CHARS_BACKREF,\n  REPLACEMENTS\n} = constants;\n\n/**\n * Helpers\n */\n\nconst expandRange = (args, options) => {\n  if (typeof options.expandRange === 'function') {\n    return options.expandRange(...args, options);\n  }\n\n  args.sort();\n  const value = `[${args.join('-')}]`;\n\n  try {\n    /* eslint-disable-next-line no-new */\n    new RegExp(value);\n  } catch (ex) {\n    return args.map(v => utils.escapeRegex(v)).join('..');\n  }\n\n  return value;\n};\n\n/**\n * Create the message for a syntax error\n */\n\nconst syntaxError = (type, char) => {\n  return `Missing ${type}: \"${char}\" - use \"\\\\\\\\${char}\" to match literal characters`;\n};\n\n/**\n * Parse the given input string.\n * @param {String} input\n * @param {Object} options\n * @return {Object}\n */\n\nconst parse = (input, options) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  input = REPLACEMENTS[input] || input;\n\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n\n  let len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  const bos = { type: 'bos', value: '', output: opts.prepend || '' };\n  const tokens = [bos];\n\n  const capture = opts.capture ? '' : '?:';\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const PLATFORM_CHARS = constants.globChars(win32);\n  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);\n\n  const {\n    DOT_LITERAL,\n    PLUS_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOT_SLASH,\n    NO_DOTS_SLASH,\n    QMARK,\n    QMARK_NO_DOT,\n    STAR,\n    START_ANCHOR\n  } = PLATFORM_CHARS;\n\n  const globstar = opts => {\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const nodot = opts.dot ? '' : NO_DOT;\n  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;\n  let star = opts.bash === true ? globstar(opts) : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  // minimatch options support\n  if (typeof opts.noext === 'boolean') {\n    opts.noextglob = opts.noext;\n  }\n\n  const state = {\n    input,\n    index: -1,\n    start: 0,\n    dot: opts.dot === true,\n    consumed: '',\n    output: '',\n    prefix: '',\n    backtrack: false,\n    negated: false,\n    brackets: 0,\n    braces: 0,\n    parens: 0,\n    quotes: 0,\n    globstar: false,\n    tokens\n  };\n\n  input = utils.removePrefix(input, state);\n  len = input.length;\n\n  const extglobs = [];\n  const braces = [];\n  const stack = [];\n  let prev = bos;\n  let value;\n\n  /**\n   * Tokenizing helpers\n   */\n\n  const eos = () => state.index === len - 1;\n  const peek = state.peek = (n = 1) => input[state.index + n];\n  const advance = state.advance = () => input[++state.index] || '';\n  const remaining = () => input.slice(state.index + 1);\n  const consume = (value = '', num = 0) => {\n    state.consumed += value;\n    state.index += num;\n  };\n\n  const append = token => {\n    state.output += token.output != null ? token.output : token.value;\n    consume(token.value);\n  };\n\n  const negate = () => {\n    let count = 1;\n\n    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {\n      advance();\n      state.start++;\n      count++;\n    }\n\n    if (count % 2 === 0) {\n      return false;\n    }\n\n    state.negated = true;\n    state.start++;\n    return true;\n  };\n\n  const increment = type => {\n    state[type]++;\n    stack.push(type);\n  };\n\n  const decrement = type => {\n    state[type]--;\n    stack.pop();\n  };\n\n  /**\n   * Push tokens onto the tokens array. This helper speeds up\n   * tokenizing by 1) helping us avoid backtracking as much as possible,\n   * and 2) helping us avoid creating extra tokens when consecutive\n   * characters are plain text. This improves performance and simplifies\n   * lookbehinds.\n   */\n\n  const push = tok => {\n    if (prev.type === 'globstar') {\n      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');\n      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));\n\n      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {\n        state.output = state.output.slice(0, -prev.output.length);\n        prev.type = 'star';\n        prev.value = '*';\n        prev.output = star;\n        state.output += prev.output;\n      }\n    }\n\n    if (extglobs.length && tok.type !== 'paren') {\n      extglobs[extglobs.length - 1].inner += tok.value;\n    }\n\n    if (tok.value || tok.output) append(tok);\n    if (prev && prev.type === 'text' && tok.type === 'text') {\n      prev.value += tok.value;\n      prev.output = (prev.output || '') + tok.value;\n      return;\n    }\n\n    tok.prev = prev;\n    tokens.push(tok);\n    prev = tok;\n  };\n\n  const extglobOpen = (type, value) => {\n    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };\n\n    token.prev = prev;\n    token.parens = state.parens;\n    token.output = state.output;\n    const output = (opts.capture ? '(' : '') + token.open;\n\n    increment('parens');\n    push({ type, value, output: state.output ? '' : ONE_CHAR });\n    push({ type: 'paren', extglob: true, value: advance(), output });\n    extglobs.push(token);\n  };\n\n  const extglobClose = token => {\n    let output = token.close + (opts.capture ? ')' : '');\n    let rest;\n\n    if (token.type === 'negate') {\n      let extglobStar = star;\n\n      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {\n        extglobStar = globstar(opts);\n      }\n\n      if (extglobStar !== star || eos() || /^\\)+$/.test(remaining())) {\n        output = token.close = `)$))${extglobStar}`;\n      }\n\n      if (token.inner.includes('*') && (rest = remaining()) && /^\\.[^\\\\/.]+$/.test(rest)) {\n        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.\n        // In this case, we need to parse the string and use it in the output of the original pattern.\n        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.\n        //\n        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.\n        const expression = parse(rest, { ...options, fastpaths: false }).output;\n\n        output = token.close = `)${expression})${extglobStar})`;\n      }\n\n      if (token.prev.type === 'bos') {\n        state.negatedExtglob = true;\n      }\n    }\n\n    push({ type: 'paren', extglob: true, value, output });\n    decrement('parens');\n  };\n\n  /**\n   * Fast paths\n   */\n\n  if (opts.fastpaths !== false && !/(^[*!]|[/()[\\]{}\"])/.test(input)) {\n    let backslashes = false;\n\n    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {\n      if (first === '\\\\') {\n        backslashes = true;\n        return m;\n      }\n\n      if (first === '?') {\n        if (esc) {\n          return esc + first + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        if (index === 0) {\n          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');\n        }\n        return QMARK.repeat(chars.length);\n      }\n\n      if (first === '.') {\n        return DOT_LITERAL.repeat(chars.length);\n      }\n\n      if (first === '*') {\n        if (esc) {\n          return esc + first + (rest ? star : '');\n        }\n        return star;\n      }\n      return esc ? m : `\\\\${m}`;\n    });\n\n    if (backslashes === true) {\n      if (opts.unescape === true) {\n        output = output.replace(/\\\\/g, '');\n      } else {\n        output = output.replace(/\\\\+/g, m => {\n          return m.length % 2 === 0 ? '\\\\\\\\' : (m ? '\\\\' : '');\n        });\n      }\n    }\n\n    if (output === input && opts.contains === true) {\n      state.output = input;\n      return state;\n    }\n\n    state.output = utils.wrapOutput(output, state, options);\n    return state;\n  }\n\n  /**\n   * Tokenize input until we reach end-of-string\n   */\n\n  while (!eos()) {\n    value = advance();\n\n    if (value === '\\u0000') {\n      continue;\n    }\n\n    /**\n     * Escaped characters\n     */\n\n    if (value === '\\\\') {\n      const next = peek();\n\n      if (next === '/' && opts.bash !== true) {\n        continue;\n      }\n\n      if (next === '.' || next === ';') {\n        continue;\n      }\n\n      if (!next) {\n        value += '\\\\';\n        push({ type: 'text', value });\n        continue;\n      }\n\n      // collapse slashes to reduce potential for exploits\n      const match = /^\\\\+/.exec(remaining());\n      let slashes = 0;\n\n      if (match && match[0].length > 2) {\n        slashes = match[0].length;\n        state.index += slashes;\n        if (slashes % 2 !== 0) {\n          value += '\\\\';\n        }\n      }\n\n      if (opts.unescape === true) {\n        value = advance();\n      } else {\n        value += advance();\n      }\n\n      if (state.brackets === 0) {\n        push({ type: 'text', value });\n        continue;\n      }\n    }\n\n    /**\n     * If we're inside a regex character class, continue\n     * until we reach the closing bracket.\n     */\n\n    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {\n      if (opts.posix !== false && value === ':') {\n        const inner = prev.value.slice(1);\n        if (inner.includes('[')) {\n          prev.posix = true;\n\n          if (inner.includes(':')) {\n            const idx = prev.value.lastIndexOf('[');\n            const pre = prev.value.slice(0, idx);\n            const rest = prev.value.slice(idx + 2);\n            const posix = POSIX_REGEX_SOURCE[rest];\n            if (posix) {\n              prev.value = pre + posix;\n              state.backtrack = true;\n              advance();\n\n              if (!bos.output && tokens.indexOf(prev) === 1) {\n                bos.output = ONE_CHAR;\n              }\n              continue;\n            }\n          }\n        }\n      }\n\n      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {\n        value = `\\\\${value}`;\n      }\n\n      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {\n        value = `\\\\${value}`;\n      }\n\n      if (opts.posix === true && value === '!' && prev.value === '[') {\n        value = '^';\n      }\n\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * If we're inside a quoted string, continue\n     * until we reach the closing double quote.\n     */\n\n    if (state.quotes === 1 && value !== '\"') {\n      value = utils.escapeRegex(value);\n      prev.value += value;\n      append({ value });\n      continue;\n    }\n\n    /**\n     * Double quotes\n     */\n\n    if (value === '\"') {\n      state.quotes = state.quotes === 1 ? 0 : 1;\n      if (opts.keepQuotes === true) {\n        push({ type: 'text', value });\n      }\n      continue;\n    }\n\n    /**\n     * Parentheses\n     */\n\n    if (value === '(') {\n      increment('parens');\n      push({ type: 'paren', value });\n      continue;\n    }\n\n    if (value === ')') {\n      if (state.parens === 0 && opts.strictBrackets === true) {\n        throw new SyntaxError(syntaxError('opening', '('));\n      }\n\n      const extglob = extglobs[extglobs.length - 1];\n      if (extglob && state.parens === extglob.parens + 1) {\n        extglobClose(extglobs.pop());\n        continue;\n      }\n\n      push({ type: 'paren', value, output: state.parens ? ')' : '\\\\)' });\n      decrement('parens');\n      continue;\n    }\n\n    /**\n     * Square brackets\n     */\n\n    if (value === '[') {\n      if (opts.nobracket === true || !remaining().includes(']')) {\n        if (opts.nobracket !== true && opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('closing', ']'));\n        }\n\n        value = `\\\\${value}`;\n      } else {\n        increment('brackets');\n      }\n\n      push({ type: 'bracket', value });\n      continue;\n    }\n\n    if (value === ']') {\n      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      if (state.brackets === 0) {\n        if (opts.strictBrackets === true) {\n          throw new SyntaxError(syntaxError('opening', '['));\n        }\n\n        push({ type: 'text', value, output: `\\\\${value}` });\n        continue;\n      }\n\n      decrement('brackets');\n\n      const prevValue = prev.value.slice(1);\n      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {\n        value = `/${value}`;\n      }\n\n      prev.value += value;\n      append({ value });\n\n      // when literal brackets are explicitly disabled\n      // assume we should match with a regex character class\n      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {\n        continue;\n      }\n\n      const escaped = utils.escapeRegex(prev.value);\n      state.output = state.output.slice(0, -prev.value.length);\n\n      // when literal brackets are explicitly enabled\n      // assume we should escape the brackets to match literal characters\n      if (opts.literalBrackets === true) {\n        state.output += escaped;\n        prev.value = escaped;\n        continue;\n      }\n\n      // when the user specifies nothing, try to match both\n      prev.value = `(${capture}${escaped}|${prev.value})`;\n      state.output += prev.value;\n      continue;\n    }\n\n    /**\n     * Braces\n     */\n\n    if (value === '{' && opts.nobrace !== true) {\n      increment('braces');\n\n      const open = {\n        type: 'brace',\n        value,\n        output: '(',\n        outputIndex: state.output.length,\n        tokensIndex: state.tokens.length\n      };\n\n      braces.push(open);\n      push(open);\n      continue;\n    }\n\n    if (value === '}') {\n      const brace = braces[braces.length - 1];\n\n      if (opts.nobrace === true || !brace) {\n        push({ type: 'text', value, output: value });\n        continue;\n      }\n\n      let output = ')';\n\n      if (brace.dots === true) {\n        const arr = tokens.slice();\n        const range = [];\n\n        for (let i = arr.length - 1; i >= 0; i--) {\n          tokens.pop();\n          if (arr[i].type === 'brace') {\n            break;\n          }\n          if (arr[i].type !== 'dots') {\n            range.unshift(arr[i].value);\n          }\n        }\n\n        output = expandRange(range, opts);\n        state.backtrack = true;\n      }\n\n      if (brace.comma !== true && brace.dots !== true) {\n        const out = state.output.slice(0, brace.outputIndex);\n        const toks = state.tokens.slice(brace.tokensIndex);\n        brace.value = brace.output = '\\\\{';\n        value = output = '\\\\}';\n        state.output = out;\n        for (const t of toks) {\n          state.output += (t.output || t.value);\n        }\n      }\n\n      push({ type: 'brace', value, output });\n      decrement('braces');\n      braces.pop();\n      continue;\n    }\n\n    /**\n     * Pipes\n     */\n\n    if (value === '|') {\n      if (extglobs.length > 0) {\n        extglobs[extglobs.length - 1].conditions++;\n      }\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Commas\n     */\n\n    if (value === ',') {\n      let output = value;\n\n      const brace = braces[braces.length - 1];\n      if (brace && stack[stack.length - 1] === 'braces') {\n        brace.comma = true;\n        output = '|';\n      }\n\n      push({ type: 'comma', value, output });\n      continue;\n    }\n\n    /**\n     * Slashes\n     */\n\n    if (value === '/') {\n      // if the beginning of the glob is \"./\", advance the start\n      // to the current index, and don't add the \"./\" characters\n      // to the state. This greatly simplifies lookbehinds when\n      // checking for BOS characters like \"!\" and \".\" (not \"./\")\n      if (prev.type === 'dot' && state.index === state.start + 1) {\n        state.start = state.index + 1;\n        state.consumed = '';\n        state.output = '';\n        tokens.pop();\n        prev = bos; // reset \"prev\" to the first token\n        continue;\n      }\n\n      push({ type: 'slash', value, output: SLASH_LITERAL });\n      continue;\n    }\n\n    /**\n     * Dots\n     */\n\n    if (value === '.') {\n      if (state.braces > 0 && prev.type === 'dot') {\n        if (prev.value === '.') prev.output = DOT_LITERAL;\n        const brace = braces[braces.length - 1];\n        prev.type = 'dots';\n        prev.output += value;\n        prev.value += value;\n        brace.dots = true;\n        continue;\n      }\n\n      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {\n        push({ type: 'text', value, output: DOT_LITERAL });\n        continue;\n      }\n\n      push({ type: 'dot', value, output: DOT_LITERAL });\n      continue;\n    }\n\n    /**\n     * Question marks\n     */\n\n    if (value === '?') {\n      const isGroup = prev && prev.value === '(';\n      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('qmark', value);\n        continue;\n      }\n\n      if (prev && prev.type === 'paren') {\n        const next = peek();\n        let output = value;\n\n        if (next === '<' && !utils.supportsLookbehinds()) {\n          throw new Error('Node.js v10 or higher is required for regex lookbehinds');\n        }\n\n        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\\w+>)/.test(remaining()))) {\n          output = `\\\\${value}`;\n        }\n\n        push({ type: 'text', value, output });\n        continue;\n      }\n\n      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {\n        push({ type: 'qmark', value, output: QMARK_NO_DOT });\n        continue;\n      }\n\n      push({ type: 'qmark', value, output: QMARK });\n      continue;\n    }\n\n    /**\n     * Exclamation\n     */\n\n    if (value === '!') {\n      if (opts.noextglob !== true && peek() === '(') {\n        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {\n          extglobOpen('negate', value);\n          continue;\n        }\n      }\n\n      if (opts.nonegate !== true && state.index === 0) {\n        negate();\n        continue;\n      }\n    }\n\n    /**\n     * Plus\n     */\n\n    if (value === '+') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        extglobOpen('plus', value);\n        continue;\n      }\n\n      if ((prev && prev.value === '(') || opts.regex === false) {\n        push({ type: 'plus', value, output: PLUS_LITERAL });\n        continue;\n      }\n\n      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {\n        push({ type: 'plus', value });\n        continue;\n      }\n\n      push({ type: 'plus', value: PLUS_LITERAL });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value === '@') {\n      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {\n        push({ type: 'at', extglob: true, value, output: '' });\n        continue;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Plain text\n     */\n\n    if (value !== '*') {\n      if (value === '$' || value === '^') {\n        value = `\\\\${value}`;\n      }\n\n      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());\n      if (match) {\n        value += match[0];\n        state.index += match[0].length;\n      }\n\n      push({ type: 'text', value });\n      continue;\n    }\n\n    /**\n     * Stars\n     */\n\n    if (prev && (prev.type === 'globstar' || prev.star === true)) {\n      prev.type = 'star';\n      prev.star = true;\n      prev.value += value;\n      prev.output = star;\n      state.backtrack = true;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    let rest = remaining();\n    if (opts.noextglob !== true && /^\\([^?]/.test(rest)) {\n      extglobOpen('star', value);\n      continue;\n    }\n\n    if (prev.type === 'star') {\n      if (opts.noglobstar === true) {\n        consume(value);\n        continue;\n      }\n\n      const prior = prev.prev;\n      const before = prior.prev;\n      const isStart = prior.type === 'slash' || prior.type === 'bos';\n      const afterStar = before && (before.type === 'star' || before.type === 'globstar');\n\n      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');\n      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');\n      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {\n        push({ type: 'star', value, output: '' });\n        continue;\n      }\n\n      // strip consecutive `/**/`\n      while (rest.slice(0, 3) === '/**') {\n        const after = input[state.index + 4];\n        if (after && after !== '/') {\n          break;\n        }\n        rest = rest.slice(3);\n        consume('/**', 3);\n      }\n\n      if (prior.type === 'bos' && eos()) {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = globstar(opts);\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');\n        prev.value += value;\n        state.globstar = true;\n        state.output += prior.output + prev.output;\n        consume(value);\n        continue;\n      }\n\n      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {\n        const end = rest[1] !== void 0 ? '|$' : '';\n\n        state.output = state.output.slice(0, -(prior.output + prev.output).length);\n        prior.output = `(?:${prior.output}`;\n\n        prev.type = 'globstar';\n        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;\n        prev.value += value;\n\n        state.output += prior.output + prev.output;\n        state.globstar = true;\n\n        consume(value + advance());\n\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      if (prior.type === 'bos' && rest[0] === '/') {\n        prev.type = 'globstar';\n        prev.value += value;\n        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;\n        state.output = prev.output;\n        state.globstar = true;\n        consume(value + advance());\n        push({ type: 'slash', value: '/', output: '' });\n        continue;\n      }\n\n      // remove single star from output\n      state.output = state.output.slice(0, -prev.output.length);\n\n      // reset previous token to globstar\n      prev.type = 'globstar';\n      prev.output = globstar(opts);\n      prev.value += value;\n\n      // reset output with globstar\n      state.output += prev.output;\n      state.globstar = true;\n      consume(value);\n      continue;\n    }\n\n    const token = { type: 'star', value, output: star };\n\n    if (opts.bash === true) {\n      token.output = '.*?';\n      if (prev.type === 'bos' || prev.type === 'slash') {\n        token.output = nodot + token.output;\n      }\n      push(token);\n      continue;\n    }\n\n    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {\n      token.output = value;\n      push(token);\n      continue;\n    }\n\n    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {\n      if (prev.type === 'dot') {\n        state.output += NO_DOT_SLASH;\n        prev.output += NO_DOT_SLASH;\n\n      } else if (opts.dot === true) {\n        state.output += NO_DOTS_SLASH;\n        prev.output += NO_DOTS_SLASH;\n\n      } else {\n        state.output += nodot;\n        prev.output += nodot;\n      }\n\n      if (peek() !== '*') {\n        state.output += ONE_CHAR;\n        prev.output += ONE_CHAR;\n      }\n    }\n\n    push(token);\n  }\n\n  while (state.brackets > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));\n    state.output = utils.escapeLast(state.output, '[');\n    decrement('brackets');\n  }\n\n  while (state.parens > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));\n    state.output = utils.escapeLast(state.output, '(');\n    decrement('parens');\n  }\n\n  while (state.braces > 0) {\n    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));\n    state.output = utils.escapeLast(state.output, '{');\n    decrement('braces');\n  }\n\n  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {\n    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });\n  }\n\n  // rebuild the output if we had to backtrack at any point\n  if (state.backtrack === true) {\n    state.output = '';\n\n    for (const token of state.tokens) {\n      state.output += token.output != null ? token.output : token.value;\n\n      if (token.suffix) {\n        state.output += token.suffix;\n      }\n    }\n  }\n\n  return state;\n};\n\n/**\n * Fast paths for creating regular expressions for common glob patterns.\n * This can significantly speed up processing and has very little downside\n * impact when none of the fast paths match.\n */\n\nparse.fastpaths = (input, options) => {\n  const opts = { ...options };\n  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\n  const len = input.length;\n  if (len > max) {\n    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);\n  }\n\n  input = REPLACEMENTS[input] || input;\n  const win32 = utils.isWindows(options);\n\n  // create constants based on platform, for windows or posix\n  const {\n    DOT_LITERAL,\n    SLASH_LITERAL,\n    ONE_CHAR,\n    DOTS_SLASH,\n    NO_DOT,\n    NO_DOTS,\n    NO_DOTS_SLASH,\n    STAR,\n    START_ANCHOR\n  } = constants.globChars(win32);\n\n  const nodot = opts.dot ? NO_DOTS : NO_DOT;\n  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;\n  const capture = opts.capture ? '' : '?:';\n  const state = { negated: false, prefix: '' };\n  let star = opts.bash === true ? '.*?' : STAR;\n\n  if (opts.capture) {\n    star = `(${star})`;\n  }\n\n  const globstar = opts => {\n    if (opts.noglobstar === true) return star;\n    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;\n  };\n\n  const create = str => {\n    switch (str) {\n      case '*':\n        return `${nodot}${ONE_CHAR}${star}`;\n\n      case '.*':\n        return `${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*.*':\n        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '*/*':\n        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;\n\n      case '**':\n        return nodot + globstar(opts);\n\n      case '**/*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;\n\n      case '**/*.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      case '**/.*':\n        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;\n\n      default: {\n        const match = /^(.*?)\\.(\\w+)$/.exec(str);\n        if (!match) return;\n\n        const source = create(match[1]);\n        if (!source) return;\n\n        return source + DOT_LITERAL + match[2];\n      }\n    }\n  };\n\n  const output = utils.removePrefix(input, state);\n  let source = create(output);\n\n  if (source && opts.strictSlashes !== true) {\n    source += `${SLASH_LITERAL}?`;\n  }\n\n  return source;\n};\n\nmodule.exports = parse;\n", "'use strict';\n\nconst path = require('path');\nconst scan = require('./scan');\nconst parse = require('./parse');\nconst utils = require('./utils');\nconst constants = require('./constants');\nconst isObject = val => val && typeof val === 'object' && !Array.isArray(val);\n\n/**\n * Creates a matcher function from one or more glob patterns. The\n * returned function takes a string to match as its first argument,\n * and returns true if the string is a match. The returned matcher\n * function also takes a boolean as the second argument that, when true,\n * returns an object with additional information.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch(glob[, options]);\n *\n * const isMatch = picomatch('*.!(*a)');\n * console.log(isMatch('a.a')); //=> false\n * console.log(isMatch('a.b')); //=> true\n * ```\n * @name picomatch\n * @param {String|Array} `globs` One or more glob patterns.\n * @param {Object=} `options`\n * @return {Function=} Returns a matcher function.\n * @api public\n */\n\nconst picomatch = (glob, options, returnState = false) => {\n  if (Array.isArray(glob)) {\n    const fns = glob.map(input => picomatch(input, options, returnState));\n    const arrayMatcher = str => {\n      for (const isMatch of fns) {\n        const state = isMatch(str);\n        if (state) return state;\n      }\n      return false;\n    };\n    return arrayMatcher;\n  }\n\n  const isState = isObject(glob) && glob.tokens && glob.input;\n\n  if (glob === '' || (typeof glob !== 'string' && !isState)) {\n    throw new TypeError('Expected pattern to be a non-empty string');\n  }\n\n  const opts = options || {};\n  const posix = utils.isWindows(options);\n  const regex = isState\n    ? picomatch.compileRe(glob, options)\n    : picomatch.makeRe(glob, options, false, true);\n\n  const state = regex.state;\n  delete regex.state;\n\n  let isIgnored = () => false;\n  if (opts.ignore) {\n    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };\n    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);\n  }\n\n  const matcher = (input, returnObject = false) => {\n    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });\n    const result = { glob, state, regex, posix, input, output, match, isMatch };\n\n    if (typeof opts.onResult === 'function') {\n      opts.onResult(result);\n    }\n\n    if (isMatch === false) {\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (isIgnored(input)) {\n      if (typeof opts.onIgnore === 'function') {\n        opts.onIgnore(result);\n      }\n      result.isMatch = false;\n      return returnObject ? result : false;\n    }\n\n    if (typeof opts.onMatch === 'function') {\n      opts.onMatch(result);\n    }\n    return returnObject ? result : true;\n  };\n\n  if (returnState) {\n    matcher.state = state;\n  }\n\n  return matcher;\n};\n\n/**\n * Test `input` with the given `regex`. This is used by the main\n * `picomatch()` function to test the input string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.test(input, regex[, options]);\n *\n * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\\/([^/]*?))$/));\n * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp} `regex`\n * @return {Object} Returns an object with matching info.\n * @api public\n */\n\npicomatch.test = (input, regex, options, { glob, posix } = {}) => {\n  if (typeof input !== 'string') {\n    throw new TypeError('Expected input to be a string');\n  }\n\n  if (input === '') {\n    return { isMatch: false, output: '' };\n  }\n\n  const opts = options || {};\n  const format = opts.format || (posix ? utils.toPosixSlashes : null);\n  let match = input === glob;\n  let output = (match && format) ? format(input) : input;\n\n  if (match === false) {\n    output = format ? format(input) : input;\n    match = output === glob;\n  }\n\n  if (match === false || opts.capture === true) {\n    if (opts.matchBase === true || opts.basename === true) {\n      match = picomatch.matchBase(input, regex, options, posix);\n    } else {\n      match = regex.exec(output);\n    }\n  }\n\n  return { isMatch: Boolean(match), match, output };\n};\n\n/**\n * Match the basename of a filepath.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.matchBase(input, glob[, options]);\n * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true\n * ```\n * @param {String} `input` String to test.\n * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).\n * @return {Boolean}\n * @api public\n */\n\npicomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {\n  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);\n  return regex.test(path.basename(input));\n};\n\n/**\n * Returns true if **any** of the given glob `patterns` match the specified `string`.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.isMatch(string, patterns[, options]);\n *\n * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true\n * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false\n * ```\n * @param {String|Array} str The string to test.\n * @param {String|Array} patterns One or more glob patterns to use for matching.\n * @param {Object} [options] See available [options](#options).\n * @return {Boolean} Returns true if any patterns match `str`\n * @api public\n */\n\npicomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);\n\n/**\n * Parse a glob pattern to create the source string for a regular\n * expression.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const result = picomatch.parse(pattern[, options]);\n * ```\n * @param {String} `pattern`\n * @param {Object} `options`\n * @return {Object} Returns an object with useful properties and output to be used as a regex source string.\n * @api public\n */\n\npicomatch.parse = (pattern, options) => {\n  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));\n  return parse(pattern, { ...options, fastpaths: false });\n};\n\n/**\n * Scan a glob pattern to separate the pattern into segments.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.scan(input[, options]);\n *\n * const result = picomatch.scan('!./foo/*.js');\n * console.log(result);\n * { prefix: '!./',\n *   input: '!./foo/*.js',\n *   start: 3,\n *   base: 'foo',\n *   glob: '*.js',\n *   isBrace: false,\n *   isBracket: false,\n *   isGlob: true,\n *   isExtglob: false,\n *   isGlobstar: false,\n *   negated: true }\n * ```\n * @param {String} `input` Glob pattern to scan.\n * @param {Object} `options`\n * @return {Object} Returns an object with\n * @api public\n */\n\npicomatch.scan = (input, options) => scan(input, options);\n\n/**\n * Compile a regular expression from the `state` object returned by the\n * [parse()](#parse) method.\n *\n * @param {Object} `state`\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.\n * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.\n * @return {RegExp}\n * @api public\n */\n\npicomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {\n  if (returnOutput === true) {\n    return state.output;\n  }\n\n  const opts = options || {};\n  const prepend = opts.contains ? '' : '^';\n  const append = opts.contains ? '' : '$';\n\n  let source = `${prepend}(?:${state.output})${append}`;\n  if (state && state.negated === true) {\n    source = `^(?!${source}).*$`;\n  }\n\n  const regex = picomatch.toRegex(source, options);\n  if (returnState === true) {\n    regex.state = state;\n  }\n\n  return regex;\n};\n\n/**\n * Create a regular expression from a parsed glob pattern.\n *\n * ```js\n * const picomatch = require('picomatch');\n * const state = picomatch.parse('*.js');\n * // picomatch.compileRe(state[, options]);\n *\n * console.log(picomatch.compileRe(state));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `state` The object returned from the `.parse` method.\n * @param {Object} `options`\n * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.\n * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.\n * @return {RegExp} Returns a regex created from the given pattern.\n * @api public\n */\n\npicomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {\n  if (!input || typeof input !== 'string') {\n    throw new TypeError('Expected a non-empty string');\n  }\n\n  let parsed = { negated: false, fastpaths: true };\n\n  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {\n    parsed.output = parse.fastpaths(input, options);\n  }\n\n  if (!parsed.output) {\n    parsed = parse(input, options);\n  }\n\n  return picomatch.compileRe(parsed, options, returnOutput, returnState);\n};\n\n/**\n * Create a regular expression from the given regex source string.\n *\n * ```js\n * const picomatch = require('picomatch');\n * // picomatch.toRegex(source[, options]);\n *\n * const { output } = picomatch.parse('*.js');\n * console.log(picomatch.toRegex(output));\n * //=> /^(?:(?!\\.)(?=.)[^/]*?\\.js)$/\n * ```\n * @param {String} `source` Regular expression source string.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\npicomatch.toRegex = (source, options) => {\n  try {\n    const opts = options || {};\n    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));\n  } catch (err) {\n    if (options && options.debug === true) throw err;\n    return /$^/;\n  }\n};\n\n/**\n * Picomatch constants.\n * @return {Object}\n */\n\npicomatch.constants = constants;\n\n/**\n * Expose \"picomatch\"\n */\n\nmodule.exports = picomatch;\n", "'use strict';\n\nmodule.exports = require('./lib/picomatch');\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useTranspileTemplateLiterals = exports.useTopLevelImportPathMatchers = exports.useSSR = exports.usePureAnnotation = exports.useNamespace = exports.useMinify = exports.useMeaninglessFileNames = exports.useFileName = exports.useDisplayName = exports.useCssProp = void 0;\n\nvar _picomatch = _interopRequireDefault(require(\"picomatch\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getOption({\n  opts\n}, name, defaultValue = true) {\n  return opts[name] === undefined || opts[name] === null ? defaultValue : opts[name];\n}\n\nconst useDisplayName = state => getOption(state, 'displayName');\n\nexports.useDisplayName = useDisplayName;\n\nconst useTopLevelImportPathMatchers = state => getOption(state, 'topLevelImportPaths', []).map(pattern => (0, _picomatch.default)(pattern));\n\nexports.useTopLevelImportPathMatchers = useTopLevelImportPathMatchers;\n\nconst useSSR = state => getOption(state, 'ssr', true);\n\nexports.useSSR = useSSR;\n\nconst useFileName = state => getOption(state, 'fileName');\n\nexports.useFileName = useFileName;\n\nconst useMeaninglessFileNames = state => getOption(state, 'meaninglessFileNames', ['index']);\n\nexports.useMeaninglessFileNames = useMeaninglessFileNames;\n\nconst useMinify = state => getOption(state, 'minify');\n\nexports.useMinify = useMinify;\n\nconst useTranspileTemplateLiterals = state => getOption(state, 'transpileTemplateLiterals');\n\nexports.useTranspileTemplateLiterals = useTranspileTemplateLiterals;\n\nconst useNamespace = state => {\n  const namespace = getOption(state, 'namespace', '');\n\n  if (namespace) {\n    return `${namespace}__`;\n  }\n\n  return '';\n};\n\nexports.useNamespace = useNamespace;\n\nconst usePureAnnotation = state => getOption(state, 'pure', false);\n\nexports.usePureAnnotation = usePureAnnotation;\n\nconst useCssProp = state => getOption(state, 'cssProp', true);\n\nexports.useCssProp = useCssProp;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWithThemeHelper = exports.isValidTopLevelImport = exports.isUseTheme = exports.isStyled = exports.isPureHelper = exports.isKeyframesHelper = exports.isInjectGlobalHelper = exports.isHelper = exports.isCreateGlobalStyleHelper = exports.isCSSHelper = exports.importLocalName = void 0;\n\nvar _options = require(\"./options\");\n\nconst VALID_TOP_LEVEL_IMPORT_PATH_MATCHERS = ['styled-components', 'styled-components/no-tags', 'styled-components/native', 'styled-components/primitives'].map(literal => x => x === literal);\n\nconst isValidTopLevelImport = (x, state) => {\n  return [...VALID_TOP_LEVEL_IMPORT_PATH_MATCHERS, ...(0, _options.useTopLevelImportPathMatchers)(state)].some(isMatch => isMatch(x));\n};\n\nexports.isValidTopLevelImport = isValidTopLevelImport;\nconst localNameCache = {};\n\nconst importLocalName = (name, state, options = {}) => {\n  const {\n    cacheIdentifier,\n    bypassCache = false\n  } = options;\n  const cacheKeyAffix = cacheIdentifier ? `|${cacheIdentifier}` : '';\n  const cacheKey = name + state.file.opts.filename + cacheKeyAffix;\n\n  if (!bypassCache && cacheKey in localNameCache) {\n    return localNameCache[cacheKey]; // state.customImportName is injected by the babel macro\n  } else if (state.customImportName) {\n    return state.customImportName.name;\n  }\n\n  let localName = state.styledRequired ? name === 'default' ? 'styled' : name : false;\n  state.file.path.traverse({\n    ImportDeclaration: {\n      exit(path) {\n        const {\n          node\n        } = path;\n\n        if (isValidTopLevelImport(node.source.value, state)) {\n          for (const specifier of path.get('specifiers')) {\n            if (specifier.isImportSpecifier() && specifier.node.imported.name === 'styled') {\n              localName = 'styled';\n            }\n\n            if (specifier.isImportDefaultSpecifier()) {\n              localName = specifier.node.local.name;\n            }\n\n            if (specifier.isImportSpecifier() && specifier.node.imported.name === name) {\n              localName = specifier.node.local.name;\n            }\n\n            if (specifier.isImportNamespaceSpecifier()) {\n              localName = name === 'default' ? specifier.node.local.name : name;\n            }\n          }\n        }\n      }\n\n    }\n  });\n  localNameCache[cacheKey] = localName;\n  return localName;\n};\n\nexports.importLocalName = importLocalName;\n\nconst isStyled = t => (tag, state) => {\n  if (t.isCallExpression(tag) && t.isMemberExpression(tag.callee) && tag.callee.property.name !== 'default'\n  /** ignore default for #93 below */\n  ) {\n    // styled.something()\n    return isStyled(t)(tag.callee.object, state);\n  } else {\n    return t.isMemberExpression(tag) && tag.object.name === importLocalName('default', state, {\n      cacheIdentifier: tag.object.name\n    }) && !isHelper(t)(tag.property, state) || t.isCallExpression(tag) && tag.callee.name === importLocalName('default', state, {\n      cacheIdentifier: tag.callee.name\n    }) ||\n    /**\n     * #93 Support require()\n     * styled-components might be imported using a require()\n     * call and assigned to a variable of any name.\n     * - styled.default.div``\n     * - styled.default.something()\n     */\n    state.styledRequired && t.isMemberExpression(tag) && t.isMemberExpression(tag.object) && tag.object.property.name === 'default' && tag.object.object.name === state.styledRequired || state.styledRequired && t.isCallExpression(tag) && t.isMemberExpression(tag.callee) && tag.callee.property.name === 'default' && tag.callee.object.name === state.styledRequired || importLocalName('default', state) && t.isMemberExpression(tag) && t.isMemberExpression(tag.object) && tag.object.property.name === 'default' && tag.object.object.name === importLocalName('default', state) || importLocalName('default', state) && t.isCallExpression(tag) && t.isMemberExpression(tag.callee) && tag.object.property.name === 'default' && tag.object.object.name === importLocalName('default', state);\n  }\n};\n\nexports.isStyled = isStyled;\n\nconst isCSSHelper = t => (tag, state) => t.isIdentifier(tag) && tag.name === importLocalName('css', state);\n\nexports.isCSSHelper = isCSSHelper;\n\nconst isCreateGlobalStyleHelper = t => (tag, state) => t.isIdentifier(tag) && tag.name === importLocalName('createGlobalStyle', state);\n\nexports.isCreateGlobalStyleHelper = isCreateGlobalStyleHelper;\n\nconst isInjectGlobalHelper = t => (tag, state) => t.isIdentifier(tag) && tag.name === importLocalName('injectGlobal', state);\n\nexports.isInjectGlobalHelper = isInjectGlobalHelper;\n\nconst isKeyframesHelper = t => (tag, state) => t.isIdentifier(tag) && tag.name === importLocalName('keyframes', state);\n\nexports.isKeyframesHelper = isKeyframesHelper;\n\nconst isWithThemeHelper = t => (tag, state) => t.isIdentifier(tag) && tag.name === importLocalName('withTheme', state);\n\nexports.isWithThemeHelper = isWithThemeHelper;\n\nconst isUseTheme = t => (tag, state) => t.isIdentifier(tag) && tag.name === importLocalName('useTheme', state);\n\nexports.isUseTheme = isUseTheme;\n\nconst isHelper = t => (tag, state) => isCreateGlobalStyleHelper(t)(tag, state) || isCSSHelper(t)(tag, state) || isInjectGlobalHelper(t)(tag, state) || isUseTheme(t)(tag, state) || isKeyframesHelper(t)(tag, state) || isWithThemeHelper(t)(tag, state);\n\nexports.isHelper = isHelper;\n\nconst isPureHelper = t => (tag, state) => isCreateGlobalStyleHelper(t)(tag, state) || isCSSHelper(t)(tag, state) || isKeyframesHelper(t)(tag, state) || isUseTheme(t)(tag, state) || isWithThemeHelper(t)(tag, state);\n\nexports.isPureHelper = isPureHelper;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperAnnotateAsPure = _interopRequireDefault(require(\"@babel/helper-annotate-as-pure\"));\n\nvar _options = require(\"../utils/options\");\n\nvar _detectors = require(\"../utils/detectors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = t => (path, state) => {\n  if ((0, _options.usePureAnnotation)(state)) {\n    if ((0, _detectors.isStyled)(t)(path.node, state) || (0, _detectors.isStyled)(t)(path.node.callee, state) || (0, _detectors.isPureHelper)(t)(path.node.tag || path.node.callee, state)) {\n      if (path.parent.type === 'VariableDeclarator' || path.parent.type === 'TaggedTemplateExpression') {\n        (0, _helperAnnotateAsPure.default)(path);\n      }\n    }\n  }\n};\n\nexports.default = _default;", "/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n", "var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n", "var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n", "var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n", "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n", "var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n", "/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n", "var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n", "var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n", "/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n", "var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n", "/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n", "var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n", "var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n", "var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n", "/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n", "var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n", "var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n", "var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n", "var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n", "/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n", "/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n", "var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n", "var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n", "var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n", "var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n", "var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n", "var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n", "var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n", "var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n", "/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n", "var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n", "var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n", "var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n", "var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n", "var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n", "var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n", "/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n", "/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n", "var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n", "/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n", "/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n", "/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n", "var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n", "var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n", "/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n", "/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n", "/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n", "/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n", "var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    arrayMap = require('./_arrayMap'),\n    baseUnary = require('./_baseUnary'),\n    cacheHas = require('./_cacheHas');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n", "/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n", "/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n", "var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n", "/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n", "var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n", "var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n", "/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n", "/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n", "var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n", "/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n", "var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n", "var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n", "/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n", "var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n", "var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n", "/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n", "var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n", "var isArrayLike = require('./isArrayLike'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n", "var baseDifference = require('./_baseDifference'),\n    baseFlatten = require('./_baseFlatten'),\n    baseRest = require('./_baseRest'),\n    isArrayLikeObject = require('./isArrayLikeObject');\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nmodule.exports = difference;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.splitByPlaceholders = exports.placeholderRegex = exports.makePlaceholder = void 0;\n// The capture group makes sure that the split contains the interpolation index\nconst placeholderRegex = /(?:__PLACEHOLDER_(\\d+)__)/g; // Alternative regex that splits without a capture group\n\nexports.placeholderRegex = placeholderRegex;\nconst placeholderNonCapturingRegex = /__PLACEHOLDER_(?:\\d+)__/g; // Generates a placeholder from an index\n\nconst makePlaceholder = index => `__PLACEHOLDER_${index}__`; // Splits CSS by placeholders\n\n\nexports.makePlaceholder = makePlaceholder;\n\nconst splitByPlaceholders = ([css, ...rest], capture = true) => [css.split(capture ? placeholderRegex : placeholderNonCapturingRegex), ...rest];\n\nexports.splitByPlaceholders = splitByPlaceholders;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stripLineComment = exports.minifyRawValues = exports.minifyRaw = exports.minifyCookedValues = exports.minifyCooked = exports.compressSymbols = void 0;\n\nvar _difference = _interopRequireDefault(require(\"lodash/difference\"));\n\nvar _placeholderUtils = require(\"../css/placeholderUtils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst injectUniquePlaceholders = strArr => {\n  let i = 0;\n  return strArr.reduce((str, val, index, arr) => {\n    return str + val + (index < arr.length - 1 ? (0, _placeholderUtils.makePlaceholder)(i++) : '');\n  }, '');\n};\n\nconst makeMultilineCommentRegex = newlinePattern => new RegExp('\\\\/\\\\*[^!](.|' + newlinePattern + ')*?\\\\*\\\\/', 'g');\n\nconst lineCommentStart = /\\/\\//g;\nconst symbolRegex = /(\\s*[;:{},]\\s*)/g; // Counts occurences of substr inside str\n\nconst countOccurences = (str, substr) => str.split(substr).length - 1; // Joins substrings until predicate returns true\n\n\nconst reduceSubstr = (substrs, join, predicate) => {\n  const length = substrs.length;\n  let res = substrs[0];\n\n  if (length === 1) {\n    return res;\n  }\n\n  for (let i = 1; i < length; i++) {\n    if (predicate(res)) {\n      break;\n    }\n\n    res += join + substrs[i];\n  }\n\n  return res;\n}; // Joins at comment starts when it's inside a string or parantheses\n// effectively removing line comments\n\n\nconst stripLineComment = line => reduceSubstr(line.split(lineCommentStart), '//', str => !str.endsWith(':') && // NOTE: This is another guard against urls, if they're not inside strings or parantheses.\ncountOccurences(str, \"'\") % 2 === 0 && countOccurences(str, '\"') % 2 === 0 && countOccurences(str, '(') === countOccurences(str, ')'));\n\nexports.stripLineComment = stripLineComment;\n\nconst compressSymbols = code => code.split(symbolRegex).reduce((str, fragment, index) => {\n  // Even-indices are non-symbol fragments\n  if (index % 2 === 0) {\n    return str + fragment;\n  } // Only manipulate symbols outside of strings\n\n\n  if (countOccurences(str, \"'\") % 2 !== 0 || countOccurences(str, '\"') % 2 !== 0) {\n    return str + fragment;\n  } // Preserve whitespace preceding colon, to avoid joining selectors.\n\n\n  if (/^\\s+:/.test(fragment)) {\n    return str + ' ' + fragment.trim();\n  }\n\n  return str + fragment.trim();\n}, ''); // Detects lines that are exclusively line comments\n\n\nexports.compressSymbols = compressSymbols;\n\nconst isLineComment = line => line.trim().startsWith('//'); // Creates a minifier with a certain linebreak pattern\n\n\nconst minify = linebreakPattern => {\n  const linebreakRegex = new RegExp(linebreakPattern + '\\\\s*', 'g');\n  const multilineCommentRegex = makeMultilineCommentRegex(linebreakPattern);\n  return code => {\n    const newCode = code.replace(multilineCommentRegex, '\\n') // Remove multiline comments\n    .split(linebreakRegex) // Split at newlines\n    .filter(line => line.length > 0 && !isLineComment(line)) // Removes lines containing only line comments\n    .map(stripLineComment) // Remove line comments inside text\n    .join(' '); // Rejoin all lines\n\n    const eliminatedExpressionIndices = (0, _difference.default)(code.match(_placeholderUtils.placeholderRegex), newCode.match(_placeholderUtils.placeholderRegex)).map(x => parseInt(x.match(/\\d+/)[0], 10));\n    return [compressSymbols(newCode), eliminatedExpressionIndices];\n  };\n};\n\nconst minifyRaw = minify('(?:\\\\\\\\r|\\\\\\\\n|\\\\r|\\\\n)');\nexports.minifyRaw = minifyRaw;\nconst minifyCooked = minify('[\\\\r\\\\n]');\nexports.minifyCooked = minifyCooked;\n\nconst minifyRawValues = rawValues => (0, _placeholderUtils.splitByPlaceholders)(minifyRaw(injectUniquePlaceholders(rawValues)), false);\n\nexports.minifyRawValues = minifyRawValues;\n\nconst minifyCookedValues = cookedValues => (0, _placeholderUtils.splitByPlaceholders)(minifyCooked(injectUniquePlaceholders(cookedValues)), false);\n\nexports.minifyCookedValues = minifyCookedValues;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _options = require(\"../utils/options\");\n\nvar _detectors = require(\"../utils/detectors\");\n\nvar _minify = require(\"../minify\");\n\nvar _default = t => (path, state) => {\n  if ((0, _options.useMinify)(state) && ((0, _detectors.isStyled)(t)(path.node.tag, state) || (0, _detectors.isHelper)(t)(path.node.tag, state))) {\n    const templateLiteral = path.node.quasi;\n    const quasisLength = templateLiteral.quasis.length;\n    const [rawValuesMinified] = (0, _minify.minifyRawValues)(templateLiteral.quasis.map(x => x.value.raw));\n    const [cookedValuesMinfified, eliminatedExpressionIndices] = (0, _minify.minifyCookedValues)(templateLiteral.quasis.map(x => x.value.cooked));\n    eliminatedExpressionIndices.forEach((expressionIndex, iteration) => {\n      templateLiteral.expressions.splice(expressionIndex - iteration, 1);\n    });\n\n    for (let i = 0; i < quasisLength; i++) {\n      const element = templateLiteral.quasis[i];\n      element.value.raw = rawValuesMinified[i];\n      element.value.cooked = cookedValuesMinfified[i];\n    }\n  }\n};\n\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Get the name of variable that contains node\n *\n * @param  {Path} path to the node\n *\n * @return {String}   The target\n */\nvar _default = t => path => {\n  let namedNode;\n  path.find(path => {\n    // X = styled\n    if (path.isAssignmentExpression()) {\n      namedNode = path.node.left; // const X = { Y: styled }\n    } else if (path.isObjectProperty()) {\n      namedNode = path.node.key; // class Y { (static) X = styled }\n    } else if (path.isClassProperty()) {\n      namedNode = path.node.key; // const X = styled\n    } else if (path.isVariableDeclarator()) {\n      namedNode = path.node.id;\n    } else if (path.isStatement()) {\n      // we've hit a statement, we should stop crawling up\n      return true;\n    } // we've got an displayName (if we need it) no need to continue\n    // However if this is an assignment expression like X = styled then we\n    // want to keep going up incase there is Y = X = styled; in this case we\n    // want to pick the outer name because react-refresh will add HMR variables\n    // like this: X = _a = styled. We could also consider only doing this if the\n    // name starts with an underscore.\n\n\n    if (namedNode && !path.isAssignmentExpression()) return true;\n  }); // foo.bar -> bar\n\n  if (t.isMemberExpression(namedNode)) {\n    namedNode = namedNode.property;\n  } // identifiers are the only thing we can reliably get a name from\n\n\n  return t.isIdentifier(namedNode) ? namedNode.name : undefined;\n};\n\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = prefixLeadingDigit;\n\nfunction prefixLeadingDigit(str) {\n  return str.replace(/^(\\d)/, 'sc-$1');\n}", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * JS Implementation of MurmurHash2\n *\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/murmurhash-js\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n * @see http://sites.google.com/site/murmurhash/\n *\n * @param {string} str ASCII only\n * @return {string} Base 36 encoded hash result\n */\nfunction murmurhash2_32_gc(str) {\n  let l = str.length;\n  let h = l;\n  let i = 0;\n  let k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  } // forgive existing code\n\n  /* eslint-disable no-fallthrough */\n\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n  /* eslint-enable no-fallthrough */\n\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return (h >>> 0).toString(36);\n}\n\nvar _default = murmurhash2_32_gc;\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _options = require(\"../utils/options\");\n\nvar _getName = _interopRequireDefault(require(\"../utils/getName\"));\n\nvar _prefixDigit = _interopRequireDefault(require(\"../utils/prefixDigit\"));\n\nvar _hash = _interopRequireDefault(require(\"../utils/hash\"));\n\nvar _detectors = require(\"../utils/detectors\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst addConfig = t => (path, displayName, componentId) => {\n  if (!displayName && !componentId) {\n    return;\n  }\n\n  const withConfigProps = [];\n\n  if (displayName) {\n    withConfigProps.push(t.objectProperty(t.identifier('displayName'), t.stringLiteral(displayName)));\n  }\n\n  if (componentId) {\n    withConfigProps.push(t.objectProperty(t.identifier('componentId'), t.stringLiteral(componentId)));\n  }\n\n  const existingConfig = getExistingConfig(t)(path);\n\n  if (existingConfig && existingConfig.arguments.length && Array.isArray(existingConfig.arguments[0].properties) && !existingConfig.arguments[0].properties.some(prop => ['displayName', 'componentId'].includes(prop.key.name))) {\n    existingConfig.arguments[0].properties.push(...withConfigProps);\n    return;\n  }\n\n  if (path.node.callee && t.isMemberExpression(path.node.callee.callee) && path.node.callee.callee.property && path.node.callee.callee.property.name && path.node.callee.callee.property.name == 'withConfig' && path.node.callee.arguments.length && Array.isArray(path.node.callee.arguments[0].properties) && !path.node.callee.arguments[0].properties.some(prop => ['displayName', 'componentId'].includes(prop.key.name))) {\n    path.node.callee.arguments[0].properties.push(...withConfigProps);\n    return;\n  }\n\n  if (path.node.tag) {\n    // Replace x`...` with x.withConfig({ })`...`\n    path.node.tag = t.callExpression(t.memberExpression(path.node.tag, t.identifier('withConfig')), [t.objectExpression(withConfigProps)]);\n  } else {\n    path.replaceWith(t.callExpression(t.callExpression(t.memberExpression(path.node.callee, t.identifier('withConfig')), [t.objectExpression(withConfigProps)]), path.node.arguments));\n  }\n};\n\nconst getExistingConfig = t => path => {\n  if (path.node.callee && t.isMemberExpression(path.node.callee.callee) && path.node.callee.callee.property && path.node.callee.callee.property.name && path.node.callee.callee.property.name == 'withConfig') {\n    return path.node.callee;\n  }\n\n  if (path.node.callee && t.isMemberExpression(path.node.callee.callee) && path.node.callee.callee.object && path.node.callee.callee.object.callee && path.node.callee.callee.object.callee.property && path.node.callee.callee.object.callee.property.name === 'withConfig') {\n    return path.node.callee.callee.object;\n  }\n};\n\nconst getBlockName = (file, meaninglessFileNames) => {\n  const name = _path.default.basename(file.opts.filename, _path.default.extname(file.opts.filename));\n\n  return meaninglessFileNames.includes(name) ? _path.default.basename(_path.default.dirname(file.opts.filename)) : name;\n};\n\nconst getDisplayName = t => (path, state) => {\n  const {\n    file\n  } = state;\n  const componentName = (0, _getName.default)(t)(path);\n\n  if (file) {\n    const blockName = getBlockName(file, (0, _options.useMeaninglessFileNames)(state));\n\n    if (blockName === componentName) {\n      return componentName;\n    }\n\n    return componentName ? `${(0, _prefixDigit.default)(blockName)}__${componentName}` : (0, _prefixDigit.default)(blockName);\n  } else {\n    return componentName;\n  }\n};\n\nconst findModuleRoot = filename => {\n  if (!filename) {\n    return null;\n  }\n\n  let dir = _path.default.dirname(filename);\n\n  if (_fs.default.existsSync(_path.default.join(dir, 'package.json'))) {\n    return dir;\n  } else if (dir !== filename) {\n    return findModuleRoot(dir);\n  } else {\n    return null;\n  }\n};\n\nconst FILE_HASH = 'styled-components-file-hash';\nconst COMPONENT_POSITION = 'styled-components-component-position';\nconst separatorRegExp = new RegExp(`\\\\${_path.default.sep}`, 'g');\n\nconst getFileHash = state => {\n  const {\n    file\n  } = state; // hash calculation is costly due to fs operations, so we'll cache it per file.\n\n  if (file.get(FILE_HASH)) {\n    return file.get(FILE_HASH);\n  }\n\n  const filename = file.opts.filename; // find module root directory\n\n  const moduleRoot = findModuleRoot(filename);\n\n  const filePath = moduleRoot && _path.default.relative(moduleRoot, filename).replace(separatorRegExp, '/');\n\n  const moduleName = moduleRoot && JSON.parse(_fs.default.readFileSync(_path.default.join(moduleRoot, 'package.json'))).name;\n  const code = file.code;\n  const stuffToHash = [moduleName];\n\n  if (filePath) {\n    stuffToHash.push(filePath);\n  } else {\n    stuffToHash.push(code);\n  }\n\n  const fileHash = (0, _hash.default)(stuffToHash.join(''));\n  file.set(FILE_HASH, fileHash);\n  return fileHash;\n};\n\nconst getNextId = state => {\n  const id = state.file.get(COMPONENT_POSITION) || 0;\n  state.file.set(COMPONENT_POSITION, id + 1);\n  return id;\n};\n\nconst getComponentId = state => {\n  // Prefix the identifier with a character because CSS classes cannot start with a number\n  return `${(0, _options.useNamespace)(state)}sc-${getFileHash(state)}-${getNextId(state)}`;\n};\n\nvar _default = t => (path, state) => {\n  if (path.node.tag ? (0, _detectors.isStyled)(t)(path.node.tag, state) :\n  /* styled()`` */\n  (0, _detectors.isStyled)(t)(path.node.callee, state) && path.node.callee.property && path.node.callee.property.name !== 'withConfig' || // styled(x)({})\n  (0, _detectors.isStyled)(t)(path.node.callee, state) && !t.isMemberExpression(path.node.callee.callee) || // styled(x).attrs()({})\n  (0, _detectors.isStyled)(t)(path.node.callee, state) && t.isMemberExpression(path.node.callee.callee) && path.node.callee.callee.property && path.node.callee.callee.property.name && path.node.callee.callee.property.name !== 'withConfig' || // styled(x).withConfig({})\n  (0, _detectors.isStyled)(t)(path.node.callee, state) && t.isMemberExpression(path.node.callee.callee) && path.node.callee.callee.property && path.node.callee.callee.property.name && path.node.callee.callee.property.name === 'withConfig' && path.node.callee.arguments.length && Array.isArray(path.node.callee.arguments[0].properties) && !path.node.callee.arguments[0].properties.some(prop => ['displayName', 'componentId'].includes(prop.key.name))) {\n    const displayName = (0, _options.useDisplayName)(state) && getDisplayName(t)(path, (0, _options.useFileName)(state) && state);\n    addConfig(t)(path, displayName && displayName.replace(/[^_a-zA-Z0-9-]/g, ''), (0, _options.useSSR)(state) && getComponentId(state));\n  }\n};\n\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _detectors = require(\"../../utils/detectors\");\n\nvar _default = t => (path, state) => {\n  if ((0, _detectors.isStyled)(t)(path.node.tag, state) || (0, _detectors.isHelper)(t)(path.node.tag, state)) {\n    const {\n      tag: callee,\n      quasi: {\n        quasis,\n        expressions\n      }\n    } = path.node;\n    const values = t.arrayExpression(quasis.filter(quasi => quasi.value.cooked !== undefined).map(quasi => t.stringLiteral(quasi.value.cooked)));\n    path.replaceWith(t.callExpression(callee, [values, ...expressions]));\n  }\n};\n\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _options = require(\"../../utils/options\");\n\nvar _transpile = _interopRequireDefault(require(\"./transpile\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = t => (path, state) => {\n  if ((0, _options.useTranspileTemplateLiterals)(state)) {\n    (0, _transpile.default)(t)(path, state);\n  }\n};\n\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _detectors = require(\"../utils/detectors\");\n\nvar _default = t => (path, state) => {\n  if (t.isCallExpression(path.node.init) && t.isIdentifier(path.node.init.callee) && path.node.init.callee.name === 'require' && path.node.init.arguments && path.node.init.arguments[0] && t.isLiteral(path.node.init.arguments[0]) && (0, _detectors.isValidTopLevelImport)(path.node.init.arguments[0].value, state)) {\n    state.styledRequired = path.node.id.name;\n  }\n};\n\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperModuleImports = require(\"@babel/helper-module-imports\");\n\nvar _detectors = require(\"../utils/detectors\");\n\nvar _options = require(\"../utils/options\");\n\n// Most of this code was taken from @satya164's babel-plugin-css-prop\n// @see https://github.com/satya164/babel-plugin-css-prop\nconst TAG_NAME_REGEXP = /^[a-z][a-z\\d]*(\\-[a-z][a-z\\d]*)?$/;\n\nconst getName = (node, t) => {\n  if (typeof node.name === 'string') return node.name;\n\n  if (t.isJSXMemberExpression(node)) {\n    return `${getName(node.object, t)}.${node.property.name}`;\n  }\n\n  throw path.buildCodeFrameError(`Cannot infer name from node with type \"${node.type}\". Please submit an issue at github.com/styled-components/babel-plugin-styled-components with your code so we can take a look at your use case!`);\n};\n\nconst getNameExpression = (node, t) => {\n  if (typeof node.name === 'string') return t.identifier(node.name);\n\n  if (t.isJSXMemberExpression(node)) {\n    return t.memberExpression(getNameExpression(node.object, t), t.identifier(node.property.name));\n  }\n\n  throw path.buildCodeFrameError(`Cannot infer name expression from node with type \"${node.type}\". Please submit an issue at github.com/styled-components/babel-plugin-styled-components with your code so we can take a look at your use case!`);\n};\n\nconst getLocalIdentifier = path => {\n  const identifier = path.scope.generateUidIdentifier('css'); // make it transient\n\n  identifier.name = identifier.name.replace('_', '$_');\n  return identifier;\n};\n\nvar _default = t => (path, state) => {\n  if (!(0, _options.useCssProp)(state)) return;\n  if (path.node.name.name !== 'css') return;\n  const program = state.file.path; // state.customImportName is passed through from styled-components/macro if it's used\n  // since the macro also inserts the import\n\n  let importName = state.customImportName || (0, _detectors.importLocalName)('default', state);\n  const {\n    bindings\n  } = program.scope; // Insert import if it doesn't exist yet\n\n  if (!importName || !bindings[importName.name] || !bindings[importName]) {\n    (0, _helperModuleImports.addDefault)(path, 'styled-components', {\n      nameHint: 'styled'\n    });\n    importName = t.identifier((0, _detectors.importLocalName)('default', state, {\n      bypassCache: true\n    }));\n  }\n\n  if (!t.isIdentifier(importName)) importName = t.identifier(importName);\n  const elem = path.parentPath;\n  const name = getName(elem.node.name, t);\n  const nameExpression = getNameExpression(elem.node.name, t);\n  const id = path.scope.generateUidIdentifier('Styled' + name.replace(/^([a-z])/, (match, p1) => p1.toUpperCase()));\n  let styled;\n  let injector;\n\n  if (TAG_NAME_REGEXP.test(name)) {\n    styled = t.callExpression(importName, [t.stringLiteral(name)]);\n  } else {\n    styled = t.callExpression(importName, [nameExpression]);\n\n    if (bindings[name] && !t.isImportDeclaration(bindings[name].path.parent)) {\n      injector = nodeToInsert => (t.isVariableDeclaration(bindings[name].path.parent) ? bindings[name].path.parentPath : bindings[name].path).insertAfter(nodeToInsert);\n    }\n  }\n\n  let css;\n\n  if (t.isStringLiteral(path.node.value)) {\n    css = t.templateLiteral([t.templateElement({\n      raw: path.node.value.value,\n      cooked: path.node.value.value\n    }, true)], []);\n  } else if (t.isJSXExpressionContainer(path.node.value)) {\n    if (t.isTemplateLiteral(path.node.value.expression)) {\n      css = path.node.value.expression;\n    } else if (t.isTaggedTemplateExpression(path.node.value.expression) && path.node.value.expression.tag.name === 'css') {\n      css = path.node.value.expression.quasi;\n    } else if (t.isObjectExpression(path.node.value.expression)) {\n      css = path.node.value.expression;\n    } else {\n      css = t.templateLiteral([t.templateElement({\n        raw: '',\n        cooked: ''\n      }, false), t.templateElement({\n        raw: '',\n        cooked: ''\n      }, true)], [path.node.value.expression]);\n    }\n  }\n\n  if (!css) return; // strip off css prop from final output\n\n  elem.node.attributes = elem.node.attributes.filter(x => t.isJSXSpreadAttribute(x) || (t.isJSXAttribute(x) ? x.name.name !== 'css' : false));\n  elem.node.name = t.jSXIdentifier(id.name);\n\n  if (elem.parentPath.node.closingElement) {\n    elem.parentPath.node.closingElement.name = t.jSXIdentifier(id.name);\n  } // object syntax\n\n\n  if (t.isObjectExpression(css)) {\n    /**\n     * for objects as CSS props, we have to recurse through the object and replace any\n     * object key/value scope references with generated props similar to how the template\n     * literal transform above creates dynamic interpolations\n     */\n    const p = t.identifier('p');\n    let replaceObjectWithPropFunction = false;\n    css.properties = css.properties.reduce(function propertiesReducer(acc, property) {\n      /**\n       * handle potential object key interpolations\n       */\n      if (t.isMemberExpression(property.key) || t.isCallExpression(property.key) || // checking for css={{[something]: something}}\n      t.isIdentifier(property.key) && path.scope.hasBinding(property.key.name) && ( // but not a object reference shorthand like css={{ color }}\n      t.isIdentifier(property.value) ? property.key.name !== property.value.name : true) && // and not a tricky expression\n      !t.isLogicalExpression(property.value) && !t.isConditionalExpression(property.value)) {\n        replaceObjectWithPropFunction = true;\n        const identifier = getLocalIdentifier(path);\n        elem.node.attributes.push(t.jSXAttribute(t.jSXIdentifier(identifier.name), t.jSXExpressionContainer(property.key)));\n        property.key = t.memberExpression(p, identifier);\n      }\n\n      if (t.isObjectExpression(property.value)) {\n        // recurse for objects within objects (e.g. {'::before': { content: x }})\n        property.value.properties = property.value.properties.reduce(propertiesReducer, []);\n        acc.push(property);\n      } else if (t.isSpreadElement(property)) {\n        // handle spread variables and such\n        if (t.isObjectExpression(property.argument)) {\n          property.argument.properties = property.argument.properties.reduce(propertiesReducer, []);\n        } else {\n          replaceObjectWithPropFunction = true;\n          const identifier = getLocalIdentifier(path);\n          elem.node.attributes.push(t.jSXAttribute(t.jSXIdentifier(identifier.name), t.jSXExpressionContainer(property.argument)));\n          property.argument = t.memberExpression(p, identifier);\n        }\n\n        acc.push(property);\n      } else if ( // if a non-primitive value we have to interpolate it\n      [t.isBigIntLiteral, t.isBooleanLiteral, t.isNullLiteral, t.isNumericLiteral, t.isStringLiteral].filter(Boolean) // older versions of babel might not have bigint support baked in\n      .every(x => !x(property.value))) {\n        replaceObjectWithPropFunction = true;\n        const identifier = getLocalIdentifier(path);\n        elem.node.attributes.push(t.jSXAttribute(t.jSXIdentifier(identifier.name), t.jSXExpressionContainer(property.value)));\n        acc.push(t.objectProperty(property.key, t.memberExpression(p, identifier)));\n      } else {\n        // some sort of primitive which is safe to pass through as-is\n        acc.push(property);\n      }\n\n      return acc;\n    }, []);\n\n    if (replaceObjectWithPropFunction) {\n      css = t.arrowFunctionExpression([p], css);\n    }\n  } else {\n    // tagged template literal\n    css.expressions = css.expressions.reduce((acc, ex) => {\n      if (Object.keys(bindings).some(key => bindings[key].referencePaths.find(p => p.node === ex)) || t.isFunctionExpression(ex) || t.isArrowFunctionExpression(ex)) {\n        acc.push(ex);\n      } else {\n        const identifier = getLocalIdentifier(path);\n        const p = t.identifier('p');\n        elem.node.attributes.push(t.jSXAttribute(t.jSXIdentifier(identifier.name), t.jSXExpressionContainer(ex)));\n        acc.push(t.arrowFunctionExpression([p], t.memberExpression(p, identifier)));\n      }\n\n      return acc;\n    }, []);\n  }\n\n  if (!injector) {\n    let parent = elem;\n\n    while (!t.isProgram(parent)) {\n      parent = parent.parentPath;\n    }\n\n    injector = nodeToInsert => parent.pushContainer('body', nodeToInsert);\n  }\n\n  injector(t.variableDeclaration('var', [t.variableDeclarator(id, t.isObjectExpression(css) || t.isArrowFunctionExpression(css) ? t.callExpression(styled, [css]) : t.taggedTemplateExpression(styled, css))]));\n};\n\nexports.default = _default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _babelPluginSyntaxJsx = _interopRequireDefault(require(\"babel-plugin-syntax-jsx\"));\n\nvar _pure = _interopRequireDefault(require(\"./visitors/pure\"));\n\nvar _minify = _interopRequireDefault(require(\"./visitors/minify\"));\n\nvar _displayNameAndId = _interopRequireDefault(require(\"./visitors/displayNameAndId\"));\n\nvar _templateLiterals = _interopRequireDefault(require(\"./visitors/templateLiterals\"));\n\nvar _assignStyledRequired = _interopRequireDefault(require(\"./visitors/assignStyledRequired\"));\n\nvar _transpileCssProp = _interopRequireDefault(require(\"./visitors/transpileCssProp\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _default({\n  types: t\n}) {\n  return {\n    inherits: _babelPluginSyntaxJsx.default,\n    visitor: {\n      Program(path, state) {\n        path.traverse({\n          JSXAttribute(path, state) {\n            (0, _transpileCssProp.default)(t)(path, state);\n          },\n\n          VariableDeclarator(path, state) {\n            (0, _assignStyledRequired.default)(t)(path, state);\n          }\n\n        }, state);\n      },\n\n      CallExpression(path, state) {\n        (0, _displayNameAndId.default)(t)(path, state);\n        (0, _pure.default)(t)(path, state);\n      },\n\n      TaggedTemplateExpression(path, state) {\n        (0, _minify.default)(t)(path, state);\n        (0, _displayNameAndId.default)(t)(path, state);\n        (0, _templateLiterals.default)(t)(path, state);\n        (0, _pure.default)(t)(path, state);\n      }\n\n    }\n  };\n}", "// @flow\nimport { addDefault, addNamed } from '@babel/helper-module-imports';\nimport traverse from '@babel/traverse';\nimport { createMacro } from 'babel-plugin-macros';\nimport babelPlugin from 'babel-plugin-styled-components';\n\nfunction styledComponentsMacro({\n  references,\n  state,\n  babel: { types: t },\n  config: { importModuleName = 'styled-components', ...config } = {},\n}) {\n  const program = state.file.path;\n\n  // FIRST STEP : replace `styled-components/macro` by `styled-components\n  // references looks like this\n  // { default: [path, path], css: [path], ... }\n  let customImportName;\n  Object.keys(references).forEach(refName => {\n    // generate new identifier\n    let id;\n    if (refName === 'default') {\n      id = addDefault(program, importModuleName, { nameHint: 'styled' });\n      customImportName = id;\n    } else {\n      id = addNamed(program, refName, importModuleName, { nameHint: refName });\n    }\n\n    // update references with the new identifiers\n    references[refName].forEach(referencePath => {\n      // eslint-disable-next-line no-param-reassign\n      referencePath.node.name = id.name;\n    });\n  });\n\n  // SECOND STEP : apply babel-plugin-styled-components to the file\n  const stateWithOpts = {\n    ...state,\n    opts: {\n      ...config,\n      topLevelImportPaths: (config.topLevelImportPaths || []).concat(importModuleName),\n    },\n    customImportName,\n  };\n  traverse(program.parent, babelPlugin({ types: t }).visitor, undefined, stateWithOpts);\n}\n\nexport default createMacro(styledComponentsMacro, {\n  configName: 'styledComponents',\n});\n"],
  "mappings": "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GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,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QACpCC,MAAM;QACNW;QACAC;MACF,CAAC;IACH;AACO,aAASC,eACdC,QAA6B,MACX;AAClB,cAAO,GAAAf,cAAAA,SAA+B;QACpCC,MAAM;QACNc;MACF,CAAC;IACH;AACO,aAASC,eACdC,QACAC,YAGkB;AAClB,cAAO,GAAAlB,cAAAA,SAA+B;QACpCC,MAAM;QACNgB;QACAE,WAAWD;MACb,CAAC;IACH;AACO,aAASE,YACdC,QAKgB,MAChBT,MACe;AACf,cAAO,GAAAZ,cAAAA,SAA4B;QACjCC,MAAM;QACNoB;QACAT;MACF,CAAC;IACH;AACO,aAASU,sBACdC,MACAC,YACAC,WACyB;AACzB,cAAO,GAAAzB,cAAAA,SAAsC;QAC3CC,MAAM;QACNsB;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,kBACdX,QAA6B,MACR;AACrB,cAAO,GAAAf,cAAAA,SAAkC;QACvCC,MAAM;QACNc;MACF,CAAC;IACH;AACO,aAASY,oBAAyC;AACvD,aAAO;QACL1B,MAAM;MACR;IACF;AACO,aAAS2B,iBACdL,MACAX,MACoB;AACpB,cAAO,GAAAZ,cAAAA,SAAiC;QACtCC,MAAM;QACNsB;QACAX;MACF,CAAC;IACH;AACO,aAASiB,iBAAmC;AACjD,aAAO;QACL5B,MAAM;MACR;IACF;AACO,aAAS6B,oBACdC,YACuB;AACvB,cAAO,GAAA/B,cAAAA,SAAoC;QACzCC,MAAM;QACN8B;MACF,CAAC;IACH;AACO,aAASC,KACdC,UACAC,WAAyD,MACzDC,SAA4B,MACpB;AACR,cAAO,GAAAnC,cAAAA,SAAqB;QAC1BC,MAAM;QACNgC,SAAAA;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,eACdhC,MACAC,OACAO,MACkB;AAClB,cAAO,GAAAZ,cAAAA,SAA+B;QACpCC,MAAM;QACNG;QACAC;QACAO;MACF,CAAC;IACH;AACO,aAASyB,aACdC,OAAgE,MAChEf,OAAwC,MACxCgB,SAA0C,MAC1C3B,MACgB;AAChB,cAAO,GAAAZ,cAAAA,SAA6B;QAClCC,MAAM;QACNqC;QACAf;QACAgB;QACA3B;MACF,CAAC;IACH;AACO,aAAS4B,oBACdC,KAAsC,MACtCC,QACA9B,MACA+B,YAAqB,OACrBC,QAAiB,OACM;AACvB,cAAO,GAAA5C,cAAAA,SAAoC;QACzCC,MAAM;QACNwC;QACAC;QACA9B;QACA+B;QACAC;MACF,CAAC;IACH;AACO,aAASC,mBACdJ,KAAsC,MACtCC,QACA9B,MACA+B,YAAqB,OACrBC,QAAiB,OACK;AACtB,cAAO,GAAA5C,cAAAA,SAAmC;QACxCC,MAAM;QACNwC;QACAC;QACA9B;QACA+B;QACAC;MACF,CAAC;IACH;AACO,aAASE,WAAWC,MAA4B;AACrD,cAAO,GAAA/C,cAAAA,SAA2B;QAChCC,MAAM;QACN8C;MACF,CAAC;IACH;AACO,aAASC,YACdzB,MACAC,YACAC,YAAgC,MACjB;AACf,cAAO,GAAAzB,cAAAA,SAA4B;QACjCC,MAAM;QACNsB;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASwB,iBACdlC,OACAH,MACoB;AACpB,cAAO,GAAAZ,cAAAA,SAAiC;QACtCC,MAAM;QACNc;QACAH;MACF,CAAC;IACH;AACO,aAASsC,cAAc1C,OAAgC;AAC5D,cAAO,GAAAR,cAAAA,SAA8B;QACnCC,MAAM;QACNO;MACF,CAAC;IACH;AACO,aAAS2C,eAAe3C,OAAiC;AAC9D,cAAO,GAAAR,cAAAA,SAA+B;QACpCC,MAAM;QACNO;MACF,CAAC;IACH;AACO,aAAS4C,cAA6B;AAC3C,aAAO;QACLnD,MAAM;MACR;IACF;AACO,aAASoD,eAAe7C,OAAkC;AAC/D,cAAO,GAAAR,cAAAA,SAA+B;QACpCC,MAAM;QACNO;MACF,CAAC;IACH;AACO,aAAS8C,cACdC,SACAC,QAAgB,IACC;AACjB,cAAO,GAAAxD,cAAAA,SAA8B;QACnCC,MAAM;QACNsD;QACAC;MACF,CAAC;IACH;AACO,aAASC,kBACdtD,UACAC,MACAC,OACqB;AACrB,cAAO,GAAAL,cAAAA,SAAkC;QACvCC,MAAM;QACNE;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASqD,iBACdC,QACAC,UACAC,WAAoB,OACpBC,WAAgC,MACZ;AACpB,cAAO,GAAA9D,cAAAA,SAAiC;QACtCC,MAAM;QACN0D;QACAC;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,cACd9C,QACAC,YAGiB;AACjB,cAAO,GAAAlB,cAAAA,SAA8B;QACnCC,MAAM;QACNgB;QACAE,WAAWD;MACb,CAAC;IACH;AACO,aAASe,QACdrB,MACAC,aAAiC,CAAA,GACjCmD,aAAkC,UAClCC,cAA6C,MAClC;AACX,cAAO,GAAAjE,cAAAA,SAAwB;QAC7BC,MAAM;QACNW;QACAC;QACAmD;QACAC;QACAC,YAAY;MACd,CAAC;IACH;AACO,aAASC,iBACdC,YACoB;AACpB,cAAO,GAAApE,cAAAA,SAAiC;QACtCC,MAAM;QACNmE;MACF,CAAC;IACH;AACO,aAASC,aACdC,OAA6C,UAC7CC,KAMA7B,QACA9B,MACAiD,WAAoB,OACpBlB,YAAqB,OACrBC,QAAiB,OACD;AAChB,cAAO,GAAA5C,cAAAA,SAA6B;QAClCC,MAAM;QACNqE;QACAC;QACA7B;QACA9B;QACAiD;QACAlB;QACAC;MACF,CAAC;IACH;AACO,aAAS4B,eACdD,KAQA/D,OACAqD,WAAoB,OACpBY,YAAqB,OACrBC,aAAwC,MACtB;AAClB,cAAO,GAAA1E,cAAAA,SAA+B;QACpCC,MAAM;QACNsE;QACA/D;QACAqD;QACAY;QACAC;MACF,CAAC;IACH;AACO,aAASC,YAAYC,UAAiC;AAC3D,cAAO,GAAA5E,cAAAA,SAA4B;QACjCC,MAAM;QACN2E;MACF,CAAC;IACH;AACO,aAASC,gBACdD,WAAgC,MACb;AACnB,cAAO,GAAA5E,cAAAA,SAAgC;QACrCC,MAAM;QACN2E;MACF,CAAC;IACH;AACO,aAASE,mBACdC,aACsB;AACtB,cAAO,GAAA/E,cAAAA,SAAmC;QACxCC,MAAM;QACN8E;MACF,CAAC;IACH;AACO,aAASC,wBACdjD,YAC2B;AAC3B,cAAO,GAAA/B,cAAAA,SAAwC;QAC7CC,MAAM;QACN8B;MACF,CAAC;IACH;AACO,aAASkD,WACd1D,OAAwC,MACxCC,YACc;AACd,cAAO,GAAAxB,cAAAA,SAA2B;QAChCC,MAAM;QACNsB;QACAC;MACF,CAAC;IACH;AACO,aAAS0D,gBACdC,cACAC,OACmB;AACnB,cAAO,GAAApF,cAAAA,SAAgC;QACrCC,MAAM;QACNkF;QACAC;MACF,CAAC;IACH;AACO,aAASC,iBAAmC;AACjD,aAAO;QACLpF,MAAM;MACR;IACF;AACO,aAASqF,eAAeV,UAA0C;AACvE,cAAO,GAAA5E,cAAAA,SAA+B;QACpCC,MAAM;QACN2E;MACF,CAAC;IACH;AACO,aAASW,aACdC,OACAC,UAAgC,MAChCC,YAAqC,MACrB;AAChB,cAAO,GAAA1F,cAAAA,SAA6B;QAClCC,MAAM;QACNuF;QACAC;QACAC;MACF,CAAC;IACH;AACO,aAASC,gBACdxF,UACAyE,UACAgB,SAAkB,MACC;AACnB,cAAO,GAAA5F,cAAAA,SAAgC;QACrCC,MAAM;QACNE;QACAyE;QACAgB;MACF,CAAC;IACH;AACO,aAASC,iBACd1F,UACAyE,UACAgB,SAAkB,OACE;AACpB,cAAO,GAAA5F,cAAAA,SAAiC;QACtCC,MAAM;QACNE;QACAyE;QACAgB;MACF,CAAC;IACH;AACO,aAASE,oBACdxB,MACAyB,cACuB;AACvB,cAAO,GAAA/F,cAAAA,SAAoC;QACzCC,MAAM;QACNqE;QACAyB;MACF,CAAC;IACH;AACO,aAASC,mBACdvD,IACAH,OAA4B,MACN;AACtB,cAAO,GAAAtC,cAAAA,SAAmC;QACxCC,MAAM;QACNwC;QACAH;MACF,CAAC;IACH;AACO,aAAS2D,eACd1E,MACAX,MACkB;AAClB,cAAO,GAAAZ,cAAAA,SAA+B;QACpCC,MAAM;QACNsB;QACAX;MACF,CAAC;IACH;AACO,aAASsF,cACdvC,QACA/C,MACiB;AACjB,cAAO,GAAAZ,cAAAA,SAA8B;QACnCC,MAAM;QACN0D;QACA/C;MACF,CAAC;IACH;AACO,aAASuF,kBACd/F,MASAC,OACqB;AACrB,cAAO,GAAAL,cAAAA,SAAkC;QACvCC,MAAM;QACNG;QACAC;MACF,CAAC;IACH;AACO,aAAS+F,aACdrG,UACgB;AAChB,cAAO,GAAAC,cAAAA,SAA6B;QAClCC,MAAM;QACNF;MACF,CAAC;IACH;AACO,aAASsG,wBACd3D,QACA9B,MACAgC,QAAiB,OACU;AAC3B,cAAO,GAAA5C,cAAAA,SAAwC;QAC7CC,MAAM;QACNyC;QACA9B;QACAgC;QACAb,YAAY;MACd,CAAC;IACH;AACO,aAASuE,UACd1F,MAUa;AACb,cAAO,GAAAZ,cAAAA,SAA0B;QAC/BC,MAAM;QACNW;MACF,CAAC;IACH;AACO,aAAS2F,gBACd9D,KAAsC,MACtC+D,aAA8C,MAC9C5F,MACA8D,aAAwC,MACrB;AACnB,cAAO,GAAA1E,cAAAA,SAAgC;QACrCC,MAAM;QACNwC;QACA+D;QACA5F;QACA8D;MACF,CAAC;IACH;AACO,aAAS+B,iBACdhE,IACA+D,aAA8C,MAC9C5F,MACA8D,aAAwC,MACpB;AACpB,cAAO,GAAA1E,cAAAA,SAAiC;QACtCC,MAAM;QACNwC;QACA+D;QACA5F;QACA8D;MACF,CAAC;IACH;AACO,aAASgC,qBACdC,QACwB;AACxB,cAAO,GAAA3G,cAAAA,SAAqC;QAC1CC,MAAM;QACN0G;MACF,CAAC;IACH;AACO,aAASC,yBACdC,aAK4B;AAC5B,cAAO,GAAA7G,cAAAA,SAAyC;QAC9CC,MAAM;QACN4G;MACF,CAAC;IACH;AACO,aAASC,uBACdD,cAAoC,MACpCE,aAEI,CAAA,GACJJ,SAAiC,MACP;AAC1B,cAAO,GAAA3G,cAAAA,SAAuC;QAC5CC,MAAM;QACN4G;QACAE;QACAJ;MACF,CAAC;IACH;AACO,aAASK,gBACdC,OACAC,UACmB;AACnB,cAAO,GAAAlH,cAAAA,SAAgC;QACrCC,MAAM;QACNgH;QACAC;MACF,CAAC;IACH;AACO,aAASC,eACd/G,MACAC,OACAO,MACAwG,SAAkB,OACA;AAClB,cAAO,GAAApH,cAAAA,SAA+B;QACpCC,MAAM;QACNG;QACAC;QACAO;QACAyG,OAAOD;MACT,CAAC;IACH;AACO,aAASE,kBACdP,YAGAJ,QACqB;AACrB,cAAO,GAAA3G,cAAAA,SAAkC;QACvCC,MAAM;QACN8G;QACAJ;MACF,CAAC;IACH;AACO,aAASY,uBACdN,OAC0B;AAC1B,cAAO,GAAAjH,cAAAA,SAAuC;QAC5CC,MAAM;QACNgH;MACF,CAAC;IACH;AACO,aAASO,yBACdP,OAC4B;AAC5B,cAAO,GAAAjH,cAAAA,SAAyC;QAC9CC,MAAM;QACNgH;MACF,CAAC;IACH;AACO,aAASQ,gBACdR,OACAS,UACmB;AACnB,cAAO,GAAA1H,cAAAA,SAAgC;QACrCC,MAAM;QACNgH;QACAS;MACF,CAAC;IACH;AACO,aAASC,aACdC,MACAhE,UACgB;AAChB,cAAO,GAAA5D,cAAAA,SAA6B;QAClCC,MAAM;QACN2H;QACAhE;MACF,CAAC;IACH;AACO,aAASiE,YACdvD,OAA6D,UAC7DC,KAMA7B,QAGA9B,MACAiD,WAAoB,OACpBiE,UAAmB,OACnBnF,YAAqB,OACrBC,QAAiB,OACF;AACf,cAAO,GAAA5C,cAAAA,SAA4B;QACjCC,MAAM;QACNqE;QACAC;QACA7B;QACA9B;QACAiD;QACAkE,QAAQD;QACRnF;QACAC;MACF,CAAC;IACH;AACO,aAASoF,cACd5D,YACiB;AACjB,cAAO,GAAApE,cAAAA,SAA8B;QACnCC,MAAM;QACNmE;MACF,CAAC;IACH;AACO,aAAS6D,cAAcrD,UAAyC;AACrE,cAAO,GAAA5E,cAAAA,SAA8B;QACnCC,MAAM;QACN2E;MACF,CAAC;IACH;AACA,aAASsD,SAAkB;AACzB,aAAO;QACLjI,MAAM;MACR;IACF;AAEO,aAASkI,yBACdC,KACAC,OAC4B;AAC5B,cAAO,GAAArI,cAAAA,SAAyC;QAC9CC,MAAM;QACNmI;QACAC;MACF,CAAC;IACH;AACO,aAASC,gBACd9H,OACA+H,OAAgB,OACG;AACnB,cAAO,GAAAvI,cAAAA,SAAgC;QACrCC,MAAM;QACNO;QACA+H;MACF,CAAC;IACH;AACO,aAASC,gBACdC,QACA1D,aACmB;AACnB,cAAO,GAAA/E,cAAAA,SAAgC;QACrCC,MAAM;QACNwI;QACA1D;MACF,CAAC;IACH;AACO,aAAS2D,gBACd9D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BAAmB;MACrB,CAAC;IACH;AACO,aAASC,eACdH,SACkB;AAClB,cAAO,GAAAnO,cAAAA,SAA+B;QACpCC,MAAM;QACNkO;QACAC,cAAc;QACdC,mBAAmB;MACrB,CAAC;IACH;AACO,aAASE,eACdJ,SACkB;AAClB,cAAO,GAAAnO,cAAAA,SAA+B;QACpCC,MAAM;QACNkO;QACAC,cAAc;QACdC,mBAAmB;MACrB,CAAC;IACH;AACO,aAASG,eACdL,SACkB;AAClB,cAAO,GAAAnO,cAAAA,SAA+B;QACpCC,MAAM;QACNkO;QACAE,mBAAmB;MACrB,CAAC;IACH;AACO,aAASI,kBAAkBhM,IAAuC;AACvE,cAAO,GAAAzC,cAAAA,SAAkC;QACvCC,MAAM;QACNwC;QACAH,MAAM;MACR,CAAC;IACH;AACO,aAASoM,iBACdjM,IACAH,MACoB;AACpB,cAAO,GAAAtC,cAAAA,SAAiC;QACtCC,MAAM;QACNwC;QACAH;MACF,CAAC;IACH;AACO,aAASqM,iBACdlM,IACAH,MACoB;AACpB,cAAO,GAAAtC,cAAAA,SAAiC;QACtCC,MAAM;QACNwC;QACAH;MACF,CAAC;IACH;AACO,aAASsM,oBAAoBnM,IAAyC;AAC3E,cAAO,GAAAzC,cAAAA,SAAoC;QACzCC,MAAM;QACNwC;MACF,CAAC;IACH;AACO,aAASoM,kBACdC,YACAC,WACqB;AACrB,cAAO,GAAA/O,cAAAA,SAAkC;QACvCC,MAAM;QACN6O;QACAC;MACF,CAAC;IACH;AACO,aAASC,0BACdF,YACAC,WAC6B;AAC7B,cAAO,GAAA/O,cAAAA,SAA0C;QAC/CC,MAAM;QACN6O;QACAC;QACAjL,UAAU;MACZ,CAAC;IACH;AACO,aAASmL,aACdlM,MACAvC,QAKW,MACK;AAChB,cAAO,GAAAR,cAAAA,SAA6B;QAClCC,MAAM;QACN8C;QACAvC;MACF,CAAC;IACH;AAEO,aAAS0O,kBACdnM,MACqB;AACrB,cAAO,GAAA/C,cAAAA,SAAkC;QACvCC,MAAM;QACN8C;MACF,CAAC;IACH;AAEO,aAASoM,WACdC,gBACAC,iBAAyD,MACzDC,UAOAC,cAA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IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,KAAI,IAAG,IAAG,KAAI,IAAG,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,KAAI,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,KAAI,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,IAAG,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,IAAG,GAAE,IAAG,KAAI,GAAE,IAAG,KAAI,KAAI,KAAI,IAAG,KAAI,MAAK,IAAG,IAAG,MAAK,IAAG,GAAE,MAAK,KAAI,MAAK,KAAI,GAAE,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,IAAG,GAAE,IAAG,IAAG,GAAE,IAAG,KAAI,IAAG,KAAI,IAAG,GAAE,GAAE,IAAG,IAAG,IAAG,GAAE,GAAE,GAAE,IAAG,MAAK,GAAE,MAAK,IAAG,GAAE,MAAK,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,KAAI,MAAK,KAAI,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,MAAK,IAAG,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,KAAI,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,IAAG,GAAE,GAAE,MAAK,IAAG,GAAE,GAAE,KAAI,IAAG,KAAI,IAAG,IAAG,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,IAAG,KAAI,IAAG,KAAI,GAAE,GAAE,GAAE,GAAE,GAAE,GAAE,IAAG,GAAE,KAAI,IAAG,IAAG,GAAE,GAAE,MAAK,GAAE,GAAE,IAAG,GAAE,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",
  "names": ["shallowEqual", "actual", "expected", "keys", "Object", "key", "isArrayExpression", "node", "opts", "nodeType", "type", "shallowEqual", "isAssignmentExpression", "isBinaryExpression", "isInterpreterDirective", "isDirective", "isDirectiveLiteral", "isBlockStatement", "isBreakStatement", "isCallExpression", "isCatchClause", "isConditionalExpression", "isContinueStatement", "isDebuggerStatement", "isDoWhileStatement", "isEmptyStatement", "isExpressionStatement", "isFile", "isForInStatement", "isForStatement", "isFunctionDeclaration", "isFunctionExpression", "isIdentifier", "isIfStatement", "isLabeledStatement", "isStringLiteral", "isNumericLiteral", "isNullLiteral", "isBooleanLiteral", "isRegExpLiteral", "isLogicalExpression", "isMemberExpression", "isNewExpression", "isProgram", "isObjectExpression", "isObjectMethod", "isObjectProperty", "isRestElement", "isReturnStatement", "isSequenceExpression", "isParenthesizedExpression", "isSwitchCase", "isSwitchStatement", "isThisExpression", "isThrowStatement", "isTryStatement", "isUnaryExpression", "isUpdateExpression", "isVariableDeclaration", "isVariableDeclarator", "isWhileStatement", "isWithStatement", "isAssignmentPattern", "isArrayPattern", "isArrowFunctionExpression", "isClassBody", "isClassExpression", "isClassDeclaration", "isExportAllDeclaration", "isExportDefaultDeclaration", "isExportNamedDeclaration", "isExportSpecifier", "isForOfStatement", "isImportDeclaration", "isImportDefaultSpecifier", "isImportNamespaceSpecifier", "isImportSpecifier", "isMetaProperty", "isClassMethod", "isObjectPattern", "isSpreadElement", "isSuper", "isTaggedTemplateExpression", "isTemplateElement", "isTemplateLiteral", "isYieldExpression", "isAwaitExpression", "isImport", "isBigIntLiteral", "isExportNamespaceSpecifier", "isOptionalMemberExpression", "isOptionalCallExpression", "isClassProperty", "isClassAccessorProperty", "isClassPrivateProperty", "isClassPrivateMethod", "isPrivateName", "isStaticBlock", "isAnyTypeAnnotation", "isArrayTypeAnnotation", "isBooleanTypeAnnotation", "isBooleanLiteralTypeAnnotation", "isNullLiteralTypeAnnotation", "isClassImplements", "isDeclareClass", "isDeclareFunction", "isDeclareInterface", "isDeclareModule", "isDeclareModuleExports", "isDeclareTypeAlias", "isDeclareOpaqueType", "isDeclareVariable", "isDeclareExportDeclaration", "isDeclareExportAllDeclaration", "isDeclaredPredicate", "isExistsTypeAnnotation", "isFunctionTypeAnnotation", "isFunctionTypeParam", "isGenericTypeAnnotation", "isInferredPredicate", "isInterfaceExtends", "isInterfaceDeclaration", "isInterfaceTypeAnnotation", "isIntersectionTypeAnnotation", "isMixedTypeAnnotation", "isEmptyTypeAnnotation", "isNullableTypeAnnotation", "isNumberLiteralTypeAnnotation", "isNumberTypeAnnotation", "isObjectTypeAnnotation", "isObjectTypeInternalSlot", "isObjectTypeCallProperty", "isObjectTypeIndexer", "isObjectTypeProperty", "isObjectTypeSpreadProperty", "isOpaqueType", "isQualifiedTypeIdentifier", "isStringLiteralTypeAnnotation", "isStringTypeAnnotation", "isSymbolTypeAnnotation", "isThisTypeAnnotation", "isTupleTypeAnnotation", "isTypeofTypeAnnotation", "isTypeAlias", "isTypeAnnotation", "isTypeCastExpression", "isTypeParameter", "isTypeParameterDeclaration", "isTypeParameterInstantiation", "isUnionTypeAnnotation", "isVariance", "isVoidTypeAnnotation", "isEnumDeclaration", "isEnumBooleanBody", "isEnumNumberBody", "isEnumStringBody", "isEnumSymbolBody", "isEnumBooleanMember", "isEnumNumberMember", "isEnumStringMember", "isEnumDefaultedMember", "isIndexedAccessType", "isOptionalIndexedAccessType", "isJSXAttribute", "isJSXClosingElement", "isJSXElement", "isJSXEmptyExpression", "isJSXExpressionContainer", "isJSXSpreadChild", "isJSXIdentifier", "isJSXMemberExpression", "isJSXNamespacedName", "isJSXOpeningElement", "isJSXSpreadAttribute", "isJSXText", "isJSXFragment", "isJSXOpeningFragment", "isJSXClosingFragment", "isNoop", "isPlaceholder", "isV8IntrinsicIdentifier", "isArgumentPlaceholder", "isBindExpression", "isImportAttribute", "isDecorator", "isDoExpression", "isExportDefaultSpecifier", "isRecordExpression", "isTupleExpression", "isDecimalLiteral", "isModuleExpression", "isTopicReference", "isPipelineTopicExpression", "isPipelineBareFunction", "isPipelinePrimaryTopicReference", "isTSParameterProperty", "isTSDeclareFunction", "isTSDeclareMethod", "isTSQualifiedName", "isTSCallSignatureDeclaration", "isTSConstructSignatureDeclaration", "isTSPropertySignature", "isTSMethodSignature", "isTSIndexSignature", "isTSAnyKeyword", "isTSBooleanKeyword", "isTSBigIntKeyword", "isTSIntrinsicKeyword", "isTSNeverKeyword", "isTSNullKeyword", "isTSNumberKeyword", "isTSObjectKeyword", "isTSStringKeyword", "isTSSymbolKeyword", "isTSUndefinedKeyword", "isTSUnknownKeyword", "isTSVoidKeyword", "isTSThisType", "isTSFunctionType", "isTSConstructorType", "isTSTypeReference", "isTSTypePredicate", "isTSTypeQuery", "isTSTypeLiteral", "isTSArrayType", "isTSTupleType", "isTSOptionalType", "isTSRestType", "isTSNamedTupleMember", "isTSUnionType", "isTSIntersectionType", "isTSConditionalType", "isTSInferType", "isTSParenthesizedType", "isTSTypeOperator", "isTSIndexedAccessType", "isTSMappedType", "isTSLiteralType", "isTSExpressionWithTypeArguments", "isTSInterfaceDeclaration", "isTSInterfaceBody", "isTSTypeAliasDeclaration", "isTSInstantiationExpression", "isTSAsExpression", "isTSSatisfiesExpression", "isTSTypeAssertion", "isTSEnumDeclaration", "isTSEnumMember", "isTSModuleDeclaration", "isTSModuleBlock", "isTSImportType", "isTSImportEqualsDeclaration", "isTSExternalModuleReference", "isTSNonNullExpression", "isTSExportAssignment", "isTSNamespaceExportDeclaration", "isTSTypeAnnotation", "isTSTypeParameterInstantiation", "isTSTypeParameterDeclaration", "isTSTypeParameter", "isStandardized", "expectedNode", "isExpression", "isBinary", "isScopable", "isBlockParent", "isBlock", "isStatement", "isTerminatorless", "isCompletionStatement", "isConditional", "isLoop", "isWhile", "isExpressionWrapper", "isFor", "isForXStatement", "isFunction", "isFunctionParent", "isPureish", "isDeclaration", "isPatternLike", "isLVal", "isTSEntityName", "isLiteral", "isImmutable", "isUserWhitespacable", "isMethod", "isObjectMember", "isProperty", "isUnaryLike", "isPattern", "isClass", "isModuleDeclaration", "isExportDeclaration", "isModuleSpecifier", "isAccessor", "isPrivate", "isFlow", "isFlowType", "isFlowBaseAnnotation", "isFlowDeclaration", "isFlowPredicate", "isEnumBody", "isEnumMember", "isJSX", "isMiscellaneous", "isTypeScript", "isTSTypeElement", "isTSType", "isTSBaseType", "isNumberLiteral", "console", "trace", "isRegexLiteral", "isRestProperty", "isSpreadProperty", "matchesPattern", "member", "match", "allowPartial", "isMemberExpression", "parts", "Array", "isArray", "split", "nodes", "node", "object", "push", "property", "length", "i", "j", "value", "isIdentifier", "name", "isStringLiteral", "isThisExpression", "buildMatchMemberExpression", "match", "allowPartial", "parts", "split", "member", "matchesPattern", "isReactComponent", "buildMatchMemberExpression", "isCompatTag", "tagName", "test", "o", "isType", "nodeType", "targetType", "ALIAS_KEYS", "aliases", "FLIPPED_ALIAS_KEYS", "alias", "isPlaceholderType", "placeholderType", "targetType", "aliases", "PLACEHOLDERS_ALIAS", "alias", "is", "type", "node", "opts", "matches", "isType", "FLIPPED_ALIAS_KEYS", "isPlaceholderType", "expectedNode", "shallowEqual", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "RegExp", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "code", "set", "pos", "i", "length", "isIdentifierStart", "test", "String", "fromCharCode", "isIdentifierChar", "isIdentifierName", "name", "isFirst", "cp", "charCodeAt", "trail", "reservedWords", "keyword", "strict", "strictBind", "keywords", "Set", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isValidIdentifier", "name", "reserved", "isKeyword", "isStrictReservedWord", "isIdentifierName", "isDigit", "code", "forbiddenNumericSeparatorSiblings", "decBinOct", "Set", "hex", "isAllowedNumericSeparatorSibling", "bin", "ch", "oct", "dec", "readStringContents", "type", "input", "pos", "lineStart", "curLine", "errors", "initialPos", "initialLineStart", "initialCurLine", "out", "firstInvalidLoc", "chunkStart", "length", "unterminated", "slice", "charCodeAt", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "String", "fromCharCode", "readCodePoint", "fromCodePoint", "strictNumericEscape", "startPos", "match", "octalStr", "octal", "parseInt", "next", "len", "forceLen", "n", "readInt", "invalidEscapeSequence", "radix", "allowNumSeparator", "bailOnError", "start", "forbiddenSiblings", "isAllowedSibling", "invalid", "total", "i", "e", "Infinity", "val", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "has", "unexpectedNumericSeparator", "invalidDigit", "indexOf", "invalidCodePoint", "STATEMENT_OR_BLOCK_KEYS", "FLATTENABLE_KEYS", "FOR_INIT_KEYS", "COMMENT_KEYS", "LOGICAL_OPERATORS", "UPDATE_OPERATORS", "BOOLEAN_NUMBER_BINARY_OPERATORS", "EQUALITY_BINARY_OPERATORS", "COMPARISON_BINARY_OPERATORS", "BOOLEAN_BINARY_OPERATORS", "NUMBER_BINARY_OPERATORS", "BINARY_OPERATORS", "ASSIGNMENT_OPERATORS", "map", "op", "BOOLEAN_UNARY_OPERATORS", "NUMBER_UNARY_OPERATORS", "STRING_UNARY_OPERATORS", "UNARY_OPERATORS", "INHERIT_KEYS", "optional", "force", "BLOCK_SCOPED_SYMBOL", "Symbol", "for", "NOT_LOCAL_BINDING", "VISITOR_KEYS", "ALIAS_KEYS", "FLIPPED_ALIAS_KEYS", "NODE_FIELDS", "BUILDER_KEYS", "DEPRECATED_KEYS", "NODE_PARENT_VALIDATIONS", "getType", "val", "Array", "isArray", "validate", "typeIs", "typeName", "assertNodeType", "validateType", "validateOptional", "optional", "validateOptionalType", "arrayOf", "elementType", "chain", "assertValueType", "assertEach", "arrayOfType", "validateArrayOfType", "callback", "validator", "node", "key", "i", "length", "subkey", "v", "process", "env", "BABEL_TYPES_8_BREAKING", "validateChild", "each", "assertOneOf", "values", "indexOf", "TypeError", "JSON", "stringify", "oneOf", "types", "type", "is", "oneOfNodeTypes", "assertNodeOrValueType", "oneOfNodeOrValueTypes", "valid", "assertShape", "shape", "errors", "property", "Object", "keys", "validateField", "error", "push", "message", "join", "shapeOf", "assertOptionalChainStart", "current", "callee", "object", "fns", "args", "fn", "chainOf", "Error", "validTypeOpts", "validFieldKeys", "store", "defineAliasedType", "aliases", "opts", "defined", "inherits", "slice", "additional", "filter", "a", "includes", "unshift", "defineType", "fields", "getOwnPropertyNames", "field", "def", "default", "visitor", "builder", "k", "deprecatedAlias", "concat", "undefined", "forEach", "alias", "defineType", "defineAliasedType", "fields", "elements", "validate", "chain", "assertValueType", "assertEach", "assertNodeOrValueType", "default", "process", "env", "BABEL_TYPES_8_BREAKING", "undefined", "visitor", "aliases", "operator", "identifier", "assertOneOf", "ASSIGNMENT_OPERATORS", "pattern", "node", "key", "val", "validator", "is", "left", "assertNodeType", "right", "builder", "BINARY_OPERATORS", "expression", "inOp", "Object", "assign", "oneOfNodeTypes", "value", "directives", "body", "label", "optional", "callee", "arguments", "typeArguments", "typeParameters", "param", "test", "consequent", "alternate", "program", "comments", "each", "tokens", "type", "init", "update", "functionCommon", "params", "generator", "async", "functionTypeAnnotationCommon", "returnType", "functionDeclarationCommon", "declare", "id", "predicate", "parent", "inherits", "patternLikeCommon", "typeAnnotation", "decorators", "name", "isValidIdentifier", "TypeError", "match", "exec", "parentKey", "nonComp", "computed", "imported", "meta", "isKeyword", "isReservedWord", "deprecatedAlias", "flags", "invalid", "LOGICAL_OPERATORS", "object", "property", "normal", "sourceFile", "sourceType", "interpreter", "properties", "kind", "shorthand", "argument", "Error", "listKey", "index", "length", "expressions", "discriminant", "cases", "block", "handler", "finalizer", "prefix", "UNARY_OPERATORS", "UPDATE_OPERATORS", "declarations", "without", "definite", "superClass", "superTypeParameters", "implements", "mixins", "abstract", "source", "exportKind", "validateOptional", "assertions", "declaration", "specifiers", "sourced", "sourceless", "local", "exported", "lval", "await", "module", "importKind", "classMethodOrPropertyCommon", "accessibility", "static", "override", "classMethodOrDeclareMethodCommon", "access", "tag", "quasi", "assertShape", "raw", "cooked", "templateElementCookedValidator", "unterminatedCalled", "error", "str", "firstInvalidLoc", "readStringContents", "unterminated", "strictNumericEscape", "invalidEscapeSequence", "numericSeparatorInEscapeSequence", "unexpectedNumericSeparator", "invalidDigit", "invalidCodePoint", "tail", "quasis", "delegate", "assertOptionalChainStart", "readonly", "variance", "defineType", "defineAliasedType", "defineInterfaceishType", "name", "builder", "visitor", "aliases", "fields", "id", "validateType", "typeParameters", "validateOptionalType", "extends", "validateOptional", "arrayOfType", "mixins", "implements", "body", "elementType", "value", "validate", "assertValueType", "predicate", "kind", "assertOneOf", "typeAnnotation", "right", "supertype", "impltype", "declaration", "specifiers", "source", "default", "exportKind", "params", "rest", "this", "returnType", "optional", "types", "properties", "indexers", "callProperties", "internalSlots", "exact", "inexact", "static", "method", "key", "variance", "proto", "argument", "qualification", "expression", "bound", "explicitType", "members", "validateArrayOfType", "hasUnknownMembers", "init", "objectType", "indexType", "defineType", "defineAliasedType", "visitor", "aliases", "fields", "name", "validate", "assertNodeType", "value", "optional", "builder", "openingElement", "closingElement", "children", "chain", "assertValueType", "assertEach", "selfClosing", "expression", "object", "property", "namespace", "default", "attributes", "typeParameters", "argument", "openingFragment", "closingFragment", "PLACEHOLDERS", "PLACEHOLDERS_ALIAS", "Declaration", "Pattern", "type", "alias", "ALIAS_KEYS", "length", "PLACEHOLDERS_FLIPPED_ALIAS", "Object", "keys", "forEach", "hasOwnProperty", "call", "push", "defineType", "defineAliasedType", "visitor", "builder", "fields", "name", "validate", "assertNodeType", "expectedNode", "assertOneOf", "PLACEHOLDERS", "assertValueType", "defineType", "visitor", "aliases", "fields", "process", "env", "BABEL_TYPES_8_BREAKING", "object", "validate", "Object", "assign", "oneOfNodeTypes", "callee", "assertNodeType", "key", "value", "expression", "builder", "body", "async", "assertValueType", "default", "exported", "properties", "chain", "assertEach", "elements", "defineType", "defineAliasedType", "bool", "assertValueType", "tSFunctionTypeAnnotationCommon", "returnType", "validate", "assertNodeType", "optional", "typeParameters", "aliases", "visitor", "fields", "accessibility", "assertOneOf", "readonly", "parameter", "override", "decorators", "chain", "assertEach", "functionDeclarationCommon", "classMethodOrDeclareMethodCommon", "left", "validateType", "right", "signatureDeclarationCommon", "validateOptionalType", "validateArrayOfType", "callConstructSignatureDeclaration", "namedTypeElementCommon", "key", "computed", "default", "validateOptional", "typeAnnotation", "initializer", "kind", "static", "parameters", "tsKeywordTypes", "type", "fnOrCtrBase", "abstract", "typeName", "builder", "parameterName", "asserts", "exprName", "members", "elementType", "elementTypes", "label", "unionOrIntersection", "types", "checkType", "extendsType", "trueType", "falseType", "typeParameter", "operator", "objectType", "indexType", "nameType", "literal", "unaryExpression", "unaryOperator", "validator", "parent", "node", "is", "argument", "oneOfNodeTypes", "expression", "declare", "id", "extends", "arrayOfType", "body", "TSTypeExpression", "const", "global", "qualifier", "isExport", "moduleReference", "importKind", "params", "name", "in", "out", "constraint", "toFastProperties", "VISITOR_KEYS", "ALIAS_KEYS", "FLIPPED_ALIAS_KEYS", "NODE_FIELDS", "BUILDER_KEYS", "DEPRECATED_KEYS", "PLACEHOLDERS_ALIAS", "PLACEHOLDERS_FLIPPED_ALIAS", "TYPES", "concat", "Object", "keys", "validate", "node", "key", "val", "fields", "NODE_FIELDS", "type", "field", "validateField", "validateChild", "optional", "NODE_PARENT_VALIDATIONS", "validateNode", "node", "keys", "BUILDER_KEYS", "type", "key", "validate", "arrayExpression", "elements", "validateNode", "type", "assignmentExpression", "operator", "left", "right", "binaryExpression", "interpreterDirective", "value", "directive", "directiveLiteral", "blockStatement", "body", "directives", "breakStatement", "label", "callExpression", "callee", "_arguments", "arguments", "catchClause", "param", "conditionalExpression", "test", "consequent", "alternate", "continueStatement", "debuggerStatement", "doWhileStatement", "emptyStatement", "expressionStatement", "expression", "file", "program", "comments", "tokens", "forInStatement", "forStatement", "init", "update", "functionDeclaration", "id", "params", "generator", "async", "functionExpression", "identifier", "name", "ifStatement", "labeledStatement", "stringLiteral", "numericLiteral", "nullLiteral", "booleanLiteral", "regExpLiteral", "pattern", "flags", "logicalExpression", "memberExpression", "object", "property", "computed", "optional", "newExpression", "sourceType", "interpreter", "sourceFile", "objectExpression", "properties", "objectMethod", "kind", "key", "objectProperty", "shorthand", "decorators", "restElement", "argument", "returnStatement", "sequenceExpression", "expressions", "parenthesizedExpression", "switchCase", "switchStatement", "discriminant", "cases", "thisExpression", "throwStatement", "tryStatement", "block", "handler", "finalizer", "unaryExpression", "prefix", "updateExpression", "variableDeclaration", "declarations", "variableDeclarator", "whileStatement", "withStatement", "assignmentPattern", "arrayPattern", "arrowFunctionExpression", "classBody", "classExpression", "superClass", "classDeclaration", "exportAllDeclaration", "source", "exportDefaultDeclaration", "declaration", "exportNamedDeclaration", "specifiers", "exportSpecifier", "local", "exported", "forOfStatement", "_await", "await", "importDeclaration", "importDefaultSpecifier", "importNamespaceSpecifier", "importSpecifier", "imported", "metaProperty", "meta", "classMethod", "_static", "static", "objectPattern", "spreadElement", "_super", "taggedTemplateExpression", "tag", "quasi", "templateElement", "tail", "templateLiteral", "quasis", "yieldExpression", "delegate", "awaitExpression", "_import", "bigIntLiteral", "exportNamespaceSpecifier", "optionalMemberExpression", "optionalCallExpression", "classProperty", "typeAnnotation", "classAccessorProperty", "classPrivateProperty", "classPrivateMethod", "privateName", "staticBlock", "anyTypeAnnotation", "arrayTypeAnnotation", "elementType", "booleanTypeAnnotation", "booleanLiteralTypeAnnotation", "nullLiteralTypeAnnotation", "classImplements", "typeParameters", "declareClass", "_extends", "extends", "declareFunction", "declareInterface", "declareModule", "declareModuleExports", "declareTypeAlias", "declareOpaqueType", "supertype", "declareVariable", "declareExportDeclaration", "declareExportAllDeclaration", "declaredPredicate", "existsTypeAnnotation", "functionTypeAnnotation", "rest", "returnType", "functionTypeParam", "genericTypeAnnotation", "inferredPredicate", "interfaceExtends", "interfaceDeclaration", "interfaceTypeAnnotation", "intersectionTypeAnnotation", "types", "mixedTypeAnnotation", "emptyTypeAnnotation", "nullableTypeAnnotation", "numberLiteralTypeAnnotation", "numberTypeAnnotation", "objectTypeAnnotation", "indexers", "callProperties", "internalSlots", "exact", "objectTypeInternalSlot", "method", "objectTypeCallProperty", "objectTypeIndexer", "variance", "objectTypeProperty", "proto", "objectTypeSpreadProperty", "opaqueType", "impltype", "qualifiedTypeIdentifier", "qualification", "stringLiteralTypeAnnotation", "stringTypeAnnotation", "symbolTypeAnnotation", "thisTypeAnnotation", "tupleTypeAnnotation", "typeofTypeAnnotation", "typeAlias", "typeCastExpression", "typeParameter", "bound", "_default", "default", "typeParameterDeclaration", "typeParameterInstantiation", "unionTypeAnnotation", "voidTypeAnnotation", "enumDeclaration", "enumBooleanBody", "members", "explicitType", "hasUnknownMembers", "enumNumberBody", "enumStringBody", "enumSymbolBody", "enumBooleanMember", "enumNumberMember", "enumStringMember", "enumDefaultedMember", "indexedAccessType", "objectType", "indexType", "optionalIndexedAccessType", "jsxAttribute", "jsxClosingElement", "jsxElement", "openingElement", "closingElement", "children", "selfClosing", "jsxEmptyExpression", "jsxExpressionContainer", "jsxSpreadChild", "jsxIdentifier", "jsxMemberExpression", "jsxNamespacedName", "namespace", "jsxOpeningElement", "attributes", "jsxSpreadAttribute", "jsxText", "jsxFragment", "openingFragment", "closingFragment", "jsxOpeningFragment", "jsxClosingFragment", "noop", "placeholder", "expectedNode", "v8IntrinsicIdentifier", "argumentPlaceholder", "bindExpression", "importAttribute", "decorator", "doExpression", "exportDefaultSpecifier", "recordExpression", "tupleExpression", "decimalLiteral", "moduleExpression", "topicReference", "pipelineTopicExpression", "pipelineBareFunction", "pipelinePrimaryTopicReference", "tsParameterProperty", "parameter", "tsDeclareFunction", "tsDeclareMethod", "tsQualifiedName", "tsCallSignatureDeclaration", "parameters", "tsConstructSignatureDeclaration", "tsPropertySignature", "initializer", "tsMethodSignature", "tsIndexSignature", "tsAnyKeyword", "tsBooleanKeyword", "tsBigIntKeyword", "tsIntrinsicKeyword", "tsNeverKeyword", "tsNullKeyword", "tsNumberKeyword", "tsObjectKeyword", "tsStringKeyword", "tsSymbolKeyword", "tsUndefinedKeyword", "tsUnknownKeyword", "tsVoidKeyword", "tsThisType", "tsFunctionType", "tsConstructorType", "tsTypeReference", "typeName", "tsTypePredicate", "parameterName", "asserts", "tsTypeQuery", "exprName", "tsTypeLiteral", "tsArrayType", "tsTupleType", "elementTypes", "tsOptionalType", "tsRestType", "tsNamedTupleMember", "tsUnionType", "tsIntersectionType", "tsConditionalType", "checkType", "extendsType", "trueType", "falseType", "tsInferType", "tsParenthesizedType", "tsTypeOperator", "tsIndexedAccessType", "tsMappedType", "nameType", "tsLiteralType", "literal", "tsExpressionWithTypeArguments", "tsInterfaceDeclaration", "tsInterfaceBody", "tsTypeAliasDeclaration", "tsInstantiationExpression", "tsAsExpression", "tsSatisfiesExpression", "tsTypeAssertion", "tsEnumDeclaration", "tsEnumMember", "tsModuleDeclaration", "tsModuleBlock", "tsImportType", "qualifier", "tsImportEqualsDeclaration", "moduleReference", "isExport", "tsExternalModuleReference", "tsNonNullExpression", "tsExportAssignment", "tsNamespaceExportDeclaration", "tsTypeAnnotation", "tsTypeParameterInstantiation", "tsTypeParameterDeclaration", "tsTypeParameter", "constraint", "NumberLiteral", "console", "trace", "RegexLiteral", "RestProperty", "SpreadProperty", "cleanJSXElementLiteralChild", "child", "args", "lines", "value", "split", "lastNonEmptyLine", "i", "length", "match", "str", "line", "isFirstLine", "isLastLine", "isLastNonEmptyLine", "trimmedLine", "replace", "push", "inherits", "stringLiteral", "buildChildren", "node", "elements", "i", "children", "length", "child", "isJSXText", "cleanJSXElementLiteralChild", "isJSXExpressionContainer", "expression", "isJSXEmptyExpression", "push", "isNode", "node", "VISITOR_KEYS", "type", "assertNode", "node", "isNode", "type", "JSON", "stringify", "TypeError", "assert", "type", "node", "opts", "is", "Error", "JSON", "stringify", "assertArrayExpression", "assertAssignmentExpression", "assertBinaryExpression", "assertInterpreterDirective", "assertDirective", "assertDirectiveLiteral", "assertBlockStatement", "assertBreakStatement", "assertCallExpression", "assertCatchClause", "assertConditionalExpression", "assertContinueStatement", "assertDebuggerStatement", "assertDoWhileStatement", "assertEmptyStatement", "assertExpressionStatement", "assertFile", "assertForInStatement", "assertForStatement", "assertFunctionDeclaration", "assertFunctionExpression", "assertIdentifier", "assertIfStatement", "assertLabeledStatement", "assertStringLiteral", "assertNumericLiteral", "assertNullLiteral", "assertBooleanLiteral", "assertRegExpLiteral", "assertLogicalExpression", "assertMemberExpression", "assertNewExpression", "assertProgram", "assertObjectExpression", "assertObjectMethod", "assertObjectProperty", "assertRestElement", "assertReturnStatement", "assertSequenceExpression", "assertParenthesizedExpression", "assertSwitchCase", "assertSwitchStatement", "assertThisExpression", "assertThrowStatement", "assertTryStatement", "assertUnaryExpression", "assertUpdateExpression", "assertVariableDeclaration", "assertVariableDeclarator", "assertWhileStatement", "assertWithStatement", "assertAssignmentPattern", "assertArrayPattern", "assertArrowFunctionExpression", "assertClassBody", "assertClassExpression", "assertClassDeclaration", "assertExportAllDeclaration", "assertExportDefaultDeclaration", "assertExportNamedDeclaration", "assertExportSpecifier", "assertForOfStatement", "assertImportDeclaration", "assertImportDefaultSpecifier", "assertImportNamespaceSpecifier", "assertImportSpecifier", "assertMetaProperty", "assertClassMethod", "assertObjectPattern", "assertSpreadElement", "assertSuper", "assertTaggedTemplateExpression", "assertTemplateElement", "assertTemplateLiteral", "assertYieldExpression", "assertAwaitExpression", "assertImport", "assertBigIntLiteral", "assertExportNamespaceSpecifier", "assertOptionalMemberExpression", "assertOptionalCallExpression", "assertClassProperty", "assertClassAccessorProperty", "assertClassPrivateProperty", "assertClassPrivateMethod", "assertPrivateName", "assertStaticBlock", "assertAnyTypeAnnotation", "assertArrayTypeAnnotation", "assertBooleanTypeAnnotation", "assertBooleanLiteralTypeAnnotation", "assertNullLiteralTypeAnnotation", "assertClassImplements", "assertDeclareClass", "assertDeclareFunction", "assertDeclareInterface", "assertDeclareModule", "assertDeclareModuleExports", "assertDeclareTypeAlias", "assertDeclareOpaqueType", "assertDeclareVariable", "assertDeclareExportDeclaration", "assertDeclareExportAllDeclaration", "assertDeclaredPredicate", "assertExistsTypeAnnotation", "assertFunctionTypeAnnotation", "assertFunctionTypeParam", "assertGenericTypeAnnotation", "assertInferredPredicate", "assertInterfaceExtends", "assertInterfaceDeclaration", "assertInterfaceTypeAnnotation", "assertIntersectionTypeAnnotation", "assertMixedTypeAnnotation", "assertEmptyTypeAnnotation", "assertNullableTypeAnnotation", "assertNumberLiteralTypeAnnotation", "assertNumberTypeAnnotation", "assertObjectTypeAnnotation", "assertObjectTypeInternalSlot", "assertObjectTypeCallProperty", "assertObjectTypeIndexer", "assertObjectTypeProperty", "assertObjectTypeSpreadProperty", "assertOpaqueType", "assertQualifiedTypeIdentifier", "assertStringLiteralTypeAnnotation", "assertStringTypeAnnotation", "assertSymbolTypeAnnotation", "assertThisTypeAnnotation", "assertTupleTypeAnnotation", "assertTypeofTypeAnnotation", "assertTypeAlias", "assertTypeAnnotation", "assertTypeCastExpression", "assertTypeParameter", "assertTypeParameterDeclaration", "assertTypeParameterInstantiation", "assertUnionTypeAnnotation", "assertVariance", "assertVoidTypeAnnotation", "assertEnumDeclaration", "assertEnumBooleanBody", "assertEnumNumberBody", "assertEnumStringBody", "assertEnumSymbolBody", "assertEnumBooleanMember", "assertEnumNumberMember", "assertEnumStringMember", "assertEnumDefaultedMember", "assertIndexedAccessType", "assertOptionalIndexedAccessType", "assertJSXAttribute", "assertJSXClosingElement", "assertJSXElement", "assertJSXEmptyExpression", "assertJSXExpressionContainer", "assertJSXSpreadChild", "assertJSXIdentifier", "assertJSXMemberExpression", "assertJSXNamespacedName", "assertJSXOpeningElement", "assertJSXSpreadAttribute", "assertJSXText", "assertJSXFragment", "assertJSXOpeningFragment", "assertJSXClosingFragment", "assertNoop", "assertPlaceholder", "assertV8IntrinsicIdentifier", "assertArgumentPlaceholder", "assertBindExpression", "assertImportAttribute", "assertDecorator", "assertDoExpression", "assertExportDefaultSpecifier", "assertRecordExpression", "assertTupleExpression", "assertDecimalLiteral", "assertModuleExpression", "assertTopicReference", "assertPipelineTopicExpression", "assertPipelineBareFunction", "assertPipelinePrimaryTopicReference", "assertTSParameterProperty", "assertTSDeclareFunction", "assertTSDeclareMethod", "assertTSQualifiedName", "assertTSCallSignatureDeclaration", "assertTSConstructSignatureDeclaration", "assertTSPropertySignature", "assertTSMethodSignature", "assertTSIndexSignature", "assertTSAnyKeyword", "assertTSBooleanKeyword", "assertTSBigIntKeyword", "assertTSIntrinsicKeyword", "assertTSNeverKeyword", "assertTSNullKeyword", "assertTSNumberKeyword", "assertTSObjectKeyword", "assertTSStringKeyword", "assertTSSymbolKeyword", "assertTSUndefinedKeyword", "assertTSUnknownKeyword", "assertTSVoidKeyword", "assertTSThisType", "assertTSFunctionType", "assertTSConstructorType", "assertTSTypeReference", "assertTSTypePredicate", "assertTSTypeQuery", "assertTSTypeLiteral", "assertTSArrayType", "assertTSTupleType", "assertTSOptionalType", "assertTSRestType", "assertTSNamedTupleMember", "assertTSUnionType", "assertTSIntersectionType", "assertTSConditionalType", "assertTSInferType", "assertTSParenthesizedType", "assertTSTypeOperator", "assertTSIndexedAccessType", "assertTSMappedType", "assertTSLiteralType", "assertTSExpressionWithTypeArguments", "assertTSInterfaceDeclaration", "assertTSInterfaceBody", "assertTSTypeAliasDeclaration", "assertTSInstantiationExpression", "assertTSAsExpression", "assertTSSatisfiesExpression", "assertTSTypeAssertion", "assertTSEnumDeclaration", "assertTSEnumMember", "assertTSModuleDeclaration", "assertTSModuleBlock", "assertTSImportType", "assertTSImportEqualsDeclaration", "assertTSExternalModuleReference", "assertTSNonNullExpression", "assertTSExportAssignment", "assertTSNamespaceExportDeclaration", "assertTSTypeAnnotation", "assertTSTypeParameterInstantiation", "assertTSTypeParameterDeclaration", "assertTSTypeParameter", "assertStandardized", "assertExpression", "assertBinary", "assertScopable", "assertBlockParent", "assertBlock", "assertStatement", "assertTerminatorless", "assertCompletionStatement", "assertConditional", "assertLoop", "assertWhile", "assertExpressionWrapper", "assertFor", "assertForXStatement", "assertFunction", "assertFunctionParent", "assertPureish", "assertDeclaration", "assertPatternLike", "assertLVal", "assertTSEntityName", "assertLiteral", "assertImmutable", "assertUserWhitespacable", "assertMethod", "assertObjectMember", "assertProperty", "assertUnaryLike", "assertPattern", "assertClass", "assertModuleDeclaration", "assertExportDeclaration", "assertModuleSpecifier", "assertAccessor", "assertPrivate", "assertFlow", "assertFlowType", "assertFlowBaseAnnotation", "assertFlowDeclaration", "assertFlowPredicate", "assertEnumBody", "assertEnumMember", "assertJSX", "assertMiscellaneous", "assertTypeScript", "assertTSTypeElement", "assertTSType", "assertTSBaseType", "assertNumberLiteral", "console", "trace", "assertRegexLiteral", "assertRestProperty", "assertSpreadProperty", "createTypeAnnotationBasedOnTypeof", "type", "stringTypeAnnotation", "numberTypeAnnotation", "voidTypeAnnotation", "booleanTypeAnnotation", "genericTypeAnnotation", "identifier", "anyTypeAnnotation", "Error", "getQualifiedName", "node", "isIdentifier", "name", "id", "qualification", "removeTypeDuplicates", "nodes", "generics", "Map", "bases", "typeGroups", "Set", "types", "i", "length", "indexOf", "isAnyTypeAnnotation", "isFlowBaseAnnotation", "set", "type", "isUnionTypeAnnotation", "has", "concat", "add", "isGenericTypeAnnotation", "existing", "get", "typeParameters", "params", "push", "baseType", "genericName", "createFlowUnionType", "types", "flattened", "removeTypeDuplicates", "length", "unionTypeAnnotation", "getQualifiedName", "node", "isIdentifier", "name", "right", "left", "removeTypeDuplicates", "nodes", "generics", "Map", "bases", "typeGroups", "Set", "types", "i", "length", "indexOf", "isTSAnyKeyword", "isTSBaseType", "set", "type", "isTSUnionType", "has", "push", "add", "isTSTypeReference", "typeParameters", "typeName", "existing", "get", "params", "concat", "baseType", "genericName", "createTSUnionType", "typeAnnotations", "types", "map", "type", "isTSTypeAnnotation", "typeAnnotation", "flattened", "removeTypeDuplicates", "length", "tsUnionType", "has", "Function", "call", "bind", "Object", "prototype", "hasOwnProperty", "cloneIfNode", "obj", "deep", "withoutLoc", "commentsCache", "type", "cloneNodeInternal", "cloneIfNodeOrArray", "Array", "isArray", "map", "node", "cloneNode", "Map", "newNode", "isIdentifier", "name", "optional", "typeAnnotation", "NODE_FIELDS", "Error", "field", "keys", "isFile", "maybeCloneComments", "comments", "loc", "leadingComments", "innerComments", "trailingComments", "extra", "comment", "cache", "get", "value", "ret", "set", "clone", "node", "cloneNode", "cloneDeep", "node", "cloneNode", "cloneDeepWithoutLoc", "node", "cloneNode", "cloneWithoutLoc", "node", "cloneNode", "addComments", "node", "type", "comments", "key", "concat", "push", "addComment", "node", "type", "content", "line", "addComments", "value", "inherit", "key", "child", "parent", "Array", "from", "Set", "concat", "filter", "Boolean", "inheritInnerComments", "child", "parent", "inherit", "inheritLeadingComments", "child", "parent", "inherit", "inheritTrailingComments", "child", "parent", "inherit", "inheritsComments", "child", "parent", "inheritTrailingComments", "inheritLeadingComments", "inheritInnerComments", "removeComments", "node", "COMMENT_KEYS", "forEach", "key", "STANDARDIZED_TYPES", "FLIPPED_ALIAS_KEYS", "EXPRESSION_TYPES", "BINARY_TYPES", "SCOPABLE_TYPES", "BLOCKPARENT_TYPES", "BLOCK_TYPES", "STATEMENT_TYPES", "TERMINATORLESS_TYPES", "COMPLETIONSTATEMENT_TYPES", "CONDITIONAL_TYPES", "LOOP_TYPES", "WHILE_TYPES", "EXPRESSIONWRAPPER_TYPES", "FOR_TYPES", "FORXSTATEMENT_TYPES", "FUNCTION_TYPES", "FUNCTIONPARENT_TYPES", "PUREISH_TYPES", "DECLARATION_TYPES", "PATTERNLIKE_TYPES", "LVAL_TYPES", "TSENTITYNAME_TYPES", "LITERAL_TYPES", "IMMUTABLE_TYPES", "USERWHITESPACABLE_TYPES", "METHOD_TYPES", "OBJECTMEMBER_TYPES", "PROPERTY_TYPES", "UNARYLIKE_TYPES", "PATTERN_TYPES", "CLASS_TYPES", "MODULEDECLARATION_TYPES", "EXPORTDECLARATION_TYPES", "MODULESPECIFIER_TYPES", "ACCESSOR_TYPES", "PRIVATE_TYPES", "FLOW_TYPES", "FLOWTYPE_TYPES", "FLOWBASEANNOTATION_TYPES", "FLOWDECLARATION_TYPES", "FLOWPREDICATE_TYPES", "ENUMBODY_TYPES", "ENUMMEMBER_TYPES", "JSX_TYPES", "MISCELLANEOUS_TYPES", "TYPESCRIPT_TYPES", "TSTYPEELEMENT_TYPES", "TSTYPE_TYPES", "TSBASETYPE_TYPES", "toBlock", "node", "parent", "isBlockStatement", "blockNodes", "isEmptyStatement", "isStatement", "isFunction", "returnStatement", "expressionStatement", "blockStatement", "ensureBlock", "node", "key", "result", "toBlock", "toIdentifier", "input", "name", "c", "isIdentifierChar", "codePointAt", "replace", "match", "toUpperCase", "isValidIdentifier", "toBindingIdentifierName", "name", "toIdentifier", "toComputedKey", "node", "key", "property", "computed", "isIdentifier", "stringLiteral", "name", "toExpression", "node", "isExpressionStatement", "expression", "isExpression", "isClass", "type", "isFunction", "Error", "traverseFast", "node", "enter", "opts", "keys", "VISITOR_KEYS", "type", "key", "subNode", "Array", "isArray", "CLEAR_KEYS", "CLEAR_KEYS_PLUS_COMMENTS", "COMMENT_KEYS", "removeProperties", "node", "opts", "map", "preserveComments", "key", "undefined", "Object", "keys", "symbols", "getOwnPropertySymbols", "sym", "removePropertiesDeep", "tree", "opts", "traverseFast", "removeProperties", "toKeyAlias", "node", "key", "alias", "kind", "increment", "isIdentifier", "name", "isStringLiteral", "JSON", "stringify", "value", "removePropertiesDeep", "cloneNode", "computed", "static", "uid", "Number", "MAX_SAFE_INTEGER", "getBindingIdentifiers", "node", "duplicates", "outerOnly", "search", "concat", "ids", "Object", "create", "length", "id", "shift", "keys", "type", "isIdentifier", "_ids", "name", "push", "isExportDeclaration", "isExportAllDeclaration", "isDeclaration", "declaration", "isFunctionDeclaration", "isFunctionExpression", "i", "key", "nodes", "Array", "isArray", "DeclareClass", "DeclareFunction", "DeclareModule", "DeclareVariable", "DeclareInterface", "DeclareTypeAlias", "DeclareOpaqueType", "InterfaceDeclaration", "TypeAlias", "OpaqueType", "CatchClause", "LabeledStatement", "UnaryExpression", "AssignmentExpression", "ImportSpecifier", "ImportNamespaceSpecifier", "ImportDefaultSpecifier", "ImportDeclaration", "ExportSpecifier", "ExportNamespaceSpecifier", "ExportDefaultSpecifier", "FunctionDeclaration", "FunctionExpression", "ArrowFunctionExpression", "ObjectMethod", "ClassMethod", "ClassPrivateMethod", "ForInStatement", "ForOfStatement", "ClassDeclaration", "ClassExpression", "RestElement", "UpdateExpression", "ObjectProperty", "AssignmentPattern", "ArrayPattern", "ObjectPattern", "VariableDeclaration", "VariableDeclarator", "gatherSequenceExpressions", "nodes", "scope", "declars", "exprs", "ensureLastUndefined", "node", "isEmptyStatement", "isExpression", "push", "isExpressionStatement", "expression", "isVariableDeclaration", "kind", "declar", "declarations", "bindings", "getBindingIdentifiers", "key", "Object", "keys", "id", "cloneNode", "init", "assignmentExpression", "isIfStatement", "consequent", "buildUndefinedNode", "alternate", "conditionalExpression", "test", "isBlockStatement", "body", "indexOf", "length", "sequenceExpression", "toSequenceExpression", "nodes", "scope", "length", "declars", "result", "gatherSequenceExpressions", "declar", "push", "toStatement", "node", "ignore", "isStatement", "mustHaveId", "newType", "isClass", "isFunction", "isAssignmentExpression", "expressionStatement", "id", "Error", "type", "valueToNode", "objectToString", "Function", "call", "bind", "Object", "prototype", "toString", "isRegExp", "value", "isPlainObject", "proto", "getPrototypeOf", "undefined", "identifier", "booleanLiteral", "nullLiteral", "stringLiteral", "result", "Number", "isFinite", "numericLiteral", "Math", "abs", "numerator", "isNaN", "binaryExpression", "is", "unaryExpression", "pattern", "source", "flags", "match", "regExpLiteral", "Array", "isArray", "arrayExpression", "map", "props", "key", "keys", "nodeKey", "isValidIdentifier", "push", "objectProperty", "objectExpression", "Error", "appendToMemberExpression", "member", "append", "computed", "object", "memberExpression", "property", "inherits", "child", "parent", "key", "INHERIT_KEYS", "optional", "Object", "keys", "force", "inheritsComments", "prependToMemberExpression", "member", "prepend", "isSuper", "object", "Error", "memberExpression", "getOuterBindingIdentifiers", "node", "duplicates", "getBindingIdentifiers", "traverse", "node", "handlers", "state", "enter", "exit", "traverseSimpleImpl", "ancestors", "keys", "VISITOR_KEYS", "type", "key", "subNode", "Array", "isArray", "i", "length", "child", "push", "index", "pop", "isBinding", "node", "parent", "grandparent", "type", "keys", "getBindingIdentifiers", "i", "length", "key", "val", "Array", "isArray", "indexOf", "isLet", "node", "isVariableDeclaration", "kind", "BLOCK_SCOPED_SYMBOL", "isBlockScoped", "node", "isFunctionDeclaration", "isClassDeclaration", "isLet", "isImmutable", "node", "isType", "type", "isIdentifier", "name", "isNodesEquivalent", "a", "b", "type", "fields", "Object", "keys", "NODE_FIELDS", "visitorKeys", "VISITOR_KEYS", "field", "val_a", "val_b", "Array", "isArray", "length", "i", "includes", "key", "isReferenced", "node", "parent", "grandparent", "type", "property", "computed", "object", "init", "body", "key", "superClass", "right", "source", "local", "id", "isScope", "node", "parent", "isBlockStatement", "isFunction", "isCatchClause", "isPattern", "isScopable", "isSpecifierDefault", "specifier", "isImportDefaultSpecifier", "isIdentifier", "imported", "exported", "name", "RESERVED_WORDS_ES3_ONLY", "Set", "isValidES3Identifier", "name", "isValidIdentifier", "has", "isVar", "node", "isVariableDeclaration", "kind", "BLOCK_SCOPED_SYMBOL", "require_generated", "_inherits", "react", "isReactComponent", "isCompatTag", "buildChildren", "path", "path", "i", "require_lib", "path", "ReferencedIdentifier", "ReferencedMemberExpression", "BindingIdentifier", "Statement", "Expression", "Scope", "Referenced", "BlockScoped", "Var", "User", "Generated", "Pure", "Flow", "RestProperty", "SpreadProperty", "ExistentialTypeParam", "NumericLiteralTypeAnnotation", "ForAwaitStatement", "DEPRECATED_KEYS", "FLIPPED_ALIAS_KEYS", "TYPES", "isVirtualType", "type", "virtualTypes", "explode", "visitor", "_exploded", "nodeType", "Object", "keys", "shouldIgnoreKey", "parts", "split", "length", "fns", "part", "verify", "__esModule", "ensureEntranceObjects", "ensureCallbackArrays", "wrapCheck", "types", "mergePair", "aliases", "deprecatedKey", "console", "trace", "alias", "existing", "_verified", "Error", "validateVisitorMethods", "indexOf", "visitors", "visitorKey", "path", "val", "concat", "fn", "TypeError", "merge", "states", "wrapper", "rootVisitor", "i", "state", "visitorType", "wrapWithStateOrWrapper", "nodeVisitor", "oldVisitor", "newVisitor", "key", "Array", "isArray", "map", "newFn", "call", "toString", "obj", "enter", "exit", "apply", "arguments", "dest", "src", "path", "WeakMap", "scope", "clear", "clearPath", "clearScope", "parse", "n", "i", "self", "warned", "r", "require_lib", "declaration", "require_lib", "path", "t", "renameVisitor", "ReferencedIdentifier", "node", "state", "name", "oldName", "newName", "Scope", "path", "scope", "bindingIdentifierEquals", "binding", "identifier", "skip", "isMethod", "requeueComputedKeyAndDecorators", "isVariableDeclaration", "ids", "getOuterBindingIdentifiers", "Renamer", "constructor", "maybeConvertFromExportDeclaration", "parentDeclar", "maybeExportDeclar", "parentPath", "isExportDeclaration", "isExportDefaultDeclaration", "declaration", "isDeclaration", "id", "isExportAllDeclaration", "splitExportDeclaration", "maybeConvertFromClassFunctionDeclaration", "maybeConvertFromClassFunctionExpression", "rename", "find", "isFunctionExpression", "isClassExpression", "bindingIds", "blockToTraverse", "arguments", "block", "traverseNode", "explode", "discriminant", "removeOwnBinding", "bindings", "Binding", "constructor", "identifier", "scope", "path", "kind", "constantViolations", "constant", "referencePaths", "referenced", "references", "isDeclaredInLoop", "Error", "reassign", "clearValue", "deoptValue", "hasDeoptedValue", "setValue", "value", "hasValue", "indexOf", "push", "reference", "dereference", "parentPath", "key", "isFunctionParent", "isWhile", "isForXStatement", "isForStatement", "require_globals", "NOT_LOCAL_BINDING", "callExpression", "cloneNode", "getBindingIdentifiers", "identifier", "isArrayExpression", "isBinary", "isClass", "isClassBody", "isClassDeclaration", "isExportAllDeclaration", "isExportDefaultDeclaration", "isExportNamedDeclaration", "isFunctionDeclaration", "isIdentifier", "isImportDeclaration", "isLiteral", "isMethod", "isModuleSpecifier", "isNullLiteral", "isObjectExpression", "isProperty", "isPureish", "isRegExpLiteral", "isSuper", "isTaggedTemplateExpression", "isTemplateLiteral", "isThisExpression", "isUnaryExpression", "isVariableDeclaration", "matchesPattern", "memberExpression", "numericLiteral", "toIdentifier", "unaryExpression", "variableDeclaration", "variableDeclarator", "isRecordExpression", "isTupleExpression", "isObjectProperty", "isTopicReference", "isMetaProperty", "isPrivateName", "isExportDeclaration", "gatherNodeParts", "node", "parts", "type", "source", "specifiers", "length", "e", "declaration", "local", "push", "value", "object", "property", "name", "callee", "properties", "argument", "key", "left", "id", "expression", "meta", "openingElement", "openingFragment", "namespace", "collectorVisitor", "ForStatement", "path", "declar", "get", "isVar", "scope", "parentScope", "getFunctionParent", "getProgramParent", "registerBinding", "Declaration", "isBlockScoped", "parent", "registerDeclaration", "ImportDeclaration", "getBlockParent", "ReferencedIdentifier", "state", "references", "ForXStatement", "isPattern", "constantViolations", "ExportDeclaration", "exit", "binding", "getBinding", "reference", "decl", "declarations", "Object", "keys", "LabeledStatement", "AssignmentExpression", "assignments", "UpdateExpression", "UnaryExpression", "operator", "BlockScoped", "bindings", "CatchClause", "Function", "params", "param", "isFunctionExpression", "has", "ClassExpression", "uid", "Scope", "constructor", "block", "labels", "inited", "globals", "uids", "data", "crawling", "cached", "scopeCache", "set", "Map", "shouldSkip", "listKey", "parentPath", "isScope", "parentBlock", "hub", "traverse", "opts", "generateDeclaredUidIdentifier", "generateUidIdentifier", "generateUid", "replace", "i", "_generateUid", "hasLabel", "hasBinding", "hasGlobal", "hasReference", "program", "generateUidBasedOnNode", "defaultName", "join", "slice", "generateUidIdentifierBasedOnNode", "isStatic", "constant", "maybeGenerateMemoised", "dontPush", "checkBlockScopedCollisions", "kind", "duplicate", "buildError", "TypeError", "rename", "oldName", "newName", "renamer", "Renamer", "arguments", "_renameFromMap", "map", "dump", "sep", "repeat", "console", "log", "violations", "toArray", "arrayLikeIsIterable", "isGenericType", "helperName", "args", "unshift", "addHelper", "getLabel", "registerLabel", "label", "isLabeledStatement", "declare", "isTypeDeclaration", "importKind", "specifier", "isTypeSpecifier", "isImportSpecifier", "buildUndefinedNode", "registerConstantViolation", "ids", "reassign", "bindingPath", "ReferenceError", "declarators", "getOuterBindingIdentifiers", "getOwnBinding", "Binding", "addGlobal", "hasUid", "isPure", "constantsOnly", "superClass", "decorators", "body", "method", "right", "elem", "elements", "prop", "computed", "static", "tag", "quasi", "expressions", "setData", "val", "getData", "removeData", "init", "crawl", "create", "programParent", "_exploded", "visit", "enter", "typeVisitors", "ref", "getPatternParent", "isBlockStatement", "isProgram", "isSwitchStatement", "isLoop", "isCatchClause", "isFunction", "ensureBlock", "unique", "blockHoist", "_blockHoist", "dataKey", "declarPath", "unshiftContainer", "declarator", "len", "Error", "isFunctionParent", "isBlockParent", "getAllBindings", "getAllBindingsOfKind", "kinds", "bindingIdentifierEquals", "getBindingIdentifier", "previousPath", "isArrowFunctionExpression", "getOwnBindingIdentifier", "hasOwnBinding", "noGlobals", "parentHasBinding", "noUids", "includes", "contextVariables", "moveBindingTo", "info", "removeOwnBinding", "removeBinding", "builtin", "get", "put", "pop", "i", "a", "UrlType", "path", "url", "i", "resolve", "resolve", "resolveUri", "path", "i", "a", "map", "presortedDecodedMap", "decodedMappings", "getLine", "encodedMappings", "traceSegment", "originalPositionFor", "generatedPositionFor", "allGeneratedPositionsFor", "eachMapping", "sourceContentFor", "decodedMap", "encodedMap", "encode", "decode", "bsFound", "addSegment", "addMapping", "maybeAddSegment", "maybeAddMapping", "setSourceContent", "toDecodedMap", "toEncodedMap", "fromMap", "allMappings", "SetArray", "map", "put", "encode", "i", "TraceMap", "decodedMappings", "getLine", "SourceMap", "constructor", "opts", "code", "_map", "_rawMappings", "_sourceFileName", "_lastGenLine", "_lastSourceLine", "_lastSourceColumn", "map", "GenMapping", "sourceRoot", "sourceFileName", "replace", "undefined", "setSourceContent", "Object", "keys", "forEach", "get", "toEncodedMap", "getDecoded", "toDecodedMap", "getRawMappings", "allMappings", "mark", "generated", "line", "column", "identifierName", "filename", "maybeAddMapping", "name", "source", "original", "Buffer", "constructor", "map", "_map", "_buf", "_str", "_appendCount", "_last", "_queue", "_queueCursor", "_position", "line", "column", "_sourcePosition", "identifierName", "undefined", "filename", "_allocQueue", "queue", "i", "push", "char", "repeat", "_pushQueue", "cursor", "length", "item", "_popQueue", "Error", "get", "_flush", "result", "code", "trimRight", "decodedMap", "getDecoded", "resultMap", "value", "Object", "defineProperty", "writable", "rawMappings", "mappings", "getRawMappings", "append", "str", "maybeNewline", "_append", "appendChar", "_appendChar", "sourcePosition", "queueIndentation", "queueCursor", "sourcePos", "String", "fromCharCode", "_mark", "len", "position", "charCodeAt", "indexOf", "last", "mark", "removeTrailingNewline", "removeLastSemicolon", "getLastChar", "getNewlineCount", "count", "endsWithCharAndNewline", "lastCp", "hasContent", "exactSource", "loc", "cb", "source", "prop", "_normalizePosition", "sourceWithOffset", "lineOffset", "columnOffset", "withSource", "pos", "target", "getCurrentColumn", "lastIndex", "getCurrentLine", "FLIPPED_ALIAS_KEYS", "isArrayExpression", "isAssignmentExpression", "isBinary", "isBlockStatement", "isCallExpression", "isFunction", "isIdentifier", "isLiteral", "isMemberExpression", "isObjectExpression", "isOptionalCallExpression", "isOptionalMemberExpression", "isStringLiteral", "crawlInternal", "node", "state", "object", "computed", "property", "left", "right", "hasCall", "callee", "hasFunction", "hasHelper", "isHelper", "crawl", "name", "charCodeAt", "isType", "nodes", "AssignmentExpression", "SwitchCase", "parent", "consequent", "length", "cases", "LogicalExpression", "Literal", "value", "CallExpression", "OptionalCallExpression", "VariableDeclaration", "i", "declarations", "declar", "enabled", "id", "init", "IfStatement", "ObjectProperty", "ObjectTypeProperty", "ObjectMethod", "properties", "ObjectTypeCallProperty", "callProperties", "ObjectTypeIndexer", "indexers", "ObjectTypeInternalSlot", "internalSlots", "forEach", "type", "amounts", "concat", "ret", "isArrayTypeAnnotation", "isArrowFunctionExpression", "isAssignmentExpression", "isAwaitExpression", "isBinary", "isBinaryExpression", "isUpdateExpression", "isCallExpression", "isClass", "isClassExpression", "isConditional", "isConditionalExpression", "isExportDeclaration", "isExportDefaultDeclaration", "isExpressionStatement", "isFor", "isForInStatement", "isForOfStatement", "isForStatement", "isFunctionExpression", "isIfStatement", "isIndexedAccessType", "isIntersectionTypeAnnotation", "isLogicalExpression", "isMemberExpression", "isNewExpression", "isNullableTypeAnnotation", "isObjectPattern", "isOptionalCallExpression", "isOptionalMemberExpression", "isReturnStatement", "isSequenceExpression", "isSwitchStatement", "isTSArrayType", "isTSAsExpression", "isTSInstantiationExpression", "isTSIntersectionType", "isTSNonNullExpression", "isTSOptionalType", "isTSRestType", "isTSTypeAssertion", "isTSUnionType", "isTaggedTemplateExpression", "isThrowStatement", "isTypeAnnotation", "isUnaryLike", "isUnionTypeAnnotation", "isVariableDeclarator", "isWhileStatement", "isYieldExpression", "isTSSatisfiesExpression", "PRECEDENCE", "in", "instanceof", "isTSTypeExpression", "node", "isClassExtendsClause", "parent", "superClass", "hasPostfixPart", "object", "callee", "tag", "NullableTypeAnnotation", "FunctionTypeAnnotation", "printStack", "length", "UpdateExpression", "ObjectExpression", "isFirstInContext", "DoExpression", "async", "Binary", "operator", "left", "parentOp", "parentPos", "nodeOp", "nodePos", "right", "UnionTypeAnnotation", "OptionalIndexedAccessType", "objectType", "TSAsExpression", "TSUnionType", "TSInferType", "TSInstantiationExpression", "typeParameters", "BinaryExpression", "SequenceExpression", "test", "discriminant", "expression", "YieldExpression", "ClassExpression", "UnaryLike", "FunctionExpression", "ArrowFunctionExpression", "ConditionalExpression", "OptionalMemberExpression", "AssignmentExpression", "LogicalExpression", "Identifier", "extra", "parenthesized", "id", "name", "isFollowedByBracket", "computed", "optional", "checkParam", "expressionStatement", "arrowBody", "exportDefault", "forHead", "forInHead", "forOfHead", "i", "declaration", "body", "init", "expressions", "prefix", "FLIPPED_ALIAS_KEYS", "isCallExpression", "isExpressionStatement", "isMemberExpression", "isNewExpression", "expandAliases", "obj", "newObj", "add", "type", "func", "fn", "node", "parent", "stack", "result", "Object", "keys", "aliases", "alias", "expandedParens", "parens", "expandedWhitespaceNodes", "whitespace", "nodes", "find", "printStack", "isOrHasCallExpression", "object", "needsWhitespace", "expression", "flag", "needsWhitespaceBefore", "needsWhitespaceAfter", "needsParens", "callee", "TaggedTemplateExpression", "node", "print", "tag", "typeParameters", "quasi", "TemplateElement", "parent", "isFirst", "quasis", "isLast", "length", "value", "raw", "token", "TemplateLiteral", "i", "expressions", "n", "isCallExpression", "isLiteral", "isMemberExpression", "isNewExpression", "UnaryExpression", "node", "operator", "word", "space", "token", "print", "argument", "DoExpression", "async", "body", "ParenthesizedExpression", "expression", "UpdateExpression", "prefix", "printTerminatorless", "ConditionalExpression", "test", "consequent", "alternate", "NewExpression", "parent", "callee", "format", "minified", "arguments", "length", "optional", "typeArguments", "typeParameters", "printList", "SequenceExpression", "expressions", "ThisExpression", "Super", "isDecoratorMemberExpression", "type", "computed", "property", "object", "shouldParenthesizeDecoratorExpression", "Decorator", "newline", "OptionalMemberExpression", "TypeError", "value", "OptionalCallExpression", "CallExpression", "Import", "AwaitExpression", "YieldExpression", "delegate", "EmptyStatement", "semicolon", "ExpressionStatement", "AssignmentPattern", "left", "typeAnnotation", "right", "AssignmentExpression", "parens", "inForStatementInitCounter", "needsParens", "BindExpression", "MemberExpression", "MetaProperty", "meta", "PrivateName", "id", "V8IntrinsicIdentifier", "name", "ModuleExpression", "indent", "directives", "dedent", "sourceWithOffset", "loc", "rightBrace", "isFor", "isForStatement", "isIfStatement", "isStatement", "WithStatement", "node", "word", "space", "token", "print", "object", "printBlock", "IfStatement", "test", "needsBlock", "alternate", "getLastStatement", "consequent", "newline", "indent", "printAndIndentOnComments", "dedent", "endsWith", "statement", "body", "ForStatement", "inForStatementInitCounter", "init", "update", "WhileStatement", "ForXStatement", "isForOf", "type", "await", "noIndentInnerCommentsHere", "left", "right", "ForInStatement", "ForOfStatement", "DoWhileStatement", "semicolon", "printStatementAfterKeyword", "printer", "parent", "isLabel", "printTerminatorless", "BreakStatement", "label", "ContinueStatement", "ReturnStatement", "argument", "ThrowStatement", "LabeledStatement", "TryStatement", "block", "handlers", "handler", "finalizer", "CatchClause", "param", "typeAnnotation", "SwitchStatement", "discriminant", "printSequence", "cases", "addNewlines", "leading", "cas", "length", "SwitchCase", "DebuggerStatement", "VariableDeclaration", "declare", "kind", "hasInits", "declar", "declarations", "printList", "separator", "undefined", "VariableDeclarator", "id", "definite", "isExportDefaultDeclaration", "isExportNamedDeclaration", "ClassDeclaration", "node", "parent", "format", "decoratorsBeforeExport", "printJoin", "decorators", "declare", "word", "space", "abstract", "id", "print", "typeParameters", "superClass", "superTypeParameters", "implements", "printList", "body", "ClassBody", "token", "length", "newline", "indent", "printSequence", "dedent", "endsWith", "sourceWithOffset", "loc", "rightBrace", "ClassProperty", "endLine", "key", "end", "line", "catchUp", "tsPrintClassMemberModifiers", "computed", "_variance", "optional", "definite", "typeAnnotation", "value", "semicolon", "ClassAccessorProperty", "ClassPrivateProperty", "static", "ClassMethod", "_classMethodHead", "ClassPrivateMethod", "_methodHead", "StaticBlock", "isIdentifier", "_params", "node", "print", "typeParameters", "token", "_parameters", "params", "noLineTerminator", "type", "returnType", "_noLineTerminator", "parameters", "parent", "paramLength", "length", "i", "_param", "space", "parameter", "printJoin", "decorators", "optional", "typeAnnotation", "_methodHead", "kind", "key", "word", "async", "generator", "computed", "_predicate", "noLineTerminatorAfter", "predicate", "_functionHead", "_endsWithInnerRaw", "id", "FunctionExpression", "body", "ArrowFunctionExpression", "firstParam", "format", "retainLines", "hasTypesOrComments", "printInnerComments", "param", "leadingComments", "trailingComments", "isClassDeclaration", "isExportDefaultSpecifier", "isExportNamespaceSpecifier", "isImportDefaultSpecifier", "isImportNamespaceSpecifier", "isStatement", "ImportSpecifier", "node", "importKind", "word", "space", "print", "imported", "local", "name", "ImportDefaultSpecifier", "ExportDefaultSpecifier", "exported", "ExportSpecifier", "exportKind", "ExportNamespaceSpecifier", "token", "_printAssertions", "printList", "assertions", "ExportAllDeclaration", "length", "source", "semicolon", "ExportNamedDeclaration", "format", "decoratorsBeforeExport", "declaration", "printJoin", "decorators", "declar", "specifiers", "slice", "hasSpecial", "first", "shift", "ExportDefaultDeclaration", "noIndentInnerCommentsHere", "ImportDeclaration", "isTypeKind", "module", "hasSpecifiers", "attributes", "ImportAttribute", "key", "value", "ImportNamespaceSpecifier", "object", "json", "string", "hexadecimal", "isAssignmentPattern", "isIdentifier", "Identifier", "node", "word", "name", "ArgumentPlaceholder", "token", "RestElement", "print", "argument", "ObjectExpression", "props", "properties", "length", "space", "printList", "indent", "statement", "sourceWithOffset", "loc", "ObjectMethod", "printJoin", "decorators", "_methodHead", "body", "ObjectProperty", "computed", "key", "value", "left", "shorthand", "ArrayExpression", "elems", "elements", "len", "i", "elem", "RecordExpression", "startToken", "endToken", "format", "recordAndTupleSyntaxType", "Error", "JSON", "stringify", "TupleExpression", "RegExpLiteral", "pattern", "flags", "BooleanLiteral", "NullLiteral", "NumericLiteral", "raw", "getPossibleRaw", "opts", "jsescOption", "numbers", "number", "jsesc", "minified", "StringLiteral", "undefined", "val", "Object", "assign", "jsonCompatibleStrings", "json", "BigIntLiteral", "DecimalLiteral", "validTopicTokenSet", "Set", "TopicReference", "topicToken", "has", "givenTopicTokenJSON", "validTopics", "Array", "from", "v", "join", "PipelineTopicExpression", "expression", "PipelineBareFunction", "callee", "PipelinePrimaryTopicReference", "isDeclareExportDeclaration", "isStatement", "AnyTypeAnnotation", "word", "ArrayTypeAnnotation", "node", "print", "elementType", "token", "BooleanTypeAnnotation", "BooleanLiteralTypeAnnotation", "value", "NullLiteralTypeAnnotation", "DeclareClass", "parent", "space", "_interfaceish", "DeclareFunction", "id", "typeAnnotation", "predicate", "semicolon", "InferredPredicate", "DeclaredPredicate", "DeclareInterface", "InterfaceDeclaration", "DeclareModule", "body", "DeclareModuleExports", "DeclareTypeAlias", "TypeAlias", "DeclareOpaqueType", "OpaqueType", "DeclareVariable", "DeclareExportDeclaration", "default", "FlowExportDeclaration", "call", "DeclareExportAllDeclaration", "ExportAllDeclaration", "EnumDeclaration", "enumExplicitType", "context", "name", "hasExplicitType", "enumBody", "members", "indent", "newline", "member", "hasUnknownMembers", "dedent", "EnumBooleanBody", "explicitType", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody", "EnumDefaultedMember", "enumInitializedMember", "init", "EnumBooleanMember", "EnumNumberMember", "EnumStringMember", "declaration", "declar", "specifiers", "length", "printList", "source", "ExistsTypeAnnotation", "FunctionTypeAnnotation", "typeParameters", "this", "params", "rest", "type", "method", "returnType", "FunctionTypeParam", "optional", "InterfaceExtends", "extends", "mixins", "implements", "_variance", "variance", "kind", "andSeparator", "InterfaceTypeAnnotation", "IntersectionTypeAnnotation", "printJoin", "types", "separator", "MixedTypeAnnotation", "EmptyTypeAnnotation", "NullableTypeAnnotation", "NumberTypeAnnotation", "StringTypeAnnotation", "ThisTypeAnnotation", "TupleTypeAnnotation", "TypeofTypeAnnotation", "argument", "right", "TypeAnnotation", "TypeParameterInstantiation", "TypeParameter", "bound", "supertype", "impltype", "ObjectTypeAnnotation", "exact", "props", "properties", "callProperties", "indexers", "internalSlots", "addNewlines", "leading", "statement", "iterator", "inexact", "ObjectTypeInternalSlot", "static", "ObjectTypeCallProperty", "ObjectTypeIndexer", "key", "ObjectTypeProperty", "proto", "ObjectTypeSpreadProperty", "QualifiedTypeIdentifier", "qualification", "SymbolTypeAnnotation", "orSeparator", "UnionTypeAnnotation", "TypeCastExpression", "expression", "Variance", "VoidTypeAnnotation", "IndexedAccessType", "objectType", "indexType", "OptionalIndexedAccessType", "File", "node", "program", "print", "interpreter", "Program", "noIndentInnerCommentsHere", "printInnerComments", "directivesLen", "directives", "length", "newline", "body", "printSequence", "trailingCommentsLineOffset", "trailingComments", "BlockStatement", "token", "indent", "sourceWithOffset", "loc", "rightBrace", "Directive", "value", "semicolon", "unescapedSingleQuoteRE", "unescapedDoubleQuoteRE", "DirectiveLiteral", "raw", "getPossibleRaw", "format", "minified", "undefined", "test", "Error", "InterpreterDirective", "Placeholder", "name", "expectedNode", "JSXAttribute", "node", "print", "name", "value", "token", "JSXIdentifier", "word", "JSXNamespacedName", "namespace", "JSXMemberExpression", "object", "property", "JSXSpreadAttribute", "argument", "JSXExpressionContainer", "expression", "JSXSpreadChild", "JSXText", "raw", "getPossibleRaw", "undefined", "JSXElement", "open", "openingElement", "selfClosing", "indent", "child", "children", "dedent", "closingElement", "spaceSeparator", "space", "JSXOpeningElement", "typeParameters", "attributes", "length", "printJoin", "separator", "JSXClosingElement", "JSXEmptyExpression", "printInnerComments", "JSXFragment", "openingFragment", "closingFragment", "JSXOpeningFragment", "JSXClosingFragment", "TSTypeAnnotation", "node", "token", "space", "optional", "print", "typeAnnotation", "TSTypeParameterInstantiation", "parent", "printList", "params", "type", "length", "TSTypeParameter", "in", "word", "out", "name", "constraint", "default", "TSParameterProperty", "accessibility", "readonly", "_param", "parameter", "TSDeclareFunction", "declare", "_functionHead", "TSDeclareMethod", "_classMethodHead", "TSQualifiedName", "left", "right", "TSCallSignatureDeclaration", "tsPrintSignatureDeclarationBase", "TSConstructSignatureDeclaration", "TSPropertySignature", "initializer", "tsPrintPropertyOrMethodName", "computed", "key", "TSMethodSignature", "kind", "TSIndexSignature", "static", "isStatic", "_parameters", "parameters", "TSAnyKeyword", "TSBigIntKeyword", "TSUnknownKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSBooleanKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSVoidKeyword", "TSUndefinedKeyword", "TSNullKeyword", "TSNeverKeyword", "TSIntrinsicKeyword", "TSThisType", "TSFunctionType", "tsPrintFunctionOrConstructorType", "TSConstructorType", "abstract", "typeParameters", "returnType", "TSTypeReference", "typeName", "TSTypePredicate", "asserts", "parameterName", "TSTypeQuery", "exprName", "TSTypeLiteral", "tsPrintTypeLiteralOrInterfaceBody", "members", "tsPrintBraced", "printer", "indent", "newline", "member", "dedent", "sourceWithOffset", "loc", "rightBrace", "TSArrayType", "elementType", "TSTupleType", "elementTypes", "TSOptionalType", "TSRestType", "TSNamedTupleMember", "label", "TSUnionType", "tsPrintUnionOrIntersectionType", "TSIntersectionType", "sep", "printJoin", "types", "separator", "TSConditionalType", "checkType", "extendsType", "trueType", "falseType", "TSInferType", "typeParameter", "TSParenthesizedType", "TSTypeOperator", "operator", "TSIndexedAccessType", "objectType", "indexType", "TSMappedType", "nameType", "tokenIfPlusMinus", "self", "tok", "TSLiteralType", "literal", "TSExpressionWithTypeArguments", "expression", "TSInterfaceDeclaration", "id", "extends", "extendz", "body", "TSInterfaceBody", "TSTypeAliasDeclaration", "TSTypeExpression", "forceParens", "trailingComments", "undefined", "TSTypeAssertion", "TSInstantiationExpression", "TSEnumDeclaration", "const", "isConst", "TSEnumMember", "TSModuleDeclaration", "global", "TSModuleBlock", "TSImportType", "argument", "qualifier", "TSImportEqualsDeclaration", "isExport", "moduleReference", "TSExternalModuleReference", "TSNonNullExpression", "TSExportAssignment", "TSNamespaceExportDeclaration", "tsPrintClassMemberModifiers", "isField", "override", "n", "isFunction", "isStatement", "isClassBody", "isTSInterfaceBody", "isTSEnumDeclaration", "SCIENTIFIC_NOTATION", "ZERO_DECIMAL_INTEGER", "NON_DECIMAL_LITERAL", "PURE_ANNOTATION_RE", "HAS_NEWLINE", "HAS_BlOCK_COMMENT_END", "needsParens", "Printer", "constructor", "format", "map", "inForStatementInitCounter", "_printStack", "_indent", "_indentChar", "_indentRepeat", "_insideAux", "_parenPushNewlineState", "_noLineTerminator", "_printAuxAfterOnNextUserNode", "_printedComments", "Set", "_endsWithInteger", "_endsWithWord", "_lastCommentLine", "_endsWithInnerRaw", "_indentInnerComments", "_buf", "Buffer", "indent", "style", "charCodeAt", "length", "generate", "ast", "print", "_maybeAddAuxComment", "get", "compact", "concise", "dedent", "semicolon", "force", "_appendChar", "_queue", "rightBrace", "minified", "removeLastSemicolon", "token", "space", "_space", "hasContent", "lastCp", "getLastChar", "word", "str", "noLineTerminatorAfter", "_maybePrintInnerComments", "endsWith", "_append", "number", "Number", "isInteger", "test", "maybeNewline", "lastChar", "strFirst", "tokenChar", "char", "newline", "i", "retainLines", "getNewlineCount", "j", "_newline", "endsWithCharAndNewline", "removeTrailingNewline", "exactSource", "loc", "cb", "_catchUp", "source", "prop", "sourceWithOffset", "lineOffset", "columnOffset", "withSource", "_maybeAddParen", "_maybeIndent", "append", "_maybeAddParenChar", "appendChar", "queue", "firstChar", "queueIndentation", "_getIndent", "_shouldIndent", "parenPushNewlineState", "printed", "len", "cha", "chaPost", "slice", "catchUp", "line", "count", "getCurrentLine", "pos", "printTerminatorless", "node", "parent", "isLabel", "terminatorState", "trailingCommentsLineOffset", "forceParens", "nodeType", "type", "oldConcise", "_compact", "printMethod", "undefined", "ReferenceError", "JSON", "stringify", "name", "push", "oldInAux", "shouldPrintParens", "retainFunctionParens", "extra", "parenthesized", "_printLeadingComments", "bind", "_printTrailingComments", "pop", "enteredPositionlessNode", "_printAuxBeforeComment", "_printAuxAfterComment", "comment", "auxiliaryCommentBefore", "_printComment", "value", "auxiliaryCommentAfter", "getPossibleRaw", "raw", "rawValue", "printJoin", "nodes", "opts", "newlineOpts", "addNewlines", "nextNodeStartLine", "separator", "statement", "_printNewline", "iterator", "nextNode", "start", "printAndIndentOnComments", "leadingComments", "printBlock", "body", "innerComments", "trailingComments", "_printComments", "comments", "printInnerComments", "hasSpace", "printedCommentsCount", "size", "noIndentInnerCommentsHere", "printSequence", "printList", "items", "commaSeparator", "newLine", "startLine", "lastCommentLine", "offset", "_shouldPrintComment", "ignore", "has", "add", "shouldPrintComment", "skipNewLines", "noLineTerminator", "isBlockComment", "printNewLines", "lastCharCode", "val", "adjustMultilineComment", "column", "newlineRegex", "RegExp", "replace", "indentSize", "getCurrentColumn", "repeat", "nodeLoc", "hasLoc", "nodeStartLine", "nodeEndLine", "end", "lastLine", "leadingCommentNewline", "shouldPrint", "commentStartLine", "commentEndLine", "Math", "max", "min", "singleLine", "shouldSkipNewline", "properties", "Object", "assign", "prototype", "generatorFunctions", "Noop", "Generator", "Printer", "constructor", "ast", "opts", "code", "format", "normalizeOptions", "map", "sourceMaps", "SourceMap", "generate", "auxiliaryCommentBefore", "auxiliaryCommentAfter", "shouldPrintComment", "retainLines", "retainFunctionParens", "comments", "compact", "minified", "concise", "indent", "adjustMultilineComment", "style", "jsescOption", "quotes", "wrap", "minimal", "recordAndTupleSyntaxType", "topicToken", "decoratorsBeforeExport", "jsonCompatibleStrings", "value", "includes", "length", "console", "error", "filename", "undefined", "CodeGenerator", "_generator", "gen", "VISITOR_KEYS", "findParent", "callback", "path", "parentPath", "find", "getFunctionParent", "p", "isFunction", "getStatementParent", "Array", "isArray", "container", "isStatement", "isProgram", "isFile", "Error", "getEarliestCommonAncestorFrom", "paths", "getDeepestCommonAncestorFrom", "deepest", "i", "ancestries", "earliest", "keys", "type", "ancestry", "listKey", "key", "earliestKeyIndex", "indexOf", "parentKey", "currentKeyIndex", "filter", "length", "minDepth", "Infinity", "lastCommonIndex", "lastCommon", "map", "unshift", "first", "depthLoop", "shouldMatch", "getAncestry", "push", "isAncestor", "maybeDescendant", "isDescendant", "maybeAncestor", "parent", "inType", "candidateTypes", "node", "createFlowUnionType", "createTSUnionType", "createUnionTypeAnnotation", "isFlowType", "isTSType", "createUnionType", "types", "BOOLEAN_NUMBER_BINARY_OPERATORS", "createTypeAnnotationBasedOnTypeof", "numberTypeAnnotation", "voidTypeAnnotation", "node", "isReferenced", "binding", "scope", "getBinding", "name", "identifier", "typeAnnotation", "getTypeAnnotationBindingConstantViolations", "path", "types", "functionConstantViolations", "constantViolations", "getConstantViolationsBefore", "testType", "getConditionalAnnotation", "testConstantViolations", "ifStatement", "filter", "indexOf", "push", "length", "violation", "getTypeAnnotation", "createUnionType", "functions", "violations", "slice", "unshift", "resolve", "status", "_guessExecutionStatusRelativeTo", "inferAnnotationFromBinaryExpression", "operator", "right", "get", "left", "target", "isIdentifier", "typeofPath", "typePath", "isUnaryExpression", "isLiteral", "typeValue", "value", "getParentConditionalPath", "parentPath", "isIfStatement", "isConditionalExpression", "key", "isFunction", "test", "paths", "i", "isLogicalExpression", "isBinaryExpression", "type", "BOOLEAN_BINARY_OPERATORS", "BOOLEAN_UNARY_OPERATORS", "NUMBER_BINARY_OPERATORS", "NUMBER_UNARY_OPERATORS", "STRING_UNARY_OPERATORS", "anyTypeAnnotation", "arrayTypeAnnotation", "booleanTypeAnnotation", "buildMatchMemberExpression", "genericTypeAnnotation", "identifier", "nullLiteralTypeAnnotation", "numberTypeAnnotation", "stringTypeAnnotation", "tupleTypeAnnotation", "unionTypeAnnotation", "voidTypeAnnotation", "isIdentifier", "VariableDeclarator", "get", "getTypeAnnotation", "TypeCastExpression", "node", "typeAnnotation", "validParent", "TSAsExpression", "TSNonNullExpression", "NewExpression", "callee", "type", "TemplateLiteral", "UnaryExpression", "operator", "indexOf", "BinaryExpression", "right", "left", "isBaseType", "LogicalExpression", "argumentTypes", "createUnionType", "ConditionalExpression", "SequenceExpression", "pop", "ParenthesizedExpression", "AssignmentExpression", "UpdateExpression", "StringLiteral", "NumericLiteral", "BooleanLiteral", "NullLiteral", "RegExpLiteral", "ObjectExpression", "ArrayExpression", "RestElement", "Func", "isArrayFrom", "isObjectKeys", "isObjectValues", "isObjectEntries", "CallExpression", "name", "resolveCall", "TaggedTemplateExpression", "resolve", "isFunction", "async", "generator", "returnType", "anyTypeAnnotation", "isAnyTypeAnnotation", "isArrayTypeAnnotation", "isBooleanTypeAnnotation", "isEmptyTypeAnnotation", "isFlowBaseAnnotation", "isGenericTypeAnnotation", "isIdentifier", "isMixedTypeAnnotation", "isNumberTypeAnnotation", "isStringTypeAnnotation", "isTSArrayType", "isTSTypeAnnotation", "isTSTypeReference", "isTupleTypeAnnotation", "isTypeAnnotation", "isUnionTypeAnnotation", "isVoidTypeAnnotation", "stringTypeAnnotation", "voidTypeAnnotation", "getTypeAnnotation", "type", "getData", "_getTypeAnnotation", "typeAnnotation", "setData", "typeAnnotationInferringNodes", "WeakSet", "node", "key", "parentPath", "isVariableDeclarator", "declar", "declarParent", "isForInStatement", "isForOfStatement", "has", "add", "inferer", "inferers", "call", "validParent", "delete", "isBaseType", "baseName", "soft", "_isBaseType", "Error", "couldBeBaseType", "name", "type2", "types", "baseTypeStrictlyMatches", "rightArg", "left", "right", "isGenericType", "genericName", "id", "typeName", "r", "a", "i", "t", "n", "string", "i", "path", "i", "n", "r", "require_browser", "self", "a", "i", "require_lib", "require_lib", "i", "string", "Position", "constructor", "line", "col", "index", "column", "SourceLocation", "start", "end", "filename", "identifierName", "createPositionWithColumnOffset", "position", "columnOffset", "ParseErrorCode", "reflect", "keys", "last", "length", "get", "reduce", "object", "key", "set", "value", "item", "i", "instantiate", "properties", "descriptors", "Object", "map", "filter", "descriptor", "enumerable", "split", "instance", "defineProperty", "configurable", "assign", "ImportMetaOutsideModule", "message", "code", "SourceTypeModuleError", "ImportOutsideModule", "NodeDescriptions", "ArrayPattern", "AssignmentExpression", "AssignmentPattern", "ArrowFunctionExpression", "ConditionalExpression", "CatchClause", "ForOfStatement", "ForInStatement", "ForStatement", "FormalParameters", "Identifier", "ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier", "ObjectPattern", "ParenthesizedExpression", "RestElement", "UpdateExpression", "true", "false", "VariableDeclarator", "YieldExpression", "toNodeDescription", "type", "prefix", "String", "AccessorIsGenerator", "kind", "ArgumentsInClass", "AsyncFunctionInSingleStatementContext", "AwaitBindingIdentifier", "AwaitBindingIdentifierInStaticBlock", "AwaitExpressionFormalParameter", "AwaitNotInAsyncContext", "AwaitNotInAsyncFunction", "BadGetterArity", "BadSetterArity", "BadSetterRestParameter", "ConstructorClassField", "ConstructorClassPrivateField", "ConstructorIsAccessor", "ConstructorIsAsync", "ConstructorIsGenerator", "DeclarationMissingInitializer", "DecoratorArgumentsOutsideParentheses", "DecoratorBeforeExport", "DecoratorConstructor", "DecoratorExportClass", "DecoratorSemicolon", "DecoratorStaticBlock", "DeletePrivateField", "DestructureNamedImport", "DuplicateConstructor", "DuplicateDefaultExport", "DuplicateExport", "exportName", "DuplicateProto", "DuplicateRegExpFlags", "ElementAfterRest", "EscapedCharNotAnIdentifier", "ExportBindingIsString", "localName", "ExportDefaultFromAsIdentifier", "ForInOfLoopInitializer", "ForInUsing", "ForOfAsync", "ForOfLet", "GeneratorInSingleStatementContext", "IllegalBreakContinue", "IllegalLanguageModeDirective", "IllegalReturn", "ImportBindingIsString", "importName", "ImportCallArgumentTrailingComma", "ImportCallArity", "maxArgumentCount", "ImportCallNotNewExpression", "ImportCallSpreadArgument", "ImportJSONBindingNotDefault", "ImportReflectionHasAssertion", "ImportReflectionNotBinding", "IncompatibleRegExpUVFlags", "InvalidBigIntLiteral", "InvalidCodePoint", "InvalidCoverInitializedName", "InvalidDecimal", "InvalidDigit", "radix", "InvalidEscapeSequence", "InvalidEscapeSequenceTemplate", "InvalidEscapedReservedWord", "reservedWord", "InvalidIdentifier", "InvalidLhs", "ancestor", "InvalidLhsBinding", "InvalidNumber", "InvalidOrMissingExponent", "InvalidOrUnexpectedToken", "unexpected", "InvalidParenthesizedAssignment", "InvalidPrivateFieldResolution", "InvalidPropertyBindingPattern", "InvalidRecordProperty", "InvalidRestAssignmentPattern", "LabelRedeclaration", "labelName", "LetInLexicalBinding", "LineTerminatorBeforeArrow", "MalformedRegExpFlags", "MissingClassName", "MissingEqInAssignment", "MissingSemicolon", "MissingPlugin", "missingPlugin", "name", "JSON", "stringify", "join", "MissingOneOfPlugins", "MissingUnicodeEscape", "MixingCoalesceWithLogical", "ModuleAttributeDifferentFromType", "ModuleAttributeInvalidValue", "ModuleAttributesWithDuplicateKeys", "ModuleExportNameHasLoneSurrogate", "surrogateCharCode", "toString", "ModuleExportUndefined", "MultipleDefaultsInSwitch", "NewlineAfterThrow", "NoCatchOrFinally", "NumberIdentifier", "NumericSeparatorInEscapeSequence", "ObsoleteAwaitStar", "OptionalChainingNoNew", "OptionalChainingNoTemplate", "OverrideOnConstructor", "ParamDupe", "PatternHasAccessor", "PatternHasMethod", "PrivateInExpectedIn", "PrivateNameRedeclaration", "RecordExpressionBarIncorrectEndSyntaxType", "RecordExpressionBarIncorrectStartSyntaxType", "RecordExpressionHashIncorrectStartSyntaxType", "RecordNoProto", "RestTrailingComma", "SloppyFunction", "StaticPrototype", "SuperNotAllowed", "SuperPrivateField", "TrailingDecorator", "TupleExpressionBarIncorrectEndSyntaxType", "TupleExpressionBarIncorrectStartSyntaxType", "TupleExpressionHashIncorrectStartSyntaxType", "UnexpectedArgumentPlaceholder", "UnexpectedAwaitAfterPipelineBody", "UnexpectedDigitAfterHash", "UnexpectedImportExport", "UnexpectedKeyword", "keyword", "UnexpectedLeadingDecorator", "UnexpectedLexicalDeclaration", "UnexpectedNewTarget", "UnexpectedNumericSeparator", "UnexpectedPrivateField", "UnexpectedReservedWord", "UnexpectedSuper", "UnexpectedToken", "expected", "UnexpectedTokenUnaryExponentiation", "UnexpectedUsingDeclaration", "UnsupportedBind", "UnsupportedDecoratorExport", "UnsupportedDefaultExport", "UnsupportedImport", "UnsupportedMetaProperty", "target", "onlyValidPropertyName", "UnsupportedParameterDecorator", "UnsupportedPropertyDecorator", "UnsupportedSuper", "UnterminatedComment", "UnterminatedRegExp", "UnterminatedString", "UnterminatedTemplate", "UsingDeclarationHasBindingPattern", "VarRedeclaration", "YieldBindingIdentifier", "YieldInParameter", "ZeroDigitNumericSeparator", "StrictDelete", "StrictEvalArguments", "referenceName", "StrictEvalArgumentsBinding", "bindingName", "StrictFunction", "StrictNumericEscape", "StrictOctalLiteral", "StrictWith", "UnparenthesizedPipeBodyDescriptions", "Set", "PipeBodyIsTighter", "PipeTopicRequiresHackPipes", "PipeTopicUnbound", "PipeTopicUnconfiguredToken", "token", "PipeTopicUnused", "PipeUnparenthesizedBody", "PipelineBodyNoArrow", "PipelineBodySequenceExpression", "PipelineHeadSequenceExpression", "PipelineTopicUnused", "PrimaryTopicNotAllowed", "PrimaryTopicRequiresSmartPipeline", "toParseErrorConstructor", "toMessage", "_excluded", "loc", "details", "SyntaxError", "clone", "overrides", "pos", "ParseErrorEnum", "argument", "syntaxPlugin", "Array", "isArray", "parseErrorTemplates", "ParseErrorConstructors", "reasonCode", "template", "rest", "_excluded2", "Errors", "ModuleErrors", "StandardErrors", "StrictModeErrors", "PipelineOperatorErrors", "toUnenumerable", "toESTreeLocation", "node", "superClass", "ESTreeParserMixin", "parse", "file", "options", "tokens", "parseRegExpLiteral", "pattern", "flags", "regex", "RegExp", "e", "estreeParseLiteral", "parseBigIntLiteral", "bigInt", "BigInt", "bigint", "parseDecimalLiteral", "decimal", "parseLiteral", "parseStringLiteral", "parseNumericLiteral", "parseNullLiteral", "parseBooleanLiteral", "directiveToStmt", "directive", "expression", "raw", "extra", "expressionValue", "stmt", "rawValue", "initFunction", "isAsync", "checkDeclaration", "isObjectProperty", "getObjectOrClassMethodParams", "method", "params", "isValidDirective", "parenthesized", "parseBlockBody", "allowDirectives", "topLevel", "afterBlockParse", "directiveStatements", "directives", "d", "body", "concat", "pushClassMethod", "classBody", "isGenerator", "isConstructor", "allowsDirectSuper", "parseMethod", "typeParameters", "push", "parsePrivateName", "getPluginOption", "convertPrivateNameToPrivateIdentifier", "getPrivateNameSV", "id", "isPrivateName", "parseFunctionBody", "allowExpression", "isMethod", "allowDirectSuper", "inClassScope", "funcNode", "startNode", "computed", "finishNode", "parseClassProperty", "args", "propertyNode", "parseClassPrivateProperty", "parseObjectMethod", "prop", "isPattern", "isAccessor", "shorthand", "parseObjectProperty", "startLoc", "refExpressionErrors", "isValidLVal", "isUnparenthesizedInAssign", "binding", "isAssignable", "isBinding", "toAssignable", "isLHS", "classScope", "usePrivateName", "toAssignableObjectExpressionProp", "isLast", "raise", "at", "finishCallExpression", "unfinished", "optional", "callee", "source", "arguments", "hasPlugin", "attributes", "toReferencedArguments", "parseExport", "decorators", "exportStartLoc", "state", "lastTokStartLoc", "exported", "specifiers", "declaration", "resetStartLocation", "parseSubscript", "base", "noCalls", "optionalChainMember", "substring", "stop", "chain", "startNodeAtNode", "hasPropertyAsPrivateName", "isOptionalChain", "isObjectMethod", "finishNodeAt", "endLoc", "resetEndLocation", "lastTokEndLoc", "TokContext", "preserveSpace", "types", "brace", "j_oTag", "j_cTag", "j_expr", "beforeExpr", "startsExpr", "isLoop", "isAssign", "postfix", "ExportedTokenType", "label", "conf", "rightAssociative", "binop", "updateContext", "keywords", "Map", "createKeyword", "createToken", "createBinop", "tokenTypeCounter", "tokenTypes", "tokenLabels", "tokenBinops", "tokenBeforeExprs", "tokenStartsExprs", "tokenPrefixes", "createKeywordLike", "tt", "bracketL", "bracketHashL", "bracketBarL", "bracketR", "bracketBarR", "braceL", "braceBarL", "braceHashL", "braceR", "braceBarR", "parenL", "parenR", "comma", "semi", "colon", "doubleColon", "dot", "question", "questionDot", "arrow", "ellipsis", "backQuote", "dollarBraceL", "templateTail", "templateNonTail", "hash", "interpreterDirective", "eq", "slashAssign", "xorAssign", "moduloAssign", "incDec", "bang", "tilde", "doubleCaret", "doubleAt", "pipeline", "nullishCoalescing", "logicalOR", "logicalAND", "bitwiseOR", "bitwiseXOR", "bitwiseAND", "equality", "lt", "gt", "relational", "bitShift", "bitShiftL", "bitShiftR", "plusMin", "modulo", "star", "slash", "exponent", "_in", "_instanceof", "_break", "_case", "_catch", "_continue", "_debugger", "_default", "_else", "_finally", "_function", "_if", "_return", "_switch", "_throw", "_try", "_var", "_const", "_with", "_new", "_this", "_super", "_class", "_extends", "_export", "_import", "_null", "_true", "_false", "_typeof", "_void", "_delete", "_do", "_for", "_while", "_as", "_assert", "_async", "_await", "_from", "_get", "_let", "_meta", "_of", "_sent", "_set", "_static", "_using", "_yield", "_asserts", "_checks", "_exports", "_global", "_implements", "_intrinsic", "_infer", "_is", "_mixins", "_proto", "_require", "_satisfies", "_keyof", "_readonly", "_unique", "_abstract", "_declare", "_enum", "_module", "_namespace", "_interface", "_type", "_opaque", "string", "num", "regexp", "privateName", "eof", "jsxName", "jsxText", "jsxTagStart", "jsxTagEnd", "placeholder", "tokenIsIdentifier", "tokenKeywordOrIdentifierIsKeyword", "tokenIsKeywordOrIdentifier", "tokenIsLiteralPropertyName", "tokenComesBeforeExpression", "tokenCanStartExpression", "tokenIsAssignment", "tokenIsFlowInterfaceOrTypeOrOpaque", "tokenIsLoop", "tokenIsKeyword", "tokenIsOperator", "tokenIsPostfix", "tokenIsPrefix", "tokenIsTSTypeOperator", "tokenIsTSDeclarationStart", "tokenLabelName", "tokenOperatorPrecedence", "tokenIsRightAssociative", "tokenIsTemplate", "getExportedToken", "context", "pop", "tc", "nonASCIIidentifierStartChars", "nonASCIIidentifierChars", "nonASCIIidentifierStart", "nonASCIIidentifier", "astralIdentifierStartCodes", "astralIdentifierCodes", "isInAstralSet", "isIdentifierStart", "test", "fromCharCode", "isIdentifierChar", "reservedWords", "strict", "strictBind", "reservedWordsStrictSet", "reservedWordsStrictBindSet", "isReservedWord", "word", "inModule", "isStrictReservedWord", "has", "isStrictBindOnlyReservedWord", "isStrictBindReservedWord", "isKeyword", "isIteratorStart", "current", "next", "next2", "reservedWordLikeSet", "canBeReservedWord", "SCOPE_OTHER", "SCOPE_PROGRAM", "SCOPE_FUNCTION", "SCOPE_ARROW", "SCOPE_SIMPLE_CATCH", "SCOPE_SUPER", "SCOPE_DIRECT_SUPER", "SCOPE_CLASS", "SCOPE_STATIC_BLOCK", "SCOPE_TS_MODULE", "SCOPE_VAR", "BIND_KIND_VALUE", "BIND_KIND_TYPE", "BIND_SCOPE_VAR", "BIND_SCOPE_LEXICAL", "BIND_SCOPE_FUNCTION", "BIND_FLAGS_NONE", "BIND_FLAGS_CLASS", "BIND_FLAGS_TS_ENUM", "BIND_FLAGS_TS_CONST_ENUM", "BIND_FLAGS_TS_EXPORT_ONLY", "BIND_FLAGS_FLOW_DECLARE_FN", "BIND_FLAGS_TS_IMPORT", "BIND_CLASS", "BIND_LEXICAL", "BIND_VAR", "BIND_FUNCTION", "BIND_TS_INTERFACE", "BIND_TS_TYPE", "BIND_TS_ENUM", "BIND_TS_AMBIENT", "BIND_NONE", "BIND_OUTSIDE", "BIND_TS_CONST_ENUM", "BIND_TS_NAMESPACE", "BIND_TS_TYPE_IMPORT", "BIND_FLOW_DECLARE_FN", "CLASS_ELEMENT_FLAG_STATIC", "CLASS_ELEMENT_KIND_GETTER", "CLASS_ELEMENT_KIND_SETTER", "CLASS_ELEMENT_KIND_ACCESSOR", "CLASS_ELEMENT_STATIC_GETTER", "CLASS_ELEMENT_STATIC_SETTER", "CLASS_ELEMENT_INSTANCE_GETTER", "CLASS_ELEMENT_INSTANCE_SETTER", "CLASS_ELEMENT_OTHER", "Scope", "var", "lexical", "functions", "ScopeHandler", "parser", "scopeStack", "undefinedExports", "inTopLevel", "currentScope", "inFunction", "currentVarScopeFlags", "allowSuper", "currentThisScopeFlags", "inClass", "inClassAndNotInNonArrowFunction", "inStaticBlock", "inNonArrowFunction", "treatFunctionsAsVar", "treatFunctionsAsVarInScope", "createScope", "enter", "exit", "scope", "declareName", "bindingType", "checkRedeclarationInScope", "add", "maybeExportDefined", "delete", "isRedeclaredInScope", "values", "checkLocalExport", "topLevelScope", "FlowScope", "declareFunctions", "FlowScopeHandler", "BaseParser", "sawUnambiguousESM", "ambiguousScriptDifferentAst", "pluginConfig", "plugins", "pluginName", "pluginOptions", "actualOptions", "plugin", "setTrailingComments", "comments", "trailingComments", "undefined", "unshift", "setLeadingComments", "leadingComments", "setInnerComments", "innerComments", "adjustInnerComments", "elements", "commentWS", "lastElement", "CommentsParser", "addComment", "comment", "processComment", "commentStack", "commentStackLength", "lastCommentWS", "leadingNode", "nodeStart", "commentEnd", "containingNode", "finalizeComment", "splice", "trailingNode", "commentStart", "input", "charCodeAt", "finalizeRemainingComments", "resetPreviousNodeTrailingComments", "takeSurroundingComments", "lineBreak", "lineBreakG", "isNewLine", "skipWhiteSpace", "skipWhiteSpaceInLine", "skipWhiteSpaceToLineBreak", "isWhitespace", "State", "curLine", "lineStart", "errors", "potentialArrowAt", "noArrowAt", "noArrowParamsConversionAt", "maybeInArrowParameters", "inType", "noAnonFunctionType", "hasFlowComment", "isAmbientContext", "inAbstractClass", "inDisallowConditionalTypesContext", "topicContext", "maxNumOfResolvableTopics", "maxTopicIndex", "soloAwait", "inFSharpPipelineDirectBody", "labels", "lastTokStart", "ct", "canStartJSXElement", "containsEsc", "firstInvalidTemplateEscapePos", "strictErrors", "tokensLength", "init", "strictMode", "sourceType", "startLine", "startColumn", "curPosition", "skipArrays", "val", "slice", "isDigit", "forbiddenNumericSeparatorSiblings", "decBinOct", "hex", "isAllowedNumericSeparatorSibling", "bin", "ch", "oct", "dec", "readStringContents", "initialPos", "initialLineStart", "initialCurLine", "out", "firstInvalidLoc", "chunkStart", "unterminated", "isStringEnd", "res", "readEscapedChar", "str", "containsInvalid", "inTemplate", "throwOnInvalid", "readHexChar", "readCodePoint", "fromCodePoint", "strictNumericEscape", "startPos", "match", "octalStr", "octal", "parseInt", "len", "forceLen", "n", "readInt", "invalidEscapeSequence", "allowNumSeparator", "bailOnError", "forbiddenSiblings", "isAllowedSibling", "invalid", "total", "Infinity", "prev", "numericSeparatorInEscapeSequence", "Number", "isNaN", "unexpectedNumericSeparator", "invalidDigit", "indexOf", "invalidCodePoint", "buildPosition", "VALID_REGEX_FLAGS", "Token", "Tokenizer", "isLookahead", "errorHandlers_readInt", "errorRecovery", "errorBuilder", "errorHandlers_readCodePoint", "errorHandlers_readStringContents_string", "recordStrictModeErrors", "errorHandlers_readStringContents_template", "pushToken", "checkKeywordEscapes", "nextToken", "eat", "createLookaheadState", "curContext", "lookahead", "old", "curr", "nextTokenStart", "nextTokenStartSince", "lastIndex", "lookaheadCharCode", "codePointAtPos", "cp", "trail", "setStrict", "forEach", "toParseError", "clear", "skipSpace", "finishToken", "getTokenFromCode", "skipBlockComment", "skipLineComment", "startSkip", "spaceStart", "loop", "attachComment", "commentWhitespace", "prevType", "replaceToken", "readToken_numberSign", "readToken_interpreter", "nextPos", "expectPlugin", "readWord1", "finishOp", "readToken_dot", "readNumber", "readToken_slash", "readToken_mult_modulo", "width", "readToken_pipe_amp", "readToken_caret", "proposal", "topicToken", "lookaheadCh", "codePointAt", "readToken_atSign", "readToken_plus_min", "readToken_lt", "readToken_gt", "size", "readToken_eq_excl", "readToken_question", "readTemplateToken", "readRadixNumber", "readString", "readWord", "readRegexp", "escaped", "content", "mods", "char", "includes", "isBigInt", "replace", "startsWithDot", "isFloat", "isDecimal", "hasExponent", "isOctal", "hasLeadingZero", "integer", "underscorePos", "parseFloat", "quote", "readTemplateContinuation", "opening", "firstCode", "escStart", "identifierCheck", "esc", "keywordTypes", "raiseProperties", "error", "raiseOverwrite", "expectOnePlugin", "pluginNames", "some", "ClassScope", "privateNames", "loneAccessors", "undefinedPrivateNames", "ClassScopeHandler", "stack", "oldClassScope", "from", "declarePrivateName", "elementType", "redefined", "accessor", "oldStatic", "newStatic", "oldKind", "newKind", "kExpression", "kMaybeArrowParameterDeclaration", "kMaybeAsyncArrowParameterDeclaration", "kParameterDeclaration", "ExpressionScope", "canBeArrowParameterDeclaration", "isCertainlyParameterDeclaration", "ArrowHeadParsingScope", "declarationErrors", "recordDeclarationError", "ParsingErrorClass", "clearDeclarationError", "iterateErrors", "iterator", "ExpressionScopeHandler", "recordParameterInitializerError", "origin", "recordArrowParameterBindingError", "recordAsyncArrowParametersError", "validateAsPattern", "newParameterDeclarationScope", "newArrowHeadScope", "newAsyncArrowScope", "newExpressionScope", "PARAM", "PARAM_YIELD", "PARAM_AWAIT", "PARAM_RETURN", "PARAM_IN", "ProductionParameterHandler", "stacks", "currentFlags", "hasAwait", "hasYield", "hasReturn", "hasIn", "functionFlags", "UtilParser", "addExtra", "isContextual", "isUnparsedContextual", "nameStart", "nameEnd", "nextCh", "isLookaheadContextual", "eatContextual", "expectContextual", "canInsertSemicolon", "hasPrecedingLineBreak", "hasFollowingLineBreak", "isLineTerminator", "semicolon", "allowAsi", "expect", "tryParse", "fn", "oldState", "abortSignal", "failState", "thrown", "aborted", "checkExpressionErrors", "andThrow", "shorthandAssignLoc", "doubleProtoLoc", "privateKeyLoc", "optionalParametersLoc", "hasErrors", "isLiteralPropertyName", "property", "initializeScopes", "oldLabels", "oldExportedIdentifiers", "exportedIdentifiers", "oldInModule", "oldScope", "getScopeHandler", "oldProdParam", "prodParam", "oldExpressionScope", "expressionScope", "enterInitialScopes", "paramFlags", "checkDestructuringPrivate", "ExpressionErrors", "Node", "ranges", "range", "NodePrototype", "prototype", "__clone", "newNode", "clonePlaceholder", "cloneIdentifier", "cloned", "create", "expectedNode", "cloneStringLiteral", "NodeUtils", "startNodeAt", "resetStartLocationFromNode", "locationNode", "reservedTypes", "FlowErrors", "AmbiguousConditionalArrow", "AmbiguousDeclareModuleKind", "AssignReservedType", "reservedType", "DeclareClassElement", "DeclareClassFieldInitializer", "DuplicateDeclareModuleExports", "EnumBooleanMemberNotInitialized", "memberName", "enumName", "EnumDuplicateMemberName", "EnumInconsistentMemberValues", "EnumInvalidExplicitType", "invalidEnumType", "EnumInvalidExplicitTypeUnknownSupplied", "EnumInvalidMemberInitializerPrimaryType", "explicitType", "EnumInvalidMemberInitializerSymbolType", "EnumInvalidMemberInitializerUnknownType", "EnumInvalidMemberName", "suggestion", "EnumNumberMemberNotInitialized", "EnumStringMemberInconsistentlyInitailized", "GetterMayNotHaveThisParam", "ImportReflectionHasImportType", "ImportTypeShorthandOnlyInPureImport", "InexactInsideExact", "InexactInsideNonObject", "InexactVariance", "InvalidNonTypeImportInDeclareModule", "MissingTypeParamDefault", "NestedDeclareModule", "NestedFlowComment", "PatternIsOptional", "SetterMayNotHaveThisParam", "SpreadVariance", "ThisParamAnnotationRequired", "ThisParamBannedInConstructor", "ThisParamMayNotBeOptional", "ThisParamMustBeFirst", "ThisParamNoDefault", "TypeBeforeInitializer", "TypeCastInPattern", "UnexpectedExplicitInexactInObject", "UnexpectedReservedType", "UnexpectedReservedUnderscore", "UnexpectedSpaceBetweenModuloChecks", "UnexpectedSpreadType", "UnexpectedSubtractionOperand", "UnexpectedTokenAfterTypeParameter", "UnexpectedTypeParameterBeforeAsyncArrowFunction", "UnsupportedDeclareExportKind", "unsupportedExportKind", "UnsupportedStatementInDeclareModule", "UnterminatedFlowComment", "isEsModuleType", "bodyElement", "hasTypeImportKind", "importKind", "isMaybeDefaultImport", "exportSuggestions", "const", "let", "interface", "partition", "list", "list1", "list2", "FLOW_PRAGMA_REGEX", "FlowParserMixin", "flowPragma", "shouldParseTypes", "shouldParseEnums", "matches", "exec", "Error", "flowParseTypeInitialiser", "tok", "oldInType", "flowParseType", "flowParsePredicate", "moduloLoc", "parseExpression", "flowParseTypeAndPredicateInitialiser", "predicate", "flowParseDeclareClass", "flowParseInterfaceish", "flowParseDeclareFunction", "parseIdentifier", "typeNode", "typeContainer", "flowParseTypeParameterDeclaration", "tmp", "flowParseFunctionTypeParams", "this", "returnType", "typeAnnotation", "flowParseDeclare", "insideModule", "flowParseDeclareVariable", "flowParseDeclareModuleExports", "flowParseDeclareModule", "flowParseDeclareTypeAlias", "flowParseDeclareOpaqueType", "flowParseDeclareInterface", "flowParseDeclareExportDeclaration", "flowParseTypeAnnotatableIdentifier", "parseExprAtom", "bodyNode", "parseImport", "hasModuleExport", "default", "isLet", "exportKind", "flowParseTypeAnnotation", "finished", "flowParseTypeAlias", "flowParseOpaqueType", "isClass", "flowParseRestrictedIdentifier", "extends", "implements", "mixins", "flowParseInterfaceExtends", "flowParseObjectType", "allowStatic", "allowExact", "allowSpread", "allowProto", "allowInexact", "flowParseQualifiedTypeIdentifier", "flowParseTypeParameterInstantiation", "flowParseInterface", "checkNotUnderscore", "checkReservedType", "liberal", "right", "declare", "supertype", "impltype", "flowParseTypeParameter", "requireDefault", "nodeStartLoc", "variance", "flowParseVariance", "ident", "bound", "defaultRequired", "typeParameter", "oldNoAnonFunctionType", "flowParseTypeParameterInstantiationCallOrNew", "flowParseTypeOrImplicitInstantiation", "flowParseInterfaceType", "flowParseObjectPropertyKey", "flowParseObjectTypeIndexer", "isStatic", "static", "flowParseObjectTypeInternalSlot", "flowParseObjectTypeMethodish", "flowParseFunctionTypeParam", "flowParseObjectTypeCallProperty", "valueNode", "callProperties", "indexers", "internalSlots", "endDelim", "exact", "inexact", "protoStartLoc", "inexactStartLoc", "propOrInexact", "flowParseObjectTypeProperty", "flowObjectTypeSemicolon", "isInexactToken", "proto", "flowCheckGetterSetterParams", "paramCount", "node2", "qualification", "flowParseGenericType", "flowParseTypeofType", "flowParsePrimaryType", "flowParseTupleType", "first", "lh", "isThis", "reinterpretTypeAsFunctionTypeParam", "flowIdentToTypeAnnotation", "isGroupedType", "parseLiteralAtNode", "createIdentifier", "flowParsePostfixType", "seenOptionalIndexedAccess", "objectType", "indexType", "flowParsePrefixType", "flowParseAnonFunctionWithoutParens", "param", "flowParseIntersectionType", "flowParseUnionType", "allowPrimitiveOverride", "typeCastToParameter", "allowExpressionBody", "forwardNoArrowParamsConversionAt", "parseFunctionBodyAndFinish", "parseStatementLike", "flowParseEnumDeclaration", "parseExpressionStatement", "expr", "shouldParseExportDeclaration", "isExportDefaultSpecifier", "parseExportDefaultExpression", "parseConditional", "setOptionalParametersError", "originalNoArrowAt", "consequent", "failed", "tryParseConditionalConsequent", "valid", "getArrowLikeExpressions", "alternate", "parseMaybeAssign", "parseMaybeAssignAllowIn", "disallowInvalid", "arrows", "finishArrowValidation", "every", "toAssignableList", "trailingCommaLoc", "checkParams", "result", "parseParenItem", "typeCastNode", "assertModuleNodeAllowed", "decl", "parseExportDeclaration", "declarationNode", "parseExportSpecifiers", "parseExportFrom", "eatExportStar", "maybeParseExportNamespaceSpecifier", "hasNamespace", "parseClassId", "isStatement", "optionalId", "parseClassMember", "member", "parseClassMemberFromModifier", "isIterator", "readIterator", "fullWord", "left", "exprList", "toReferencedList", "isParenthesizedExpr", "parseArrayLike", "close", "canBePattern", "isTuple", "isParenthesized", "isClassMethod", "isClassProperty", "isNonstaticConstructor", "isThisParam", "pushClassPrivateMethod", "parseClassSuper", "superTypeParameters", "implemented", "checkGetterSetterParams", "parsePropertyNamePrefixOperator", "parseObjPropValue", "parseAssignableListItemTypes", "parseMaybeDefault", "shouldParseDefaultImport", "checkImportReflection", "module", "parseImportSpecifierLocal", "specifier", "local", "finishImportSpecifier", "maybeParseDefaultImportSpecifier", "parseImportSpecifier", "importedIsString", "isInTypeOnlyImport", "isMaybeTypeOnly", "firstIdent", "imported", "specifierTypeKind", "as_ident", "specifierIsTypeImport", "checkReservedWord", "parseBindingAtom", "parseFunctionParams", "allowModifiers", "parseVarId", "parseAsyncArrowFromCallExpression", "call", "shouldParseAsyncArrow", "afterLeftParse", "jsx", "currentContext", "abort", "arrowExpression", "maybeUnwrapTypeCastExpression", "async", "parseArrow", "shouldParseArrow", "setArrowFunctionParameters", "allowDuplicates", "isArrowFunction", "strictModeChanged", "parseParenAndDistinguishExpression", "canBeArrow", "parseSubscripts", "parseCallExpressionArguments", "parseAsyncArrowWithTypeParameters", "subscriptState", "isLookaheadToken_lt", "typeArguments", "parseNewCallee", "targs", "parseArrowExpression", "parseTopLevel", "program", "fileNode", "skipFlowComment", "hasFlowCommentCompletion", "commentSkip", "shiftToFirstNonWhiteSpace", "ch2", "ch3", "flowEnumErrorBooleanMemberNotInitialized", "flowEnumErrorInvalidMemberInitializer", "enumContext", "flowEnumErrorNumberMemberNotInitialized", "flowEnumErrorStringMemberInconsistentlyInitailized", "flowEnumMemberInit", "endOfInit", "literal", "flowEnumMemberRaw", "flowEnumCheckExplicitTypeMismatch", "expectedType", "flowEnumMembers", "seenNames", "members", "booleanMembers", "numberMembers", "stringMembers", "defaultedMembers", "hasUnknownMembers", "memberNode", "toUpperCase", "flowEnumStringMembers", "initializedMembers", "flowEnumParseExplicitType", "flowEnumBody", "nameLoc", "empty", "boolsLen", "numsLen", "strsLen", "defaultedLen", "afterNext", "entities", "__proto__", "quot", "amp", "apos", "nbsp", "iexcl", "cent", "pound", "curren", "yen", "brvbar", "sect", "uml", "copy", "ordf", "laquo", "not", "shy", "reg", "macr", "deg", "plusmn", "sup2", "sup3", "acute", "micro", "para", "middot", "cedil", "sup1", "ordm", "raquo", "frac14", "frac12", "frac34", "iquest", "Agrave", "Aacute", "Acirc", "Atilde", "Auml", "Aring", "AElig", "Ccedil", "Egrave", "Eacute", "Ecirc", "Euml", "Igrave", "Iacute", "Icirc", "Iuml", "ETH", "Ntilde", "Ograve", "Oacute", "Ocirc", "Otilde", "Ouml", "times", "Oslash", "Ugrave", "Uacute", "Ucirc", "Uuml", "Yacute", "THORN", "szlig", "agrave", "aacute", "acirc", "atilde", "auml", "aring", "aelig", "ccedil", "egrave", "eacute", "ecirc", "euml", "igrave", "iacute", "icirc", "iuml", "eth", "ntilde", "ograve", "oacute", "ocirc", "otilde", "ouml", "divide", "oslash", "ugrave", "uacute", "ucirc", "uuml", "yacute", "thorn", "yuml", "OElig", "oelig", "Scaron", "scaron", "Yuml", "fnof", "circ", "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta", "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi", "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega", "alpha", "beta", "gamma", "delta", "epsilon", "zeta", "eta", "theta", "iota", "kappa", "lambda", "mu", "nu", "xi", "omicron", "pi", "rho", "sigmaf", "sigma", "tau", "upsilon", "phi", "chi", "psi", "omega", "thetasym", "upsih", "piv", "ensp", "emsp", "thinsp", "zwnj", "zwj", "lrm", "rlm", "ndash", "mdash", "lsquo", "rsquo", "sbquo", "ldquo", "rdquo", "bdquo", "dagger", "Dagger", "bull", "hellip", "permil", "prime", "Prime", "lsaquo", "rsaquo", "oline", "frasl", "euro", "image", "weierp", "real", "trade", "alefsym", "larr", "uarr", "rarr", "darr", "harr", "crarr", "lArr", "uArr", "rArr", "dArr", "hArr", "forall", "part", "exist", "nabla", "isin", "notin", "ni", "prod", "sum", "minus", "lowast", "radic", "infin", "ang", "and", "or", "cap", "cup", "int", "there4", "sim", "cong", "asymp", "ne", "equiv", "le", "ge", "sub", "sup", "nsub", "sube", "supe", "oplus", "otimes", "perp", "sdot", "lceil", "rceil", "lfloor", "rfloor", "lang", "rang", "loz", "spades", "clubs", "hearts", "diams", "JsxErrors", "AttributeIsEmpty", "MissingClosingTagElement", "openingTagName", "MissingClosingTagFragment", "UnexpectedSequenceExpression", "HTMLEntity", "UnsupportedJsxValue", "UnterminatedJsxContent", "UnwrappedAdjacentJSXElements", "isFragment", "getQualifiedJSXName", "namespace", "JSXParserMixin", "jsxReadToken", "jsxReadEntity", "jsxReadNewLine", "normalizeCRLF", "jsxReadString", "codePoint", "count", "desc", "entity", "XHTMLEntities", "jsxReadWord", "jsxParseIdentifier", "jsxParseNamespacedName", "jsxParseElementName", "jsxParseAttributeValue", "setContext", "jsxParseExpressionContainer", "jsxParseEmptyExpression", "jsxParseSpreadChild", "previousContext", "jsxParseAttribute", "jsxParseOpeningElementAt", "jsxParseOpeningElementAfterName", "selfClosing", "jsxParseClosingElementAt", "jsxParseElementAt", "children", "openingElement", "closingElement", "contents", "openingFragment", "closingFragment", "jsxParseElement", "newContext", "TypeScriptScope", "enums", "constEnums", "classes", "exportOnlyBindings", "TypeScriptScopeHandler", "importsStack", "hasImport", "allowShadow", "isConst", "wasConst", "getOwn", "hasOwnProperty", "nonNull", "x", "assert", "TSErrors", "AbstractMethodHasImplementation", "methodName", "AbstractPropertyHasInitializer", "propertyName", "AccesorCannotDeclareThisParameter", "AccesorCannotHaveTypeParameters", "AccessorCannotBeOptional", "ClassMethodHasDeclare", "ClassMethodHasReadonly", "ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference", "ConstructorHasTypeParameters", "DeclareAccessor", "DeclareClassFieldHasInitializer", "DeclareFunctionHasImplementation", "DuplicateAccessibilityModifier", "modifier", "DuplicateModifier", "EmptyHeritageClauseType", "EmptyTypeArguments", "EmptyTypeParameters", "ExpectedAmbientAfterExportDeclare", "ImportAliasHasImportType", "IncompatibleModifiers", "modifiers", "IndexSignatureHasAbstract", "IndexSignatureHasAccessibility", "IndexSignatureHasDeclare", "IndexSignatureHasOverride", "IndexSignatureHasStatic", "InitializerNotAllowedInAmbientContext", "InvalidModifierOnTypeMember", "InvalidModifierOnTypeParameter", "InvalidModifierOnTypeParameterPositions", "InvalidModifiersOrder", "orderedModifiers", "InvalidPropertyAccessAfterInstantiationExpression", "InvalidTupleMemberLabel", "MissingInterfaceName", "MixedLabeledAndUnlabeledElements", "NonAbstractClassHasAbstractMethod", "NonClassMethodPropertyHasAbstractModifer", "OptionalTypeBeforeRequired", "OverrideNotInSubClass", "PrivateElementHasAbstract", "PrivateElementHasAccessibility", "ReadonlyForMethodSignature", "ReservedArrowTypeParam", "ReservedTypeAssertion", "SetAccesorCannotHaveOptionalParameter", "SetAccesorCannotHaveRestParameter", "SetAccesorCannotHaveReturnType", "SingleTypeParameterWithoutTrailingComma", "typeParameterName", "StaticBlockCannotHaveModifier", "TypeAnnotationAfterAssign", "TypeImportCannotSpecifyDefaultAndNamed", "TypeModifierIsUsedInTypeExports", "TypeModifierIsUsedInTypeImports", "UnexpectedParameterModifier", "UnexpectedReadonly", "UnexpectedTypeAnnotation", "UnexpectedTypeCastInParameter", "UnsupportedImportTypeArgument", "UnsupportedParameterPropertyKind", "UnsupportedSignatureParameterKind", "keywordTypeFromName", "tsIsAccessModifier", "tsIsVarianceAnnotations", "TypeScriptParserMixin", "tsIsIdentifier", "tsTokenCanFollowModifier", "tsNextTokenCanFollowModifier", "tsParseModifier", "allowedModifiers", "stopOnStartOfClassStaticBlock", "tsIsStartOfStaticBlocks", "tsTryParse", "bind", "tsParseModifiers", "modified", "disallowedModifiers", "errorTemplate", "enforceOrder", "before", "after", "incompatible", "mod1", "mod2", "accessibility", "tsIsListTerminator", "tsParseList", "parseElement", "tsParseDelimitedList", "refTrailingCommaPos", "tsParseDelimitedListWorker", "expectSuccess", "trailingCommaPos", "element", "tsParseBracketedList", "bracket", "skipFirstToken", "tsParseImportType", "qualifier", "tsParseEntityName", "tsParseTypeArguments", "allowReservedWords", "tsParseTypeReference", "typeName", "tsParseThisTypePredicate", "lhs", "parameterName", "tsParseTypeAnnotation", "asserts", "tsParseThisTypeNode", "tsParseTypeQuery", "exprName", "tsParseInOutModifiers", "tsParseNoneModifiers", "tsParseTypeParameter", "parseModifiers", "tsParseTypeParameterName", "constraint", "tsEatThenParseType", "tsTryParseTypeParameters", "tsParseTypeParameters", "tsFillSignature", "returnToken", "signature", "returnTokenRequired", "paramsKey", "returnTypeKey", "tsParseBindingListForSignature", "tsParseTypeOrTypePredicateAnnotation", "parseBindingList", "tsParseTypeMemberSemicolon", "tsParseSignatureMember", "tsIsUnambiguouslyIndexSignature", "tsTryParseIndexSignature", "tsLookAhead", "parameters", "tsTryParseTypeAnnotation", "tsParsePropertyOrMethodSignature", "readonly", "nodeAny", "firstParameter", "tsParseTypeMember", "idx", "parsePropertyName", "tsParseTypeLiteral", "tsParseObjectTypeMembers", "tsIsStartOfMappedType", "tsParseMappedTypeParameter", "tsExpectThenParseType", "tsParseMappedType", "nameType", "tsParseType", "tsTryParseType", "tsParseTupleType", "elementTypes", "tsParseTupleElementType", "seenOptionalElement", "labeledElements", "elementNode", "checkType", "isLabeled", "labeled", "labeledNode", "optionalTypeNode", "restNode", "tsParseParenthesizedType", "tsParseFunctionOrConstructorType", "abstract", "tsInAllowConditionalTypesContext", "tsParseLiteralTypeNode", "tsParseTemplateLiteralType", "parseTemplate", "parseTemplateSubstitution", "tsParseThisTypeOrThisTypePredicate", "thisKeyword", "tsParseNonArrayType", "parseMaybeUnary", "nodeType", "tsParseArrayTypeOrHigher", "tsParseTypeOperator", "operator", "tsParseTypeOperatorOrHigher", "tsCheckTypeAnnotationForReadOnly", "tsParseInferType", "tsParseConstraintForInferType", "tsInDisallowConditionalTypesContext", "isTypeOperator", "tsParseUnionOrIntersectionType", "parseConstituentType", "hasLeadingOperator", "tsParseIntersectionTypeOrHigher", "tsParseUnionTypeOrHigher", "tsIsStartOfFunctionType", "tsIsUnambiguouslyStartOfFunctionType", "tsSkipParameterStart", "previousErrorCount", "parseObjectLike", "tsInType", "t", "tsParseTypePredicateAsserts", "thisTypePredicate", "typePredicateVariable", "tsParseTypePredicatePrefix", "tsTryParseTypeOrTypePredicateAnnotation", "eatColon", "tsParseNonConditionalType", "extendsType", "trueType", "falseType", "isAbstractConstructorSignature", "tsParseTypeAssertion", "tsParseHeritageClause", "originalStartLoc", "delimitedList", "tsParseInterfaceDeclaration", "checkIdentifier", "tsParseTypeAliasDeclaration", "tsInNoContext", "cb", "oldContext", "oldInDisallowConditionalTypesContext", "tsNextThenParseType", "tsDoThenParseType", "tsParseEnumMember", "initializer", "tsParseEnumDeclaration", "tsParseModuleBlock", "parseBlockOrModuleBlockBody", "tsParseModuleOrNamespaceDeclaration", "nested", "inner", "tsParseAmbientExternalModuleDeclaration", "global", "tsParseImportEqualsDeclaration", "isExport", "moduleReference", "tsParseModuleReference", "tsIsExternalModuleReference", "tsParseExternalModuleReference", "f", "tsTryParseAndCatch", "tsTryParseDeclare", "nany", "starttype", "tsInAmbientContext", "parseFunctionStatement", "parseClass", "parseVarStatement", "tsParseDeclaration", "tsTryParseExportDeclaration", "tsParseExpressionStatement", "mod", "tsCheckLineTerminator", "tsParseAbstractDeclaration", "tsTryParseGenericAsyncArrowFunction", "oldMaybeInArrowParameters", "tsParseTypeArgumentsInExpression", "reScan_lt", "tsIsDeclarationStart", "parseAssignableListItem", "override", "elt", "pp", "parameter", "isSimpleParameter", "bodilessType", "registerFunctionStatementId", "tsCheckForInvalidTypeCasts", "items", "isInParens", "nonNullExpression", "isOptionalCall", "missingParenErrorLoc", "atPossibleAsyncArrow", "asyncArrowFn", "parseTaggedTemplateExpression", "tokenType", "parseExprOp", "leftStartLoc", "minPrec", "isSatisfies", "reScan_lt_gt", "checkKeywords", "checkDuplicateExports", "ahead", "importNode", "isAbstractClass", "cls", "allowMissingInitializer", "declarations", "isValidAmbientConstInitializer", "parseStatementContent", "parseAccessModifier", "tsHasSomeModifiers", "callParseClassMemberWithIsStatic", "parseClassStaticBlock", "parseClassMemberWithIsStatic", "hadSuperClass", "parsePostMemberNameModifiers", "methodOrProp", "isDeclare", "isIdentifier", "parseClassPropertyAnnotation", "definite", "parseClassAccessorProperty", "declareClassPrivateMethodInScope", "typeCast", "reportReservedArrowTypeParam", "trailingComma", "sawUnary", "toAssignableParenthesizedExpression", "checkToRestConversion", "allowPattern", "TSTypeCastExpression", "TSParameterProperty", "TSNonNullExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "parseMaybeDecoratorArguments", "checkCommaAfterRest", "canHaveLeadingDecorator", "getGetterSetterExpectedParamCount", "baseCount", "firstParam", "hasContextParam", "parseCatchClauseParam", "oldIsAmbientContext", "oldInAbstractClass", "maybeTakeDecorators", "hasBody", "shouldParseAsAmbientContext", "getExpression", "parseExportSpecifier", "isString", "isInTypeExport", "parseTypeOnlyImportExportSpecifier", "isImport", "isInTypeOnlyImportExport", "leftOfAsKey", "rightOfAsKey", "leftOfAs", "rightOfAs", "hasTypeSpecifier", "canParseAsKeyword", "firstAs", "secondAs", "parseModuleExportName", "kindKey", "isPossiblyLiteralEnum", "expressions", "isUncomputedMemberExpressionChain", "estree", "isNumber", "isNegativeNumber", "PlaceholderErrors", "ClassNameIsRequired", "UnexpectedSpace", "PlaceholdersParserMixin", "parsePlaceholder", "assertNoSpace", "finishPlaceholder", "isFinished", "chStartsBindingIdentifier", "verifyBreakContinue", "isBreak", "parseStatementOrFunctionDeclaration", "parseBlock", "createNewLexicalScope", "parseFunctionId", "requireId", "oldStrict", "parseClassBody", "startsWith", "maybeParseExportDefaultSpecifier", "checkExport", "hasStarImport", "maybeParseStarImportSpecifier", "parseNamedImportSpecifiers", "parseImportSource", "V8IntrinsicMixin", "parseV8Intrinsic", "v8IntrinsicStartLoc", "parseIdentifierName", "identifier", "expectedConfig", "expectedName", "expectedOptions", "expectedKeys", "expectedOptionsIsEmpty", "p", "option", "find", "PIPELINE_PROPOSALS", "TOPIC_TOKENS", "RECORD_AND_TUPLE_SYNTAX_TYPES", "validatePlugins", "decoratorsBeforeExport", "allowCallParenthesized", "proposalList", "tupleSyntaxIsHash", "syntaxType", "tokenList", "moduleAttributesVersionPluginOption", "missingPlugins", "mixinPlugins", "flow", "typescript", "v8intrinsic", "placeholders", "mixinPluginNames", "defaultOptions", "sourceFilename", "allowAwaitOutsideFunction", "allowReturnOutsideFunction", "allowImportExportEverywhere", "allowSuperOutsideMethod", "allowUndeclaredExports", "createParenthesizedExpressions", "getOptions", "opts", "unwrapParenthesizedExpression", "LValParser", "arg", "toReferencedListDeep", "parseSpread", "parseRestBinding", "closeCharCode", "allowEmpty", "elts", "parseDecorator", "parseBindingRestProperty", "parseBindingProperty", "ObjectProperty", "checkLVal", "in", "checkClashes", "allowingSloppyLetBinding", "hasParenthesizedAncestor", "validity", "ParseErrorClass", "isParenthesizedExpression", "nextAncestor", "child", "allowLetBinding", "declareNameFromIdentifier", "ExpressionParser", "checkProto", "isRecord", "protoRef", "used", "shouldExitDescending", "disallowIn", "disallowInAnd", "parseExpressionBase", "allowInAnd", "parseMaybeAssignDisallowIn", "resultError", "parseYield", "ownExpressionErrors", "parseMaybeConditional", "startIndex", "parseExprOps", "parseMaybeUnaryOrPrivate", "op", "prec", "checkPipelineAtInfixOperator", "logical", "coalesce", "parseExprOpRightExpr", "finishedNode", "nextOp", "withTopicBindingContext", "parseHackPipeBody", "parseSmartPipelineBodyInStyle", "parseExprOpBaseRightExpr", "withSoloAwaitPermittingContext", "parseFSharpPipelineBody", "requiredParentheses", "topicReferenceWasUsedInCurrentContext", "checkExponentialAfterUnary", "isAwait", "isAwaitAllowed", "parseAwait", "update", "isDelete", "parseUpdate", "isAmbiguousAwait", "updateExpressionNode", "parseExprSubscripts", "maybeAsyncArrow", "parseBind", "parseCoverCallAndAsyncArrowHead", "parseMember", "parseNoCallExpr", "tag", "quasi", "dynamicImport", "allowPlaceholder", "nodeForExtra", "oldInFSharpPipelineDirectBody", "addTrailingCommaExtraToNode", "parseExprListItem", "parseSuper", "parseImportMetaProperty", "parseDo", "parseFunctionOrFunctionSent", "parseDecorators", "parseNewOrNewTarget", "parseTopicReferenceThenEqualsSign", "parseTopicReference", "pipeProposal", "parseModuleExpression", "parseAsyncFunctionExpression", "parseAsyncArrowUnaryFunction", "topicTokenType", "topicTokenValue", "finishTopicReference", "testTopicReferenceConfiguration", "topicReferenceIsAllowedInCurrentContext", "registerTopicReference", "meta", "parseMetaProperty", "parseFunction", "innerStartLoc", "spreadStartLoc", "optionalCommaStartLoc", "spreadNodeStartLoc", "innerEndLoc", "arrowNode", "wrapParenthesis", "parenExpression", "metaProp", "parseNew", "parseExprList", "parseTemplateElement", "isTagged", "elemStart", "elem", "isTail", "endOffset", "elemEnd", "cooked", "tail", "curElt", "quasis", "propHash", "parsePropertyDefinition", "maybeAsyncOrAccessorProp", "keyName", "finishedProp", "generator", "isExpression", "hasStrictModeDirective", "nonSimple", "isSimpleParamList", "formalParameters", "reservedTest", "delegating", "delegate", "childExpr", "isSimpleReference", "checkSmartPipeTopicBodyEarlyErrors", "callback", "outerContextTopicState", "withSmartMixTopicForbiddingContext", "outerContextSoloAwaitState", "prodParamToSet", "prodParamToClear", "ret", "revertScopes", "parseProgram", "loopLabel", "switchLabel", "ParseFunctionFlag", "ParseStatementFlag", "loneSurrogate", "keywordRelationalOperator", "babel7CompatTokens", "hashEndPos", "hashEndLoc", "backquoteEnd", "backquoteEndLoc", "startToken", "templateValue", "templateElementEnd", "templateElementEndLoc", "endToken", "StatementParser", "interpreter", "parseInterpreterDirective", "finishedProgram", "stmtToDirective", "directiveLiteral", "hasFollowingBindingAtom", "endCh", "chStartsBindingPattern", "hasFollowingBindingIdentifier", "startsUsingForOf", "parseModuleItem", "AllowImportExport", "AllowDeclaration", "AllowFunctionDeclaration", "AllowLabeledFunction", "parseStatementListItem", "disallowLabeledFunction", "parseStatement", "StatementOnly", "allowDeclaration", "allowFunctionDeclaration", "parseBreakContinueStatement", "parseDebuggerStatement", "parseDoWhileStatement", "parseForStatement", "parseIfStatement", "parseReturnStatement", "parseSwitchStatement", "parseThrowStatement", "parseTryStatement", "parseWhileStatement", "parseWithStatement", "parseEmptyStatement", "nextTokenCharCode", "isAsyncFunction", "maybeName", "parseLabeledStatement", "decoratorsEnabledBeforeExport", "maybeDecorators", "classNode", "exportNode", "allowExport", "paramsStartLoc", "lab", "parseHeaderExpression", "awaitAt", "parseFor", "startsWithLet", "startsWithUsing", "isLetOrUsing", "initNode", "parseVar", "isForIn", "parseForIn", "startsWithAsync", "isForOf", "isHangingDeclaration", "Declaration", "HangingDeclaration", "Async", "discriminant", "cases", "cur", "sawDefault", "isCase", "simple", "block", "handler", "clause", "finalizer", "statementStart", "parsedNonDirective", "await", "isFor", "Expression", "hangingDeclaration", "isDeclaration", "NullableId", "hadConstructor", "publicMethod", "privateMethod", "publicProp", "privateProp", "accessorProp", "publicMember", "parseClassElementName", "isPrivate", "maybeQuestionTokenStartLoc", "pushClassPrivateProperty", "pushClassProperty", "pushClassAccessorProperty", "parseInitializer", "hasDefault", "parseAfterDefault", "hasStar", "parseAfterNamespace", "isFromRequired", "hasSpecifiers", "maybeParseExportNamedSpecifiers", "hasDeclaration", "maybeParseExportDeclaration", "isTypeExport", "assertions", "nextType", "hasFrom", "nextAfterFrom", "maybeParseImportAssertions", "checkJSONModuleImport", "checkNames", "isDefault", "isFrom", "nodes", "surrogate", "isJSONModuleImport", "nonDefaultNamedSpecifier", "parseMaybeImportReflection", "isImportReflection", "nextNextTokenFirstChar", "parseNext", "maybeParseModuleAttributes", "parseAssertEntries", "attrs", "attrNames", "importSpecifier", "Parser", "pluginsMap", "pluginMap", "getParser", "ast", "moduleError", "generateExportedTokenTypes", "internalTokenTypes", "tokTypes", "getParserClass", "parserClassCache", "pluginsFromOptions", "pluginList", "require_lib", "path", "FUNCTION_TYPES", "arrowFunctionExpression", "assignmentExpression", "awaitExpression", "blockStatement", "callExpression", "cloneNode", "expressionStatement", "identifier", "inheritLeadingComments", "inheritTrailingComments", "inheritsComments", "isExpression", "isProgram", "isStatement", "removeComments", "returnStatement", "toSequenceExpression", "validate", "yieldExpression", "replaceWithMultiple", "nodes", "resync", "_verifyNodeList", "node", "length", "pathCache", "get", "parent", "delete", "container", "key", "paths", "insertAfter", "requeue", "remove", "replaceWithSourceString", "replacement", "ast", "parse", "err", "loc", "message", "codeFrameColumns", "start", "line", "column", "code", "expressionAST", "program", "body", "expression", "traverse", "removeProperties", "replaceWith", "replacementPath", "removed", "Error", "NodePath", "Array", "isArray", "nodePath", "isNodeType", "canHaveVariableDeclarationOrExpression", "canSwapBetweenExpressionAndStatement", "parentPath", "isExportDefaultDeclaration", "replaceExpressionWithStatements", "oldNode", "_replaceWith", "type", "setScope", "ReferenceError", "inList", "debug", "set", "nodesAsSequenceExpression", "scope", "functionParent", "getFunctionParent", "isParentAsync", "is", "isParentGenerator", "callee", "hoistVariables", "id", "push", "completionRecords", "getCompletionRecords", "path", "isExpressionStatement", "loop", "findParent", "isLoop", "uid", "getData", "generateDeclaredUidIdentifier", "pushContainer", "setData", "name", "arrowFunctionToExpression", "newCallee", "needToAwaitFunction", "hasType", "needToYieldFunction", "replaceInline", "_containerInsertAfter", "VALID_CALLEES", "INVALID_METHODS", "isValidCallee", "val", "includes", "isInvalidMethod", "evaluateTruthy", "res", "evaluate", "confident", "value", "deopt", "path", "state", "deoptPath", "evaluateCached", "node", "seen", "has", "existing", "get", "resolved", "item", "set", "_evaluate", "isSequenceExpression", "exprs", "length", "isStringLiteral", "isNumericLiteral", "isBooleanLiteral", "isNullLiteral", "isTemplateLiteral", "evaluateQuasis", "quasis", "isTaggedTemplateExpression", "isMemberExpression", "object", "name", "property", "isIdentifier", "scope", "getBinding", "quasi", "isConditionalExpression", "testResult", "isExpressionWrapper", "parentPath", "isCallExpression", "callee", "isLiteral", "type", "key", "computed", "isReferencedIdentifier", "binding", "constantViolations", "start", "end", "hasValue", "undefined", "Infinity", "NaN", "resolve", "isUnaryExpression", "prefix", "operator", "argument", "isFunction", "isClass", "arg", "isArrayExpression", "arr", "elems", "elem", "elemValue", "push", "isObjectExpression", "obj", "props", "prop", "isObjectMethod", "isSpreadElement", "keyPath", "valuePath", "isLogicalExpression", "wasConfident", "left", "leftConfident", "right", "rightConfident", "isBinaryExpression", "context", "func", "global", "args", "map", "apply", "raw", "str", "i", "cooked", "expr", "String", "Map", "assertExpressionStatement", "makeStatementFormatter", "fn", "code", "str", "validate", "unwrap", "ast", "program", "body", "slice", "smart", "length", "statements", "statement", "Error", "expression", "start", "stmt", "merge", "a", "b", "placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "parser", "validate", "opts", "Error", "Set", "RegExp", "undefined", "normalizeReplacements", "replacements", "Array", "isArray", "reduce", "acc", "replacement", "i", "isCallExpression", "isExpressionStatement", "isFunction", "isIdentifier", "isJSXIdentifier", "isNewExpression", "isPlaceholder", "isStatement", "isStringLiteral", "removePropertiesDeep", "traverse", "PATTERN", "parseAndBuildMetadata", "formatter", "code", "opts", "placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "ast", "parseWithCodeFrame", "parser", "validate", "syntactic", "placeholders", "placeholderNames", "Set", "legacy", "isLegacyRef", "value", "undefined", "placeholderVisitorHandler", "node", "ancestors", "state", "name", "Error", "test", "has", "slice", "parent", "key", "length", "type", "expectedNode", "push", "resolve", "resolveAncestors", "isDuplicate", "add", "i", "index", "parserOpts", "plugins", "allowReturnOutsideFunction", "allowSuperOutsideMethod", "sourceType", "parse", "err", "loc", "message", "codeFrameColumns", "start", "blockStatement", "cloneNode", "emptyStatement", "expressionStatement", "identifier", "isStatement", "isStringLiteral", "stringLiteral", "validate", "populatePlaceholders", "metadata", "replacements", "ast", "placeholders", "forEach", "placeholder", "Object", "prototype", "hasOwnProperty", "call", "name", "placeholderName", "Error", "keys", "key", "placeholderNames", "has", "slice", "reverse", "applyReplacement", "e", "message", "replacement", "isDuplicate", "Array", "isArray", "map", "node", "parent", "index", "resolve", "type", "undefined", "items", "splice", "stringTemplate", "formatter", "code", "opts", "metadata", "arg", "replacements", "normalizeReplacements", "parseAndBuildMetadata", "unwrap", "populatePlaceholders", "literalTemplate", "formatter", "tpl", "opts", "metadata", "names", "buildLiteralData", "arg", "defaultReplacements", "forEach", "replacement", "i", "replacements", "normalizeReplacements", "Object", "keys", "key", "prototype", "hasOwnProperty", "call", "Error", "unwrap", "populatePlaceholders", "assign", "nameSet", "prefix", "result", "buildTemplateCode", "Set", "parseAndBuildMetadata", "code", "parser", "placeholderWhitelist", "concat", "Array", "from", "placeholderPattern", "preserveComments", "syntacticPlaceholders", "placeholders", "some", "placeholder", "isDuplicate", "has", "name", "length", "value", "push", "NO_PLACEHOLDER", "validate", "placeholderPattern", "createTemplateBuilder", "formatter", "defaultOpts", "templateFnCache", "WeakMap", "templateAstCache", "cachedOpts", "Object", "assign", "tpl", "args", "length", "Error", "extendedTrace", "stringTemplate", "merge", "Array", "isArray", "builder", "get", "literalTemplate", "set", "ast", "fn", "rootStack", "error", "stack", "split", "slice", "join", "arg", "err", "smart", "createTemplateBuilder", "formatters", "statement", "statements", "expression", "program", "Object", "assign", "bind", "undefined", "ast", "NOT_LOCAL_BINDING", "cloneNode", "identifier", "isAssignmentExpression", "isAssignmentPattern", "isFunction", "isIdentifier", "isLiteral", "isNullLiteral", "isObjectMethod", "isObjectProperty", "isRegExpLiteral", "isRestElement", "isTemplateLiteral", "isVariableDeclarator", "toBindingIdentifierName", "getFunctionArity", "node", "count", "params", "findIndex", "param", "length", "buildPropertyMethodAssignmentWrapper", "template", "statement", "buildGeneratorPropertyMethodAssignmentWrapper", "visitor", "path", "state", "name", "localDeclar", "scope", "getBindingIdentifier", "outerDeclar", "selfReference", "stop", "getNameFromLiteralId", "id", "pattern", "flags", "quasis", "map", "quasi", "value", "raw", "join", "undefined", "wrap", "method", "hasBinding", "hasGlobal", "rename", "build", "generator", "FUNCTION", "FUNCTION_ID", "FUNCTION_KEY", "generateUidIdentifier", "expression", "callee", "body", "i", "len", "push", "getProgramParent", "references", "visit", "selfAssignment", "binding", "getOwnBinding", "kind", "traverse", "parent", "localBinding", "supportUnicodeId", "computed", "key", "getBinding", "constant", "operator", "left", "test", "newId", "arrowFunctionExpression", "assignmentExpression", "binaryExpression", "blockStatement", "callExpression", "conditionalExpression", "expressionStatement", "identifier", "isIdentifier", "jsxIdentifier", "logicalExpression", "LOGICAL_OPERATORS", "memberExpression", "metaProperty", "numericLiteral", "objectExpression", "restElement", "returnStatement", "sequenceExpression", "spreadElement", "stringLiteral", "super", "_super", "thisExpression", "toExpression", "unaryExpression", "toComputedKey", "key", "isMemberExpression", "node", "property", "isProperty", "isMethod", "ReferenceError", "computed", "name", "ensureBlock", "body", "get", "bodyNode", "Array", "isArray", "Error", "isBlockStatement", "statements", "stringPath", "listKey", "isStatement", "push", "isFunction", "parentPath", "setup", "arrowFunctionToShadowed", "isArrowFunctionExpression", "arrowFunctionToExpression", "unwrapFunctionEnvironment", "isFunctionExpression", "isFunctionDeclaration", "buildCodeFrameError", "hoistFunctionEnvironment", "setType", "path", "type", "allowInsertArrow", "allowInsertArrowWithRest", "specCompliant", "noNewArrows", "thisBinding", "fnPath", "fn", "checkBinding", "scope", "generateUidIdentifier", "id", "init", "unshiftContainer", "hub", "addHelper", "replaceWith", "nameFunction", "getSuperCallsVisitor", "mergeVisitors", "CallExpression", "child", "allSuperCalls", "isSuper", "environmentVisitor", "arrowParent", "thisEnvFn", "findParent", "p", "isProgram", "isClassProperty", "static", "isClassPrivateProperty", "inConstructor", "isClassMethod", "kind", "thisPaths", "argumentsPaths", "newTargetPaths", "superProps", "superCalls", "getScopeInformation", "length", "traverse", "superBinding", "getSuperBinding", "forEach", "superCall", "callee", "loc", "argumentsBinding", "getBinding", "args", "buildUndefinedNode", "argumentsChild", "argsRef", "newTargetBinding", "targetChild", "targetRef", "flatSuperProps", "reduce", "acc", "superProp", "concat", "standardizeSuperProperty", "superParentPath", "isAssignment", "isAssignmentExpression", "left", "isCall", "isCallExpression", "isTaggedTemplate", "isTaggedTemplateExpression", "tag", "getSuperPropBinding", "value", "right", "call", "getThisBinding", "hasSuperClass", "thisChild", "thisRef", "isJSX", "isLogicalOp", "op", "includes", "operator", "assignmentPath", "slice", "isLogicalAssignment", "tmp", "generateDeclaredUidIdentifier", "object", "rightExpression", "isUpdateExpression", "updateExpr", "computedKey", "parts", "prefix", "superClass", "assignSuperThisVisitor", "supers", "has", "add", "replaceWithMultiple", "WeakSet", "argsBinding", "propName", "argsList", "fnBody", "method", "unshift", "valueIdent", "cacheKey", "data", "getData", "setData", "getScopeInformationVisitor", "ThisExpression", "JSXIdentifier", "isJSXMemberExpression", "isJSXOpeningElement", "MemberExpression", "Identifier", "isReferencedIdentifier", "curr", "hasOwnBinding", "rename", "parent", "MetaProperty", "STATEMENT_OR_BLOCK_KEYS", "VISITOR_KEYS", "isBlockStatement", "isExpression", "isIdentifier", "isLiteral", "isStringLiteral", "isType", "matchesPattern", "_matchesPattern", "pattern", "allowPartial", "node", "has", "key", "val", "Array", "isArray", "length", "isStatic", "scope", "is", "isnt", "equals", "value", "isNodeType", "type", "canHaveVariableDeclarationOrExpression", "parentPath", "isFor", "canSwapBetweenExpressionAndStatement", "replacement", "isArrowFunctionExpression", "isCompletionRecord", "allowInsideFunction", "path", "first", "container", "isFunction", "isProgram", "isDoExpression", "isStatementOrBlock", "isLabeledStatement", "includes", "referencesImport", "moduleSource", "importName", "isReferencedIdentifier", "isJSXMemberExpression", "property", "name", "isMemberExpression", "isOptionalMemberExpression", "computed", "object", "get", "binding", "getBinding", "kind", "parent", "isImportDeclaration", "source", "isImportDefaultSpecifier", "isImportNamespaceSpecifier", "isImportSpecifier", "imported", "getSource", "end", "code", "hub", "getCode", "slice", "start", "willIMaybeExecuteBefore", "target", "_guessExecutionStatusRelativeTo", "getOuterFunction", "getFunctionParent", "getProgramParent", "isExecutionUncertain", "isExecutionUncertainInList", "paths", "maxIndex", "i", "parentKey", "SYMBOL_CHECKING", "Symbol", "_guessExecutionStatusRelativeToCached", "Map", "base", "cache", "funcParent", "this", "_guessExecutionStatusRelativeToDifferentFunctionsCached", "getAncestry", "indexOf", "commonPath", "commonIndex", "Error", "divergence", "listKey", "keys", "keyPosition", "_guessExecutionStatusRelativeToDifferentFunctionsInternal", "isFunctionDeclaration", "isExportDeclaration", "id", "references", "referencePaths", "allStatus", "childOfFunction", "find", "isCallExpression", "status", "nodeMap", "cached", "set", "result", "resolve", "dangerous", "resolved", "_resolve", "push", "isVariableDeclarator", "constant", "ret", "isTypeCastExpression", "targetKey", "toComputedKey", "targetName", "isObjectExpression", "props", "prop", "isProperty", "match", "isArrayExpression", "isNaN", "elems", "elem", "isConstantExpression", "isRegExpLiteral", "isTemplateLiteral", "every", "expression", "isUnaryExpression", "operator", "isBinaryExpression", "isInStrictMode", "strictParent", "sourceType", "isClass", "body", "directive", "directives", "call", "key", "opts", "debug", "node", "_call", "type", "fns", "fn", "ret", "state", "then", "Error", "_traverseFlags", "isDenylisted", "denylist", "blacklist", "indexOf", "restoreContext", "path", "context", "visit", "shouldSkip", "currentContext", "shouldStop", "traverseNode", "scope", "skipKeys", "skip", "skipKey", "stop", "SHOULD_SKIP", "SHOULD_STOP", "setScope", "noScope", "parentPath", "listKey", "isMethod", "isSwitchStatement", "target", "getScope", "init", "setContext", "resync", "removed", "_resyncParent", "_resyncList", "_resyncKey", "parent", "container", "Array", "isArray", "i", "length", "setKey", "Object", "keys", "inList", "newContainer", "_resyncRemoved", "_markRemoved", "popContext", "contexts", "pop", "undefined", "pushContext", "push", "setup", "requeue", "pathToQueue", "maybeQueue", "_getQueueContexts", "hooks", "self", "parent", "removeParent", "key", "isWhile", "isSwitchCase", "isExportDeclaration", "isLabeledStatement", "listKey", "isVariableDeclaration", "node", "declarations", "length", "isExpressionStatement", "remove", "isSequenceExpression", "expressions", "replaceWith", "isBinary", "right", "left", "isIfStatement", "isLoop", "isArrowFunctionExpression", "type", "body", "remove", "_assertUnremoved", "resync", "opts", "noScope", "_removeFromScope", "_callRemovalHooks", "_markRemoved", "shareCommentsWithSiblings", "_remove", "bindings", "getBindingIdentifiers", "Object", "keys", "forEach", "name", "scope", "removeBinding", "fn", "hooks", "parentPath", "Array", "isArray", "container", "splice", "key", "updateSiblingKeys", "_replaceWith", "_traverseFlags", "SHOULD_SKIP", "REMOVED", "parent", "pathCache", "get", "delete", "node", "removed", "buildCodeFrameError", "react", "cloneNode", "jsxExpressionContainer", "variableDeclaration", "variableDeclarator", "referenceVisitor", "ReferencedIdentifier", "path", "state", "isJSXIdentifier", "isCompatTag", "node", "name", "parentPath", "isJSXMemberExpression", "scope", "isFunction", "isArrowFunctionExpression", "parent", "breakOnScopePaths", "push", "binding", "getBinding", "violation", "constantViolations", "mutableBinding", "stop", "bindings", "PathHoister", "constructor", "scopes", "attachAfter", "isCompatibleScope", "key", "Object", "keys", "bindingIdentifierEquals", "identifier", "getCompatibleScopes", "indexOf", "getAttachmentPath", "_getAttachmentPath", "targetScope", "isProgram", "hasOwnBinding", "kind", "parentKey", "bindingParentPath", "getAttachmentParentForPath", "violationPath", "pop", "hasOwnParamBindings", "bodies", "get", "i", "length", "_blockHoist", "getNextScopeAttachmentParent", "Array", "isArray", "container", "isStatement", "constant", "run", "traverse", "attachTo", "getFunctionParent", "uid", "generateUidIdentifier", "declarator", "insertFn", "attached", "isVariableDeclarator", "isJSXElement", "children", "replaceWith", "arrowFunctionExpression", "assertExpression", "assignmentExpression", "blockStatement", "callExpression", "cloneNode", "expressionStatement", "isAssignmentExpression", "isCallExpression", "isExportNamedDeclaration", "isExpression", "isIdentifier", "isSequenceExpression", "isSuper", "thisExpression", "insertBefore", "nodes_", "_assertUnremoved", "nodes", "_verifyNodeList", "parentPath", "parent", "isExpressionStatement", "isLabeledStatement", "isExportDefaultDeclaration", "isDeclaration", "isNodeType", "isJSXElement", "isForStatement", "key", "node", "push", "replaceExpressionWithStatements", "Array", "isArray", "container", "_containerInsertBefore", "isStatementOrBlock", "shouldInsertCurrentNode", "expression", "replaceWith", "unshiftContainer", "Error", "_containerInsert", "from", "updateSiblingKeys", "length", "paths", "splice", "i", "to", "path", "getSibling", "context", "queue", "pushContext", "contexts", "_getQueueContexts", "setScope", "debug", "maybeQueue", "_containerInsertAfter", "last", "arr", "isHiddenInSequenceExpression", "expressions", "isAlmostConstantAssignment", "scope", "left", "blockScope", "getBlockParent", "hasOwnBinding", "name", "getOwnBinding", "constantViolations", "insertAfter", "get", "map", "isPattern", "unshift", "callee", "isPure", "isMethod", "computed", "temp", "generateDeclaredUidIdentifier", "pushContainer", "fromIndex", "incrementBy", "pathCache", "msg", "type", "NodePath", "listKey", "setContext", "verifiedNodes", "replaceWithMultiple", "hoist", "hoister", "PathHoister", "run", "getBindingIdentifiers", "_getBindingIdentifiers", "getOuterBindingIdentifiers", "_getOuterBindingIdentifiers", "isDeclaration", "numericLiteral", "unaryExpression", "NORMAL_COMPLETION", "BREAK_COMPLETION", "NormalCompletion", "path", "type", "BreakCompletion", "getOpposite", "key", "getSibling", "addCompletionRecords", "records", "context", "push", "_getCompletionRecords", "completionRecordForSwitch", "cases", "lastNormalCompletions", "i", "length", "casePath", "caseCompletions", "normalCompletions", "breakCompletions", "c", "normalCompletionToBreak", "completions", "forEach", "replaceBreakStatementInBreakCompletion", "reachable", "isBreakStatement", "label", "replaceWith", "remove", "getStatementListCompletion", "paths", "canHaveBreak", "newContext", "inCaseClause", "isBlockStatement", "shouldPopulateBreak", "statementCompletions", "every", "some", "pathCompletions", "isVariableDeclaration", "isIfStatement", "get", "isDoExpression", "isFor", "isWhile", "isLabeledStatement", "isProgram", "isFunction", "isTryStatement", "isCatchClause", "isSwitchStatement", "isSwitchCase", "getCompletionRecords", "map", "r", "NodePath", "parentPath", "parent", "container", "listKey", "setContext", "getPrevSibling", "getNextSibling", "getAllNextSiblings", "_key", "sibling", "siblings", "node", "getAllPrevSiblings", "parts", "split", "_getKey", "_getPattern", "Array", "isArray", "_", "part", "duplicates", "getBindingIdentifierPaths", "outerOnly", "search", "ids", "Object", "create", "id", "shift", "keys", "isIdentifier", "_ids", "name", "isExportDeclaration", "declaration", "isFunctionDeclaration", "isFunctionExpression", "child", "getOuterBindingIdentifierPaths", "addComment", "_addComment", "addComments", "_addComments", "shareCommentsWithSiblings", "key", "node", "trailing", "trailingComments", "leading", "leadingComments", "prev", "getSibling", "next", "hasPrev", "Boolean", "hasNext", "type", "content", "line", "comments", "isBinding", "isBlockScoped", "nodeIsBlockScoped", "isExportDeclaration", "isExpression", "nodeIsExpression", "isFlow", "nodeIsFlow", "isForStatement", "isForXStatement", "isIdentifier", "isImportDeclaration", "isImportSpecifier", "isJSXIdentifier", "isJSXMemberExpression", "isMemberExpression", "isRestElement", "nodeIsRestElement", "isReferenced", "nodeIsReferenced", "isScope", "nodeIsScope", "isStatement", "nodeIsStatement", "isVar", "nodeIsVar", "isVariableDeclaration", "react", "isForOfStatement", "isCompatTag", "isReferencedIdentifier", "opts", "node", "parent", "name", "parentPath", "isReferencedMemberExpression", "isBindingIdentifier", "grandparent", "left", "init", "isUser", "loc", "isGenerated", "isPure", "constantsOnly", "scope", "importKind", "exportKind", "isRestProperty", "isObjectPattern", "isSpreadProperty", "isObjectExpression", "isForAwaitStatement", "await", "isExistentialTypeParam", "Error", "isNumericLiteralTypeAnnotation", "t", "validate", "debug", "buildDebug", "REMOVED", "SHOULD_STOP", "SHOULD_SKIP", "NodePath", "constructor", "hub", "parent", "contexts", "state", "opts", "_traverseFlags", "skipKeys", "parentPath", "container", "listKey", "key", "node", "type", "data", "context", "scope", "get", "Error", "targetNode", "paths", "pathCache", "Map", "set", "path", "setup", "getScope", "isScope", "Scope", "setData", "val", "Object", "create", "getData", "def", "undefined", "hasNode", "buildCodeFrameError", "msg", "SyntaxError", "buildError", "traverse", "visitor", "getPathLocation", "parts", "inList", "unshift", "join", "message", "enabled", "toString", "generator", "code", "parentKey", "shouldSkip", "v", "shouldStop", "removed", "assign", "prototype", "NodePath_ancestry", "NodePath_inference", "NodePath_replacement", "NodePath_evaluation", "NodePath_conversion", "NodePath_introspection", "NodePath_context", "NodePath_removal", "NodePath_modification", "NodePath_family", "NodePath_comments", "_guessExecutionStatusRelativeToDifferentFunctions", "_guessExecutionStatusRelativeTo", "TYPES", "typeKey", "fn", "TypeError", "NodePath_virtual_types_validator", "keys", "virtualTypes", "includes", "push", "VISITOR_KEYS", "TraversalContext", "constructor", "scope", "opts", "state", "parentPath", "queue", "priorityQueue", "shouldVisit", "node", "enter", "exit", "type", "keys", "length", "key", "create", "container", "listKey", "NodePath", "get", "parent", "maybeQueue", "path", "notPriority", "push", "visitMultiple", "visitQueue", "visitSingle", "visited", "WeakSet", "stop", "resync", "contexts", "pushContext", "has", "add", "visit", "popContext", "nodes", "Array", "isArray", "VISITOR_KEYS", "traverseNode", "node", "opts", "scope", "state", "path", "skipKeys", "keys", "type", "context", "TraversalContext", "key", "visit", "Hub", "getCode", "getScope", "addHelper", "Error", "buildError", "node", "msg", "TypeError", "VISITOR_KEYS", "removeProperties", "traverseFast", "traverse", "parent", "opts", "scope", "state", "parentPath", "noScope", "type", "Error", "visitors", "explode", "traverseNode", "verify", "cheap", "node", "enter", "path", "skipKeys", "clearNode", "cache", "delete", "tree", "hasDenylistedType", "has", "stop", "hasType", "denylistTypes", "includes", "denylist", "require_path", "stack", "path", "parse", "getNodeModulesDirs", "i", "Empty", "require_core", "i", "path", "maybeRealpath", "defaultReadPackage", "getPackageCandidates", "i", "resolve", "err", "basedir", "n", "pkg", "x", "callback", "cb", "exts", "r", "isdir", "onfile", "require_core", "require_core", "i", "core", "path", "e", "maybeRealpathSync", "defaultReadPackageSync", "getPackageCandidates", "i", "n", "x", "r", "m", "path", "stack", "path", "i", "require_util", "errorEx", "e", "n", "LinesAndColumns", "string", "string", "obj", "i", "o", "_getPrototypeOf", "_setPrototypeOf", "p", "e", "_construct", "Parent", "args", "Class", "a", "_wrapNativeSuper", "self", "_get", "target", "property", "receiver", "n", "Range", "Node", "YAMLError", "YAMLReferenceError", "YAMLSemanticError", "YAMLSyntaxError", "YAMLWarning", "PlainValue", "parse", "i", "n", "offset", "BlankLine", "parse", "CollectionItem", "Comment", "Collection", "Directive", "Document", "parseDirectives", "parseContents", "Alias", "BlockValue", "FlowCollection", "QuoteDouble", "QuoteSingle", "ParseContext", "i", "res", "path", "a", "o", "tags", "resolve", "json", "n", "_stringify", "Collection", "Alias", "map", "warn", "seq", "Node", "Scalar", "isEmptyPath", "toJSON", "stringify", "nodes", "str", "YAMLSeq", "set", "stringifyKey", "Pair", "getAliasCount", "t", "YAMLMap", "Type", "Merge", "consumeMoreIndentedLines", "getFoldOptions", "containsDocumentMarker", "isCollectionItem", "valueHasPairComment", "seq", "i", "pairs", "omap", "map", "set", "n", "o", "YAMLOMap", "identify", "YAMLSet", "toJSON", "parseSexagesimal", "stringifySexagesimal", "resolve", "stringify", "map", "seq", "intResolve", "n", "intIdentify", "tags", "t", "createNode", "Node", "Alias", "schemas", "i", "identify", "stringify", "resolve", "stringifyJSON", "boolStringify", "sortMapEntriesByKey", "a", "Schema", "p", "tags", "Alias", "t", "Node", "o", "Collection", "copyTagPrefix", "createNode", "Document", "parse", "stringify", "Anchors", "map", "a", "i", "visit", "n", "listTagNames", "path", "set", "warn", "require_browser", "importFresh", "loadJs", "filepath", "undefined", "require", "result", "parseJson", "loadJson", "content", "error", "message", "yaml", "loadYaml", "parse", "prettyErrors", "loaders", "getPropertyByPath", "source", "path", "Object", "prototype", "hasOwnProperty", "call", "parsedPath", "split", "reduce", "previous", "key", "undefined", "ExplorerBase", "constructor", "options", "cache", "loadCache", "Map", "searchCache", "config", "validateConfig", "clearLoadCache", "clear", "clearSearchCache", "clearCaches", "searchPlaces", "forEach", "place", "loaderKey", "path", "extname", "loader", "loaders", "Error", "getExtensionDescription", "shouldSearchStopWithResult", "result", "isEmpty", "ignoreEmptySearchPlaces", "nextDirectoryToSearch", "currentDir", "currentResult", "nextDir", "nextDirUp", "stopDir", "loadPackageProp", "filepath", "content", "parsedContent", "loadJson", "packagePropValue", "packageProp", "getLoaderEntryForFile", "basename", "bind", "loadedContentToCosmiconfigResult", "loadedContent", "undefined", "validateFilePath", "dir", "dirname", "ext", "fsReadFileAsync", "pathname", "encoding", "Promise", "resolve", "reject", "fs", "readFile", "error", "contents", "filepath", "options", "throwNotFound", "content", "code", "readFileSync", "cacheWrapper", "cache", "key", "fn", "cached", "get", "undefined", "result", "set", "cacheWrapperSync", "getDirectory", "filepath", "filePathIsDirectory", "directory", "path", "dirname", "getDirectorySync", "Explorer", "ExplorerBase", "constructor", "options", "search", "searchFrom", "process", "cwd", "startDirectory", "result", "searchFromDirectory", "dir", "absoluteDir", "path", "resolve", "run", "searchDirectory", "nextDir", "nextDirectoryToSearch", "transformResult", "config", "transform", "searchCache", "place", "searchPlaces", "placeResult", "loadSearchPlace", "shouldSearchStopWithResult", "filepath", "join", "fileContents", "createCosmiconfigResult", "loadFileContent", "content", "trim", "undefined", "loader", "getLoaderEntryForFile", "loaderResult", "fileContent", "loadedContentToCosmiconfigResult", "load", "validateFilePath", "absoluteFilePath", "runLoad", "throwNotFound", "loadCache", "ExplorerSync", "ExplorerBase", "constructor", "options", "searchSync", "searchFrom", "process", "cwd", "startDirectory", "result", "searchFromDirectorySync", "dir", "absoluteDir", "path", "resolve", "run", "searchDirectorySync", "nextDir", "nextDirectoryToSearch", "transformResult", "config", "transform", "searchCache", "place", "searchPlaces", "placeResult", "loadSearchPlaceSync", "shouldSearchStopWithResult", "filepath", "join", "content", "createCosmiconfigResultSync", "loadFileContentSync", "trim", "undefined", "loader", "getLoaderEntryForFile", "loaderResult", "fileContent", "loadedContentToCosmiconfigResult", "loadSync", "validateFilePath", "absoluteFilePath", "runLoadSync", "throwNotFound", "cosmiconfigResult", "loadCache", "require_types", "cosmiconfig", "moduleName", "options", "normalizedOptions", "normalizeOptions", "explorer", "Explorer", "search", "bind", "load", "clearLoadCache", "clearSearchCache", "clearCaches", "cosmiconfigSync", "explorerSync", "ExplorerSync", "searchSync", "loadSync", "defaultLoaders", "Object", "freeze", "loaders", "loadJs", "loadJson", "loadYaml", "noExt", "identity", "x", "defaults", "packageProp", "searchPlaces", "ignoreEmptySearchPlaces", "stopDir", "os", "homedir", "cache", "transform", "require_dist", "resolve", "path", "o", "e", "a", "require_lib", "require_lib", "addComment", "require_constants", "path", "require_utils", "path", "n", "i", "require_parse", "parse", "opts", "n", "value", "rest", "i", "t", "source", "path", "parse", "state", "require_picomatch", "require_options", "path", "t", "t", "path", "Symbol", "Symbol", "e", "Symbol", "e", "Map", "Map", "map", "Symbol", "e", "string", "i", "require_minify", "t", "path", "i", "t", "path", "i", "t", "path", "t", "path", "t", "path", "t", "path", "t", "path", "require_lib", "t", "path", "state", "createMacro", "r", "customImportName", "references", "state", "t", "babel", "types", "config", "importModuleName", "program", "file", "path", "Object", "keys", "forEach", "refName", "id", "addDefault", "nameHint", "addNamed", "referencePath", "node", "name", "stateWithOpts", "opts", "topLevelImportPaths", "concat", "traverse", "parent", "babelPlugin", "visitor", "configName"]
}
